<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一年春又来</title>
  
  
  <link href="http://littlefxc.github.io/atom.xml" rel="self"/>
  
  <link href="http://littlefxc.github.io/"/>
  <updated>2021-12-07T09:23:06.942Z</updated>
  <id>http://littlefxc.github.io/</id>
  
  <author>
    <name>一年春又来</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式限流</title>
    <link href="http://littlefxc.github.io/2021/12/07/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81/"/>
    <id>http://littlefxc.github.io/2021/12/07/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81/</id>
    <published>2021-12-07T07:46:47.000Z</published>
    <updated>2021-12-07T09:23:06.942Z</updated>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;分布式限流介绍&quot;&gt;&lt;a href=&quot;#分布式限流介绍&quot; class=&quot;headerlink&quot; title=&quot;分布式限流介绍&quot;&gt;&lt;/a&gt;分布式限流介绍&lt;/h1&gt;&lt;p&gt;限流的目的是通过对并发访问/请求进行限速或者在一个时间窗口内的请求进行限速来保护系统，一旦请求到达限制速率则可以拒绝服务、排队或等待、降级。&lt;/p&gt;
&lt;p&gt;主要是通过压测时找出每个系统的处理峰值，然后通过处理设定峰值阈值来防止系统过载时，通过拒绝处理过载的请求来保障系统可用性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="分布式" scheme="http://littlefxc.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="限流" scheme="http://littlefxc.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>接口幂等性</title>
    <link href="http://littlefxc.github.io/2021/12/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <id>http://littlefxc.github.io/2021/12/06/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</id>
    <published>2021-12-06T06:22:46.000Z</published>
    <updated>2021-12-07T07:47:15.368Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是幂等性？&quot;&gt;&lt;a href=&quot;#什么是幂等性？&quot; class=&quot;headerlink&quot; title=&quot;什么是幂等性？&quot;&gt;&lt;/a&gt;什么是幂等性？&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;幂等性：f(f(x)) = f(x)&lt;/li&gt;
&lt;li&gt;幂等元素运行多次，还等于它原来的运算结果&lt;/li&gt;
&lt;li&gt;在系统中，一个接口运行多次，与运行一次的效果是一致的&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="分布式" scheme="http://littlefxc.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡Ribbon</title>
    <link href="http://littlefxc.github.io/2021/10/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/"/>
    <id>http://littlefxc.github.io/2021/10/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/</id>
    <published>2021-10-21T04:01:22.000Z</published>
    <updated>2021-10-22T08:27:18.273Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;负载均衡介绍&quot;&gt;&lt;a href=&quot;#负载均衡介绍&quot; class=&quot;headerlink&quot; title=&quot;负载均衡介绍&quot;&gt;&lt;/a&gt;负载均衡介绍&lt;/h1&gt;&lt;p&gt;将请求或者说流量，以期望的规则分摊到多个操作单元上进行执行。&lt;/p&gt;
&lt;p&gt;通过它可以实现横向扩展(scale out)，将冗余的作用发挥为高可用。另外，还可以物尽其用，提升资源使用率。&lt;/p&gt;</summary>
    
    
    
    
    <category term="负载均衡" scheme="http://littlefxc.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    <category term="Ribbon" scheme="http://littlefxc.github.io/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>网络基础概述</title>
    <link href="http://littlefxc.github.io/2021/10/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/"/>
    <id>http://littlefxc.github.io/2021/10/19/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E8%BF%B0/</id>
    <published>2021-10-19T03:21:42.000Z</published>
    <updated>2021-10-21T03:55:04.716Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;移动通信发展回顾&quot;&gt;&lt;a href=&quot;#移动通信发展回顾&quot; class=&quot;headerlink&quot; title=&quot;移动通信发展回顾&quot;&gt;&lt;/a&gt;移动通信发展回顾&lt;/h1&gt;</summary>
    
    
    
    
    <category term="网络" scheme="http://littlefxc.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="5G" scheme="http://littlefxc.github.io/tags/5G/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://littlefxc.github.io/2021/10/19/Kubenete%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%201/"/>
    <id>http://littlefxc.github.io/2021/10/19/Kubenete%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%201/</id>
    <published>2021-10-19T02:06:22.955Z</published>
    <updated>2021-10-19T02:06:22.955Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud Ribbon 的负载均衡策略</title>
    <link href="http://littlefxc.github.io/2021/09/28/Spring-Cloud-Ribbon-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/"/>
    <id>http://littlefxc.github.io/2021/09/28/Spring-Cloud-Ribbon-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/</id>
    <published>2021-09-28T03:10:17.000Z</published>
    <updated>2021-09-28T03:26:05.047Z</updated>
    
    
    <summary type="html">&lt;p&gt;Ribbon负载均衡的原理是:从EurekaClient类的Bean获取Provider提供者服务列表清单，并且定 期通过IPing类的Bean去判断Provider的可用性。每次RPC到来时，在Provider提供者服务列表中根据 IRule策略类的Bean计算出每次RPC要访问的最终Provider。&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://littlefxc.github.io/tags/java/"/>
    
    <category term="负载均衡" scheme="http://littlefxc.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    <category term="ribbon" scheme="http://littlefxc.github.io/tags/ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Mycat 分片规则</title>
    <link href="http://littlefxc.github.io/2021/09/27/Mycat-%E5%88%86%E7%89%87%E8%A7%84%E5%88%99/"/>
    <id>http://littlefxc.github.io/2021/09/27/Mycat-%E5%88%86%E7%89%87%E8%A7%84%E5%88%99/</id>
    <published>2021-09-27T07:05:21.000Z</published>
    <updated>2021-09-27T08:36:23.150Z</updated>
    
    
    <summary type="html">&lt;p&gt;在数据切分处理中，特别是水平切分中，中间件最终要的两个处理过程就是数据的切分、数据的聚合。选择合适的切分规则，至关重要，因为它决定了后续数据聚合的难易程度，甚至可以避免跨库的数据聚合处理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="mycat" scheme="http://littlefxc.github.io/tags/mycat/"/>
    
  </entry>
  
  <entry>
    <title>通信科普</title>
    <link href="http://littlefxc.github.io/2021/09/17/%E9%80%9A%E4%BF%A1%E7%A7%91%E6%99%AE/"/>
    <id>http://littlefxc.github.io/2021/09/17/%E9%80%9A%E4%BF%A1%E7%A7%91%E6%99%AE/</id>
    <published>2021-09-17T07:54:43.000Z</published>
    <updated>2021-09-17T08:07:37.559Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;通信科普&quot;&gt;&lt;a href=&quot;#通信科普&quot; class=&quot;headerlink&quot; title=&quot;通信科普&quot;&gt;&lt;/a&gt;通信科普&lt;/h1&gt;&lt;p&gt;本文主要简略记录计算机网络相关名词的介绍。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绝大部分通信系统，都可以用分层的角度来看，也必须用分层的角度来看。看懂了这个系统的层级，就看懂了这个系统的70%。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络" scheme="http://littlefxc.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务相关</title>
    <link href="http://littlefxc.github.io/2021/09/14/MySQL%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/"/>
    <id>http://littlefxc.github.io/2021/09/14/MySQL%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</id>
    <published>2021-09-14T06:34:47.000Z</published>
    <updated>2021-09-16T09:27:57.011Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;本文重新梳理一些关于 MySQL 事务相关的概念，主要包括：事务隔离引发的问题和事务隔离的级别。&lt;/p&gt;</summary>
    
    
    
    
    <category term="mysql" scheme="http://littlefxc.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言学习</title>
    <link href="http://littlefxc.github.io/2021/08/30/Go-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://littlefxc.github.io/2021/08/30/Go-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-08-30T01:02:29.000Z</published>
    <updated>2021-08-30T02:43:03.161Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Go-语言的并发模型是怎么样的？&quot;&gt;&lt;a href=&quot;#Go-语言的并发模型是怎么样的？&quot; class=&quot;headerlink&quot; title=&quot;Go 语言的并发模型是怎么样的？&quot;&gt;&lt;/a&gt;Go 语言的并发模型是怎么样的？&lt;/h1&gt;&lt;h2</summary>
        
      
    
    
    
    
    <category term="go" scheme="http://littlefxc.github.io/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化的几个阶段</title>
    <link href="http://littlefxc.github.io/2021/08/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E4%B8%AA%E9%98%B6%E6%AE%B5/"/>
    <id>http://littlefxc.github.io/2021/08/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E4%B8%AA%E9%98%B6%E6%AE%B5/</id>
    <published>2021-08-23T08:15:27.000Z</published>
    <updated>2021-08-23T08:16:02.627Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内置故障排查工具-jinfo</title>
    <link href="http://littlefxc.github.io/2021/08/10/jinfo/"/>
    <id>http://littlefxc.github.io/2021/08/10/jinfo/</id>
    <published>2021-08-10T03:20:40.000Z</published>
    <updated>2021-08-10T03:23:04.267Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;jinfo&quot;&gt;&lt;a href=&quot;#jinfo&quot; class=&quot;headerlink&quot; title=&quot;jinfo&quot;&gt;&lt;/a&gt;jinfo&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="JVM" scheme="http://littlefxc.github.io/tags/JVM/"/>
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="监控工具" scheme="http://littlefxc.github.io/tags/%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>synchronized锁升级过程和锁状态</title>
    <link href="http://littlefxc.github.io/2021/08/07/synchronized%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B%E5%92%8C%E9%94%81%E7%8A%B6%E6%80%81/"/>
    <id>http://littlefxc.github.io/2021/08/07/synchronized%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B%E5%92%8C%E9%94%81%E7%8A%B6%E6%80%81/</id>
    <published>2021-08-07T11:41:22.000Z</published>
    <updated>2021-12-06T07:57:53.358Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://segmentfault.com/a/1190000022904663&quot;&gt;https://segmentfault.com/a/1190000022904663&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;锁的状态总共有四种，级别由低到高依次为：无锁、偏向锁、轻量级锁、重量级锁，这四种锁状态分别代表什么，为什么会有锁升级？其实在 JDK 1.6之前，synchronized 还是一个重量级锁，是一个效率比较低下的锁，但是在JDK 1.6后，Jvm为了提高锁的获取与释放效率对（synchronized ）进行了优化，引入了 偏向锁 和 轻量级锁 ，从此以后锁的状态就有了四种（无锁、偏向锁、轻量级锁、重量级锁），并且四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级，也就是说只能进行锁升级（从低级别到高级别），不能锁降级（高级别到低级别），意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="synchronized" scheme="http://littlefxc.github.io/tags/synchronized/"/>
    
  </entry>
  
  <entry>
    <title>内置监控工具 - jstat</title>
    <link href="http://littlefxc.github.io/2021/08/05/jstat/"/>
    <id>http://littlefxc.github.io/2021/08/05/jstat/</id>
    <published>2021-08-05T01:52:54.000Z</published>
    <updated>2021-08-05T01:54:28.449Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;内置监控工具-jstat&quot;&gt;&lt;a href=&quot;#内置监控工具-jstat&quot; class=&quot;headerlink&quot; title=&quot;内置监控工具 - jstat&quot;&gt;&lt;/a&gt;内置监控工具 - jstat&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot;</summary>
        
      
    
    
    
    
    <category term="JVM" scheme="http://littlefxc.github.io/tags/JVM/"/>
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="监控工具" scheme="http://littlefxc.github.io/tags/%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>线程池ThreadPoolExecutor</title>
    <link href="http://littlefxc.github.io/2021/08/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor/"/>
    <id>http://littlefxc.github.io/2021/08/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor/</id>
    <published>2021-08-04T14:01:38.000Z</published>
    <updated>2021-08-05T15:30:59.555Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;线程就是一个放线程的池子。&lt;/p&gt;
&lt;p&gt;使用线程池的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重用已存在的线程，从而减少对象创建和销毁的开销。&lt;/li&gt;
&lt;li&gt;控制并发，从而提高资源利用率，有效避免过多的资源竞争，提升性能&lt;/li&gt;
&lt;li&gt;功能强大，有定时执行、定期执行、单线程执行、并发控制等等&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="http://littlefxc.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    <category term="线程池" scheme="http://littlefxc.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>ab使用教程</title>
    <link href="http://littlefxc.github.io/2021/08/02/ab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://littlefxc.github.io/2021/08/02/ab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-08-02T01:26:12.000Z</published>
    <updated>2021-08-02T01:32:52.134Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;ab全称Apache HTTP server benchmarking</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>对象池实战-编写一个数据库连接池</title>
    <link href="http://littlefxc.github.io/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9E%E6%88%98-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://littlefxc.github.io/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9E%E6%88%98-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2021-08-01T08:49:55.000Z</published>
    <updated>2021-08-01T12:33:00.217Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="池化技术" scheme="http://littlefxc.github.io/tags/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>对象池 commons-pool2</title>
    <link href="http://littlefxc.github.io/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0-commons-pool2/"/>
    <id>http://littlefxc.github.io/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0-commons-pool2/</id>
    <published>2021-08-01T05:48:21.000Z</published>
    <updated>2021-08-01T13:58:31.657Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h1&gt;&lt;p&gt;池化技术是性能调优的重要措施，池化的思想是把对象放到池子里面，当要使用的时候从池子里面拿对象，用完之后在放回池子里面。这样可以降低资源分配和释放资源的开销，从而提升性能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="http://littlefxc.github.io/tags/Java/"/>
    
    <category term="池化技术" scheme="http://littlefxc.github.io/tags/%E6%B1%A0%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>链路追踪zipkin</title>
    <link href="http://littlefxc.github.io/2021/07/27/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/"/>
    <id>http://littlefxc.github.io/2021/07/27/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</id>
    <published>2021-07-27T05:34:25.000Z</published>
    <updated>2021-07-27T05:34:25.261Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://littlefxc.github.io/2021/07/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://littlefxc.github.io/2021/07/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-07-24T08:38:01.000Z</published>
    <updated>2021-07-28T15:32:28.413Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1 概述&quot;&gt;&lt;/a&gt;1</summary>
        
      
    
    
    
    
    <category term="分布式事务" scheme="http://littlefxc.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="分布式" scheme="http://littlefxc.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
