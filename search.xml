<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alibaba Sentinel基础(1)</title>
    <url>/2021/01/21/Alibaba-Sentinel%E5%9F%BA%E7%A1%80-1/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>Alibaba Sentinel 基础部分主要分六个部分：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Sentinel 全景分析</li>
<li><input disabled="" type="checkbox"> Sentinel 极速入门</li>
<li><input disabled="" type="checkbox"> Sentinel 核心API</li>
<li><input disabled="" type="checkbox"> Sentinel 控制台使用</li>
<li><input disabled="" type="checkbox"> Sentinel 与 Spring 整合 AOP 分析</li>
<li><input disabled="" type="checkbox"> Sentinel 与 Dubbo 整合分析</li>
</ul>
<h1 id="2-Sentinel-全景分析"><a href="#2-Sentinel-全景分析" class="headerlink" title="2. Sentinel 全景分析"></a>2. Sentinel 全景分析</h1><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">官方介绍</a></p>
<h2 id="Sentinel-是什么？"><a href="#Sentinel-是什么？" class="headerlink" title="Sentinel 是什么？"></a>Sentinel 是什么？</h2><p>Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p>
<p>它可以做到以下几点：</p>
<ul>
<li><p>流量控制</p>
</li>
<li><p>熔断降级</p>
</li>
<li><p>系统保护</p>
</li>
<li><p>服务安全</p>
</li>
</ul>
<h2 id="Sentinel-的特性"><a href="#Sentinel-的特性" class="headerlink" title="Sentinel 的特性"></a>Sentinel 的特性</h2><ul>
<li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li>
<li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li>
<li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li>
<li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/sentinel%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/sentinel的主要特性.png"></p>
<p>部分是 sentinel-dashboard。</p>
<p>绿色部分是 sentinel-core，是 Sentinel 的核心库。</p>
<p>紫色部分表示 sentinel 可以持久化规则到配置中心。</p>
<p>蓝色部分 sentinel 的扩展点。</p>
<h2 id="Sentinel-的生态"><a href="#Sentinel-的生态" class="headerlink" title="Sentinel 的生态"></a>Sentinel 的生态</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/sentinel_2_6.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/sentinel_2_6.png"></p>
<h2 id="Sentinel-的组成部分"><a href="#Sentinel-的组成部分" class="headerlink" title="Sentinel 的组成部分"></a>Sentinel 的组成部分</h2><ul>
<li>核心库：sentinel-core</li>
<li>控制台：sentinel-dashboard</li>
<li>第三方支持组件：如spring、dubbo、rocketmq等</li>
</ul>
<h1 id="3-Sentinel-极速入门"><a href="#3-Sentinel-极速入门" class="headerlink" title="3. Sentinel 极速入门"></a>3. Sentinel 极速入门</h1><h1 id="4-Sentinel-核心API"><a href="#4-Sentinel-核心API" class="headerlink" title="4. Sentinel 核心API"></a>4. Sentinel 核心API</h1><h1 id="5-Sentinel-控制台使用"><a href="#5-Sentinel-控制台使用" class="headerlink" title="5. Sentinel 控制台使用"></a>5. Sentinel 控制台使用</h1><h1 id="6-Sentinel-与-Spring-整合-AOP-分析"><a href="#6-Sentinel-与-Spring-整合-AOP-分析" class="headerlink" title="6. Sentinel 与 Spring 整合 AOP 分析"></a>6. Sentinel 与 Spring 整合 AOP 分析</h1><h1 id="7-Sentinel-与-Dubbo-整合分析"><a href="#7-Sentinel-与-Dubbo-整合分析" class="headerlink" title="7. Sentinel 与 Dubbo 整合分析"></a>7. Sentinel 与 Dubbo 整合分析</h1>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>alibaba sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下yum安装和配置NFS</title>
    <url>/2020/04/29/CentOS7%E4%B8%8Byum%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AENFS/</url>
    <content><![CDATA[<p>NFS 是 Network File System 的缩写，即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据，主要用在类Unix系统上实现文件共享的一种方法。 本例演示 CentOS 7 下安装和配置 NFS 的基本步骤。</p>
<p>根据官网说明 <a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-nfs">Chapter 8. Network File System (NFS) - Red Hat Customer Portal，CentOS 7.4</a> 以后，支持 NFS v4.2 不需要 rpcbind 了，但是如果客户端只支持 NFC v3 则需要 rpcbind 这个服务。</p>
<span id="more"></span>

<p>本例演示环境：</p>
<table>
<thead>
<tr>
<th>hostname</th>
<th>IP Address</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>k8s-master-1</td>
<td>192.168.200.19</td>
<td>服务端</td>
</tr>
<tr>
<td>ip-192-168-154-14</td>
<td>192.168.154.14</td>
<td>客户端</td>
</tr>
<tr>
<td>ip-192-168-154-15</td>
<td>192.168.154.15</td>
<td>客户端</td>
</tr>
<tr>
<td>ip-192-168-154-16</td>
<td>192.168.154.16</td>
<td>客户端</td>
</tr>
</tbody></table>
<p><code>sudo yum install nfs-utils</code>, 只安装 nfs-utils 即可，rpcbind 属于它的依赖，也会安装上。</p>
<h2 id="设置-NFS-服务开机启动"><a href="#设置-NFS-服务开机启动" class="headerlink" title="设置 NFS 服务开机启动"></a>设置 NFS 服务开机启动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> rpcbind</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> nfs</span><br></pre></td></tr></table></figure>

<h2 id="启动-NFS-服务"><a href="#启动-NFS-服务" class="headerlink" title="启动 NFS 服务"></a>启动 NFS 服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start rpcbind</span><br><span class="line">$ sudo systemctl start nfs</span><br></pre></td></tr></table></figure>

<h2 id="在各个服务器上关闭防火墙"><a href="#在各个服务器上关闭防火墙" class="headerlink" title="在各个服务器上关闭防火墙"></a>在各个服务器上关闭防火墙</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl stop firewalld.service            <span class="comment">#停止firewall</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld.service         <span class="comment">#禁止firewall开机启动</span></span><br><span class="line">$ systemctl stop iptables.service             <span class="comment">#停止iptables</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> iptables.service          <span class="comment">#禁止iptables开机启动l</span></span><br></pre></td></tr></table></figure>

<h2 id="配置共享目录"><a href="#配置共享目录" class="headerlink" title="配置共享目录"></a>配置共享目录</h2><p>服务启动之后，我们在服务端配置一个共享目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir /home/k8s-projects/k8s-nfs</span><br><span class="line">$ sudo chmod 755 /home/k8s-projects/k8s-nfs</span><br></pre></td></tr></table></figure>

<p>根据这个目录，相应配置导出目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/exports</span><br></pre></td></tr></table></figure>

<p>添加如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;home&#x2F;k8s-projects&#x2F;k8s-nfs *(rw,sync,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure>

<ol>
<li><code>/data</code>: 共享目录位置。</li>
<li><code>192.168.0.0/24</code>: 客户端 IP 范围，<code>*</code> 代表所有，即没有限制。</li>
<li><code>rw</code>: 权限设置，可读可写。</li>
<li><code>sync</code>: 同步共享目录。</li>
<li><code>no_root_squash</code>: 可以使用 root 授权。</li>
<li><code>no_all_squash</code>: 可以使用普通用户授权。</li>
</ol>
<p><code>:wq</code> 保存设置之后，重启 NFS 服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo exportfs -r //让上面的配置生效或者重启服务</span><br><span class="line">$ sudo systemctl restart nfs</span><br></pre></td></tr></table></figure>

<p>可以检查一下本地的共享目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ showmount -e localhost</span><br><span class="line">Export list <span class="keyword">for</span> localhost:</span><br><span class="line">/home/k8s-projects/k8s-nfs *</span><br></pre></td></tr></table></figure>

<p>这样，服务端就配置好了，接下来配置客户端，连接服务端，使用共享目录。</p>
<h2 id="Linux-客户端安装"><a href="#Linux-客户端安装" class="headerlink" title="Linux 客户端安装"></a>Linux 客户端安装</h2><p>与服务端类似</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install nfs-utils</span><br></pre></td></tr></table></figure>

<h2 id="Linux-客户端配置"><a href="#Linux-客户端配置" class="headerlink" title="Linux 客户端配置"></a>Linux 客户端配置</h2><p>设置 rpcbind 服务的开机启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> rpcbind</span><br></pre></td></tr></table></figure>

<p>启动 NFS 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start rpcbind</span><br></pre></td></tr></table></figure>

<p><em><code>注意</code></em></p>
<blockquote>
<p>客户端不需要打开防火墙，因为客户端时发出请求方，网络能连接到服务端即可。客户端也不需要开启 NFS 服务，因为不共享目录。</p>
</blockquote>
<h2 id="客户端连接-NFS"><a href="#客户端连接-NFS" class="headerlink" title="客户端连接 NFS"></a>客户端连接 NFS</h2><p>挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mount -t nfs 192.168.200.19:/home/k8s-projects/k8s-nfs /mnt/k8s-nf</span><br></pre></td></tr></table></figure>

<p>挂载之后，可以使用 <code>mount</code> 命令查看一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ showmount -e 192.168.200.19</span><br><span class="line">Export list <span class="keyword">for</span> 192.168.200.19:</span><br><span class="line">/home/k8s-projects/k8s-nfs *</span><br><span class="line">/root/data/nfs-pic</span><br></pre></td></tr></table></figure>

<p>这说明已经挂载成功了。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nfs</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>AtomicLong原子类方法介绍</title>
    <url>/2021/01/21/AtomicLong%E5%8E%9F%E5%AD%90%E7%B1%BB%E6%96%B9%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">AtomicLong()</span><br><span class="line"><span class="comment">// 创建值为initialValue的AtomicLong对象</span></span><br><span class="line">AtomicLong(<span class="keyword">long</span> initialValue)</span><br><span class="line"><span class="comment">// 以原子方式设置当前值为newValue。</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> newValue)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值减 1，并返回减1后的值。等价于“--num”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">decrementAndGet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值减 1，并返回减1前的值。等价于“num--”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndDecrement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值加 1，并返回加1后的值。等价于“++num”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值加 1，并返回加1前的值。等价于“num++”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将delta与当前值相加，并返回相加后的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">long</span> delta)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将delta添加到当前值，并返回相加前的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">long</span> delta)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == expect，则以原子方式将该值设置为update。成功返回true，否则返回false，并且不修改原值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式设置当前值为newValue，并返回旧值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回当前值对应的int值</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前值对应的long值</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以 float 形式返回当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以 double 形式返回当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 最后设置为给定值。延时设置变量值，这个等价于set()方法，但是由于字段是volatile类型的，</span></span></span><br><span class="line"><span class="function"><span class="comment">// 因此次字段的修改会比普通字段（非volatile字段）有稍微的性能延时（尽管可以忽略），</span></span></span><br><span class="line"><span class="function"><span class="comment">// 所以如果不是想立即读取设置的新值，允许在“后台”修改值，那么此方法就很有用。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果还是难以理解，这里就类似于启动一个后台线程如执行修改新值的任务，原线程就不等待修改结果立即返回</span></span></span><br><span class="line"><span class="function"><span class="comment">// （这种解释其实是不正确的，但是可以这么理解）。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="comment">// JSR规范中说：以原子方式读取和有条件地写入变量但不 创建任何 happen-before 排序，</span></span></span><br><span class="line"><span class="function"><span class="comment">// 因此不提供与除 weakCompareAndSet 目标外任何变量以前或后续读取或写入操作有关的任何保证。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 大意就是说调用weakCompareAndSet时并不能保证不存在happen-before的发生（也就是可能存在指令重排序导致此操作失败）。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 但是从Java源码来看，其实此方法并没有实现JSR规范的要求，最后效果和compareAndSet是等效的，</span></span></span><br><span class="line"><span class="function"><span class="comment">// 都调用了unsafe.compareAndSwapInt()完成操作。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC,Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul 单机集群搭建</title>
    <url>/2021/01/11/Consul-%E5%8D%95%E6%9C%BA%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="1-Consul-单机集群搭建"><a href="#1-Consul-单机集群搭建" class="headerlink" title="1 Consul 单机集群搭建"></a>1 Consul 单机集群搭建</h1><p>本文是在生产环境中Consul服务端节点不稳定后，导致注册到Consul集群上的部分服务不可用，从而造成开放能力平台无法使用的背景下产生的。</p>
<p>目的是探讨一个高可用Consul集群方案。</p>
<h2 id="1-1-consul-架构"><a href="#1-1-consul-架构" class="headerlink" title="1.1 consul 架构"></a>1.1 consul 架构</h2><p>Server负责组成 cluster 的复杂工作（选举、状态维护、转发请求到 lead），以及 consul 提供的服务（响应 RCP 请求）。考虑到容错和收敛，一般部署 3 ~ 5 个比较合适，而client数量不做限制，架构如下:</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/consul%E6%9E%B6%E6%9E%841.png" alt="consul 架构"></p>
<h2 id="1-2-Consul-节点规划"><a href="#1-2-Consul-节点规划" class="headerlink" title="1.2 Consul 节点规划"></a>1.2 Consul 节点规划</h2><table>
<thead>
<tr>
<th><strong>节点名称</strong></th>
<th>节点类型</th>
<th><strong>HTTP端口</strong></th>
<th><strong>DNS端口</strong></th>
<th><strong>serf_lan端口</strong></th>
<th><strong>serf_wan端口</strong></th>
</tr>
</thead>
<tbody><tr>
<td>consul-server-1</td>
<td>server</td>
<td>8501</td>
<td>8601</td>
<td>8001</td>
<td>8002</td>
</tr>
<tr>
<td>consul-server-2</td>
<td>server</td>
<td>8502</td>
<td>8602</td>
<td>8101</td>
<td>8102</td>
</tr>
<tr>
<td>consul-server-3</td>
<td>server</td>
<td>8503</td>
<td>8603</td>
<td>8201</td>
<td>8202</td>
</tr>
<tr>
<td>consul-client-1</td>
<td>client</td>
<td>8504</td>
<td>8604</td>
<td>8301</td>
<td>8302</td>
</tr>
<tr>
<td>consul-client-2</td>
<td>client</td>
<td>8505</td>
<td>8605</td>
<td>8401</td>
<td>8402</td>
</tr>
</tbody></table>
<h2 id="1-3-Consul-服务端节点配置文件模版"><a href="#1-3-Consul-服务端节点配置文件模版" class="headerlink" title="1.3 Consul 服务端节点配置文件模版"></a>1.3 Consul 服务端节点配置文件模版</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;bind_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;client_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ports&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;http&quot;</span>: <span class="number">8501</span>,</span><br><span class="line">        <span class="attr">&quot;dns&quot;</span>: <span class="number">8601</span>,</span><br><span class="line">        <span class="attr">&quot;serf_lan&quot;</span>: <span class="number">8001</span>,</span><br><span class="line">        <span class="attr">&quot;serf_wan&quot;</span>: <span class="number">8002</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="number">8000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;datacenter&quot;</span>: <span class="string">&quot;dc1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data_dir&quot;</span>: <span class="string">&quot;/Users/fengxuechao/WorkSpace/IdeaProjects/consul/consul-server-1/data&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log_file&quot;</span>: <span class="string">&quot;/Users/fengxuechao/WorkSpace/IdeaProjects/consul/consul-server-1/log/consul.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;node_name&quot;</span>: <span class="string">&quot;consul-server-1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;disable_host_node_id&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;bootstrap_expect&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;rejoin_after_leave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;retry_join&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8101&quot;</span>,</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8201&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><strong>disable_host_node_id</strong>：不使用host信息生成node ID，适用于同一台服务器部署多个实例用于测试的情况。随机生成nodeID。</li>
</ul>
<h2 id="1-4-Consul-客户端节点配置文件模版"><a href="#1-4-Consul-客户端节点配置文件模版" class="headerlink" title="1.4 Consul 客户端节点配置文件模版"></a>1.4 Consul 客户端节点配置文件模版</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;bind_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;client_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ports&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;http&quot;</span>: <span class="number">8505</span>,</span><br><span class="line">        <span class="attr">&quot;dns&quot;</span>: <span class="number">8605</span>,</span><br><span class="line">        <span class="attr">&quot;serf_lan&quot;</span>: <span class="number">8401</span>,</span><br><span class="line">        <span class="attr">&quot;serf_wan&quot;</span>: <span class="number">8402</span>,</span><br><span class="line">        <span class="attr">&quot;server&quot;</span>: <span class="number">8400</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;datacenter&quot;</span>: <span class="string">&quot;dc1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data_dir&quot;</span>: <span class="string">&quot;/Users/fengxuechao/WorkSpace/IdeaProjects/consul/consul-client-2/data&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log_level&quot;</span>: <span class="string">&quot;INFO&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;log_file&quot;</span>: <span class="string">&quot;/Users/fengxuechao/WorkSpace/IdeaProjects/consul/consul-client-2/log/consul.log&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;node_name&quot;</span>: <span class="string">&quot;consul-client-2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;disable_host_node_id&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;rejoin_after_leave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;retry_join&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8101&quot;</span>,</span><br><span class="line">        <span class="string">&quot;127.0.0.1:8201&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-搭建集群"><a href="#1-5-搭建集群" class="headerlink" title="1.5 搭建集群"></a>1.5 搭建集群</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 Consul 服务端节点目录</span></span><br><span class="line">mkdir consul-server-&#123;1,2,3&#125;</span><br><span class="line"><span class="comment"># 创建 Consul 服务端节点可执行文件目录</span></span><br><span class="line">mkdir consul-server-&#123;1,2,3&#125;/bin</span><br><span class="line"><span class="comment"># 创建  Consul 服务端节点配置文件目录</span></span><br><span class="line">mkdir consul-server-&#123;1,2,3&#125;/config</span><br><span class="line"><span class="comment"># 创建  Consul 服务端节点数据文件目录</span></span><br><span class="line">mkdir consul-server-&#123;1,2,3&#125;/data</span><br><span class="line"><span class="comment"># 创建  Consul 服务端节点日志文件目录</span></span><br><span class="line">mkdir consul-server-&#123;1,2,3&#125;/<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># consul 客户端节点目录结构与服务端节点目录结构保持一致</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Consul 服务端节点搭建</span></span><br><span class="line">nohup consul-server-1/bin/consul agent -config-dir=consul-server-1/config &amp;</span><br><span class="line">nohup consul-server-2/bin/consul agent -config-dir=consul-server-2/config &amp;</span><br><span class="line">nohup consul-server-3/bin/consul agent -config-dir=consul-server-3/config &amp;</span><br><span class="line"><span class="comment"># Consul 客户端节点搭建</span></span><br><span class="line">nohup consul-client-1/bin/consul agent -config-dir=consul-client-1/config &amp;</span><br><span class="line">nohup consul-client-2/bin/consul agent -config-dir=consul-client-2/config &amp;</span><br></pre></td></tr></table></figure>

<h1 id="2-Consul-的一些命令"><a href="#2-Consul-的一些命令" class="headerlink" title="2 Consul 的一些命令"></a>2 Consul 的一些命令</h1><h2 id="2-1-查看-consul-集群列表"><a href="#2-1-查看-consul-集群列表" class="headerlink" title="2.1 查看 consul 集群列表"></a>2.1 查看 consul 集群列表</h2><p>验证 Consul 集群是否搭建成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul-server-1/bin/consul operator raft list-peers -http-addr=127.0.0.1:8501</span><br></pre></td></tr></table></figure>

<h2 id="2-2-查看-Consul-节点列表"><a href="#2-2-查看-Consul-节点列表" class="headerlink" title="2.2 查看 Consul 节点列表"></a>2.2 查看 Consul 节点列表</h2><p>查看 Consul 的所有节点列表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul-server-1/bin/consul members -http-addr=127.0.0.1:8501</span><br></pre></td></tr></table></figure>

<h2 id="2-3-移除一个-Server-节点"><a href="#2-3-移除一个-Server-节点" class="headerlink" title="2.3 移除一个 Server 节点"></a>2.3 移除一个 Server 节点</h2><p>验证 Consul 客户端节点不会丢失</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul-server-1/bin/consul leave -http-addr=127.0.0.1:8501</span><br></pre></td></tr></table></figure>

<h1 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h1><h2 id="3-1-模拟一个-Consul-服务端宕机"><a href="#3-1-模拟一个-Consul-服务端宕机" class="headerlink" title="3.1 模拟一个 Consul 服务端宕机"></a>3.1 模拟一个 Consul 服务端宕机</h2><ol>
<li>移除 Consul 服务端节点前：</li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210112101929745.png" alt="image-20210112101929745"></p>
<ol start="2">
<li><p>移除 Consul 服务端节点。命令参考章节2.3。</p>
<p>结果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210112102147403.png" alt="image-20210112102147403"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210112102223434.png" alt="image-20210112102223434"></p>
</li>
</ol>
<h1 id="4-结论"><a href="#4-结论" class="headerlink" title="4 结论"></a>4 结论</h1><p>说明当一个consul服务端节点宕机，并不会影响 Consul 客户端节点的可用性。</p>
<p>在每个数据中心，client和server是混合的。一般建议有3-5台server。这是基于有故障情况下的可用性和性能之间的权衡结果，因为越多的机器加入达成共识越慢。虽然每个节点的服务注册数量是有上限的，但是并不限制client的数量，它们可以很容易的扩展到数千或者数万台。</p>
<h1 id="5-参考资源"><a href="#5-参考资源" class="headerlink" title="5 参考资源"></a>5 参考资源</h1><p><a href="https://blog.csdn.net/u014635374/article/details/106313858">https://blog.csdn.net/u014635374/article/details/106313858</a></p>
]]></content>
      <categories>
        <category>注册中心</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul - Watches监控主动通知</title>
    <url>/2021/01/13/Consul-Watches%E7%9B%91%E6%8E%A7%E4%B8%BB%E5%8A%A8%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><p>当Consul中注册的服务信息发生变化的时候，我们除了定时通过接口去查询最新的服务信息之外，consul还提供了watch机制，通过监控consul数据的变化，主动通知。</p>
<p>目前conusl watch支持两种通知方式：<strong>可执行程序</strong>和<strong>Http接口</strong>。</p>
<p>consul watch支持监控的数据类型：</p>
<ul>
<li>services - 监控指定列表服务的可用性</li>
<li>service - 监控指定服务的实例</li>
<li>nodes - 监控节点</li>
<li>key - 监控特定的键值对</li>
<li>keyprefix - 监控consul配置中心的前缀</li>
<li>checks - 监控健康检查的值</li>
<li>event - 监控自定义用户事件</li>
</ul>
<p>也就是说，consul支持监控服务、键值数据、节点信息，只要发生变化，就通知我们。</p>
<h1 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h1><p>我们以监控键值数据的变化为例子，介绍watch机制的用法。</p>
<p>watch监控的配置信息是跟consul的配置文件放在一起的，通过配置文件中的watches字段，设置监控信息。</p>
<p>说明：watches的配置，大致用法就是通过type，配置监控数据的类型，然后根据不同数据类型配置不同的参数，最后选择一种通知方式进行配置。</p>
<h2 id="2-1-通过可执行程序通知"><a href="#2-1-通过可执行程序通知" class="headerlink" title="2.1 通过可执行程序通知"></a>2.1 通过可执行程序通知</h2><p>当我们监控的数据发生变化，consul agent会调用我们配置的可执行程序（命令、脚本等等），并且通过标准输入，以Json格式传入通知的参数， 我们只要在程序中根据参数处理业务即可。</p>
<p>例子：</p>
<p>下面是我们consul agent的配置，文件名是 <code>/etc/consul/watches.json</code> 。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;datacenter&quot;</span>: <span class="string">&quot;dc1&quot;</span>, </span><br><span class="line">	<span class="attr">&quot;data_dir&quot;</span>: <span class="string">&quot;/var/consul&quot;</span>, </span><br><span class="line">	<span class="attr">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;watches&quot;</span>: [&#123;</span><br><span class="line">		<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;key&quot;</span>: <span class="string">&quot;foo/bar/baz&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;handler_type&quot;</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;/usr/bin/my-service-handler.sh&quot;</span>, <span class="string">&quot;-redis&quot;</span>]</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子的意思，监控<code>key=foo/bar/baz</code>的键值数据，如果数据发生变化，就调用<code>/usr/bin/my-service-handler.sh -redis</code> 命令。</p>
<p>参数说明：</p>
<ul>
<li><p>datacenter - 数据中心的名字</p>
</li>
<li><p>data_dir - consul数据存放目录</p>
</li>
<li><p>ui - 开启consul ui</p>
</li>
<li><p>watches - 配置监控信息，如果监控的数据发生变化，则根据配置执行通知。</p>
<p>watches参数说明：</p>
<ul>
<li>type - 监控的数据类型</li>
<li>key - 监控的键值数据的Key</li>
<li>handler_type - 通知类型，支持script和http</li>
<li>args - 配置通知类型为script的，执行命令，是一个数组，第一个元素是命令，后面第2个到第N个元素是命令的参数。</li>
</ul>
</li>
</ul>
<p>例子的<code>watches</code>配置的意思就是：</p>
<p>监控<code>key=foo/bar/baz</code>的键值数据，如果数据发生变化，就调用<code>/usr/bin/my-service-handler.sh -redis</code> 命令， 这个命令可以通过标准输入，接收变化的数据。</p>
<p>启动consul，就会加载watches配置。</p>
<h2 id="2-2-通过Http接口通知"><a href="#2-2-通过Http接口通知" class="headerlink" title="2.2 通过Http接口通知"></a>2.2 通过Http接口通知</h2><p>通过http接口通知数据变化，大体上配置跟上面一样，区别是多了一些http接口的配置参数。</p>
<p>例子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;datacenter&quot;</span>: <span class="string">&quot;dc1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;data_dir&quot;</span>: <span class="string">&quot;/Users/jogin/Documents/work/local/consul/data&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;ui&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">	<span class="attr">&quot;watches&quot;</span>: [&#123;</span><br><span class="line">		<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;key&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;key&quot;</span>: <span class="string">&quot;foo/bar/baz&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;handler_type&quot;</span>: <span class="string">&quot;http&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;http_handler_config&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;path&quot;</span>: <span class="string">&quot;&lt;https://localhost:8000/watch&gt;&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;method&quot;</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;header&quot;</span>: &#123;</span><br><span class="line">				<span class="attr">&quot;x-foo&quot;</span>: [<span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>]</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">&quot;timeout&quot;</span>: <span class="string">&quot;10s&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;tls_skip_verify&quot;</span>: <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个例子的意思，就是当<code>key=foo/bar/baz</code>的键值数据发生变化，就通过<code>https://localhost:8000/watch</code>通知我们。</p>
<p>我们关注<code>watches</code>字段的配置信息，下面是参数说明：</p>
<ul>
<li><p>type - watch监控类型是key</p>
</li>
<li><p>key - 监控foo/bar/baz这个key</p>
</li>
<li><p>handler_type - 通知类型, http</p>
</li>
<li><p>http_handler_config - 配置http通知信息。</p>
<p>http_handler_config参数说明：</p>
<ul>
<li>path - 通知Url</li>
<li>method - http请求方法</li>
<li>header - 自定义Http请求头，没有可以忽略</li>
<li>timeout - 超时时间，10秒</li>
<li>tls_skip_verify - 是否跳过tls验证</li>
</ul>
</li>
</ul>
<h1 id="3-监控服务"><a href="#3-监控服务" class="headerlink" title="3 监控服务"></a>3 监控服务</h1><p>上面介绍了watch的基本用法，我们也可以监控服务信息的变化，例如当有人注册新的服务或者服务不可用的时候，通知我们。</p>
<p>我们忽略掉，consul agent的配置，单独看watches的配置。</p>
<p>监控所有的服务的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;watches&quot;: [&#123;</span><br><span class="line">		&quot;type&quot;: &quot;services&quot;,</span><br><span class="line">		&quot;handler_type&quot;: &quot;http&quot;,</span><br><span class="line">		&quot;http_handler_config&quot;: &#123;</span><br><span class="line">			...忽略...</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监控单个服务的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;watches&quot;: [&#123;</span><br><span class="line">		&quot;type&quot;: &quot;service&quot;,</span><br><span class="line">                &quot;service&quot;: &quot;要监控的服务名&quot;,</span><br><span class="line">		&quot;handler_type&quot;: &quot;http&quot;,</span><br><span class="line">		&quot;http_handler_config&quot;: &#123;</span><br><span class="line">			...忽略...</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-监控键值数据"><a href="#4-监控键值数据" class="headerlink" title="4 监控键值数据"></a>4 监控键值数据</h1><p>前面介绍过基本Key的监控，其实我们还可以通过key的前缀，批量监控一批key，只要key的前缀相同，这些Key下面的数据发生变化，都会发送通知。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;watches&quot;: [&#123;</span><br><span class="line">		&quot;type&quot;: &quot;keyprefix&quot;,</span><br><span class="line">		&quot;prefix&quot;: &quot;foo&#x2F;&quot;,</span><br><span class="line">		&quot;args&quot;: [&quot;&#x2F;usr&#x2F;bin&#x2F;my-service-handler.sh&quot;, &quot;-redis&quot;]</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>监控类型为：keyprefix</p>
<p>通过prefix字段，配置key的前缀。</p>
<p>这个配置的意思就是：以foo/开头的Key, 数据发生变化，都会执行args参数，配置的命令。</p>
<h1 id="5-监控节点"><a href="#5-监控节点" class="headerlink" title="5 监控节点"></a>5 监控节点</h1><p>我们也可以监控consul集群节点的变化信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;watches&quot;: [&#123;</span><br><span class="line">		&quot;type&quot;: &quot;nodes&quot;,</span><br><span class="line">		&quot;handler_type&quot;: &quot;http&quot;,</span><br><span class="line">		&quot;http_handler_config&quot;: &#123;</span><br><span class="line">			...忽略...</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有其他额外的参数，type=nodes即可，当节点信息发生变化，会根据配置的方式通知。</p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://www.consul.io/docs/dynamic-app-config/watches">Consul by HashiCorp</a></p>
<p><a href="https://www.cnblogs.com/ExMan/p/11907491.html">ExplorerMan</a></p>
<p><a href="https://www.tizi365.com/archives/535.html">Consul Watches监控服务变化</a></p>
<p><a href="https://toutiao.io/posts/zeu435/preview">开发者头条</a></p>
<p><a href="https://www.notion.so/Consul-6982c01eb1594549ab0a6dd463f16cfd">Consul 单机集群搭建</a></p>
]]></content>
      <categories>
        <category>注册中心</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul使用记录</title>
    <url>/2019/05/23/Consul%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1-consul-集群模式"><a href="#1-consul-集群模式" class="headerlink" title="1. consul 集群模式"></a>1. consul 集群模式</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul agent -server -data-dir=./data/ -node=s1 -<span class="built_in">bind</span>=192.168.217.86 -ui -rejoin -client=0.0.0.0 -bootstrap-expect=1 -ui</span><br></pre></td></tr></table></figure>

<p>参数介绍：</p>
<ul>
<li>-server 表示是以服务端身份启动，去掉这个参数表示 <code>client</code> 模式</li>
<li>-bind 表示绑定到哪个ip（有些服务器会绑定多块网卡，可以通过bind参数强制指定绑定的ip），一般是本机IP</li>
<li>-client 指定客户端访问的ip(consul有丰富的api接口，这里的客户端指浏览器或调用方)，0.0.0.0表示不限客户端ip</li>
<li>-bootstrap-expect=3 表示server集群最低节点数为3，低于这个值将工作不正常(注：类似zookeeper一样，通常集群数为奇数，方便选举，consul采用的是raft算法)</li>
<li>-data-dir 表示指定数据的存放(持久化)目录（该目录必须存在）</li>
<li>-node 表示节点在web ui中显示的名称</li>
</ul>
<p>启动成功后，终端窗口不要关闭，可以在浏览器里，访问下，类似 <a href="http://192.168.212.73:8500/%EF%BC%8C">http://192.168.212.73:8500/，</a> 正常的话，可以正常打开web界面。</p>
<p>为了防止终端关闭后，consul退出，可以在刚才命令上，加点东西，类似：<code>nohup xxx  &gt; /dev/null 2&gt;&amp;1 &amp; </code></p>
<h3 id="1-1-命令行建立-consul-集群"><a href="#1-1-命令行建立-consul-集群" class="headerlink" title="1.1. 命令行建立 consul 集群"></a>1.1. 命令行建立 consul 集群</h3><p>服务端1：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect=2 -data-dir=./data/ -<span class="built_in">bind</span>=192.168.217.134 -client=0.0.0.0 -node=s1 -ui</span><br></pre></td></tr></table></figure>

<p>服务端2：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect=2 -data-dir=./data/ -<span class="built_in">bind</span>=192.168.217.72 -client=0.0.0.0 -join 192.168.217.134 -node=s2 -ui</span><br></pre></td></tr></table></figure>

<p>服务端3：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul agent -server -bootstrap-expect=2 -data-dir=./data/ -<span class="built_in">bind</span>=192.168.217.86 -client=0.0.0.0 -join 192.168.217.134 -node=s3 -ui</span><br></pre></td></tr></table></figure>

<p>客户端1：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul agent -data-dir=./data/ -<span class="built_in">bind</span>=192.168.217.87 -client=0.0.0.0 -join 192.168.217.134 -node=c1 -ui</span><br></pre></td></tr></table></figure>

<h3 id="1-2-配置文件方式建立-consul-集群"><a href="#1-2-配置文件方式建立-consul-集群" class="headerlink" title="1.2. 配置文件方式建立 consul 集群"></a>1.2. 配置文件方式建立 consul 集群</h3><p><img src="https://img-blog.csdnimg.cn/20190522164211256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 表示server集群最低节点数 */</span></span><br><span class="line">  <span class="attr">&quot;bootstrap_expect&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">/* 表示该节点绑定的地址, 默认0.0.0.0 */</span></span><br><span class="line">  <span class="attr">&quot;bind_addr&quot;</span>: <span class="string">&quot;192.168.217.86&quot;</span>,</span><br><span class="line">  <span class="comment">/* 访问该节点的地址, 默认127.0.0.1*/</span></span><br><span class="line">  <span class="attr">&quot;client_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">  <span class="comment">/* 访问该节点的数据中心*/</span></span><br><span class="line">  <span class="attr">&quot;datacenter&quot;</span>: <span class="string">&quot;data-center-1&quot;</span>,</span><br><span class="line">  <span class="comment">/* 必须, 数据保存的地址*/</span></span><br><span class="line">  <span class="attr">&quot;data_dir&quot;</span>: <span class="string">&quot;/home/awifi/consul-server/data&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;addresses&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">/* 表示该节点绑定的dns地址, 以空格分隔的要绑定的地址列表*/</span></span><br><span class="line">    <span class="attr">&quot;dns&quot;</span>: <span class="string">&quot;192.168.217.86&quot;</span>,</span><br><span class="line">    <span class="comment">/* 表示该节点绑定的http地址, 以空格分隔的要绑定的地址列表*/</span></span><br><span class="line">    <span class="attr">&quot;http&quot;</span>: <span class="string">&quot;192.168.217.86 127.0.0.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 节点名，必须*/</span></span><br><span class="line">  <span class="attr">&quot;node_name&quot;</span>: <span class="string">&quot;server:192.168.212.73:8500&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;rejoin_after_leave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/* 表示该节点类型是server*/</span></span><br><span class="line">  <span class="attr">&quot;server&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/* 允许在第一次尝试失败时重试连接 */</span></span><br><span class="line"><span class="attr">&quot;retry_join&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;192.168.217.72&quot;</span>,</span><br><span class="line">        <span class="string">&quot;192.168.217.134&quot;</span></span><br><span class="line">    ],</span><br><span class="line">  <span class="comment">/* 表示开启web界面*/</span></span><br><span class="line">  <span class="attr">&quot;ui&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在另一台机器上执行<br>./consul join 192.168.217.86<br>或者可以加入配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;start_join&quot;</span>:[],</span><br><span class="line">  <span class="attr">&quot;retry_join&quot;</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>start_join</code>：等同于 命令行参数<code> -join</code> : 表示启动时加入的集群地址<br><code>retry_join</code>：等同于 命令行参数<code> -retry-join</code> : 允许在第一次尝试失败时重试连接，该列表可以包含IPv4，IPv6或DNS地址。</p>
<h4 id="1-2-1-为什么-http-地址要绑定-127-0-0-1-？"><a href="#1-2-1-为什么-http-地址要绑定-127-0-0-1-？" class="headerlink" title="1.2.1.  为什么 http 地址要绑定 127.0.0.1 ？"></a>1.2.1.  为什么 http 地址要绑定 127.0.0.1 ？</h4><p>如果不绑定127.0.0.1，在该服务器上就会无法使用除 ./consul agent 以外的命令，</p>
<p>例如:<br>组建集群模式的核心命令：<code>consul join 192.168.217.86</code><br>优雅的注销节点的命令：  <code>consul leave</code><br><img src="https://img-blog.csdnimg.cn/20190522164607754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-查看集群状态"><a href="#2-查看集群状态" class="headerlink" title="2. 查看集群状态"></a>2. 查看集群状态</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">consul operator raft list-peers</span><br></pre></td></tr></table></figure>

<p> 运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190522162138210.png" alt="查看集群状态"></p>
<p>运行结果红色方框部分可以看出集群模式中谁是 <code>leader</code></p>
]]></content>
      <categories>
        <category>注册中心</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker+mysql主从配置</title>
    <url>/2019/05/07/Docker-mysql%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Docker-mysql主从配置"><a href="#Docker-mysql主从配置" class="headerlink" title="Docker + mysql主从配置"></a>Docker + mysql主从配置</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="https://img-blog.csdnimg.cn/20190423172956747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>

<h2 id="主-mysql-的配置-master-cnf"><a href="#主-mysql-的配置-master-cnf" class="headerlink" title="主 mysql 的配置:master.cnf"></a>主 mysql 的配置:master.cnf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，一般设置为IP，注意要唯一</span><br><span class="line">server_id&#x3D;100</span><br><span class="line">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span><br><span class="line">log-bin&#x3D;replicas-mysql-bin</span><br><span class="line">## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span><br><span class="line">binlog_cache_size&#x3D;1M</span><br><span class="line">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors&#x3D;1062</span><br></pre></td></tr></table></figure>

<h2 id="从-mysql-的配置-slave-cnf"><a href="#从-mysql-的配置-slave-cnf" class="headerlink" title="从 mysql 的配置:slave.cnf"></a>从 mysql 的配置:slave.cnf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，一般设置为IP，注意要唯一</span><br><span class="line">server_id&#x3D;101</span><br><span class="line">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span><br><span class="line">log-bin&#x3D;replicas-mysql-slave1-bin</span><br><span class="line">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span><br><span class="line">binlog_cache_size&#x3D;1M</span><br><span class="line">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors&#x3D;1062</span><br><span class="line">## relay_log配置中继日志</span><br><span class="line">relay_log&#x3D;replicas-mysql-relay-bin</span><br><span class="line">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span><br><span class="line">log_slave_updates&#x3D;1</span><br><span class="line">## 防止改变数据(除了特殊的线程)</span><br><span class="line">read_only&#x3D;1</span><br></pre></td></tr></table></figure>

<h2 id="配置mysql主从的脚本：mysql-connector-sh"><a href="#配置mysql主从的脚本：mysql-connector-sh" class="headerlink" title="配置mysql主从的脚本：mysql_connector.sh"></a>配置mysql主从的脚本：mysql_connector.sh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">BASE_PATH=$(dirname <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Waiting for mysql to get up&quot;</span></span><br><span class="line"><span class="comment"># Give 60 seconds for master and slave to come up</span></span><br><span class="line">sleep 60</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Create MySQL Servers (master / slave repl)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------------&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* Create replication user&quot;</span></span><br><span class="line"></span><br><span class="line">mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -AN -e <span class="string">&#x27;STOP SLAVE;&#x27;</span>;</span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&#x27;RESET SLAVE ALL;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&quot;CREATE USER &#x27;<span class="variable">$MYSQL_REPLICATION_USER</span>&#x27;@&#x27;%&#x27;;&quot;</span></span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&quot;GRANT REPLICATION SLAVE ON *.* TO &#x27;<span class="variable">$MYSQL_REPLICATION_USER</span>&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>&#x27;;&quot;</span></span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&#x27;flush privileges;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* Set MySQL01 as master on MySQL02&quot;</span></span><br><span class="line"></span><br><span class="line">MYSQL01_Position=$(<span class="built_in">eval</span> <span class="string">&quot;mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -e &#x27;show master status \G&#x27; | grep Position | sed -n -e &#x27;s/^.*: //p&#x27;&quot;</span>)</span><br><span class="line">MYSQL01_File=$(<span class="built_in">eval</span> <span class="string">&quot;mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -e &#x27;show master status \G&#x27;     | grep File     | sed -n -e &#x27;s/^.*: //p&#x27;&quot;</span>)</span><br><span class="line">MASTER_IP=$(<span class="built_in">eval</span> <span class="string">&quot;getent hosts mysqlmaster|awk &#x27;&#123;print \$1&#125;&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$MASTER_IP</span></span><br><span class="line">mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -AN -e <span class="string">&quot;CHANGE MASTER TO master_host=&#x27;mysqlmaster&#x27;, master_port=3306, \</span></span><br><span class="line"><span class="string">        master_user=&#x27;<span class="variable">$MYSQL_REPLICATION_USER</span>&#x27;, master_password=&#x27;<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>&#x27;, master_log_file=&#x27;<span class="variable">$MYSQL01_File</span>&#x27;, \</span></span><br><span class="line"><span class="string">        master_log_pos=<span class="variable">$MYSQL01_Position</span>;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* Set MySQL02 as master on MySQL01&quot;</span></span><br><span class="line"></span><br><span class="line">MYSQL02_Position=$(<span class="built_in">eval</span> <span class="string">&quot;mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -e &#x27;show master status \G&#x27; | grep Position | sed -n -e &#x27;s/^.*: //p&#x27;&quot;</span>)</span><br><span class="line">MYSQL02_File=$(<span class="built_in">eval</span> <span class="string">&quot;mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -e &#x27;show master status \G&#x27;     | grep File     | sed -n -e &#x27;s/^.*: //p&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">SLAVE_IP=$(<span class="built_in">eval</span> <span class="string">&quot;getent hosts mysqlslave|awk &#x27;&#123;print \$1&#125;&#x27;&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SLAVE_IP</span></span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&quot;CHANGE MASTER TO master_host=&#x27;mysqlslave&#x27;, master_port=3306, \</span></span><br><span class="line"><span class="string">        master_user=&#x27;<span class="variable">$MYSQL_REPLICATION_USER</span>&#x27;, master_password=&#x27;<span class="variable">$MYSQL_REPLICATION_PASSWORD</span>&#x27;, master_log_file=&#x27;<span class="variable">$MYSQL02_File</span>&#x27;, \</span></span><br><span class="line"><span class="string">        master_log_pos=<span class="variable">$MYSQL02_Position</span>;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* Start Slave on both Servers&quot;</span></span><br><span class="line">mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -AN -e <span class="string">&quot;start slave;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Increase the max_connections to 2000&quot;</span></span><br><span class="line">mysql --host mysqlmaster -uroot -p<span class="variable">$MYSQL_MASTER_PASSWORD</span> -AN -e <span class="string">&#x27;set GLOBAL max_connections=2000&#x27;</span>;</span><br><span class="line">mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -AN -e <span class="string">&#x27;set GLOBAL max_connections=2000&#x27;</span>;</span><br><span class="line"></span><br><span class="line">mysql --host mysqlslave -uroot -p<span class="variable">$MYSQL_SLAVE_PASSWORD</span> -e <span class="string">&quot;show slave status \G&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;MySQL servers created!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;--------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> Variables available fo you :-</span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> MYSQL01_IP       : mysqlmaster</span><br><span class="line"><span class="built_in">echo</span> MYSQL02_IP       : mysqlslave</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose-配置文件"><a href="#docker-compose-配置文件" class="headerlink" title="docker-compose 配置文件"></a>docker-compose 配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;2&#39;</span><br><span class="line">services:</span><br><span class="line">  mysqlmaster:</span><br><span class="line">    image: mysql:5.7.15</span><br><span class="line">    container_name: &quot;mysql_master1&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;MYSQL_ROOT_PASSWORD&#x3D;root&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;.&#x2F;data&#x2F;mysql-master:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;&quot;</span><br><span class="line">      - &quot;.&#x2F;config&#x2F;mysql-master:&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">  mysqlslave:</span><br><span class="line">    image: mysql:5.7.15</span><br><span class="line">    container_name: &quot;mysql_slave1&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;MYSQL_ROOT_PASSWORD&#x3D;root&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;.&#x2F;data&#x2F;mysql-slave:&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;&quot;</span><br><span class="line">      - &quot;.&#x2F;config&#x2F;mysql-slave:&#x2F;etc&#x2F;mysql&#x2F;conf.d&#x2F;&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3307:3306&quot;</span><br><span class="line">  mysqlconfigure:</span><br><span class="line">    image: mysql:5.7.15</span><br><span class="line">    container_name: &quot;mysql_configure&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - &quot;MYSQL_SLAVE_PASSWORD&#x3D;root&quot;</span><br><span class="line">      - &quot;MYSQL_MASTER_PASSWORD&#x3D;root&quot;</span><br><span class="line">      - &quot;MYSQL_ROOT_PASSWORD&#x3D;root&quot;</span><br><span class="line">      - &quot;MYSQL_REPLICATION_USER&#x3D;repl&quot;</span><br><span class="line">      - &quot;MYSQL_REPLICATION_PASSWORD&#x3D;repl&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;.&#x2F;mysql_connector.sh:&#x2F;tmp&#x2F;mysql_connector.sh&quot;</span><br><span class="line">    command: &#x2F;bin&#x2F;bash -x &#x2F;tmp&#x2F;mysql_connector.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 深度分页 &amp; 滚动搜索</title>
    <url>/2021/01/12/ES%20%E6%B7%B1%E5%BA%A6%E5%88%86%E9%A1%B5-%E6%BB%9A%E5%8A%A8%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;                                                                </span><br></pre></td></tr></table></figure>

<h1 id="深度分页"><a href="#深度分页" class="headerlink" title="深度分页"></a>深度分页</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es-13_1-20210112211825281.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/es-13_1.png"></p>
<p>深度分页其实就是搜索的深浅度，比如第1页，第2页，第10页，第20页，是比较浅的；第10000页，第20000页就是很深了。</p>
<p>使用如下操作：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="number">9990</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="number">9999</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在获取第9999条到10009条数据的时候，其实每个分片都会拿到10009条数据，然后集合在一起，总共是10009*3=30027条数据，针对30027数据再次做排序处理，最终会获取最后10条数据。</p>
<p>如此一来，搜索得太深，就会造成性能问题，会耗费内存和占用cpu。而且es为了性能，他不支持超过一万条数据以上的分页查询。那么如何解决深度分页带来的性能呢？其实我们应该避免深度分页操作（限制分页页数），比如最多只能提供100页的展示，从第101页开始就没了，毕竟用户也不会搜的那么深，我们平时搜索淘宝或者百度，一般也就看个10来页就顶多了。</p>
<p>譬如淘宝搜索限制分页最多100页，如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es-13_2.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/es-13_2.jpg"></p>
<h1 id="通过设置index-max-result-window来突破10000数据"><a href="#通过设置index-max-result-window来突破10000数据" class="headerlink" title="通过设置index.max_result_window来突破10000数据"></a>通过设置index.max_result_window来突破10000数据</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 查询shop索引的设置</span><br><span class="line">GET /shop/_settings</span><br><span class="line"># 修改 shop 索引的最大返回结果</span><br><span class="line">PUT /shop/_settings</span><br><span class="line">&#123; </span><br><span class="line">    <span class="string">&quot;index.max_result_window&quot;</span>: <span class="string">&quot;20000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="scroll-滚动搜索"><a href="#scroll-滚动搜索" class="headerlink" title="scroll 滚动搜索"></a>scroll 滚动搜索</h1><p>一次性查询1万+数据，往往会造成性能影响，因为数据量太多了。这个时候可以使用滚动搜索，也就是 <code>scroll</code>。滚动搜索可以先查询出一些数据，然后再紧接着依次往下查询。在第一次查询的时候会有一个滚动id，相当于一个<code>锚标记</code>，随后再次滚动搜索会需要上一次搜索的<code>锚标记</code>，根据这个进行下一次的搜索请求。每次搜索都是基于一个历史的数据快照，查询数据的期间，如果有数据变更，那么和搜索是没有关系的，搜索的内容还是快照中的数据。</p>
<ul>
<li>scroll=1m，相当于是一个session会话时间，搜索保持的上下文时间为1分钟。</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_search?scroll=1m</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123; </span><br><span class="line">    	<span class="string">&quot;match_all&quot;</span>: &#123;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;,  </span><br><span class="line">    <span class="string">&quot;sort&quot;</span> : [<span class="string">&quot;_doc&quot;</span>], </span><br><span class="line">    <span class="string">&quot;size&quot;</span>:  <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /_search/scroll</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scroll&quot;</span>: <span class="string">&quot;1m&quot;</span>, </span><br><span class="line">    <span class="string">&quot;scroll_id&quot;</span> : <span class="string">&quot;your last scroll_id&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>官文地址：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/scroll.html</a></li>
</ul>
<h1 id="mget-批量查询"><a href="#mget-批量查询" class="headerlink" title="mget 批量查询"></a>mget 批量查询</h1><p><a href="https://blog.csdn.net/tototuzuoquan/article/details/80558611">26、ES中使用mget批量查询api（学习笔记，来自课程资料 + 自己整理）_涂作权的博客-CSDN博客_es mget</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 7.X 下动态增加分片数量</title>
    <url>/2021/02/19/ES-7-X-%E4%B8%8B%E5%8A%A8%E6%80%81%E5%A2%9E%E5%8A%A0%E5%88%86%E7%89%87%E6%95%B0%E9%87%8F/</url>
    <content><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 <strong>背景</strong></h1><p>在老版本的ES（例如2.3版本）中， index的shard数量定好后，就不能再修改，除非重建数据才能实现。</p>
<p>从ES6.1开始，ES 支持可以在线操作扩大shard的数量（注意：操作期间也需要对index锁写）</p>
<p>从ES7.0开始，split时候，不再需要加参数 index.number_of_routing_shards</p>
<p><strong>具体参考官方文档：</strong></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/indices-split-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/indices-split-index.html</a></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-split-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/6.1/indices-split-index.html</a></p>
<h1 id="2-split的过程："><a href="#2-split的过程：" class="headerlink" title="2 split的过程："></a>2 <strong>split的过程：</strong></h1><p>1、创建一个新的目标index，其定义与源index相同，但是具有更多的primary shard。</p>
<p>2、将segment从源index硬链接到目标index。（如果文件系统不支持硬链接，则将所有segment都复制到新索引中，这是一个非常耗时的过程。）</p>
<p>3、创建低级文件后，再次对所有文档进行哈希处理，以删除属于不同shard的documents</p>
<p>4、恢复目标索引，就像它是刚刚重新打开的封闭索引一样。</p>
<h1 id="3-为啥ES不支持增量resharding？"><a href="#3-为啥ES不支持增量resharding？" class="headerlink" title="3 为啥ES不支持增量resharding？"></a>3 <strong>为啥ES不支持增量resharding？</strong></h1><p>从N个分片到N + 1个分片。增量重新分片确实是许多键值存储支持的功能。仅添加一个新的分片并将新的数据推入该新的分片是不可行的：这可能是一个索引瓶颈，并根据给定的_id来确定文档所属的分片，这对于获取，删除和更新请求是必需的，会变得很复杂。这意味着我们需要使用其他哈希方案重新平衡现有数据。</p>
<p>键值存储有效执行此操作的最常见方式是使用一致的哈希。当分片的数量从N增加到N + 1时，一致的哈希仅需要重定位键的1 / N。但是，Elasticsearch的存储单位（碎片）是Lucene索引。由于它们以搜索为导向的数据结构，仅占Lucene索引的很大一部分，即仅占5％的文档，将其删除并在另一个分片上建立索引通常比键值存储要高得多的成本。如上节所述，当通过增加乘数来增加分片数量时，此成本保持合理：这允许Elasticsearch在本地执行拆分，这又允许在索引级别执行拆分，而不是为需要重新索引的文档重新编制索引移动，以及使用硬链接进行有效的文件复制。</p>
<p>对于仅追加数据，可以通过创建新索引并将新数据推送到其中，同时添加一个别名来覆盖读取操作的新旧索引，从而获得更大的灵活性。假设旧索引和新索引分别具有M和N个分片，与搜索具有M + N个分片的索引相比，这没有开销。</p>
<h1 id="4-索引能进行split的前提条件："><a href="#4-索引能进行split的前提条件：" class="headerlink" title="4 索引能进行split的前提条件："></a>4 <strong>索引能进行split的前提条件：</strong></h1><p>1、目标索引不能存在。</p>
<p>2、源索引必须比目标索引具有更少的primary shard。</p>
<p>3、目标索引中主shard的数量必须是源索引中主shard的数量的倍数。</p>
<p>4、处理拆分过程的节点必须具有足够的可用磁盘空间，以容纳现有索引的第二个副本。</p>
<h1 id="5-操作"><a href="#5-操作" class="headerlink" title="5 操作"></a>5 <strong>操作</strong></h1><p><strong>下面是具体的实验部分：</strong></p>
<blockquote>
<p>tips：实验机器有限，索引的replica都设置为0，生产上至少replica&gt;=1</p>
</blockquote>
<h2 id="5-1-创建一个索引，2个主shard，没有副本"><a href="#5-1-创建一个索引，2个主shard，没有副本" class="headerlink" title="5.1 创建一个索引，2个主shard，没有副本"></a>5.1 <strong>创建一个索引，2个主shard，没有副本</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X PUT “&lt;http://localhost:9200/twitter?pretty”&gt; -H ‘Content-Type: application/json’ -d’ &#123; “settings”: &#123; “index.number_of_shards”: 2, “index.number_of_replicas”: 0 &#125;, “aliases”: &#123; “my_search_indices”: &#123;&#125; &#125; &#125;’ </span><br><span class="line"><span class="comment"># index.number_of_shards：主分片设定个数 </span></span><br><span class="line"><span class="comment"># index.number_of_replicas：副本分片设定个数，一个副本就等于把整个索引备份1份 </span></span><br><span class="line"><span class="comment"># aliases：设定索引别名”my_search_indices”</span></span><br></pre></td></tr></table></figure>

<h3 id="写入几条测试数据"><a href="#写入几条测试数据" class="headerlink" title="写入几条测试数据"></a><strong>写入几条测试数据</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X PUT “&lt;http://localhost:9200/my_search_indices/_doc/11?pretty”&gt; –H ‘Content–Type: application/json’ -d ‘&#123; “id”: 11, “name”:“lee”, “age”:“23” &#125;’ </span><br><span class="line"></span><br><span class="line">curl -s –X PUT “&lt;http://localhost:9200/my_search_indices/_doc/22?pretty”&gt; –H ‘Content–Type: application/json’ -d ‘&#123; “id”: 22, “name”:“amd”, “age”:“22” &#125;’</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a><strong>查询数据</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -XGET “&lt;http://localhost:9200/my_search_indices/_search”&gt; | jq .</span><br></pre></td></tr></table></figure>

<h2 id="5-2-对索引锁写，以便下面执行split操作"><a href="#5-2-对索引锁写，以便下面执行split操作" class="headerlink" title="5.2 对索引锁写，以便下面执行split操作"></a>5.2 <strong>对索引锁写，以便下面执行split操作</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X PUT “&lt;http://localhost:9200/twitter/_settings?pretty”&gt; -H ‘Content-Type: application/json’ -d ‘&#123; “settings”: &#123; “index.blocks.write”: <span class="literal">true</span> &#125; &#125;’ </span><br><span class="line"><span class="comment"># index.blocks.write：写入锁定，只能读，不能写</span></span><br></pre></td></tr></table></figure>

<h3 id="写数据测试，确保锁写生效"><a href="#写数据测试，确保锁写生效" class="headerlink" title="写数据测试，确保锁写生效"></a><strong>写数据测试，确保锁写生效</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X PUT “&lt;http://localhost:9200/twitter/_doc/33?pretty”&gt; -H ‘Content-Type: application/json’ -d ‘&#123; “id”: 33, “name”:“amd”, “age”:“33” &#125;’ </span><br><span class="line"><span class="comment"># 测试写入失败</span></span><br></pre></td></tr></table></figure>

<h3 id="取消-twitter-索引的alias"><a href="#取消-twitter-索引的alias" class="headerlink" title="取消 twitter 索引的alias"></a><strong>取消 twitter 索引的alias</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X POST “&lt;http://localhost:9200/_aliases?pretty”&gt; -H ‘Content-Type: application/json’ -d ‘&#123; “actions” : [ &#123; “remove” : &#123; “index” : “twitter”, “<span class="built_in">alias</span>” : “my_search_indices” &#125; &#125; ] &#125;‘ </span><br><span class="line"></span><br><span class="line">curl -s -X GET “&lt;http://localhost:9200/_cat/aliases”&gt;</span><br></pre></td></tr></table></figure>

<p>第二种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消索引别名 </span></span><br><span class="line">curl -s -X DELETE “&lt;http://localhost:9200/twitter/_alias/my_search_indices”&gt; </span><br><span class="line">curl -s -X GET“&lt;http://localhost:9200/_cat/aliases”&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-3-开始执行-split-切分索引的操作，调整后索引名称为new-twitter，且主shard数量为8"><a href="#5-3-开始执行-split-切分索引的操作，调整后索引名称为new-twitter，且主shard数量为8" class="headerlink" title="5.3 开始执行 split 切分索引的操作，调整后索引名称为new_twitter，且主shard数量为8"></a>5.3 <strong>开始执行 split 切分索引的操作，调整后索引名称为new_twitter，且主shard数量为8</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X POST “&lt;http://localhost:9200/twitter/_split/new_twitter?pretty”&gt; –H ‘Content–Type: application/json’ -d ‘&#123; “settings”: &#123; “index.number_of_shards”: 8, “index.number_of_replicas”: 0 &#125; &#125;’</span><br></pre></td></tr></table></figure>

<h3 id="对新的index添加alias"><a href="#对新的index添加alias" class="headerlink" title="对新的index添加alias"></a><strong>对新的index添加alias</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X POST “&lt;http://localhost:9200/_aliases?pretty”&gt; –H ‘Content–Type: application/json’ -d ‘&#123; “actions” : [ &#123; “add” : &#123; “index” : “new_twitter”, “<span class="built_in">alias</span>” : “my_search_indices” &#125; &#125; ] &#125;’</span><br></pre></td></tr></table></figure>

<p>第二种方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建索引别名 </span></span><br><span class="line">curl -s -X PUT “&lt;http://localhost:9200/new_twitter/_alias/my_search_indices”&gt;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">	<span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span>, </span><br><span class="line">  <span class="attr">&quot;shards_acknowledged” : true, </span></span><br><span class="line">  &quot;index&quot; : &quot;new_twitter&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充：</strong></p>
<p><strong>查看split的进度，可以使用 _cat/recovery 这个api， 或者在 cerebro 界面上查看。</strong></p>
<h2 id="5-4-查看新索引的数据，能正常查看"><a href="#5-4-查看新索引的数据，能正常查看" class="headerlink" title="5.4 查看新索引的数据，能正常查看"></a>5.4 <strong>查看新索引的数据，能正常查看</strong></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -XGET “&lt;http://localhost:9200/my_search_indices/_search”&gt; | jq .</span><br></pre></td></tr></table></figure>

<h3 id="查看split的进度，可以使用-cat-recovery-这个api，-或者在-cerebro-界面上查看。"><a href="#查看split的进度，可以使用-cat-recovery-这个api，-或者在-cerebro-界面上查看。" class="headerlink" title="查看split的进度，可以使用 _cat/recovery 这个api， 或者在 cerebro 界面上查看。"></a><strong>查看split的进度，可以使用 _cat/recovery 这个api， 或者在 cerebro 界面上查看。</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X GET “&lt;http://localhost:9200/_cat/recovery”&gt;</span><br></pre></td></tr></table></figure>

<h3 id="对新索引写数据测试-可以看到失败的"><a href="#对新索引写数据测试-可以看到失败的" class="headerlink" title="对新索引写数据测试,可以看到失败的"></a><strong>对新索引写数据测试,可以看到失败的</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X PUT “localhost:9200/my_search_indices/_doc/33?pretty” -H ‘Content-Type: application/json’ -d ‘&#123; “id”: 33, “name”:“amd”, “age”:“33” &#125;’ <span class="comment"># 写入失败</span></span><br></pre></td></tr></table></figure>

<h3 id="打开索引的写功能"><a href="#打开索引的写功能" class="headerlink" title="打开索引的写功能"></a><strong>打开索引的写功能</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X PUT “localhost:9200/my_search_indices/_settings?pretty” –H ‘Content–Type: application/json’ -d ‘&#123; “settings”: &#123; “index.blocks.write”: <span class="literal">false</span> &#125; &#125;’</span><br></pre></td></tr></table></figure>

<h3 id="再次对新索引写数据测试-可以看到此时，写入是成功的"><a href="#再次对新索引写数据测试-可以看到此时，写入是成功的" class="headerlink" title="再次对新索引写数据测试,可以看到此时，写入是成功的"></a><strong>再次对新索引写数据测试,可以看到此时，写入是成功的</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X PUT “localhost:9200/my_search_indices/_doc/33?pretty” –H ‘Content–Type: application/json’ -d ‘&#123; “id”: 33, “name”:“amd”, “age”:“33” &#125;’ </span><br><span class="line"></span><br><span class="line">curl -s –X PUT “localhost:9200/my_search_indices/_doc/44?pretty” –H ‘Content–Type: application/json’ -d ‘&#123; “id”: 44, “name”:“intel”, “age”:“4” &#125;’</span><br></pre></td></tr></table></figure>

<p>此时，老的那个索引还是只读的，我们确保新索引OK后，就可以考虑关闭或者删除老的 twitter索引了。</p>
<h3 id="测试将新数据写入别名"><a href="#测试将新数据写入别名" class="headerlink" title="测试将新数据写入别名"></a><strong>测试将新数据写入别名</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s –X PUT “localhost:9200/my_search_indices/_doc/44?pretty” –H ‘Content–Type: application/json’ -d ‘&#123; “id”: 44, “name”:“amd”, “age”:“44” &#125;’ </span><br><span class="line"><span class="comment"># 写入也是ok 的</span></span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a><strong>删除索引</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s -X DELETE “&lt;http://localhost:9200/new_twitter”&gt;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h1><p>贴一张 生产环境执行后的index的截图，可以看到新的index的每个shard体积只有老index的一半，这样也就分摊了index的压力：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/774.jpg" alt="https://www.xiaohuait.com/wp-content/uploads/2020/09/774.jpg"></p>
]]></content>
      <tags>
        <tag>es</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 之分词与内置分词器</title>
    <url>/2021/01/11/ES-%E4%B9%8B%E5%88%86%E8%AF%8D%E4%B8%8E%E5%86%85%E7%BD%AE%E5%88%86%E8%AF%8D%E5%99%A8/</url>
    <content><![CDATA[<h1 id="什么是分词？"><a href="#什么是分词？" class="headerlink" title="什么是分词？"></a>什么是分词？</h1><p>把文本转换为一个个的单词，分词称之为analysis。es默认只对英文语句做分词，中文不支持，每个中文字都会被拆分为独立的个体。</p>
<ul>
<li>英文分词：I study in <a href="http://imooc.com/">imooc.com</a></li>
<li>中文分词：我在慕课网学习</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;text文本&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">POST /my_doc/_analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">    <span class="string">&quot;field&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="string">&quot;text文本&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="es内置分词器"><a href="#es内置分词器" class="headerlink" title="es内置分词器"></a>es内置分词器</h1><ul>
<li><p>standard：默认分词，单词会被拆分，大小会转换为小写。</p>
</li>
<li><p>simple：按照非字母分词。大写转为小写。</p>
</li>
<li><p>whitespace：按照空格分词。忽略大小写。</p>
</li>
<li><p>stop：去除无意义单词，比如<code>the</code>/<code>a</code>/<code>an</code>/<code>is</code>…</p>
</li>
<li><p>keyword：不做分词。把整个文本作为一个单独的关键词。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;: &quot;standard&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;My name is Peter Parker,I am a Super Hero. I don&#39;t like the Criminals.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
        <tag>elk</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 之 DSL 搜索</title>
    <url>/2021/01/12/ES-%E4%B9%8B-DSL-%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1 准备数据"></a>1 准备数据</h1><ul>
<li><p>建立索引 shop（名字随意）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /shop/_mapping</span><br><span class="line">&#123; <span class="string">&quot;properties&quot;</span>: &#123; <span class="string">&quot;id&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span> &#125;, <span class="string">&quot;age&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span> &#125;, <span class="string">&quot;username&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span> &#125;, <span class="string">&quot;nickname&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span> &#125;, <span class="string">&quot;money&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;float&quot;</span> &#125;, <span class="string">&quot;desc&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span> &#125;, <span class="string">&quot;sex&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;byte&quot;</span> &#125;, <span class="string">&quot;birthday&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span> &#125;, <span class="string">&quot;face&quot;</span>: &#123; <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;index&quot;</span>: <span class="literal">false</span> &#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>录入数据</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/1001</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1001,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 18,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;imoocAmazing&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;慕课网&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 88.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;我在慕课网学习java和前端，学习到了很多知识&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1992-12-24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1002</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1002,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 19,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;justbuy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;周杰棍&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 77.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;今天上下班都很堵，车流量很大&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1993-01-24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1003</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1003,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 20,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;bigFace&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;飞翔的巨鹰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 66.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网团队和导游坐飞机去海外旅游，去了新马泰和欧洲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1996-01-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1004</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1004,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;flyfish&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;水中鱼&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 55.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;昨天在学校的池塘里，看到有很多鱼在游泳，然后就去慕课网上课了&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1988-02-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1005</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1005,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 25,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;gotoplay&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;ps游戏机&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 155.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;今年生日，女友送了我一台play station游戏机，非常好玩，非常不错&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1989-03-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1006</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1006,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 19,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;missimooc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;我叫小慕&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 156.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;我叫凌云慕，今年20岁，是一名律师，我在琦䯲星球做演讲&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1993-04-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1007</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1007,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 19,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;msgame&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;gamexbox&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 1056.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;明天去进货，最近微软处理很多游戏机，还要买xbox游戏卡带&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1985-05-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1008</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1008,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 19,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;muke&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;慕学习&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 1056.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;大学毕业后，可以到imooc.com进修&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1995-06-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1009</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1009,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 22,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;shaonian&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;骚年轮&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 96.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;骚年在大学毕业后，考研究生去了&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1998-07-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1010</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1010,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 30,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;tata&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;隔壁老王&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 100.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;隔壁老外去国外出差，带给我很多好吃的&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1988-07-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1011</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1011,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 31,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;sprder&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;皮特帕克&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 180.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;它是一个超级英雄&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1989-08-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/1012</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: 1012,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 31,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;super hero&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;super hero&quot;</span>,</span><br><span class="line">    <span class="string">&quot;money&quot;</span>: 188.8,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;BatMan, GreenArrow, SpiderMan, IronMan... are all Super Hero&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1980-08-14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;face&quot;</span>: <span class="string">&quot;https://www.imooc.com/static/img/index/logo.png&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="2-使用-QueryString-查询"><a href="#2-使用-QueryString-查询" class="headerlink" title="2 使用 QueryString 查询"></a>2 使用 QueryString 查询</h1><p>查询[字段]包含[内容]的文档</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">GET /shop/_doc/_search?q=desc:慕课网</span><br><span class="line">GET /shop/_doc/_search?q=nickname:慕&amp;q=age:<span class="number">25</span></span><br></pre></td></tr></table></figure>

<h1 id="3-DSL"><a href="#3-DSL" class="headerlink" title="3 DSL"></a>3 DSL</h1><h2 id="3-1-match-查询"><a href="#3-1-match-查询" class="headerlink" title="3.1 match - 查询"></a>3.1 match - 查询</h2><p>全文检索</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-exists-判断某个字段是否存在"><a href="#3-2-exists-判断某个字段是否存在" class="headerlink" title="3.2 exists - 判断某个字段是否存在"></a>3.2 exists - 判断某个字段是否存在</h2><p>exists可以理解为SQL中的exists函数，就是判断是否存在该字段。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;exists&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;field&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-match-all-查询所有与分页"><a href="#3-3-match-all-查询所有与分页" class="headerlink" title="3.3 match_all - 查询所有与分页"></a>3.3 match_all - 查询所有与分页</h2><p>可以查询集群所有索引库的信息，包括一些隐藏索性库的信息。</p>
<h3 id="3-3-1-在索引中查询所有的文档"><a href="#3-3-1-在索引中查询所有的文档" class="headerlink" title="3.3.1 在索引中查询所有的文档"></a>3.3.1 在索引中查询所有的文档</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">GET /shop/_doc/_search</span><br></pre></td></tr></table></figure>

<p>或者指定返回属性</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;_source&quot;</span>: [<span class="string">&quot;id&quot;</span>, <span class="string">&quot;nickname&quot;</span>, <span class="string">&quot;age&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Head 可视化操作</p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/match_all_12_1.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/match_all_12_1.jpg"></p>
</li>
</ul>
<h3 id="3-3-2-分页查询"><a href="#3-3-2-分页查询" class="headerlink" title="3.3.2 分页查询"></a>3.3.2 分页查询</h3><p>默认查询是只有10条记录，可以通过分页来展示</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;_source&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;id&quot;</span>,</span><br><span class="line">		<span class="string">&quot;nickname&quot;</span>,</span><br><span class="line">		<span class="string">&quot;age&quot;</span></span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;from&quot;</span>: <span class="number">5</span>,</span><br><span class="line">	<span class="string">&quot;size&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Head 可视化操作</p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/match_all_12_2.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/match_all_12_2.jpg"></p>
</li>
</ul>
<h2 id="3-4-term-精确查询"><a href="#3-4-term-精确查询" class="headerlink" title="3.4 term - 精确查询"></a>3.4 term - 精确查询</h2><p>term主要用于精确匹配哪些值，比如数字，日期，布尔值或 not_analyzed 的字符串(未经分析的文本数据类型)</p>
<h3 id="3-4-1-term精确搜索与match分词搜索"><a href="#3-4-1-term精确搜索与match分词搜索" class="headerlink" title="3.4.1 term精确搜索与match分词搜索"></a>3.4.1 term精确搜索与match分词搜索</h3><p>搜索的时候会把用户搜索内容，比如“慕课网强大”作为一整个关键词去搜索，而不会对其进行分词后再搜索</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">对比</span><br><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注：match会对<code>慕课网慕课网</code></p>
<p>  先进行分词（其实就是全文检索），在查询，而term则不会，直接把</p>
<p>  作为一个整的词汇去搜索。</p>
</li>
<li><p>head 可视化操作对比：</p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/5df73ae408b52e4b14850283.jpg" alt="https://climg.mukewang.com/5df73ae408b52e4b14850283.jpg"></p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/5df73af9088d880314890314.jpg" alt="https://climg.mukewang.com/5df73af9088d880314890314.jpg"></p>
</li>
</ul>
<h3 id="3-4-2-terms-多个词语匹配检索"><a href="#3-4-2-terms-多个词语匹配检索" class="headerlink" title="3.4.2 terms 多个词语匹配检索"></a>3.4.2 terms 多个词语匹配检索</h3><p>相当于是tag标签查询，比如慕课网的一些课程会打上<code>前端</code>/<code>后端</code>/<code>大数据</code>/<code>就业课</code>这样的标签，可以完全匹配做类似标签的查询</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: [<span class="string">&quot;慕课网&quot;</span>, <span class="string">&quot;学习&quot;</span>, <span class="string">&quot;骚年&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-5-match-phrase"><a href="#3-5-match-phrase" class="headerlink" title="3.5 match_phrase"></a>3.5 match_phrase</h2><p>match：分词后只要有匹配就返回，match_phrase：分词结果必须在text字段分词中都包含，而且顺序必须相同，而且必须都是连续的。（搜索比较严格）</p>
<p>slop：允许词语间跳过的数量</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match_phrase&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: &#123;</span><br><span class="line">            	<span class="string">&quot;query&quot;</span>: <span class="string">&quot;大学 毕业 研究生&quot;</span>,</span><br><span class="line">            	<span class="string">&quot;slop&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-6-match（operator）-ids"><a href="#3-6-match（operator）-ids" class="headerlink" title="3.6 match（operator）/ids"></a>3.6 match（operator）/ids</h2><h3 id="3-6-1-match-扩展"><a href="#3-6-1-match-扩展" class="headerlink" title="3.6.1 match 扩展"></a>3.6.1 match 扩展</h3><ul>
<li><p>operator</p>
<ul>
<li>or：搜索内容分词后，只要存在一个词语匹配就展示结果</li>
<li>and：搜索内容分词后，都要满足词语匹配</li>
</ul>
  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST     /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 等同于</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;query&quot;</span>: <span class="string">&quot;xbox游戏机&quot;</span>,</span><br><span class="line">                <span class="string">&quot;operator&quot;</span>: <span class="string">&quot;or&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 相当于 select * from shop where desc=&#x27;xbox&#x27; or|and desc=&#x27;游戏机&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p>minimum_should_match: 最低匹配精度，至少有[分词后的词语个数]x百分百，得出一个数据值取整。举个例子：当前属性设置为<code>70</code>，若一个用户查询检索内容分词后有10个词语，那么匹配度按照 10x70%=7，则desc中至少需要有7个词语匹配，就展示；若分词后有8个，则 8x70%=5.6，则desc中至少需要有5个词语匹配，就展示。</p>
<p>  minimum_should_match 也能设置具体的数字，表示个数</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;query&quot;</span>: <span class="string">&quot;女友生日送我好玩的xbox游戏机&quot;</span>,</span><br><span class="line">                <span class="string">&quot;minimum_should_match&quot;</span>: <span class="string">&quot;60%&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6-2-根据文档主键ids搜索"><a href="#3-6-2-根据文档主键ids搜索" class="headerlink" title="3.6.2 根据文档主键ids搜索"></a>3.6.2 根据文档主键ids搜索</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">GET /shop/_doc/<span class="number">1001</span></span><br></pre></td></tr></table></figure>

<p>查询多个</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ids&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;values&quot;</span>: [<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;1010&quot;</span>, <span class="string">&quot;1008&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-7-multi-match-boost"><a href="#3-7-multi-match-boost" class="headerlink" title="3.7 multi_match/boost"></a>3.7 multi_match/boost</h2><h3 id="3-7-1-multi-match-多字段查询"><a href="#3-7-1-multi-match-多字段查询" class="headerlink" title="3.7.1 multi_match - 多字段查询"></a>3.7.1 multi_match - 多字段查询</h3><p>满足使用match在多个字段中进行查询的需求</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;query&quot;</span>: <span class="string">&quot;皮特帕克慕课网&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7-2-boost-权重"><a href="#3-7-2-boost-权重" class="headerlink" title="3.7.2 boost - 权重"></a>3.7.2 boost - 权重</h3><p>权重，为某个字段设置权重，权重越高，文档相关性得分就越高。通畅来说搜索商品名称要比商品简介的权重更高。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;query&quot;</span>: <span class="string">&quot;皮特帕克慕课网&quot;</span>,</span><br><span class="line">                <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname^10&quot;</span>]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>nickname^10</code> 代表搜索提升10倍相关性，也就是说用户搜索的时候其实以这个<code>nickname</code>为主，<code>desc</code>为辅，<code>nickname</code>的匹配相关度当然要提高权重比例了。</p>
<h2 id="3-8-bool-布尔查询"><a href="#3-8-bool-布尔查询" class="headerlink" title="3.8 bool - 布尔查询"></a>3.8 bool - 布尔查询</h2><p>可以组合多重查询</p>
<ul>
<li><p>must：查询必须匹配搜索条件，譬如 and</p>
</li>
<li><p>should：查询匹配满足1个以上条件，譬如 or</p>
</li>
<li><p>must_not：不匹配搜索条件，一个都不要满足</p>
</li>
<li><p>实操1：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;慕课网&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname&quot;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;sex&quot;</span>: <span class="number">1</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1996-01-14&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;should（must_not）&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;query&quot;</span>: <span class="string">&quot;学习&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;fields&quot;</span>: [<span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname&quot;</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                		<span class="string">&quot;desc&quot;</span>: <span class="string">&quot;游戏&quot;</span></span><br><span class="line">                	&#125;	</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;sex&quot;</span>: <span class="number">0</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实操2：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;must&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                		<span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕&quot;</span></span><br><span class="line">                	&#125;	</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                		<span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;慕&quot;</span></span><br><span class="line">                	&#125;	</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;should&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">                		<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">                	&#125;	</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;must_not&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                	<span class="string">&quot;term&quot;</span>: &#123;</span><br><span class="line">                		<span class="string">&quot;birthday&quot;</span>: <span class="string">&quot;1992-12-24&quot;</span></span><br><span class="line">                	&#125;	</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Head 可视化组合查询</p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/es-12_3.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/es-12_3.jpg"></p>
</li>
<li><p>为指定词语加权</p>
<p>  特殊场景下，某些词语可以单独加权，这样可以排得更加靠前。</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;should&quot;</span>: [</span><br><span class="line">            	&#123;</span><br><span class="line">            		<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            			<span class="string">&quot;desc&quot;</span>: &#123;</span><br><span class="line">            				<span class="string">&quot;query&quot;</span>: <span class="string">&quot;律师&quot;</span>,</span><br><span class="line">            				<span class="string">&quot;boost&quot;</span>: <span class="number">18</span></span><br><span class="line">            			&#125;</span><br><span class="line">            		&#125;</span><br><span class="line">            	&#125;,</span><br><span class="line">            	&#123;</span><br><span class="line">            		<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            			<span class="string">&quot;desc&quot;</span>: &#123;</span><br><span class="line">            				<span class="string">&quot;query&quot;</span>: <span class="string">&quot;进修&quot;</span>,</span><br><span class="line">            				<span class="string">&quot;boost&quot;</span>: <span class="number">2</span></span><br><span class="line">            			&#125;</span><br><span class="line">            		&#125;</span><br><span class="line">            	&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-9-post-filter-过滤器"><a href="#3-9-post-filter-过滤器" class="headerlink" title="3.9 post_filter - 过滤器"></a>3.9 post_filter - 过滤器</h2><p>对搜索出来的结果进行数据过滤。不会到es库里去搜，不会去计算文档的相关度分数，所以过滤的性能会比较高，过滤器可以和全文搜索结合在一起使用。<code>post_filter</code>元素是一个顶层元素，只会对搜索结果进行过滤。不会计算数据的匹配度相关性分数，不会根据分数去排序，query则相反，会计算分数，也会按照分数去排序。</p>
<p>使用场景：</p>
<ul>
<li>query：根据用户搜索条件检索匹配记录</li>
<li>post_filter：用于查询后，对结果数据的筛选</li>
</ul>
<p>实操：查询账户金额大于80元，小于160元的用户。并且生日在1998-07-14的用户</p>
<ul>
<li>gte：大于等于</li>
<li>lte：小于等于</li>
<li>gt：大于</li>
<li>lt：小于（除此以外还能做其他的match等操作也行）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网游戏&quot;</span></span><br><span class="line">		&#125;	</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;post_filter&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;money&quot;</span>: &#123;</span><br><span class="line">				<span class="string">&quot;gt&quot;</span>: <span class="number">60</span>,</span><br><span class="line">				<span class="string">&quot;lt&quot;</span>: <span class="number">1000</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-10-sort-排序"><a href="#3-10-sort-排序" class="headerlink" title="3.10 sort - 排序"></a>3.10 sort - 排序</h2><p>es的排序同sql，可以desc也可以asc。也支持组合排序。</p>
<ul>
<li><p>实操：</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">		<span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">			<span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网游戏&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;post_filter&quot;</span>: &#123;</span><br><span class="line">    	<span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">    		<span class="string">&quot;money&quot;</span>: &#123;</span><br><span class="line">    			<span class="string">&quot;gt&quot;</span>: <span class="number">55.8</span>,</span><br><span class="line">    			<span class="string">&quot;lte&quot;</span>: <span class="number">155.8</span></span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;money&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对文本排序</p>
<p>  由于文本会被分词，所以往往要去做排序会报错，通常我们可以为这个字段增加额外的一个附属属性，类型为keyword，用于做排序。</p>
<ol>
<li><p>创建新的索引</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop2/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;nickname&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>插入数据</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop2/_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1001</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;美丽的风景&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop2/_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1002</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;漂亮的小哥哥&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop2/_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1003</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;飞翔的巨鹰&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop2/_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1004</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;完美的天空&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop2/_doc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1005</span>,</span><br><span class="line">    <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;广阔的海域&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>排序</p>
 <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop2/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;nickname.keyword&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="3-11-highlight-高亮显示"><a href="#3-11-highlight-高亮显示" class="headerlink" title="3.11 highlight - 高亮显示"></a>3.11 highlight - 高亮显示</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;慕课网&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;pre_tags&quot;</span>: [<span class="string">&quot;&lt;span&gt;&quot;</span>],</span><br><span class="line">        <span class="string">&quot;post_tags&quot;</span>: [<span class="string">&quot;&lt;/span&gt;&quot;</span>],</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-12-prefix-前缀"><a href="#3-12-prefix-前缀" class="headerlink" title="3.12 prefix - 前缀"></a>3.12 prefix - 前缀</h2><p>根据前缀去查询</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;prefix&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;imo&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                                                  </span><br></pre></td></tr></table></figure>

<h2 id="3-13-fuzzy-模糊搜索"><a href="#3-13-fuzzy-模糊搜索" class="headerlink" title="3.13 fuzzy - 模糊搜索"></a>3.13 fuzzy - 模糊搜索</h2><p>模糊搜索，并不是指的sql的模糊搜索，而是用户在进行搜索的时候的打字错误现象，搜索引擎会自动纠正，然后尝试匹配索引库中的数据。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;imoov.coom&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 或多字段搜索</span><br><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;fields&quot;</span>: [ <span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname&quot;</span>],</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: <span class="string">&quot;imcoc supor&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;AUTO&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;fields&quot;</span>: [ <span class="string">&quot;desc&quot;</span>, <span class="string">&quot;nickname&quot;</span>],</span><br><span class="line">      <span class="string">&quot;query&quot;</span>: <span class="string">&quot;演说&quot;</span>,</span><br><span class="line">      <span class="string">&quot;fuzziness&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>官文：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/fuzzy-match-query.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/fuzzy-match-query.html</a></li>
</ul>
<h2 id="3-14-wildcard-占位符查询"><a href="#3-14-wildcard-占位符查询" class="headerlink" title="3.14 wildcard - 占位符查询"></a>3.14 wildcard - 占位符查询</h2><p>占位符查询。</p>
<ul>
<li><p>？：1个字符</p>
</li>
<li><p>：1个或多个字符</p>
  <figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST /shop/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;*oo?&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    	<span class="string">&quot;wildcard&quot;</span>: &#123;</span><br><span class="line">    		<span class="string">&quot;desc&quot;</span>: <span class="string">&quot;演*&quot;</span></span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>官文：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-wildcard-query.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES之文档乐观锁控制 if_seq_no与if_primary_term</title>
    <url>/2021/01/11/ES%E4%B9%8B%E6%96%87%E6%A1%A3%E4%B9%90%E8%A7%82%E9%94%81%E6%8E%A7%E5%88%B6-if-seq-no%E4%B8%8Eif-primary-term/</url>
    <content><![CDATA[<h1 id="观察操作"><a href="#观察操作" class="headerlink" title="观察操作"></a>观察操作</h1><ul>
<li><p>插入新数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;my_doc&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1010,</span><br><span class="line">    &quot;name&quot;: &quot;imooc-1010&quot;,</span><br><span class="line">    &quot;desc&quot;: &quot;imoocimooc！&quot;,</span><br><span class="line">    &quot;create_date&quot;: &quot;2019-12-24&quot;</span><br><span class="line">&#125;</span><br><span class="line"># 此时 _version 为 1</span><br></pre></td></tr></table></figure></li>
<li><p>修改数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST    &#x2F;my_doc&#x2F;_doc&#x2F;&#123;_id&#125;&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;慕课&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 此时 _version 为 2</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure></li>
<li><p>模拟两个客户端操作同一个文档数据，_version都携带为一样的数值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 操作1</span><br><span class="line">POST    &#x2F;my_doc&#x2F;_doc&#x2F;&#123;_id&#125;&#x2F;_update?if_seq_no&#x3D;&#123;数值&#125;&amp;if_primary_term&#x3D;&#123;数值&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;慕课1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 操作2</span><br><span class="line">POST    &#x2F;my_doc&#x2F;_doc&#x2F;&#123;_id&#125;&#x2F;_update?if_seq_no&#x3D;&#123;数值&#125;&amp;if_primary_term&#x3D;&#123;数值&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;慕课2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="版本元数据"><a href="#版本元数据" class="headerlink" title="版本元数据"></a>版本元数据</h1><ul>
<li>_seq_no：文档版本号，作用同_version（相当于学生编号，每个班级的班主任为学生分配编号，效率要比学校教务处分配来的更加高效，管理起来更方便）</li>
<li>_primary_term：文档所在位置（相当于班级）</li>
<li>官文地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/optimistic-concurrency-control.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/optimistic-concurrency-control.html</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES 批量操作 bulk</title>
    <url>/2021/01/12/ES-%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C-bulk/</url>
    <content><![CDATA[<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p>bulk操作和以往的普通请求格式有区别。不要格式化json，不然就不在同一行了，这个需要注意。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">action</span>: &#123; metadata &#125;&#125;\\n</span><br><span class="line">&#123; request body        &#125;\\n</span><br><span class="line">&#123; <span class="attr">action</span>: &#123; metadata &#125;&#125;\\n</span><br><span class="line">&#123; request body        &#125;\\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ul>
<li><code>&#123; action: &#123; metadata &#125;&#125;</code>代表批量操作的类型，可以是新增、删除或修改</li>
<li><code>\\n</code>是每行结尾必须填写的一个规范，每一行包括最后一行都要写，用于es的解析</li>
<li><code>&#123; request body &#125;</code>是请求body，增加和修改操作需要，删除操作则不需要</li>
</ul>
<h1 id="批量操作的类型"><a href="#批量操作的类型" class="headerlink" title="批量操作的类型"></a>批量操作的类型</h1><p>action 必须是以下选项之一:</p>
<ul>
<li>create：如果文档不存在，那么就创建它。存在会报错。发生异常报错不会影响其他操作。</li>
<li>index：创建一个新文档或者替换一个现有的文档。</li>
<li>update：部分更新一个文档。</li>
<li>delete：删除一个文档。</li>
</ul>
<p>metadata 中需要指定要操作的文档的<code>_index 、 _type 和 _id</code>，<code>_index 、 _type</code>也可以在url中指定</p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><ul>
<li><p>create新增文档数据，在metadata中指定index以及type</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /_bulk</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;shop2&quot;</span>, <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2001&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2001&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2001&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;shop2&quot;</span>, <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2002&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2002&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2002&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;shop2&quot;</span>, <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2003&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2003&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2003&quot;</span>&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure></li>
<li><p>create创建已有id文档，在url中指定index和type</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /shop/_doc/_bulk</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2003&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2003&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2003&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2004&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2004&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2005&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2005&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2005&quot;</span>&#125;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure></li>
<li><p>index创建，已有文档id会被覆盖，不存在的id则新增</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /shop/_doc/_bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2004&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;index2004&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2007&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2007&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2007&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2008&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;2008&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name2008&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><ul>
<li><p>update跟新部分文档数据</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /shop/_doc/_bulk</span><br><span class="line">&#123;<span class="string">&quot;update&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;doc&quot;</span>:&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;3004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;update&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2007&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;doc&quot;</span>:&#123; <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;nameupdate&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul>
<li><p>delete批量删除</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /shop/_doc/_bulk</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2004&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2007&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="复合操作"><a href="#复合操作" class="headerlink" title="复合操作"></a>复合操作</h2><ul>
<li><p>综合批量各种操作</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">POST    /shop/_doc/_bulk</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;8001&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;8001&quot;</span>, <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;name8001&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;update&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2001&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;doc&quot;</span>:&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;20010&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2003&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2005&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p>官文：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/bulk.html">https://www.elastic.co/guide/cn/elasticsearch/guide/current/bulk.html</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES集群脑裂现象探讨</title>
    <url>/2021/01/13/ES%E9%9B%86%E7%BE%A4%E8%84%91%E8%A3%82%E7%8E%B0%E8%B1%A1%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<h1 id="什么是脑裂"><a href="#什么是脑裂" class="headerlink" title="什么是脑裂"></a>什么是脑裂</h1><p>如果发生网络中断或者服务器宕机，那么集群会有可能被划分为两个部分，各自有自己的master来管理，那么这就是脑裂。</p>
<h1 id="脑裂解决方案"><a href="#脑裂解决方案" class="headerlink" title="脑裂解决方案"></a>脑裂解决方案</h1><p>master主节点要经过多个master节点共同选举后才能成为新的主节点。就跟班级里选班长一样，并不是你1个人能决定的，需要班里半数以上的人决定。</p>
<p>解决实现原理：半数以上的节点同意选举，节点方可成为新的master。</p>
<ul>
<li>discovery.zen.minimum_master_nodes=(N/2)+1<ul>
<li>N为集群的中master节点的数量，也就是那些 <code>node.master=true</code> 设置的那些服务器节点总数。</li>
</ul>
</li>
</ul>
<h1 id="ES-7-X"><a href="#ES-7-X" class="headerlink" title="ES 7.X"></a>ES 7.X</h1><p>在最新版7.x中，<code>minimum_master_node</code>这个参数已经被移除了，这一块内容完全由es自身去管理，这样就避免了脑裂的问题，选举也会非常快。</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES集群配置</title>
    <url>/2021/01/13/ES%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h1><p>需要确认其它es节点中的data目录，一定要清空，不能有数据。</p>
<h1 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h1><p>修改<code>elasticsearch.yml</code>这个配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置集群名称，保证每个节点的名称相同，如此就能都处于一个集群之内了</span></span><br><span class="line">cluster.name: es-cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个节点的名称，必须不一样</span></span><br><span class="line">node.name: es-node1</span><br><span class="line"></span><br><span class="line"><span class="comment"># http端口（使用默认即可）</span></span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主节点，作用主要是用于来管理整个集群，负责创建或删除索引，管理其他非master节点（相当于企业老总）</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据节点，用于对文档数据的增删改查</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群列表</span></span><br><span class="line">discovery.seed_hosts: [<span class="string">&quot;192.168.1.184&quot;</span>, <span class="string">&quot;192.168.1.185&quot;</span>, <span class="string">&quot;192.168.1.186&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动的时候使用一个master节点</span></span><br><span class="line">cluster.initial_master_nodes: [<span class="string">&quot;es-node1&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>最后可以通过如下命令查看配置文件的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">more elasticsearch.yml | grep ^[^<span class="comment">#]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ES集群核心概念之集群、分片、副本</title>
    <url>/2021/02/18/ES%E9%9B%86%E7%BE%A4%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B9%8B%E9%9B%86%E7%BE%A4%E3%80%81%E5%88%86%E7%89%87%E3%80%81%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="ES集群核心概念"><a href="#ES集群核心概念" class="headerlink" title="ES集群核心概念"></a><strong>ES集群核心概念</strong></h1><h3 id="1）Cluster：集群"><a href="#1）Cluster：集群" class="headerlink" title="1）Cluster：集群"></a><strong>1）Cluster：集群</strong></h3><p>ES可以作为一个独立的单个搜索服务器。不过，为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群，集群内的节点的<code>cluster.name</code>相同。</p>
<h3 id="2）Node：节点"><a href="#2）Node：节点" class="headerlink" title="2）Node：节点"></a><strong>2）Node：节点</strong></h3><p>形成集群的每个服务器称为节点。</p>
<p>ES 为分配不同的任务，定义了以下几个节点角色：<code>Master</code>,<code>Data Node</code>,<code>Coordinating Node</code>,<code>Ingest Node</code></p>
<ul>
<li><p><strong>Master 节点</strong>：每个 ES 节点启动之前都会有个默认配置 <code>node.master:true</code> ,也就是说每个节点都有可能成为 Master 节点，这些节点被称作 <code>Master-eligible nodes</code> ，就是合格的有资格成为 Master 节点的节点。当然 <strong>Master 只能有一个</strong>，所以会通过选举的方法对这启动的节点选举，被选中的节点才会成为 Master 节点。 Master 节点主要是负责维护集群的状态，像所有节点的信息，所有的索引和它相关的 Mapping 关系，配置信息，分片的路由等。既然 Master 节点维护了这么重要的信息，玩意它挂了怎么办？挂了的话，将会对其他的有资格成为 Master 节点的节点重新选举出另一个 Master 节点，因此这就说明了其他 Master-eligible nodes 也会保存集群信息，但是只有 Master 节点有权限能够修改，试想如果其他节点也能修改的话，这将会导致数据不一致的问题。</p>
</li>
<li><p><strong>Data Node 节点</strong>：数据节点，这个节点主要负责数据的存储，在数据扩展上起到了至关重要的作用。也就是说读写数据都会找到相应的 Data Node 节点。</p>
</li>
<li><p><strong>Coordinating Node 节点</strong>：协调节点主要负责协调客户端的请求，将接收到的请求分发给合适的节点，并把结果汇集到一起。比如客户端请求查询某个索引的数据，协调节点将会把请求分发给保存相关的数据的 DataNode 节点，找到相应的分片，并把查询到的结果都汇集返回。并且每个节点都默认起到了 Coordinating Node 的职责。</p>
</li>
<li><p><strong>Ingest Node节点</strong>: Ingest node 专门对索引的文档做预处理,发生在对真实文档建立索引之前。在建立索引对文档预处理之前，先定义一个管道（pipeline），管道里指定了一系列的处理器。每个处理器能够把文档按照某种特定的方式转换。比如在管道里定义一个从某个文档中移除字段的处理器，紧接着一个重命名字段的处理器。集群的状态也会被存储到配置的管道内。定义一个管道，简单的在索引或者bulk request(一种批量请求方法)操作上定义 pipeline 参数,这样 ingest node 就会知道哪个管道在使用。这个节点在使用过程中用的也不多，所以大概了解一下就行。</p>
</li>
<li><p>文档读写原理</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es_8_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/es_8_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es_8_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/es_8_3.png"></p>
</li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li><strong>一个节点可以充当一个或多个角色，默认三个角色都有。</strong></li>
<li><strong>协调节点：一个节点只作为接收请求、转发请求到其他节点、汇总各个节点返回数据等功能的节点。就叫协调节点。</strong></li>
</ul>
<h3 id="3）Index：索引"><a href="#3）Index：索引" class="headerlink" title="3）Index：索引"></a><strong>3）Index：索引</strong></h3><p>在 ES 中, 索引是一组文档的集合。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘I/O操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录。</p>
<h3 id="4）Shard：分片"><a href="#4）Shard：分片" class="headerlink" title="4）Shard：分片"></a><strong>4）Shard：分片</strong></h3><p>当有大量的文档时，由于内存的限制、磁盘处理能力不足、无法足够快的响应客户端的请求等，一个节点可能不够。</p>
<p>这种情况下，数据可以分为较小的分片。每个分片放到不同的服务器上。当你查询的索引分布在多个分片上时，ES会把查询发送给每个相关的分片，并将结果组合在一起，而应用程序并不知道分片的存在。即：这个过程对用户来说是透明的。</p>
<p><strong>说明：</strong></p>
<ul>
<li><strong>创建索引的时候就确定好主分片的数量，除非重索引。</strong></li>
<li><strong>分片对应的存储实体是索引。</strong></li>
<li><strong>一个分片就是一个 Lucene 实例</strong></li>
</ul>
<h3 id="5）路由"><a href="#5）路由" class="headerlink" title="5）路由"></a><strong>5）路由</strong></h3><p>Elasticsearch 如何知道一个文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片 1 还是分片 2 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：<code>shard = hash(routing) % number_of_primary_shards</code>， <code>routing</code> 是一个可变值，唯一不可重复，默认是<code>文档的 _id</code> ，也可以设置成一个自定义的值。 <code>routing</code> 通过 <code>hash 函数</code>生成一个数字，然后这个数字再除以 <code>number_of_primary_shards</code> （主分片的数量）后得到余数 。这个分布在 0 到 number_of_primary_shards-1 之间的余数，就是我们所寻求的文档所在分片的位置。这就解释了为什么我们要在创建索引的时候就确定好主分片的数量 并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。所有的文档 API( get 、 index 、 delete 、 bulk 、 update 以及 mget )都接受一个叫做 routing 的路由参数 ，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档——例如所有属于同一个用户的文档——都被存储到同一个分片中。</p>
<h3 id="6）Replia：副本"><a href="#6）Replia：副本" class="headerlink" title="6）Replia：副本"></a><strong>6）Replia：副本</strong></h3><p>在创建某个索引之前，需要指定分配这个索引多少个分片？多少个副本？副本就这这个分片的备胎，当分片挂掉了，它的副本就会随时准备上位，因此副本也是个分片只不过不负责主要功能。</p>
<p>不仅仅如此，ES 如何能够提高数据吞吐量呢？增加副本个数就是个不错的选择，比如说读写分离，读数据的时候从副本上读，写数据的时候只用主分片去写。需要注意的是，主分片的个数实在建立索引之前要确定，建立完索引之后，是不能够进行修改的，除非重新建索引。因此在建索引之前，一定要合理的配置分片个数，副本个数的话后期是可以改动的。</p>
<p>为提高查询吞吐量或实现高可用性，可以使用分片副本。副本是一个分片的精确复制，每个分片可以有零个或多个副本。ES中可以有许多相同的分片，其中之一被选择更改索引操作，这种特殊的分片称为主分片。当主分片丢失时，如：该分片所在的数据不可用时，集群将副本提升为新的主分片。Elasticsearch 禁止同一个分片的主分片和副本分片在同一个节点上，所以如果是一个节点的集群是不能有副本的。</p>
<p>它在节点失败的情况下提供高可用性。由于这个原因，需要注意的是，副本分片永远不会分配到与主分片相同的节点上。</p>
<p><strong>如何设置副本</strong></p>
<p>启动 2 个 ES 节点，配置分片个数为 3，副本个数为 1（每个分片有一个副本）。如下图，蓝色的代表主分片，绿色的是副本，仔细一点不难发现，分片与其副本不在同一个节点内。这是非常合理的，因为副本本来就是主分片的备胎，当主分片节点挂了，另外一个节点的副本将会充当主分片，如果它们在同一个节点内，副本将发挥不到作用。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es_9_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/es_9_1.png"></p>
<p><strong>水平扩展原理</strong></p>
<p>单个节点的容量是有限的，如果后期两个节点的容量不能够支持三个分片，那么另外启动一个节点就可以了，ES 会自动的重新规划分片，如下图：可以看到 A3 节点已经被自动的分配到 Node3 节点里面了，另外副本 B1 从 Node2 移动到 Node3 节点，B3 分片从 Node1 节点被分配到 Node2 节点。这里想一下，如果再启动一个节点呢？是的，再启动一个节点将不会对主分片起到任何作用，因为主分片不可以修改，只有三个，但是副本可以修改，能够起到扩容的作用。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es_9_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/es_9_2.png"></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 6.4.3 整合SpringBoot - 配置文件</title>
    <url>/2021/01/13/Elasticsearch-6-4-3-%E6%95%B4%E5%90%88SpringBoot-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="创建工程，引入依赖"><a href="#创建工程，引入依赖" class="headerlink" title="创建工程，引入依赖"></a>创建工程，引入依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;version&gt;2.1.5.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml"></a>配置yml</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">es6</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.187</span><span class="string">:9300</span></span><br></pre></td></tr></table></figure>

<h1 id="版本协调"><a href="#版本协调" class="headerlink" title="版本协调"></a>版本协调</h1><p>目前springboot-data-elasticsearch中的es版本贴合为es-6.4.3，如此一来版本需要统一，把es进行降级。等springboot升级es版本后可以在对接最新版的7.4。</p>
<h1 id="Netty-issue-fix"><a href="#Netty-issue-fix" class="headerlink" title="Netty issue fix"></a>Netty issue fix</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决netty引起的issue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;es.set.netty.runtime.available.processors&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="附-elasticsearch6-4-3配置文件"><a href="#附-elasticsearch6-4-3配置文件" class="headerlink" title="附 elasticsearch6.4.3配置文件"></a>附 elasticsearch6.4.3配置文件</h1><p>elasticsearch.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">es6</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node0</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/local/elasticsearch-6.4.3/data</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/local/elasticsearch-6.4.3/logs</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="string">./elasticsearch</span></span><br></pre></td></tr></table></figure>

<p>如果出现如下错误：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es-17_1.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/es-17_1.jpg"></p>
<p>那么需要切换到root用户下去修改配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line">soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/es-17_2.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/es-17_2.jpg"></p>
<p>别忘记 <code>sysctl -p</code> 刷新一下</p>
<p>最后再次启动OK</p>
<h1 id="Don’t-forget"><a href="#Don’t-forget" class="headerlink" title="Don’t forget!"></a>Don’t forget!</h1><p>中文分词器也需要去配置一下噢别忘记！：）中文分词器的版本要记得使用6，而不是之前的7，版本一定要贴合噢~比如目前的所有版本都是统一为es-6.4.3，那么下载地址为：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v6.4.3">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v6.4.3</a></p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch 安装中文分词插件</title>
    <url>/2019/11/27/ElasticSearch-%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="1-安装-Elasticsearch"><a href="#1-安装-Elasticsearch" class="headerlink" title="1. 安装 Elasticsearch"></a>1. 安装 Elasticsearch</h1><p>略</p>
<h1 id="2-安装IK分词器插件"><a href="#2-安装IK分词器插件" class="headerlink" title="2. 安装IK分词器插件"></a>2. 安装IK分词器插件</h1><p>进入 Elasticsearch 安装目录</p>
<p>使用 <code>elasticsearch-plugin</code> 安装插件</p>
<pre><code>./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.1/elasticsearch-analysis-ik-7.1.1.zip
</code></pre>
<p>安装步骤截图如下</p>
<p><img src="https://img-blog.csdnimg.cn/20191105170349939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>Tips</strong>: 如果是集群，则每个 es 节点都要安装该插件</p>
<h1 id="3-确认安装插件成功"><a href="#3-确认安装插件成功" class="headerlink" title="3. 确认安装插件成功"></a>3. 确认安装插件成功</h1><pre><code>./bin/elasticsearch-plugin list
</code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191105170358335.png" alt="在这里插入图片描述"></p>
<h1 id="4-移除插件"><a href="#4-移除插件" class="headerlink" title="4. 移除插件"></a>4. 移除插件</h1><pre><code>./bin/elasticsearch-plugin remove analysis-ik
</code></pre>
<h1 id="5-自定义中文词库"><a href="#5-自定义中文词库" class="headerlink" title="5. 自定义中文词库"></a>5. 自定义中文词库</h1><h2 id="5-1-在-es-plugins-ik-config下，创建："><a href="#5-1-在-es-plugins-ik-config下，创建：" class="headerlink" title="5.1. 在{es}/plugins/ik/config下，创建："></a>5.1. 在{es}/plugins/ik/config下，创建：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim custom.dic</span><br></pre></td></tr></table></figure>

<h2 id="5-2-并且添加内容："><a href="#5-2-并且添加内容：" class="headerlink" title="5.2. 并且添加内容："></a>5.2. 并且添加内容：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">雨女无瓜</span><br><span class="line">骚年</span><br></pre></td></tr></table></figure>

<h2 id="5-3-配置自定义扩展词典"><a href="#5-3-配置自定义扩展词典" class="headerlink" title="5.3.配置自定义扩展词典"></a>5.3.配置自定义扩展词典</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;entry key=<span class="string">&quot;ext_dict&quot;</span>&gt;custom.dic&lt;/entry&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-4-重启"><a href="#5-4-重启" class="headerlink" title="5.4. 重启"></a>5.4. 重启</h2>]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
        <tag>插件</tag>
        <tag>中文分词</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 安全功能入门</title>
    <url>/2019/11/27/Elasticsearch-%E5%AE%89%E5%85%A8%E5%8A%9F%E8%83%BD%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>**<a href="https://www.elastic.co/cn/blog/security-for-elasticsearch-is-now-free">从 Elastic Stack 6.8 和 7.1 开始</a><strong>，Elasticsearch在默认分发包中免费提供多项安全功能，例如 <strong>TLS 加密通信</strong>、</strong>基于角色的访问控制 (RBAC)**，等等。在本文中，我将会演示如何启用这些功能来确保您的 Elasticsearch 集群的安全。</p>
<p>实际演示中，我将会在两台centos7上各自创建一个一节点 Elasticsearch 集群并进行安全设置。要实现这一点，我们首先需要在两个节点之间配置 TLS 通信。然后，我会为 Kibana 实例启用安全功能。再然后，我会在 Kibana 中配置基于角色的访问控制，从而确保用户只能看到他们获授权能够看到的内容。</p>
<p>尽管关于安全功能的运行过程还有很多内容，但现在我们仅会介绍入门所需知识。</p>
<h1 id="2-安装-Elasticsearch-和-Kibana"><a href="#2-安装-Elasticsearch-和-Kibana" class="headerlink" title="2. 安装 Elasticsearch 和 Kibana"></a>2. 安装 Elasticsearch 和 Kibana</h1><p>略</p>
<h1 id="3-传输层配置-TLS-和身份验证"><a href="#3-传输层配置-TLS-和身份验证" class="headerlink" title="3. 传输层配置 TLS 和身份验证"></a>3. 传输层配置 TLS 和身份验证</h1><h2 id="3-1-在-Elasticsearch-主节点上配置-TLS"><a href="#3-1-在-Elasticsearch-主节点上配置-TLS" class="headerlink" title="3.1. 在 Elasticsearch 主节点上配置 TLS"></a>3.1. 在 Elasticsearch 主节点上配置 TLS</h2><p>我要做的第一件事是生成证书，通过这些证书便能允许节点安全地通信。您可以使用企业 CA 来完成这一步骤，但是在此演示中，我将会使用一个名为 elasticsearch-certutil 的命令，通过这一命令，就无需担心证书通常带来的任何困扰，便能完成这一步。</p>
<pre><code>bin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass &quot;&quot;
</code></pre>
<p>如果您使用密码保护了节点证书的安全，请将密码添加到您的Elasticsearch密钥库中：</p>
<pre><code>bin/elasticsearch-certutil cert -out config/elastic-certificates.p12 -pass &quot;testpassword&quot;

bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password

bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password
</code></pre>
<p>接下来，使用您最常用的文本编辑器打开文件 <code>config/elasticsearch.yaml</code>。将下列代码行粘贴到文件末尾。</p>
<pre><code>xpack.security.enabled: true
xpack.security.transport.ssl.enabled: true
xpack.security.transport.ssl.verification_mode: certificate
xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
xpack.security.transport.ssl.truststore.path: elastic-certificates.p12
</code></pre>
<p>保存文件，现在我们便可以启动主节点了。运行命令 bin/elasticsearch。这一可执行文件必须保持运行，现在可以将此终端放在一边。</p>
<h2 id="3-2-Elasticsearch-集群密码"><a href="#3-2-Elasticsearch-集群密码" class="headerlink" title="3.2. Elasticsearch 集群密码"></a>3.2. Elasticsearch 集群密码</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.1/setup-passwords.html"><code>elasticsearch-setup-passwords</code> 官方文档</a></p>
<p>注意：<code>elasticsearch-setup-passwords</code> 这个命令只能使用一次。</p>
<pre><code># 生成随机密码
bin/elasticsearch-setup-passwords auto

# 手动定义密码（建议使用）
bin/elasticsearch-setup-passwords interactive
</code></pre>
<p>但是如果完全忘记了 Elasticsearch 的超级用户的密码，请看</p>
<p><a href="https://www.notion.so/a9cab5834874407681edc7b573730e0d">Elasticsearch 7.1 重置超级用户的密码</a></p>
<h2 id="3-3-在从节点上配置-TLS"><a href="#3-3-在从节点上配置-TLS" class="headerlink" title="3.3. 在从节点上配置 TLS"></a>3.3. 在从节点上配置 TLS</h2><p>复制证书文件，然后将 <strong>xpack.security.</strong>* 键设置为与主节点一模一样。然后通过运行 <code>bin/elasticsearch</code> 来启动节点。我们将看到其加入集群。而且，如果看一下主节点的终端窗口，我们会看到有一条消息显示已有一个节点加入集群。现在，我们的两节点集群便开始运行了。</p>
<h2 id="3-4-在-Kibana-中实现安全性"><a href="#3-4-在-Kibana-中实现安全性" class="headerlink" title="3.4. 在 Kibana 中实现安全性"></a>3.4. 在 Kibana 中实现安全性</h2><p>在 <code>kibana</code> 安装目录中编辑 <code>config/kibana.yml</code>到类似下面的代码行</p>
<pre><code>#elasticsearch.username: &quot;kibana&quot;
#elasticsearch.password: &quot;testpassword&quot;
</code></pre>
<p>对 <code>username</code> 和 <code>password</code> 字段取消注释，方法是删除代码行起始部分的 <code>#</code> 符号。将 “user” 更改为 “kibana”，然后将 “pass” 更改为 <code>setup-passwords</code> 命令告诉我们的任何 Kibana 密码。保存文件，然后我们便可通过运行 bin/kibana 启动 Kibana 了。</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 的 REST API 的使用介绍</title>
    <url>/2021/01/09/Elasticsearch-%E7%9A%84-REST-API-%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-集群健康"><a href="#1-集群健康" class="headerlink" title="1 集群健康"></a>1 集群健康</h1><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_cluster_health.html">集群健康 | Elasticsearch: 权威指南 | Elastic</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;_cluster&#x2F;health</span><br></pre></td></tr></table></figure>

<h1 id="2-索引相关"><a href="#2-索引相关" class="headerlink" title="2 索引相关"></a>2 索引相关</h1><h2 id="2-1-创建索引"><a href="#2-1-创建索引" class="headerlink" title="2.1 创建索引"></a>2.1 创建索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;index_test</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;2&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>number_of_shards : 分片数</li>
<li>number_of_replicas : 副本数</li>
</ul>
<h2 id="2-2-查看索引"><a href="#2-2-查看索引" class="headerlink" title="2.2 查看索引"></a>2.2 查看索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;indices?v</span><br></pre></td></tr></table></figure>

<h2 id="2-3-删除索引"><a href="#2-3-删除索引" class="headerlink" title="2.3 删除索引"></a>2.3 删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;index_test</span><br></pre></td></tr></table></figure>

<h1 id="3-mappings-相关"><a href="#3-mappings-相关" class="headerlink" title="3 mappings 相关"></a>3 mappings 相关</h1><h2 id="3-1-创建索引的同时创建mappings"><a href="#3-1-创建索引的同时创建mappings" class="headerlink" title="3.1 创建索引的同时创建mappings"></a>3.1 创建索引的同时创建mappings</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;index_test</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;number_of_shards&quot;: &quot;3&quot;,</span><br><span class="line">            &quot;number_of_replicas&quot;: &quot;0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;realname&quot;: &#123;</span><br><span class="line">            	&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            	&quot;index&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;username&quot;: &#123;</span><br><span class="line">            	&quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">            	&quot;index&quot;: false</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;id&quot;: &#123;</span><br><span class="line">        	    &quot;type&quot;: &quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">            	&quot;type&quot;: &quot;integer&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;nickname&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;money1&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;float&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;money2&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;double&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;sex&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;byte&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;score&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;short&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;is_teenager&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;boolean&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;birthday&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;date&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;relationship&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;object&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><p><strong>number_of_shards</strong> : 分片数</p>
</li>
<li><p><strong>number_of_replicas</strong> : 副本数</p>
</li>
<li><p><strong>index</strong>：默认true，设置为false的话，那么这个字段就不会被索引(例如密码等敏感信息)</p>
</li>
<li><p>某个属性一旦被建立，就不能修改了，但是可以新增额外属性</p>
</li>
<li><p>主要数据类型：</p>
<ul>
<li>text, keyword, <del>string</del></li>
<li>long, integer, short, byte</li>
<li>double, float</li>
<li>boolean</li>
<li>date</li>
<li>object</li>
<li>数组不能混，类型一致</li>
</ul>
</li>
<li><p><strong>text</strong>：文字类需要被分词被倒排索引的内容，比如<code>商品名称</code>，<code>商品详情</code>，<code>商品介绍</code>，使用text。</p>
</li>
<li><p><strong>keyword</strong>：不会被分词，不会被倒排索引，直接匹配搜索，比如<code>订单状态</code>，<code>用户qq</code>，<code>微信号</code>，<code>手机号</code>等，这些精确匹配，无需分词。</p>
</li>
</ul>
<h1 id="4-文档的基本操作"><a href="#4-文档的基本操作" class="headerlink" title="4 文档的基本操作"></a>4 文档的基本操作</h1><h2 id="4-1-添加文档"><a href="#4-1-添加文档" class="headerlink" title="4.1 添加文档"></a>4.1 添加文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;&#123;索引名&#125;&#x2F;_doc&#x2F;&#123;索引ID&#125;（是指索引在es中的id，而不是这条记录的id，比如记录的id从数据库来是1001，并不是这个。如果不写，则自动生成一个字符串。建议和数据id保持一致&gt; ）</span><br><span class="line"></span><br><span class="line">POST &#x2F;user&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;username&quot;: &quot;username1&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;password1&quot;,</span><br><span class="line">    &quot;create_date&quot;: &quot;2021-01-09&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查看索引</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;user</span><br></pre></td></tr></table></figure>

<p><strong>结果如下</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;user&quot; : &#123;</span><br><span class="line">    &quot;aliases&quot; : &#123; &#125;,</span><br><span class="line">    &quot;mappings&quot; : &#123;</span><br><span class="line">      &quot;properties&quot; : &#123;</span><br><span class="line">        &quot;create_date&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;date&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;id&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;password&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;username&quot; : &#123;</span><br><span class="line">          &quot;type&quot; : &quot;text&quot;,</span><br><span class="line">          &quot;fields&quot; : &#123;</span><br><span class="line">            &quot;keyword&quot; : &#123;</span><br><span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span><br><span class="line">              &quot;ignore_above&quot; : 256</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;creation_date&quot; : &quot;1610183188727&quot;,</span><br><span class="line">        &quot;number_of_shards&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;number_of_replicas&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;uuid&quot; : &quot;55w3gLZNTVyJnmdi6hTo5g&quot;,</span><br><span class="line">        &quot;version&quot; : &#123;</span><br><span class="line">          &quot;created&quot; : &quot;7100099&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;provided_name&quot; : &quot;user&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>如果索引没有手动建立mappings，那么当插入文档数据的时候，会根据文档类型自动设置属性类型。这个就是es的动态映射，帮我们在index索引库中去建立数据结构的相关配置信息。</li>
<li>“fields”: {“type”: “keyword”}对一个字段设置多种索引模式，使用text类型做全文检索，也可使用keyword类型做聚合和排序</li>
<li>“ignore_above” : 256设置字段索引和存储的长度最大值，超过则被忽略</li>
</ul>
<h2 id="4-2-修改文档"><a href="#4-2-修改文档" class="headerlink" title="4.2 修改文档"></a>4.2 修改文档</h2><h3 id="4-2-1-局部修改"><a href="#4-2-1-局部修改" class="headerlink" title="4.2.1 局部修改"></a>4.2.1 局部修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;user&#x2F;_doc&#x2F;1&#x2F;_update</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;update1&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-2-全局修改"><a href="#4-2-2-全局修改" class="headerlink" title="4.2.2 全局修改"></a>4.2.2 全局修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT &#x2F;user&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 1,</span><br><span class="line">    &quot;username&quot;: &quot;update2&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;password1&quot;,</span><br><span class="line">    &quot;create_date&quot;: &quot;2021-01-09&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时每次修改后，返回参数中的属性 <code>verison</code> 都会更改</p>
<h2 id="4-3-删除文档"><a href="#4-3-删除文档" class="headerlink" title="4.3 删除文档"></a>4.3 删除文档</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE &#x2F;user&#x2F;_doc&#x2F;1</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：文档删除不是立即删除，文档还是保存在磁盘上，索引增长越来越多，才会把那些曾经标识过删除的，进行清理，从磁盘上移出去。</p>
<h2 id="4-4-查询文档"><a href="#4-4-查询文档" class="headerlink" title="4.4 查询文档"></a>4.4 查询文档</h2><p>常规查询</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /index_demo/_doc/1</span><br><span class="line">GET /index_demo/_doc/_search</span><br></pre></td></tr></table></figure>

<h3 id="4-4-1-查询结果"><a href="#4-4-1-查询结果" class="headerlink" title="4.4.1 查询结果"></a>4.4.1 查询结果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;my_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_score&quot;</span>: 1.0,</span><br><span class="line">    <span class="string">&quot;_version&quot;</span>: 9,</span><br><span class="line">    <span class="string">&quot;_source&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: 1002,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;imooc-2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;imooc is fashion&quot;</span>,</span><br><span class="line">        <span class="string">&quot;create_date&quot;</span>: <span class="string">&quot;2019-12-25&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-2-元数据"><a href="#4-4-2-元数据" class="headerlink" title="4.4.2 元数据"></a>4.4.2 元数据</h3><ul>
<li>_index：文档数据所属那个索引，理解为数据库的某张表即可。</li>
<li>_type：文档数据属于哪个类型，新版本使用<code>_doc</code> 。</li>
<li>_id：文档数据的唯一标识，类似数据库中某张表的主键。可以自动生成或者手动指定。</li>
<li>_score：查询相关度，是否契合用户匹配，分数越高用户的搜索体验越高。</li>
<li>_version：版本号。</li>
<li>_source：文档数据，json格式。</li>
</ul>
<h3 id="4-4-3-定制结果集"><a href="#4-4-3-定制结果集" class="headerlink" title="4.4.3 定制结果集"></a>4.4.3 定制结果集</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET /index_demo/_doc/1?_source=id,name</span><br><span class="line">GET /index_demo/_doc/_search?_source=id,name</span><br></pre></td></tr></table></figure>

<h3 id="4-4-4-判断文档是否存在"><a href="#4-4-4-判断文档是否存在" class="headerlink" title="4.4.4 判断文档是否存在"></a>4.4.4 判断文档是否存在</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HEAD /index_demo/_doc/1</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>Flink核心概念</title>
    <url>/2021/04/08/Flink%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>运行 Flink 应用其实非常简单，但是在运行 Flink 应用之前，还是有必要了解 Flink 运行时的各个组件，因为这涉及到 Flink 应用的配置问题。下图 所示，这是用户用 DataStream API 写的一个数据处理程序。可以看到，在一个 DAG 图中不能被 Chain 在一起的 Operator 会被分隔到不同的 Task 中，也就是说 Task 是 Flink 中资源调度的最小单位。</p>
<span id="more"></span>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/2-20210408195606994.png" alt="图2"></p>
<p>Flink 实际运行时包括两类进程（下图所示）：</p>
<ul>
<li>JobManager（又称为 JobMaster）：协调 Task 的分布式执行，包括调度 Task、协调创建 Checkpoint 以及当 Job failover 时协调各个 Task 从 Checkpoint 恢复等。</li>
<li>TaskManager（又称为 Worker）：执行 Dataflow 中的 Tasks，包括内存 Buffer 的分配、Data Stream 的传递等。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/3-20210408195607193.png" alt="Flink Runtime 架构图"></p>
<p>Flink Runtime 架构图说明：</p>
<ul>
<li><p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p>
</li>
<li><p>JobManager</p>
<p>Master进程，负责Job的管理和资源的协调。包括任务调度，检查点管理，失败恢复等。</p>
<p>当然，对于集群HA模式，可以同时多个master进程，其中一个作为leader，其他作为standby。当leader失败时，会选出一个standby的master作为新的leader（通过zookeeper实现leader选举）。</p>
</li>
</ul>
<p>从下图中可以看出 Task Slot 是一个 TaskManager 中的最小资源分配单位，一个 TaskManager 中有多少个 Task Slot 就意味着能支持多少并发的 Task 处理。需要注意的是，一个 Task Slot 中可以执行多个 Operator，一般这些 Operator 是能被 Chain 在一起处理的。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/4-20210408195607317.png" alt="Process"></p>
<h1 id="1-Apache-Flink-的定义、架构及原理"><a href="#1-Apache-Flink-的定义、架构及原理" class="headerlink" title="1 Apache Flink 的定义、架构及原理"></a>1 Apache Flink 的定义、架构及原理</h1><p>Apache Flink 是一个分布式大数据处理引擎，可对有限数据流和无限数据流进行有状态或无状态的计算，能够部署在各种集群环境，对各种规模大小的数据进行快速计算。</p>
<p>了解Flink 应用开发需要先理解Flink 的Streams、State、Time 等基础处理语义以及Flink 兼顾灵活性和方便性的多层次API。</p>
<ul>
<li><strong>Streams</strong>：流，分为有限数据流与无限数据流，unbounded stream 是有始无终的数据流，即无限数据流；而bounded stream 是限定大小的有始有终的数据集合，即有限数据流，二者的区别在于无限数据流的数据会随时间的推演而持续增加，计算持续进行且不存在结束的状态，相对的有限数据流数据大小固定，计算最终会完成并处于结束的状态。</li>
<li><strong>State</strong>，状态是计算过程中的数据信息，在容错恢复和Checkpoint 中有重要的作用，流计算在本质上是Incremental Processing，因此需要不断查询保持状态；另外，为了确保Exactly- once 语义，需要数据能够写入到状态中；而持久化存储，能够保证在整个分布式系统运行失败或者挂掉的情况下做到Exactly- once，这是状态的另外一个价值。</li>
<li><strong>Time</strong>，分为Event time、Ingestion time、Processing time，Flink 的无限数据流是一个持续的过程，时间是我们判断业务状态是否滞后，数据处理是否及时的重要依据。</li>
<li><strong>API</strong>，API 通常分为三层，由上而下可分为SQL / Table API、DataStream API、ProcessFunction 三层，API 的表达能力及业务抽象能力都非常强大，但越接近SQL 层，表达能力会逐步减弱，抽象能力会增强，反之，ProcessFunction 层API 的表达能力非常强，可以进行多种灵活方便的操作，但抽象能力也相对越小。</li>
</ul>
<h1 id="2-Flink-架构"><a href="#2-Flink-架构" class="headerlink" title="2 Flink 架构"></a>2 Flink 架构</h1><p>在架构部分，主要分为以下四点：</p>
<p>第一，Flink 具备统一的框架处理有界和无界两种数据流的能力</p>
<p>第二， 部署灵活，Flink 底层支持多种资源调度器，包括Yarn、Kubernetes 等。Flink 自身带的Standalone 的调度器，在部署上也十分灵活。</p>
<p>第三， 极高的可伸缩性，可伸缩性对于分布式系统十分重要，阿里巴巴双11大屏采用Flink 处理海量数据，使用过程中测得Flink 峰值可达17 亿/秒。</p>
<p>第四， 极致的流式处理性能。Flink 相对于Storm 最大的特点是将状态语义完全抽象到框架中，支持本地状态读取，避免了大量网络IO，可以极大提升状态存取的性能。</p>
<h1 id="3-Flink-Operation"><a href="#3-Flink-Operation" class="headerlink" title="3 Flink Operation"></a>3 Flink Operation</h1><p>后面会专门讲解，此处简单分享Flink 关于运维及业务监控的内容：</p>
<ul>
<li>Flink具备7 X 24 小时高可用的SOA（面向服务架构），原因是在实现上Flink 提供了一致性的Checkpoint。Checkpoint是Flink 实现容错机制的核心，它周期性的记录计算过程中Operator 的状态，并生成快照持久化存储。当Flink 作业发生故障崩溃时，可以有选择的从Checkpoint 中恢复，保证了计算的一致性。</li>
<li>Flink本身提供监控、运维等功能或接口，并有内置的WebUI，对运行的作业提供DAG 图以及各种Metric 等，协助用户管理作业状态。</li>
</ul>
<h1 id="4-Flink-的应用场景"><a href="#4-Flink-的应用场景" class="headerlink" title="4 Flink 的应用场景"></a>4 Flink 的应用场景</h1><h2 id="4-1-Flink的应用场景：Data-Pipeline"><a href="#4-1-Flink的应用场景：Data-Pipeline" class="headerlink" title="4.1 Flink的应用场景：Data Pipeline"></a>4.1 Flink的应用场景：Data Pipeline</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/2-16.004.jpeg" alt="img"></p>
<p>Data Pipeline 的核心场景类似于数据搬运并在搬运的过程中进行部分数据清洗或者处理，而整个业务架构图的左边是Periodic ETL，它提供了流式ETL 或者实时ETL，能够订阅消息队列的消息并进行处理，清洗完成后实时写入到下游的Database或File system 中。场景举例：</p>
<h3 id="实时数仓"><a href="#实时数仓" class="headerlink" title="实时数仓"></a>实时数仓</h3><p>当下游要构建实时数仓时，上游则可能需要实时的Stream ETL。这个过程会进行实时清洗或扩展数据，清洗完成后写入到下游的实时数仓的整个链路中，可保证数据查询的时效性，形成实时数据采集、实时数据处理以及下游的实时Query。</p>
<h3 id="搜索引擎推荐"><a href="#搜索引擎推荐" class="headerlink" title="搜索引擎推荐"></a>搜索引擎推荐</h3><p>搜索引擎这块以淘宝为例，当卖家上线新商品时，后台会实时产生消息流，该消息流经过Flink 系统时会进行数据的处理、扩展。然后将处理及扩展后的数据生成实时索引，写入到搜索引擎中。这样当淘宝卖家上线新商品时，能在秒级或者分钟级实现搜索引擎的搜索。</p>
<h2 id="4-2-Flin-应用场景：Data-Analytics"><a href="#4-2-Flin-应用场景：Data-Analytics" class="headerlink" title="4.2 Flin 应用场景：Data Analytics"></a>4.2 Flin 应用场景：Data Analytics</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/3-.005.jpeg" alt="img"></p>
<p>Data Analytics，如图，左边是Batch Analytics，右边是Streaming Analytics。Batch Analytics 就是传统意义上使用类似于Map Reduce、Hive、Spark Batch 等，对作业进行分析、处理、生成离线报表；Streaming Analytics 使用流式分析引擎如Storm、Flink 实时处理分析数据，应用较多的场景如实时大屏、实时报表。</p>
<h2 id="4-3-Flink-应用场景：Data-Driven"><a href="#4-3-Flink-应用场景：Data-Driven" class="headerlink" title="4.3 Flink 应用场景：Data Driven"></a>4.3 Flink 应用场景：Data Driven</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/4-.006.jpeg" alt="img"></p>
<p>从某种程度上来说，所有的实时的数据处理或者是流式数据处理都是属于Data Driven，流计算本质上是Data Driven 计算。应用较多的如风控系统，当风控系统需要处理各种各样复杂的规则时，Data Driven 就会把处理的规则和逻辑写入到Datastream 的API 或者是ProcessFunction 的API 中，然后将逻辑抽象到整个Flink 引擎，当外面的数据流或者是事件进入就会触发相应的规则，这就是Data Driven 的原理。在触发某些规则后，Data Driven 会进行处理或者是进行预警，这些预警会发到下游产生业务通知，这是Data Driven 的应用场景，Data Driven 在应用上更多应用于复杂事件的处理。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://ververica.cn/developers/flink-basic-tutorial-1-basic-concept/">Apache Flink 零基础入门（一&amp;二）：基础概念解析</a></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 完全分布式安装与部署</title>
    <url>/2020/09/03/Hadoop-%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>[Toc]</p>
<h1 id="Hadoop-2-7-4-完全分布式安装与部署"><a href="#Hadoop-2-7-4-完全分布式安装与部署" class="headerlink" title="Hadoop 2.7.4 完全分布式安装与部署"></a>Hadoop 2.7.4 完全分布式安装与部署</h1><p>Hadoop官方指导传送门 <a href="http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/ClusterSetup.html">传送门</a></p>
<h1 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h1><p>服务器规划，提供 3 台服务器，OS 为<code>centos 7</code></p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
<th>预备分配服务</th>
</tr>
</thead>
<tbody><tr>
<td>centos-node1</td>
<td>192.168.99.101</td>
<td>DataNode,NodeManager,NameNode</td>
</tr>
<tr>
<td>centos-node2</td>
<td>192.168.99.102</td>
<td>DataNode,NodeManager,SecondaryNameNode</td>
</tr>
<tr>
<td>centos-node3</td>
<td>192.168.99.103</td>
<td>DataNode,NodeManager,ResourceManager,HistoryServer</td>
</tr>
</tbody></table>
<h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostnamectl set-hostname centos-node1</span></span><br></pre></td></tr></table></figure>

<h1 id="修改服务器静态IP"><a href="#修改服务器静态IP" class="headerlink" title="修改服务器静态IP"></a>修改服务器静态IP</h1><p>可以使用 <code>netstat -r</code> 来查询网关如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200911142643578.png" alt="image-20200911142643578"></p>
<p>然后将 dhcp 改为 静态IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/sysconfig/network-scripts/ifcfg-enp0s8</span></span><br></pre></td></tr></table></figure>

<p>完全配置如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TYPE&#x3D;&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD&#x3D;&quot;none&quot;</span><br><span class="line">BROWSER_ONLY&#x3D;&quot;no&quot;</span><br><span class="line">#BOOTPROTO&#x3D;&quot;dhcp&quot;</span><br><span class="line">BOOTPROTO&#x3D;&quot;static&quot;</span><br><span class="line">DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6INIT&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE&#x3D;&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL&#x3D;&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE&#x3D;&quot;stable-privacy&quot;</span><br><span class="line">NAME&#x3D;&quot;enp0s8&quot;</span><br><span class="line">UUID&#x3D;&quot;5b4ea2f4-a5af-4fac-8793-81692730dad9&quot;</span><br><span class="line">DEVICE&#x3D;&quot;enp0s8&quot;</span><br><span class="line">ONBOOT&#x3D;&quot;yes&quot;</span><br><span class="line"></span><br><span class="line"># 新增</span><br><span class="line">GATEWAY&#x3D;192.168.99.0  # 修改网关，虚拟机需要注意修改nat</span><br><span class="line">IPADDR&#x3D;192.168.99.101 # 分配IP地址</span><br><span class="line">NETMASK&#x3D;255.255.255.0 # 子网掩码</span><br><span class="line">DNS1&#x3D;223.5.5.5        # 使用阿里公共DNS1</span><br><span class="line">DNS2&#x3D;223.6.6.6        # 使用阿里公共DNS2</span><br></pre></td></tr></table></figure>



<h1 id="修改-hosts"><a href="#修改-hosts" class="headerlink" title="修改 hosts"></a>修改 hosts</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/hosts</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">192.168.99.101 centos-node1</span><br><span class="line">192.168.99.102 centos-node2</span><br><span class="line">192.168.99.103 centos-node3</span><br></pre></td></tr></table></figure>



<h1 id="安装-JDK8"><a href="#安装-JDK8" class="headerlink" title="安装 JDK8"></a>安装 JDK8</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">JAVA_HOME=/usr/local/java/</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>



<h1 id="增加-dhfs-用户"><a href="#增加-dhfs-用户" class="headerlink" title="增加 dhfs 用户"></a>增加 dhfs 用户</h1><p>通常，建议HDFS和YARN以单独的用户身份运行。</p>
<p>在大多数安装中，HDFS进程以 “hdfs” 执行。YARN通常使用 “yarn” 帐户</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ adduser hdfs</span><br><span class="line">$ passwd hdfs <span class="comment"># 修改密码</span></span><br></pre></td></tr></table></figure>

<p>为 <code>/etc/sudoers</code>添加如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200911170014063.png" alt="image-20200911170014063"></p>
<h1 id="设置-SSH-无密码登录"><a href="#设置-SSH-无密码登录" class="headerlink" title="设置 SSH 无密码登录"></a>设置 SSH 无密码登录</h1><ol>
<li><p>3 台服务器全部设置</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li>
<li><p>各自分配 ssh key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-copy-id centos-node1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-copy-id centos-node2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-copy-id centos-node3</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="安装部署-Hadoop"><a href="#安装部署-Hadoop" class="headerlink" title="安装部署 Hadoop"></a>安装部署 Hadoop</h1><h2 id="切换至-hdfs-用户"><a href="#切换至-hdfs-用户" class="headerlink" title="切换至 hdfs 用户"></a>切换至 hdfs 用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> su - hdfs</span></span><br></pre></td></tr></table></figure>

<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -O https://archive.apache.org/dist/hadoop/common/hadoop-2.7.4/hadoop-2.7.4.tar.gz</span></span><br></pre></td></tr></table></figure>

<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf hadoop-2.7.4.tar.gz  -C /opt/hadoop-2.7.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /opt/hadoop-2.7.4 /usr/<span class="built_in">local</span>/hadoop</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown -R hdfs /opt/hadoop-2.7.4</span></span><br></pre></td></tr></table></figure>

<h3 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改为</span></span><br><span class="line">JAVA_HOME=/usr/local/java/</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">HADOOP_HOME=/usr/local/hadoop</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line"></span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$HADOOP_HOME/bin</span><br><span class="line"></span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH HADOOP_HOME</span><br></pre></td></tr></table></figure>

<h2 id="修改-Hadoop-配置"><a href="#修改-Hadoop-配置" class="headerlink" title="修改 Hadoop 配置"></a>修改 Hadoop 配置</h2><p>这里我们进入<code>$HADOOP_HOME</code>文件夹开始操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir -p <span class="variable">$HADOOP_HOME</span>/hdfs/data</span><br><span class="line">$ mkdir -p <span class="variable">$HADOOP_HOME</span>/tmp</span><br></pre></td></tr></table></figure>

<h3 id="配置hadoop-env-sh"><a href="#配置hadoop-env-sh" class="headerlink" title="配置hadoop-env.sh"></a>配置hadoop-env.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure>

<p>增加 或 修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/</span><br></pre></td></tr></table></figure>

<h3 id="配置core-site-xml"><a href="#配置core-site-xml" class="headerlink" title="配置core-site.xml"></a>配置core-site.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>

<p>configuration配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://centos-node1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>HDFS的URI，文件系统://namenode标识:端口号<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>namenode上本地的hadoop临时文件夹<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>     </span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>     </span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>     </span><br><span class="line">    	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.zhaoshb.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">    	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>     </span><br><span class="line">    	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.zhaoshb.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span>     </span><br><span class="line">    	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<p><code>fs.defaultFS</code>为<code>NameNode</code>的地址。 </p>
<p><code>hadoop.tmp.dir</code>为<code>hadoop</code>临时目录的地址。默认情况下，<code>NameNode</code>和<code>DataNode</code>的数据文件都会存在这个目录下的对应子目录下。</p>
<h3 id="配置hdfs-site-xml"><a href="#配置hdfs-site-xml" class="headerlink" title="配置hdfs-site.xml"></a>配置hdfs-site.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node2:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node1:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<p><code>dfs.namenode.secondary.http-address</code>是指定<code>secondaryNameNode</code>的http访问地址和端口号，因为在规划中，我们将<code>centos-node2</code>规划为<code>SecondaryNameNode</code>服务器。</p>
<p><code>dfs.http.address</code>配置的是本机默认的<code>dfs</code>地址，有些服务器可以不用配置，我的试过了，必须加上，不然后续网页打不开。 </p>
<p><code>dfs.namenode.name.dir</code> 指定name文件夹。</p>
<p><code>dfs.datanode.data.dir</code> 指定data文件夹。</p>
<p> <code>dfs.datanode.data.dir</code> 指定副本数，一般小于服务器数，我们设置为<code>3</code></p>
<h3 id="配置-slaves"><a href="#配置-slaves" class="headerlink" title="配置 slaves"></a>配置 slaves</h3><p>在<code>hadoop2.x</code>中叫做<code>slaves</code>，在<code>3.x</code>版本中改名<code>workers</code>。 用来指定<code>HDFS</code>上有哪些<code>DataNode</code>节点，以及各个节点使用<code>ip地址</code>或者<code>主机名</code>，用换行分隔。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/slaves</span><br></pre></td></tr></table></figure>

<p>这里我们就使用主机名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos-node1</span><br><span class="line">centos-node2</span><br><span class="line">centos-node3</span><br></pre></td></tr></table></figure>

<h3 id="配置yarn-site-xml"><a href="#配置yarn-site-xml" class="headerlink" title="配置yarn-site.xml"></a>配置yarn-site.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>106800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /opt/hadoop-2.7.4/etc/hadoop,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/common/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/common/lib/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/hdfs/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/hdfs/lib/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/mapreduce/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/mapreduce/lib/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/yarn/*,</span><br><span class="line">            /opt/hadoop-2.7.4/share/hadoop/yarn/lib/*</span><br><span class="line">   		<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<p>按照规划使用<code>centos-node3</code>做为 <code>resourcemanager</code> 使用<code>yarn.log-aggregation-enable</code>开启日志聚合，<code>yarn.log-aggregation.retain-seconds</code>配置聚集的日志在HDFS上最多保存多长时间。</p>
<h3 id="配置mapred-site-xml"><a href="#配置mapred-site-xml" class="headerlink" title="配置mapred-site.xml"></a>配置mapred-site.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi <span class="variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node3:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node3:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<p><code>mapreduce.framework.name</code>设置<code>mapreduce</code>任务运行在yarn上。</p>
<p> <code>mapreduce.jobhistory.address</code>是设置<code>mapreduce</code>的历史服务器安装在<code>centos-node3</code>上。 </p>
<p><code>mapreduce.jobhistory.webapp.address</code>是设置历史服务器的web页面地址和端口号。 </p>
<p><code>yarn.app.mapreduce.am.env</code>,<code>mapreduce.map.env</code>,<code>mapreduce.reduce.env</code>需要设置为<code>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;</code>，否则在运行yarn程序的时候会出现jar包未找到的错误。</p>
<h3 id="修改防火墙"><a href="#修改防火墙" class="headerlink" title="修改防火墙"></a>修改防火墙</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前区域</span></span><br><span class="line">$ firewall-cmd --get-active-zones</span><br><span class="line"><span class="comment"># 新建一个自定义服务</span></span><br><span class="line">$ firewall-cmd --new-service=hadoop --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 4000/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 8088/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 50090/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 50070/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 10020/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hadoop --add-port 19888/tcp --permanent</span><br><span class="line"><span class="comment"># 不中断服务的重新加载</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --add-service=hadoop</span><br><span class="line"><span class="comment"># 将当前防火墙的规则永久保存；</span></span><br><span class="line">$ firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>



<h2 id="启动-Hadoop-集群"><a href="#启动-Hadoop-集群" class="headerlink" title="启动 Hadoop 集群"></a>启动 Hadoop 集群</h2><p>完成上述所有必要的配置后，将文件分发到所有服务器的<code>HADOOP_CONF_DIR</code>目录下<code>/usr/local/hadoop/etc/hadoop</code>。在所有计算机上，该目录应该是相同的目录。</p>
<p><strong>注意</strong>：启动和停止单个hdfs相关的进程使用的是”hadoop-daemon.sh”脚本，而启动和停止yarn使用的是”yarn-daemon.sh”脚本。</p>
<h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>要启动Hadoop集群，需要同时启动<code>HDFS</code>和<code>YARN</code>集群。 首次启动<code>HDFS</code>时，<strong>必须</strong>对其进行格式化。将新的分布式文件系统格式化为<code>hdfs</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/bin/hdfs namenode -format &lt;群集名称&gt;</span><br></pre></td></tr></table></figure>

<p>集群名称可以不填写，不出意外，执行完成后<code>$HADOOP_HOME/hdfs</code>中就有东西了。</p>
<h3 id="启动-HDFS"><a href="#启动-HDFS" class="headerlink" title="启动 HDFS"></a>启动 HDFS</h3><p>如果配置了<code>slaves</code>和<code>ssh互信</code>我们可以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>

<h3 id="启动-YARN"><a href="#启动-YARN" class="headerlink" title="启动 YARN"></a>启动 YARN</h3><p>如果配置了workers和ssh互信我们可以</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>

<h3 id="启动-ResourceManager"><a href="#启动-ResourceManager" class="headerlink" title="启动 ResourceManager"></a>启动 <strong>ResourceManager</strong></h3><p>规划在<code>centos-node3</code>上，因此我们在<code>centos-node3</code>上执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure>

<h3 id="启动-HistoryServer"><a href="#启动-HistoryServer" class="headerlink" title="启动 HistoryServer"></a>启动 HistoryServer</h3><p>规划在<code>centos-node3</code>上，因此我们在<code>centos-node3</code>上执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>

<p>ps: Hadoop 3.3.0 版本时用这个命令启动<code>mapred --daemon start</code></p>
<h3 id="查看HDFS-Web页面"><a href="#查看HDFS-Web页面" class="headerlink" title="查看HDFS Web页面"></a>查看HDFS Web页面</h3><p>位于<code>centos-node1</code>的<code>50070</code>端口:<a href="http://centos-node1:50070/">http://centos-node1:50070/</a></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200913152341967.png" alt="image-20200913152341967"></p>
<h3 id="查看YARN-Web-页面"><a href="#查看YARN-Web-页面" class="headerlink" title="查看YARN Web 页面"></a>查看YARN Web 页面</h3><p>位于<code>centos-node3</code>的<code>8088</code>端口:<a href="http://centos-node3:8088/">http://centos-node3:8088/</a></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200913152504612.png" alt="image-20200913152504612"></p>
<h3 id="查看历史WEB页面"><a href="#查看历史WEB页面" class="headerlink" title="查看历史WEB页面"></a>查看历史WEB页面</h3><p>位于<code>centos-node3</code>的<code>19888</code>端口:<a href="http://centos-node3:19888/">http://centos-node3:19888/</a></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200913152549303.png" alt="image-20200913152549303"></p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>为了测试我们使用 <code>wordcount</code> 来测试</p>
<ol>
<li><p>新建文件</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vi /opt/word.txt</span><br></pre></td></tr></table></figure></li>
<li><p>文本内容</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop mapreduce hive</span><br><span class="line">hbase spark storm</span><br><span class="line">sqoop hadoop hive</span><br><span class="line">spark hadoop</span><br></pre></td></tr></table></figure></li>
<li><p>新建<code>hadoop</code>里文件夹<code>demo</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hadoop fs -mkdir /demo</span><br></pre></td></tr></table></figure></li>
<li><p>文件写入</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -put /opt/word.txt /demo/word.txt</span><br></pre></td></tr></table></figure></li>
<li><p>执行输入到<code>hadoop</code>的<code>/output</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yarn jar <span class="variable">$HADOOP_HOME</span>/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar wordcount /demo/word.txt /output</span><br></pre></td></tr></table></figure></li>
<li><p>查看文件列表</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -ls /output</span><br></pre></td></tr></table></figure>

 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   3 root supergroup          0 2020-09-13 16:01 /output/_SUCCESS</span><br><span class="line">-rw-r--r--   3 root supergroup         60 2020-09-13 16:01 /output/part-r-00000</span><br></pre></td></tr></table></figure></li>
<li><p>查看文件中内容</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -cat /output/part-r-00000</span><br></pre></td></tr></table></figure>

 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hadoop  3</span><br><span class="line">hbase   1</span><br><span class="line">hive    2</span><br><span class="line">mapreduce       1</span><br><span class="line">spark   2</span><br><span class="line">sqoop   1</span><br><span class="line">storm   1</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop,大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive注释中文乱码</title>
    <url>/2020/11/02/Hive%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-Hive注释中文乱码"><a href="#1-Hive注释中文乱码" class="headerlink" title="1. Hive注释中文乱码"></a>1. Hive注释中文乱码</h1><p>创建表的时候，comment说明字段包含中文，表成功创建成功之后，中文说明显示乱码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> capacity_stats_live_access (</span><br><span class="line">  id <span class="type">bigint</span> comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  device_num <span class="type">varchar</span>(<span class="number">100</span>) COMMENT <span class="string">&#x27;设备号&#x27;</span>,</span><br><span class="line">  start_time <span class="type">timestamp</span> COMMENT <span class="string">&#x27;调阅开始时间&#x27;</span>,</span><br><span class="line">  finish_time <span class="type">timestamp</span> COMMENT <span class="string">&#x27;调阅结束时间&#x27;</span>,</span><br><span class="line">  duration <span class="type">int</span> COMMENT <span class="string">&#x27;耗时，单位秒&#x27;</span>,</span><br><span class="line">  response <span class="type">int</span> COMMENT <span class="string">&#x27;调用结果 1.成功 0.失败&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;直播调阅日志统计&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/hive%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E4%B9%B1%E7%A0%81.png" alt="Hive%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2044812d6495e341f4aec7117aac2ec503/Untitled.png"></p>
<p>这是因为在MySQL中的元数据出现乱码</p>
<h1 id="2-针对元数据库metastore中的表-分区-视图的编码设置"><a href="#2-针对元数据库metastore中的表-分区-视图的编码设置" class="headerlink" title="2. 针对元数据库metastore中的表,分区,视图的编码设置"></a>2. 针对元数据库metastore中的表,分区,视图的编码设置</h1><p>因为我们知道 metastore 支持数据库级别，表级别的字符集是 <code>latin1</code> 。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Untitled%201-20201102170449594.png" alt="Hive%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2044812d6495e341f4aec7117aac2ec503/Untitled%201.png"></p>
<p>那么我们只需要把相应注释的地方的字符集由 latin1 改成 utf-8，就可以了。用到注释的就三个地方，表、分区、视图。如下修改分为两个步骤：</p>
<h2 id="2-1-进入数据库-Metastore-中执行以下-5-条-SQL-语句"><a href="#2-1-进入数据库-Metastore-中执行以下-5-条-SQL-语句" class="headerlink" title="2.1. 进入数据库 Metastore 中执行以下 5 条 SQL 语句"></a>2.1. 进入数据库 Metastore 中执行以下 5 条 SQL 语句</h2><p>修改表字段注解和表注解 <code>COLUMNS_V2</code>，<code>TABLE_PARAMS</code> </p>
<p>修改分区字段注解 <code>PARTITION_PARAMS</code>，<code>PARTITION_KEYS</code> </p>
<p>修改索引注解<code>INDEX_PARAMS</code> </p>
<h2 id="2-2-修改-metastore-的连接-URL"><a href="#2-2-修改-metastore-的连接-URL" class="headerlink" title="2.2. 修改 metastore 的连接 URL"></a>2.2. 修改 metastore 的连接 URL</h2><p>修改hive-site.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://IP:3306/db_name?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-验证"><a href="#2-3-验证" class="headerlink" title="2.3. 验证"></a>2.3. 验证</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Untitled%202-20201102170449708.png" alt="Hive%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2044812d6495e341f4aec7117aac2ec503/Untitled%202.png"></p>
<p>发现注释还是乱码。</p>
<p>把表删除然后重新创建。效果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Untitled%203-20201102170449863.png" alt="Hive%E6%B3%A8%E9%87%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%2044812d6495e341f4aec7117aac2ec503/Untitled%203.png"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言学习</title>
    <url>/2021/08/30/Go-%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Go-语言的并发模型是怎么样的？"><a href="#Go-语言的并发模型是怎么样的？" class="headerlink" title="Go 语言的并发模型是怎么样的？"></a>Go 语言的并发模型是怎么样的？</h1><h2 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine ?"></a>Goroutine ?</h2><h1 id="Go语言的内存分配是怎么回事？"><a href="#Go语言的内存分配是怎么回事？" class="headerlink" title="Go语言的内存分配是怎么回事？"></a>Go语言的内存分配是怎么回事？</h1><h2 id="tcmalloc？"><a href="#tcmalloc？" class="headerlink" title="tcmalloc？"></a>tcmalloc？</h2><h1 id="Go语言的垃圾回收？"><a href="#Go语言的垃圾回收？" class="headerlink" title="Go语言的垃圾回收？"></a>Go语言的垃圾回收？</h1><h1 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h1>]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive集成HBase 详解</title>
    <url>/2020/11/11/Hive%E9%9B%86%E6%88%90HBase-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><h2 id="1-1-为什么要集成Hive和HBase"><a href="#1-1-为什么要集成Hive和HBase" class="headerlink" title="1.1 为什么要集成Hive和HBase?"></a>1.1 为什么要集成Hive和HBase?</h2><p>Kylin的三大依赖模块分别是数据源、构建引擎和存储引擎。默认这三者分别是Hive、MapReduce和HBase。但随着调研和使用的深入，渐渐有用户发现它们均存在不足之处。</p>
<p>比如 Hive 不应该用来进行实时的查询，因为它需要很长时间才可以返回结果。同时想要将数据实时的插入hive中则完全没有可操作性。</p>
<p>至于 HBase虽然非常适用于海量明细数据（十亿、百亿）的随机实时查询但只提供了简单的基于 Key 值的快速查询能力—，没法进行大量的条件查询，对于数据分析来说，不太友好。</p>
<p>在大数据架构中，Hive和HBase是协作关系，Hive方便地提供了Hive QL的接口来简化MapReduce的使用， 而HBase提供了低延迟的数据库访问。如果两者结合，可以利用MapReduce的优势针对HBase存储的大量内容进行离线的计算和分析。</p>
<h1 id="2-Hive集成HBase的原理"><a href="#2-Hive集成HBase的原理" class="headerlink" title="2 Hive集成HBase的原理"></a>2 Hive集成HBase的原理</h1><p>Hive 整合 hbase 为用户提供一种 sqlOnHbase 的方法。Hive 与 HBase 整合的实现是利用两者本身对外的 API 接口互相通信来完成的，其具体工作交由 Hive 的 lib 目录中的 <code>hive-hbase-handler-xxx.jar</code> 工具类来实现对 HBase 数据的读取。</p>
<p>通过HBaseStorageHandler，Hive可以获取到Hive表所对应的HBase表名，列簇和列，InputFormat、OutputFormat类，创建和删除HBase表等。</p>
<p>Hive访问HBase中HTable的数据，实质上是通过MR读取HBase的数据，而MR是使用HiveHBaseTableInputFormat完成对表的切分，获取RecordReader对象来读取数据的。</p>
<p>对HBase表的切分原则是一个Region切分成一个Split,即表中有多少个Regions,MR中就有多少个Map；</p>
<p>读取HBase表数据都是通过构建Scanner，对表进行全表扫描，如果有过滤条件，则转化为Filter。当过滤条件为rowkey时，则转化为对rowkey的过滤；Scanner通过RPC调用RegionServer的next()来获取数据。</p>
<h1 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3 使用场景"></a>3 使用场景</h1><h1 id="4-整合"><a href="#4-整合" class="headerlink" title="4 整合"></a>4 整合</h1><p>因为Hive与HBase集成是利用两者本身对外的API接口互相通信来完成的，其具体工作交由Hive的lib目录中的hive-hbase-handler-.jar工具类来实现。所以只需要将hive的 <code>hive-hbase-handler-.jar</code> 复制到<code>hbase/lib</code>中就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;hive&#x2F;lib&#x2F;hive-hbase-handler-2.3.7.jar &#x2F;usr&#x2F;local&#x2F;hbase&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>: 如果在hive整合hbase中，出现版本之类的问题，那么以hbase的版本为主，将hbase中的jar包覆盖hive的jar包。</p>
<h2 id="4-1-示例"><a href="#4-1-示例" class="headerlink" title="4.1 示例"></a>4.1 示例</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># Hive 语句</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_employee(id <span class="type">int</span>,name string) </span><br><span class="line">stored <span class="keyword">by</span> <span class="string">&#x27;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#x27;</span> </span><br><span class="line"><span class="keyword">with</span> serdeproperties(&quot;hbase.columns.mapping&quot;<span class="operator">=</span>&quot;:key,st1:name&quot;) </span><br><span class="line">tblproperties(&quot;hbase.table.name&quot;<span class="operator">=</span>&quot;t_employee&quot;,&quot;hbase.mapred.output.outputtable&quot; <span class="operator">=</span> &quot;t_employee&quot;);</span><br><span class="line"></span><br><span class="line"># hbase 语句</span><br><span class="line">list</span><br><span class="line"><span class="keyword">describe</span> <span class="string">&#x27;t_employee&#x27;</span></span><br><span class="line"># 返回结果</span><br><span class="line"><span class="keyword">Table</span> t_employee <span class="keyword">is</span> ENABLED</span><br><span class="line">t_employee</span><br><span class="line"><span class="keyword">COLUMN</span> FAMILIES DESCRIPTION</span><br><span class="line">&#123;NAME =&gt; &#x27;st1&#x27;, BLOOMFILTER =&gt; &#x27;ROW&#x27;, VERSIONS =&gt; &#x27;1&#x27;, IN_MEMORY =&gt; &#x27;false&#x27;, KEEP_DELETED_CELLS =&gt; &#x27;FALSE&#x27;, DATA_BLOCK_ENCODING =&gt; &#x27;NONE&#x27;, TTL =&gt; &#x27;FOREVER&#x27;, COMPRESSION =&gt; &#x27;NONE&#x27;</span><br><span class="line">, MIN_VERSIONS =&gt; &#x27;0&#x27;, BLOCKCACHE =&gt; &#x27;true&#x27;, BLOCKSIZE =&gt; &#x27;65536&#x27;, REPLICATION_SCOPE =&gt; &#x27;0&#x27;&#125;</span><br><span class="line"><span class="number">1</span> <span class="type">row</span>(s) <span class="keyword">in</span> <span class="number">0.0260</span> seconds</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><p>这里面出现了三个t_employee表名，第一个t_employee 是hive表中的名称，(id int,name string) 是hive表结构。</p>
<p>在tblproperties 语句中还出现了2个t_employee表，”hbase.table.name”定义的是在hbase中的表名 ，这个属性是可选的，仅当你想在Hive和Hbase中使用不同名字的表名时才需要填写，如果使用相同的名字则可以省略；</p>
<p>“hbase.mapred.output.outputtable”定义的第三个t_employee是存储数据表的名称，指定插入数据时写入的表，如果以后需要往该表插入数据就需要指定该值，这个可以不要，表数据就存储在第二个表中了 。</p>
</li>
<li><p>stored by ‘org.apache.hadoop.hive.hbase.HBaseStorageHandler’ ：是指定处理的存储器，就是hive-hbase-handler-*.jar包，要做hive和hbase的集成必须要加上这一句；</p>
</li>
<li><p>“hbase.columns.mapping” 是定义在hive表中的字段怎么与hbase的列族进行映射。</p>
<p>   例如:st1就是列族，name就是列。它们之间通过“：”连接。</p>
<p>   在hive中创建的t_employee表，包括两个字段（int型的id和string型的name），映射为hbase中的表t_employee，其中：key对应hbase的rowkey，value对应hbase的st1:name列。</p>
</li>
</ol>
<h2 id="4-2-字段映射"><a href="#4-2-字段映射" class="headerlink" title="4.2 字段映射"></a>4.2 字段映射</h2><p>控制HBase字段和Hive之间的映射有两种<code>SERDEPROPERTIES</code>:</p>
<ul>
<li>hbase.columns.mapping</li>
<li>hbase.table.default.storage.type，可以是string(default)或binary中的任一个，指定这个选项只有在Hive 0.9之后可使用.</li>
</ul>
<p>目前所支持的字段映射多少是有些难处理或存在约束的：</p>
<ul>
<li>对于每一个Hive字段，表的创建者必须用逗号分隔的字符串（<code>hbase.columns.mapping</code>）指定对应的入口（Hive表有n个字段，则该字符串得指定n个入口），在各个入口之间不能由空格（因为空格会被解析成字段名中的一部分）。</li>
<li>映射入口必须是以下两者之一：<strong>行健</strong>或**’列族名:[列名][#(binary|string)]’**<ul>
<li>如果没有指定类型，则直接使用<code>hbase.table.default.storage.type</code>的值</li>
<li>合法值的的前缀也是合法的（例如#b表示#binary）</li>
<li>如果指定某字段为binary，则对应的HBase中的单元格则应该是HBase的Bytes类的内容组成</li>
</ul>
</li>
<li>必须要有确切的行健映射</li>
<li>如果没有指定列名，则默认使用Hive的字段名作为HBase中的列名</li>
</ul>
<h2 id="4-3-数据同步测试"><a href="#4-3-数据同步测试" class="headerlink" title="4.3 数据同步测试"></a>4.3 数据同步测试</h2><p>进入hbase之后，在t_employee中添加两条数据 然后查询该表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">put <span class="string">&#x27;t_employee&#x27;</span>,<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;st1:name&#x27;</span>,<span class="string">&#x27;zhaoqian&#x27;</span></span><br><span class="line">put <span class="string">&#x27;t_employee&#x27;</span>,<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;st1:name&#x27;</span>,<span class="string">&#x27;sunli&#x27;</span></span><br><span class="line">scan <span class="string">&#x27;t_employee&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/hive_on_hbase.png" alt="Hive%E9%9B%86%E6%88%90HBase%20%E8%AF%A6%E8%A7%A3%20100037f2aa264a2c835a0530a373a912/Untitled.png"></p>
<p>然后切换到hive中查询该表</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/hive_on_hbase2.png" alt="Hive%E9%9B%86%E6%88%90HBase%20%E8%AF%A6%E8%A7%A3%20100037f2aa264a2c835a0530a373a912/Untitled%201.png"></p>
<p>至此，hive 集成hbase 就到此告一段落。</p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://zhuanlan.zhihu.com/p/74041611">如何整合hive和hbase</a></p>
<p><a href="https://ask.hellobi.com/blog/marsj/4002">Hive与HBase的集成实践</a></p>
<p>[[hbase-1-4-13-安装部署]]</p>
<p>[[hive2-3-7安装]]</p>
]]></content>
  </entry>
  <entry>
    <title>IO多路复用技术</title>
    <url>/2021/01/26/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h1><p>I/O是指网络I/O,多路指多个TCP连接(即socket或者channel）,复用指复用一个或几个线程。意思说一个或一组线程处理多个TCP连接。最大优势是减少系统开销小，不必创建过多的进程/线程，也不必维护这些进程/线程。　IO多路复用使用两个系统调用(select/poll/epoll和recvfrom)，blocking IO只调用了recvfrom；select/poll/epoll 核心是可以同时处理多个connection，而不是更快，所以连接数不高的话，性能不一定比多线程+阻塞IO好,多路复用模型中，每一个socket，设置为non-blocking,阻塞是被select这个函数block，而不是被socket阻塞的。</p>
<h2 id="select机制"><a href="#select机制" class="headerlink" title="select机制"></a><strong>select机制</strong></h2><p><strong>基本原理：</strong>　客户端操作服务器时就会产生这三种文件描述符(简称fd)：writefds(写)、readfds(读)、和exceptfds(异常)。select会阻塞住监视3类文件描述符，等有数据、可读、可写、出异常 或超时、就会返回；返回后通过遍历fdset整个数组来找到就绪的描述符fd，然后进行对应的IO操作。</p>
<p><strong>优点：</strong>几乎在所有的平台上支持，跨平台支持性好</p>
<p><strong>缺点：</strong>由于是采用轮询方式全盘扫描，会随着文件描述符FD数量增多而性能下降。　每次调用 select()，需要把 fd 集合从用户态拷贝到内核态，并进行遍历(消息传递都是从内核到用户空间)　默认单个进程打开的FD有限制是1024个，可修改宏定义，但是效率仍然慢。</p>
<h2 id="poll机制"><a href="#poll机制" class="headerlink" title="poll机制"></a><strong>poll机制</strong></h2><p>基本原理与select一致，也是轮询+遍历；唯一的区别就是poll没有最大文件描述符限制（使用链表的方式存储fd）。</p>
<h2 id="epoll机制"><a href="#epoll机制" class="headerlink" title="epoll机制"></a><strong>epoll机制</strong></h2><p><strong>基本原理：</strong>没有fd个数限制，用户态拷贝到内核态只需要一次，使用时间通知机制来触发。通过epoll_ctl注册fd，一旦fd就绪就会通过callback回调机制来激活对应fd，进行相关的io操作。epoll之所以高性能是得益于它的三个函数　1)epoll_create()系统启动时，在Linux内核里面申请一个B+树结构文件系统，返回epoll对象，也是一个fd　2)epoll_ctl() 每新建一个连接，都通过该函数操作epoll对象，在这个对象里面修改添加删除对应的链接fd, 绑定一个callback函数　3)epoll_wait() 轮训所有的callback集合，并完成对应的IO操作</p>
<p><strong>优点：</strong>没fd这个限制，所支持的FD上限是操作系统的最大文件句柄数，1G内存大概支持10万个句柄　效率提高，使用回调通知而不是轮询的方式，不会随着FD数目的增加效率下降　内核和用户空间mmap同一块内存实现(mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间)</p>
<p>例子：100万个连接，里面有1万个连接是活跃，我们可以对比 select、poll、epoll 的性能表现　select：不修改宏定义默认是1024,l则需要100w/1024=977个进程才可以支持 100万连接，会使得CPU性能特别的差。　poll： 没有最大文件描述符限制,100万个链接则需要100w个fd，遍历都响应不过来了，还有空间的拷贝消耗大量的资源。　epoll: 请求进来时就创建fd并绑定一个callback，主需要遍历1w个活跃连接的callback即可，即高效又不用内存拷贝。</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 调优</title>
    <url>/2021/02/23/JVM-%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-内存结构"><a href="#1-1-内存结构" class="headerlink" title="1.1 内存结构"></a>1.1 内存结构</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/JVM内存结构.png"></p>
<ul>
<li>线程共享：堆，方法区</li>
<li>线程隔离：虚拟机栈，本地方法栈，程序计数器</li>
</ul>
<span id="more"></span>

<h3 id="1-1-1-堆"><a href="#1-1-1-堆" class="headerlink" title="1.1.1 堆"></a>1.1.1 堆</h3><p>堆又做了细分如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-%E5%A0%86.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/JVM内存结构-堆.png"></p>
<p>JDK8 之前堆分为新生代、老年代和持久代（也叫永久代），其中新生代中又有伊甸园和存活区，而存活区又分为 “From survivor” 和 “To survivor”。</p>
<p>JDK8 之后，持久代被废弃，由元空间代替，而元空间并不是堆内存的一部分，元空间是本地内存。</p>
<h3 id="1-1-2-虚拟机栈"><a href="#1-1-2-虚拟机栈" class="headerlink" title="1.1.2 虚拟机栈"></a>1.1.2 虚拟机栈</h3><p>虚拟机栈是线程独享的，当创建一个现成的时候就会创建虚拟机栈。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/JVM内存结构-虚拟机栈.png"></p>
<ul>
<li>虚拟机栈由栈帧组成。</li>
<li>每一次方法调用都会创建一个栈帧，然后去压栈。</li>
<li>方法返回的时候代表栈帧的出栈操作。</li>
<li>栈帧里面包含一系列数据：局部变量表、操作数栈、指向运行时常量池的引用、方法返回地址和动态链接</li>
</ul>
<h3 id="1-1-2-本地方法栈"><a href="#1-1-2-本地方法栈" class="headerlink" title="1.1.2 本地方法栈"></a>1.1.2 本地方法栈</h3><p>虚拟机栈中放的是Java 方法，而本地方法栈放的是 native 方法（如 UnSafe类）。</p>
<h3 id="1-1-4-程序计数器"><a href="#1-1-4-程序计数器" class="headerlink" title="1.1.4 程序计数器"></a>1.1.4 程序计数器</h3><p>程序计数器用来记录各个字节码执行的字节码的地址，像分支、循环、跳转、异常、线程恢复等等操作都需依赖程序计数器。</p>
<ul>
<li><p><strong>为什么需要程序计数器?</strong></p>
<p>这是因为Java 是个多线程语言，当执行的线程数量超过CPU核心的时候，线程之间就会根据时间片争抢CPU资源。例如，某个线程它的任务还没有执行完成，CPU 就被其它线程抢走，如果之后又轮到这个线程执行任务，那么就得知道从哪里继续执行任务，所以会为每一个线程分配一个程序计数器，用来记录它下一条指令是什么等等。</p>
</li>
</ul>
<h3 id="1-1-5-方法区"><a href="#1-1-5-方法区" class="headerlink" title="1.1.5 方法区"></a>1.1.5 方法区</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84-%E6%96%B9%E6%B3%95%E5%8C%BA.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/JVM内存结构-方法区.png"></p>
<p>方法区主要包括 4 个部分：类信息、运行时常量池、字符串常量池和静态变量。</p>
<p>方法区主要存放的是虚拟机加载的类相关的信息。</p>
<p>从上图中可以看到好几种常量池：静态常量池、运行时常量池和字符串常量池。下面来分析一下这 3 种常量池的作用：</p>
<ul>
<li><p>静态常量池</p>
<p> 也叫 class 文件常量池，主要用来存放：</p>
<ul>
<li>字面量：例如，文本字符串、final 修饰的常量</li>
<li>符号引用：例如，类和接口的全限定名、字段的名称和描述符、方法的名称和描述符</li>
</ul>
</li>
<li><p>运行时常量池</p>
<p> 当类加载到内存中后，JVM 就会将静态常量池中的内容存放到运行时的常量池中。运行时常量池里面存储的主要是编译期间生成的字面量、符号引用等等。</p>
</li>
<li><p>字符串常量池</p>
<p> 也可以理解称运行时常量池分出来的一部分，类加载到内存的时候，字符串会存到字符串常量池里面</p>
</li>
</ul>
<p><strong>为什么要用元空间代替持久代？</strong></p>
<ul>
<li><p>一方面是 Orcale 把 Hotspot 虚拟机和 JRockit 虚拟机收购了，而 JRockit 虚拟机压根就没有永久代的概念。于是为了融合Hotspot 虚拟机和 JRockit 虚拟机，干脆就把它去掉了</p>
</li>
<li><p>另一方面是持久代在使用过程中还是很容易发生故障的</p>
<p>相信很多人都遇到过这种异常 <code>java.lang.OutOfMemoryError: PermGen</code>。在之前的版本中，字符串常量池存在于永久代中，在大量使用字符串的情况下，非常容易出现OOM的异常。此外，J<strong>VM加载的class的总数，方法的大小</strong>等都很难确定，因此对永久代大小的指定难以确定。太小的永久代容易导致永久代内存溢出，太大的永久代则容易导致虚拟机内存紧张。</p>
</li>
<li><p>元空间(Metaspace)，不再与堆连续，而是直接存在于本地内存中，也就是机器的内存。理论上机器内存有多大，元空间的野心就有多大。</p>
</li>
</ul>
<p>当然，还有很多更多深层次的原因，可以参考这篇博文<a href="https://www.cnblogs.com/duanxz/p/3520829.html">Metaspace 之一：Metaspace整体介绍（永久代被替换原因、元空间特点、元空间内存查看分析方法）</a></p>
<p><strong>示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Demo demo = <span class="keyword">new</span> Demo(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    demo.printName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码的内存分布大致是这样的：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210223220317252.png" alt="image-20210223220317252"></p>
<ol>
<li><p>在启动的时候首先将类加载到方法区，要加载两个类分别是 JVMTest1.class 和 Demo.class 。</p>
</li>
<li><p>当创建 Demo 对象的时候，首先会创建一个局部变量 demo 放在栈里面并指向到一个引用，而真正的 Demo 对象会存储到堆里面。</p>
</li>
<li><p>最后执行 printName 方法。</p>
</li>
</ol>
<h2 id="1-2-类加载机制"><a href="#1-2-类加载机制" class="headerlink" title="1.2 类加载机制"></a>1.2 类加载机制</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/类加载过程详解.png"></p>
<h3 id="1-2-1-编译"><a href="#1-2-1-编译" class="headerlink" title="1.2.1 编译"></a>1.2.1 编译</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac JVMTest1.java</span><br></pre></td></tr></table></figure>

<p>结果产生了两个 class 文件，如下所示：</p>
<p>JVMTest1.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fengxuechao.jvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JVMTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        Demo var1 = <span class="keyword">new</span> Demo(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        var1.printName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Demo.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.fengxuechao.jvm;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = var1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>反编译</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javap -v -p Demo &gt; a.txt</span><br></pre></td></tr></table></figure>

<p>反编译结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 描述信息</span><br><span class="line">Classfile &#x2F;Users&#x2F;fengxuechao&#x2F;WorkSpace&#x2F;IdeaProjects&#x2F;foodie&#x2F;jvm&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;fengxuechao&#x2F;jvm&#x2F;Demo.class</span><br><span class="line">  Last modified 2021-2-24; size 461 bytes</span><br><span class="line">  MD5 checksum 4232b9a7f5bc219b5c632adabd643a3d</span><br><span class="line">  Compiled from &quot;JVMTest1.java&quot;</span><br><span class="line">&#x2F;&#x2F; 描述信息</span><br><span class="line">class com.fengxuechao.jvm.Demo</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">&#x2F;&#x2F; 常量池</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 &#x3D; Methodref          #6.#17         &#x2F;&#x2F; java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 &#x3D; Fieldref           #5.#18         &#x2F;&#x2F; com&#x2F;fengxuechao&#x2F;jvm&#x2F;Demo.name:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">   #3 &#x3D; Fieldref           #19.#20        &#x2F;&#x2F; java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">   #4 &#x3D; Methodref          #21.#22        &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">   #5 &#x3D; Class              #23            &#x2F;&#x2F; com&#x2F;fengxuechao&#x2F;jvm&#x2F;Demo</span><br><span class="line">   #6 &#x3D; Class              #24            &#x2F;&#x2F; java&#x2F;lang&#x2F;Object</span><br><span class="line">   #7 &#x3D; Utf8               name</span><br><span class="line">   #8 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">   #9 &#x3D; Utf8               &lt;init&gt;</span><br><span class="line">  #10 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #11 &#x3D; Utf8               Code</span><br><span class="line">  #12 &#x3D; Utf8               LineNumberTable</span><br><span class="line">  #13 &#x3D; Utf8               printName</span><br><span class="line">  #14 &#x3D; Utf8               ()V</span><br><span class="line">  #15 &#x3D; Utf8               SourceFile</span><br><span class="line">  #16 &#x3D; Utf8               JVMTest1.java</span><br><span class="line">  #17 &#x3D; NameAndType        #9:#14         &#x2F;&#x2F; &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #18 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F; name:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">  #19 &#x3D; Class              #25            &#x2F;&#x2F; java&#x2F;lang&#x2F;System</span><br><span class="line">  #20 &#x3D; NameAndType        #26:#27        &#x2F;&#x2F; out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #21 &#x3D; Class              #28            &#x2F;&#x2F; java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #22 &#x3D; NameAndType        #29:#10        &#x2F;&#x2F; println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">  #23 &#x3D; Utf8               com&#x2F;fengxuechao&#x2F;jvm&#x2F;Demo</span><br><span class="line">  #24 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span><br><span class="line">  #25 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span><br><span class="line">  #26 &#x3D; Utf8               out</span><br><span class="line">  #27 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">  #28 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span><br><span class="line">  #29 &#x3D; Utf8               println</span><br><span class="line">&#x2F;&#x2F; 字段信息</span><br><span class="line">&#123;</span><br><span class="line">  private java.lang.String name;</span><br><span class="line">    descriptor: Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">    flags: ACC_PRIVATE</span><br><span class="line">&#x2F;&#x2F; 方法的信息</span><br><span class="line">  public com.fengxuechao.jvm.Demo(java.lang.String);</span><br><span class="line">    descriptor: (Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;2, locals&#x3D;2, args_size&#x3D;2</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: aload_1</span><br><span class="line">         6: putfield      #2                  &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 16: 0</span><br><span class="line">        line 17: 4</span><br><span class="line">        line 18: 9</span><br><span class="line"></span><br><span class="line">  public void printName();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span><br><span class="line">         0: getstatic     #3                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">         3: aload_0</span><br><span class="line">         4: getfield      #2                  &#x2F;&#x2F; Field name:Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">         7: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 21: 0</span><br><span class="line">        line 22: 10</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;JVMTest1.java&quot;</span><br></pre></td></tr></table></figure>

<p>指令参考：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a></p>
<h3 id="1-2-2-加载"><a href="#1-2-2-加载" class="headerlink" title="1.2.2 加载"></a>1.2.2 加载</h3><ul>
<li><p>JVM 是如何加载 class 文件的呢？</p>
<p>当一个类被创建实例或者被引用到的时候, 如果虚拟机发现之前没有加载过这个类，就会通过类加载器（也就是 ClassLoader ）把 class 文件加载到内存。</p>
<p>在加载的过程中主要做了 3 件事：</p>
<ol>
<li>读取类的二进制流。</li>
<li>把二进制流转为方法区数据结构，并存放到方法区。</li>
<li>最后，在 Java 堆中产生 java.lang.Class 对象。</li>
</ol>
<p>文档参考：<a href="https://www.cnblogs.com/williamjie/p/11167920.html">描述一下JVM加载class文件的原理机制</a></p>
<h3 id="1-2-3-链接"><a href="#1-2-3-链接" class="headerlink" title="1.2.3 链接"></a>1.2.3 链接</h3></li>
</ul>
<p>class 文件加载完成后，会进入“链接”这个步骤，链接这个步骤又可以分为“验证”、“准备”和“解析”。</p>
<h4 id="1-2-3-1-验证"><a href="#1-2-3-1-验证" class="headerlink" title="1.2.3.1 验证"></a>1.2.3.1 验证</h4><p>验证——顾名思义，就是验证 class 文件是不是符合规范，这里面包含了多个层次的验证，包括：</p>
<ul>
<li><p>文件格式的验证</p>
<ul>
<li>是否以 <code>0xCAFEBABE</code> 开头（可以用 16 进制编辑器打开查看）</li>
<li>版本好是否合理</li>
</ul>
</li>
<li><p>元数据验证</p>
<ul>
<li>是否有父类</li>
<li>是否继承了 final 类（final 类是不能被继承的，如果继承了，那就是有问题）</li>
<li>非抽象类是否实现了所有抽象方法（没有，那就是有问题）</li>
</ul>
</li>
<li><p>字节码验证</p>
<p>字节码的验证是非常复杂的，一个 class 文件能够通过字节码验证并不代表它没有问题，但是如果它没有通过字节码验证，那就一定有问题。</p>
<ul>
<li>运行检查</li>
<li>栈数据类型和操作码操作参数吻合（比如栈空间只有 2 字节，但其实却需要大于 2 字节，此时就认为这个字节码是有问题的）</li>
<li>跳转指令是不是指向合理的位置</li>
</ul>
</li>
<li><p>符号引用验证</p>
<ul>
<li>常量池中描述类是否存在</li>
<li>访问的方法或字段是否存在且有足够的权限</li>
</ul>
</li>
<li><p>如果事先已经确认代码是安全无误的可以在启动的时候用<code>-Xverify:none</code>关闭验证。</p>
</li>
</ul>
<h4 id="1-2-3-2-准备"><a href="#1-2-3-2-准备" class="headerlink" title="1.2.3.2 准备"></a>1.2.3.2 准备</h4><p>如果通过验证发现没有问题的话，就会进入准备环节。</p>
<p>准备环节的作用：</p>
<ul>
<li>为类的静态变量分配内存，初始化为系统的初始值<ul>
<li>final static 修饰的变量：直接赋值为用户定义的值，比如 <code>private final static int value =123</code>，直接赋值 123。</li>
<li>但是 <code>private static int value = 123</code>, 该阶段的值依然是 0。</li>
</ul>
</li>
</ul>
<h4 id="1-2-3-3-解析"><a href="#1-2-3-3-解析" class="headerlink" title="1.2.3.3 解析"></a>1.2.3.3 解析</h4><p>“准备”完成后，就可以进入解析了。</p>
<p>解析的作用：把符号引用转换成直接引用。</p>
<ul>
<li><p>什么是符号引用？</p>
<p>符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。例如，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。符号引用与虚拟机的内存布局无关，引用的目标并不一定加载到内存中。在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210224212914755.png" alt="image-20210224212914755"></p>
</li>
<li><p>什么是直接引用？</p>
<p>可以是</p>
<ul>
<li>直接指向目标的指针（比如，指向“类型”【Class对象】、类变量、类方法的直接引用可能是指向方法区的指针）</li>
<li>相对偏移量（比如，指向实例变量、实例方法的直接引用都是偏移量）</li>
<li>一个能间接定位到目标的句柄</li>
</ul>
<p>直接引用是和虚拟机的布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经被加载入内存中了。</p>
<h4 id="1-2-4-初始化"><a href="#1-2-4-初始化" class="headerlink" title="1.2.4 初始化"></a>1.2.4 初始化</h4></li>
</ul>
<p>解析完成之后，就会进入初始化这个阶段。在这个阶段，JVM首先会执行 <clinit> 方法，clinit 方法由编译器自动收集里面的所有静态变量赋值动作和静态语句块合并而成，也叫类构造器方法</p>
<ul>
<li>初始化的顺序和源文件中的顺序一致</li>
<li>子类的 <clinit> 被调用前，会先调用父类的 <clinit></li>
<li>JVM 会保证 clinit 方法的线程安全性</li>
</ul>
<p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JVMTest2 &#123;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;JVMTest2 静态块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;JVMTest2 构造块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public JVMTest2() &#123;</span><br><span class="line">        System.out.println(&quot;JVMTest2 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;JVMTest2 main() 方法&quot;);</span><br><span class="line">        new JVMTest2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JVMTest2 静态块</span><br><span class="line">JVMTest2 main() 方法</span><br><span class="line">JVMTest2 构造块</span><br><span class="line">JVMTest2 构造方法</span><br></pre></td></tr></table></figure>

<p>示例2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JVMTest3 静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JVMTest3 构造块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JVMTest3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JVMTest3 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JVMTest3 main() 方法&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Super 静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Super 构造块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Super</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Super 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sub 静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sub 构造块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sub 构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JVMTest3 静态块</span><br><span class="line">JVMTest3 main() 方法</span><br><span class="line">Super 静态块</span><br><span class="line">Sub 静态块</span><br><span class="line">Super 构造块</span><br><span class="line">Super 构造方法</span><br><span class="line">Sub 构造块</span><br><span class="line">Sub 构造方法</span><br></pre></td></tr></table></figure>

<h3 id="1-2-5-使用"><a href="#1-2-5-使用" class="headerlink" title="1.2.5 使用"></a>1.2.5 使用</h3><p>初始化完成之后就可以使用这个类了。</p>
<h3 id="1-2-6-卸载"><a href="#1-2-6-卸载" class="headerlink" title="1.2.6 卸载"></a>1.2.6 卸载</h3><p>但不使用这个类的话，可以把它卸载掉。</p>
<h3 id="1-2-7-小节"><a href="#1-2-7-小节" class="headerlink" title="1.2.7 小节"></a>1.2.7 小节</h3><p>章节 1.2 的图表示的是一般的类加载流程，而事实上类加载的时候并不一定完全按照这个流程走。例如，解析不一定在初始化之前，也有可能在初始化之后去做。</p>
<h2 id="1-3-编译器优化"><a href="#1-3-编译器优化" class="headerlink" title="1.3 编译器优化"></a>1.3 编译器优化</h2><h3 id="1-3-1-字节码是如何运行的？"><a href="#1-3-1-字节码是如何运行的？" class="headerlink" title="1.3.1 字节码是如何运行的？"></a>1.3.1 字节码是如何运行的？</h3><ul>
<li><p>解释执行：由解释器一行一行翻译执行</p>
<ul>
<li>优势在于没有编译的等待时间</li>
<li>性能相对差一些</li>
</ul>
</li>
<li><p>编译执行：把字节码编译成机器码，直接执行机器码</p>
<ul>
<li>运行效率会高很多，一般认为比解释执行快一个数量级</li>
<li>带来了额外的开销</li>
</ul>
</li>
</ul>
<p>那么如何查看自己的java是解释执行还是编译执行呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_251</span>-b08)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.251</span>-b08, mixed mode)</span></span></span><br></pre></td></tr></table></figure>

<p>mixed mode 代表混合执行，部分解释执行、部分编译执行。</p>
<ul>
<li><p>-Xint:设置JVM的执行模式为解释执行模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -Xint -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_251</span>-b08)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.251</span>-b08, interpreted mode)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>-Xcomp:JVM优先以编译模式运行，不能编译的，以解释模式运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ java -Xcomp -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_251&quot;</span></span><br><span class="line">Java(TM) <span class="function">SE Runtime <span class="title">Environment</span> <span class="params">(build <span class="number">1.8</span><span class="number">.0_251</span>-b08)</span></span></span><br><span class="line"><span class="function">Java <span class="title">HotSpot</span><span class="params">(TM)</span> 64-Bit Server <span class="title">VM</span> <span class="params">(build <span class="number">25.251</span>-b08, compiled mode)</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>-Xmixed:以混合模式运行</p>
</li>
</ul>
<p>一般情况下，我们的代码一开始一般由解释器解释执行。但是当虚拟机发现某个方法或代码块的运行特别频繁的时候，就会认为这些代码是<strong>热点代码（如何定位？）</strong>。为了提高热点代码的执行效率，会用即使编译器（也就是JIT）把这些热点代码编译城与本地平台相关的机器码，<strong>并进行各层次的优化（操作系统的不同、CPU架构的不同）</strong></p>
<h3 id="1-3-2-Hotspot-的即时编译器-C1"><a href="#1-3-2-Hotspot-的即时编译器-C1" class="headerlink" title="1.3.2 Hotspot 的即时编译器 C1"></a>1.3.2 Hotspot 的即时编译器 C1</h3><ul>
<li>是一个简单快速的编译器</li>
<li>主要关注局部性的优化</li>
<li>适用于执行时间较短或启动性能有要求的程序。例如。GUI应用对界面启动速度就有一定要求。、</li>
<li>也被称为 Client Compiler</li>
</ul>
<h3 id="1-3-3-Htospot-的即时编译器-C2"><a href="#1-3-3-Htospot-的即时编译器-C2" class="headerlink" title="1.3.3 Htospot 的即时编译器 C2"></a>1.3.3 Htospot 的即时编译器 C2</h3><ul>
<li>是为长期运行的服务器端应用程序做性能调优的编译器</li>
<li>适用于执行时间较长或对峰值性能有要求的程序</li>
<li>也被称为是 Server Compiler</li>
</ul>
<h3 id="1-3-4-分层编译"><a href="#1-3-4-分层编译" class="headerlink" title="1.3.4 分层编译"></a>1.3.4 分层编译</h3><p>从JDK7开始，正式引入了分层编译的概念，可以细分为 5 种编译级别：</p>
<ul>
<li><ol start="0">
<li>解释执行</li>
</ol>
</li>
<li><ol>
<li>简单 C1 编译：会用 C1 编译器进行一些简单的优化，不开启 Profiling（JVM性能监控）</li>
</ol>
</li>
<li><ol start="2">
<li>受限的 C1 编译：仅执行带<strong>方法调用次数</strong>以及<strong>循环回边执行次数</strong>Profiling的 C1 编译</li>
</ol>
</li>
<li><ol start="3">
<li>完全C1编译：会执行带有所有Profiling的C1代码</li>
</ol>
</li>
<li><ol start="4">
<li>C2 编译：使用C2编译器进行优化，该级别会启用一些编译耗时较长的优化，一些情况下会根据性能监控信息进行一些非常激进的性能优化</li>
</ol>
</li>
</ul>
<p>级别越高，应用启动越慢，优化的开销越高，峰值性能也越高。</p>
<h3 id="1-3-5-分层编译-JVM参数配置示例"><a href="#1-3-5-分层编译-JVM参数配置示例" class="headerlink" title="1.3.5 分层编译- JVM参数配置示例"></a>1.3.5 分层编译- JVM参数配置示例</h3><ul>
<li>只想开启 C2：-XX:-TieredCompilation（禁用中间编译层（123层））</li>
<li>只想开启 C1：-XX:+TieredCompilation -XX:TieredStopAtLevel=1</li>
</ul>
<h3 id="1-3-6-如何找到热点代码？思路？"><a href="#1-3-6-如何找到热点代码？思路？" class="headerlink" title="1.3.6 如何找到热点代码？思路？"></a>1.3.6 如何找到热点代码？思路？</h3><ul>
<li><p>基于采样的热点探测</p>
<p>周期性检查各个线程的栈顶，如果发现某一些方法总是出现在各个栈顶，那就说明是热点代码。</p>
</li>
<li><p>基于计数器的热点探测</p>
<p>大致思路是为每一个方法甚至是代码块建立计数器，然后统计执行的次数，如果超过一定的阈值，那就说明它是热点代码。Hotspot虚拟机采用的就是基于计数器的热点探测。</p>
</li>
</ul>
<h3 id="1-3-7-Hotspot-内置的两类计数器"><a href="#1-3-7-Hotspot-内置的两类计数器" class="headerlink" title="1.3.7 Hotspot 内置的两类计数器"></a>1.3.7 Hotspot 内置的两类计数器</h3><ul>
<li><p>方法调用计数器（Invocation Counter）</p>
<p>用于统计方法被调用的次数，在不开启分层编译的情况下，在 C1 编译器下的默认阈值是 1500 次，在 C2 模式下是 10000次。也可以哦那个 -XX:CompileThreshold=X 指定阈值</p>
</li>
<li><p>回边计数器（Back Edge Counter）</p>
<ul>
<li>用于统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。在不开启分层编译的情况下，C1 编译器心爱的默认阈值 13995，C2 默认为 10700，可使用 -XX:OnStackReplacePercentage=X指定阈值</li>
<li>建立回边计数器的主要目的是为了触发 OSR （OnStackReplacement）编译，参考文档（<a href="https://www.zhihu.com/question/45910849/answer/100636125">https://www.zhihu.com/question/45910849/answer/100636125</a>）</li>
</ul>
</li>
<li><p>当开启分层编译时，JVM会根据当前编译的方法数以及编译线程数来动态调整阈值，-XX:CompileThreshold、-XX:OnStackReplacePercentage 都会失效。</p>
</li>
</ul>
<h3 id="1-3-8-方法调用计数器流程"><a href="#1-3-8-方法调用计数器流程" class="headerlink" title="1.3.8 方法调用计数器流程"></a>1.3.8 方法调用计数器流程</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210809233815237.png" alt="image-20210809233815237"></p>
<p>如果不做任何设置，方法调用次数统计的并不是方法被调用的绝对次数，而是一个相对的执行频，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数荏苒不足以让它提交给及时编译器编译，那这个方法的调用计数器就会减少一半，这个过程称为方法调用计数器热度的衰减，而这段时间就称为此方法统计的半衰周期。进行热度衰减的动作是在虚拟机进行垃圾手机是顺便进行的，可以使用虚拟机参数-XX:-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。另外，可以使用-XX:CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</p>
<h3 id="1-3-9-回边计数器流程"><a href="#1-3-9-回边计数器流程" class="headerlink" title="1.3.9 回边计数器流程"></a>1.3.9 回边计数器流程</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210809234920524.png" alt="image-20210809234920524"></p>
<h2 id="1-4-垃圾收集算法"><a href="#1-4-垃圾收集算法" class="headerlink" title="1.4 垃圾收集算法"></a>1.4 垃圾收集算法</h2><h2 id="1-5-垃圾收集器"><a href="#1-5-垃圾收集器" class="headerlink" title="1.5 垃圾收集器"></a>1.5 垃圾收集器</h2><h1 id="2-工具"><a href="#2-工具" class="headerlink" title="2 工具"></a>2 工具</h1><h1 id="3-实战"><a href="#3-实战" class="headerlink" title="3 实战"></a>3 实战</h1><h1 id="4-参考资源"><a href="#4-参考资源" class="headerlink" title="4 参考资源"></a>4 参考资源</h1><p><a href="https://www.cnblogs.com/andy-zhou/p/5327288.html">JVM调优总结</a></p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 数据类型和存储格式</title>
    <url>/2020/09/24/Hive-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p><a href="http://bigdata-star.com/archives/1013">【Hive教程】（二）Hive数据类型和存储格式</a></p>
<p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types">Apache Software Foundation</a></p>
<p><a href="https://blog.csdn.net/sl1992/article/details/53894481?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">Hive复合数据类型array,map,struct的使用_Life is for sharing的博客-CSDN博客</a></p>
<h1 id="HIVE数据类型"><a href="#HIVE数据类型" class="headerlink" title="HIVE数据类型"></a><strong>HIVE数据类型</strong></h1><p>毕竟HIVE穿着SQL的外壳，肯定支持诸如Mysql这种RDBMS的数据类型，如<code>int</code>,<code>varchar</code>,但是它还具有非常多自有的数据类型，包括复杂的数据类型（数组，Map等）也是支持的！</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Untitled.png" alt="Hive 支持的数据类型 - 摘自官网wiki"></p>
<p>数字类型，日期类型，String类型，Boolean类型我们都是比较熟悉的，也比较简单，就不讲解了。演示一下复杂数据类型：</p>
<h2 id="arrays"><a href="#arrays" class="headerlink" title="arrays"></a>arrays</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (hive)<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> arraytest (id <span class="type">int</span>,course <span class="keyword">array</span><span class="operator">&lt;</span>string<span class="operator">&gt;</span>)</span><br><span class="line">           <span class="operator">&gt;</span> <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span><span class="string">&#x27;,&#x27;</span></span><br><span class="line">           <span class="operator">&gt;</span> collection items terminated <span class="keyword">by</span><span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>row format delimited fields terminated by&#39;,&#39;</code> 是指定列与列之间的分隔符,此处为”,”</li>
<li><code>collection items terminated by&#39;:&#39;</code> 是指定集合内元素之间的分隔符,此处为”：”</li>
</ul>
<p>因此我们要导入到hive中的数据应该是形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,math:chinese</span><br><span class="line">2,english:history</span><br></pre></td></tr></table></figure>

<p>数据加载到数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/Users/fengxuechao/WorkSpace/software/hive_data/arraytest.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> arraytest;</span><br><span class="line">Loading data <span class="keyword">to</span> <span class="keyword">table</span> default.arraytest</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.963</span> seconds</span><br></pre></td></tr></table></figure>

<p>查询所有数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> arraytest;</span><br><span class="line">OK</span><br><span class="line"><span class="number">1</span>	[&quot;math&quot;,&quot;chinese&quot;]</span><br><span class="line"><span class="number">2</span>	[&quot;english&quot;,&quot;history&quot;]</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">1.297</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<p>查询数组指定索引的所有数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> course[<span class="number">1</span>] <span class="keyword">from</span> arraytest;</span><br><span class="line">OK</span><br><span class="line">chinese</span><br><span class="line">history</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.364</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<h2 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h2><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> maptest(name string,score map<span class="operator">&lt;</span>string,<span class="type">float</span><span class="operator">&gt;</span>)</span><br><span class="line">    <span class="operator">&gt;</span> <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span><span class="string">&#x27;,&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span> collection items terminated <span class="keyword">by</span> <span class="string">&#x27;|&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span> map keys terminated <span class="keyword">by</span><span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.046</span> seconds</span><br></pre></td></tr></table></figure>

<p>数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;小明&#x27;</span>,math:<span class="number">96</span><span class="operator">|</span>chinese:<span class="number">95</span></span><br><span class="line"><span class="string">&#x27;小红&#x27;</span>,math:<span class="number">80</span><span class="operator">|</span>chinese:<span class="number">99</span></span><br></pre></td></tr></table></figure>

<p>数据加载到数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/Users/fengxuechao/WorkSpace/software/hive_data/maptest.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> maptest;</span><br><span class="line">Loading data <span class="keyword">to</span> <span class="keyword">table</span> default.maptest</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.293</span> seconds</span><br></pre></td></tr></table></figure>

<p>查询所有数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> maptest;</span><br><span class="line">OK</span><br><span class="line">&#x27;小明&#x27;	&#123;&quot;math&quot;:96.0,&quot;chinese&quot;:95.5&#125;</span><br><span class="line">&#x27;小红&#x27;	&#123;&quot;math&quot;:80.0,&quot;chinese&quot;:99.0&#125;</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.1</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<p>查询数组指定key的所有数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> name,score[<span class="string">&#x27;math&#x27;</span>] <span class="keyword">from</span> maptest;</span><br><span class="line">OK</span><br><span class="line"><span class="string">&#x27;小明&#x27;</span>	<span class="number">96.0</span></span><br><span class="line"><span class="string">&#x27;小红&#x27;</span>	<span class="number">80.0</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.112</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<h2 id="structs"><a href="#structs" class="headerlink" title="structs"></a>structs</h2><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> struct_test(name string,course struct<span class="operator">&lt;</span>course:string,score:<span class="type">int</span><span class="operator">&gt;</span>)</span><br><span class="line">    <span class="operator">&gt;</span> <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">    <span class="operator">&gt;</span> collection items terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.047</span> seconds</span><br></pre></td></tr></table></figure>

<p>数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">小明,math:<span class="number">79</span></span><br><span class="line">小红,math:<span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>数据加载到数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> load data <span class="keyword">local</span> inpath <span class="string">&#x27;/Users/fengxuechao/WorkSpace/software/hive_data/struct_test.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> struct_test;</span><br><span class="line">Loading data <span class="keyword">to</span> <span class="keyword">table</span> default.struct_test</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.293</span> seconds</span><br></pre></td></tr></table></figure>

<p>查询所有数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> struct_test;</span><br><span class="line">OK</span><br><span class="line">小明	&#123;&quot;course&quot;:&quot;math&quot;,&quot;score&quot;:79&#125;</span><br><span class="line">小红	&#123;&quot;course&quot;:&quot;math&quot;,&quot;score&quot;:80&#125;</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.097</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br><span class="line">hive<span class="operator">&gt;</span> <span class="keyword">select</span> name,course.course,course.score <span class="keyword">from</span> struct_test;</span><br><span class="line">OK</span><br><span class="line">小明	math	<span class="number">79</span></span><br><span class="line">小红	math	<span class="number">80</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.213</span> seconds, Fetched: <span class="number">2</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>大数据,hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Java NIO之Selector（选择器）</title>
    <url>/2021/05/28/Java%20NIO%E4%B9%8BSelector%EF%BC%88%E9%80%89%E6%8B%A9%E5%99%A8)/</url>
    <content><![CDATA[<h1 id="Java-NIO之Selector（选择器）"><a href="#Java-NIO之Selector（选择器）" class="headerlink" title="Java NIO之Selector（选择器）"></a>Java NIO之Selector（选择器）</h1><blockquote>
<p>转载自<a href="https://www.cnblogs.com/snailclimb/p/9086334.html">https://www.cnblogs.com/snailclimb/p/9086334.html</a></p>
</blockquote>
<h2 id="一-Selector（选择器）介绍"><a href="#一-Selector（选择器）介绍" class="headerlink" title="一 Selector（选择器）介绍"></a><strong>一 Selector（选择器）介绍</strong></h2><p><strong>Selector</strong> 一般称 为<strong>选择器</strong> ，当然你也可以翻译为 <strong>多路复用器</strong> 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。</p>
<p><a href="https://user-gold-cdn.xitu.io/2018/5/15/16363f5338f36c54?w=636&h=260&f=png&s=23373">https://user-gold-cdn.xitu.io/2018/5/15/16363f5338f36c54?w=636&amp;h=260&amp;f=png&amp;s=23373</a></p>
<p><strong>使用Selector的好处在于：</strong> 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。</p>
<h2 id="二-Selector（选择器）的使用方法介绍"><a href="#二-Selector（选择器）的使用方法介绍" class="headerlink" title="二 Selector（选择器）的使用方法介绍"></a><strong>二 Selector（选择器）的使用方法介绍</strong></h2><h3 id="1-Selector的创建"><a href="#1-Selector的创建" class="headerlink" title="1. Selector的创建"></a><strong>1. Selector的创建</strong></h3><p>通过调用Selector.open()方法创建一个Selector对象，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Selector selector &#x3D; Selector.open();</span><br></pre></td></tr></table></figure>

<p>这里需要说明一下</p>
<h3 id="2-注册Channel到Selector"><a href="#2-注册Channel到Selector" class="headerlink" title="2. 注册Channel到Selector"></a><strong>2. 注册Channel到Selector</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel.configureBlocking(false);</span><br><span class="line">SelectionKey key &#x3D; channel.register(selector, Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure>

<p><strong>Channel必须是非阻塞的</strong>。 所以FileChannel不适用Selector，因为FileChannel不能切换为非阻塞模式，更准确的来说是因为FileChannel没有继承SelectableChannel。Socket channel可以正常使用。</p>
<p><strong>SelectableChannel抽象类</strong> 有一个 <strong>configureBlocking（）</strong> 方法用于使通道处于阻塞模式或非阻塞模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract SelectableChannel configureBlocking(boolean block)</span><br></pre></td></tr></table></figure>

<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p><strong>SelectableChannel抽象类</strong>的<strong>configureBlocking（）</strong> 方法是由 <strong>AbstractSelectableChannel抽象类</strong>实现的，<strong>SocketChannel、ServerSocketChannel、DatagramChannel</strong>都是直接继承了 <strong>AbstractSelectableChannel抽象类</strong> 。 </p>
<p><strong>register()</strong> 方法的第二个参数。这是一个“ <strong>interest集合</strong> ”，意思是在<strong>通过Selector监听Channel时对什么事件感兴趣</strong>。可以监听四种不同类型的事件：</p>
<ul>
<li><strong>Connect</strong></li>
<li><strong>Accept</strong></li>
<li><strong>Read</strong></li>
<li><strong>Write</strong></li>
</ul>
<p>通道触发了一个事件意思是该事件已经就绪。比如某个Channel成功连接到另一个服务器称为“ <strong>连接就绪</strong> ”。一个Server Socket Channel准备好接收新进入的连接称为“ <strong>接收就绪</strong> ”。一个有数据可读的通道可以说是“ <strong>读就绪</strong> ”。等待写数据的通道可以说是“ <strong>写就绪</strong> ”。</p>
<p>这四种事件用SelectionKey的四个常量来表示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SelectionKey.OP_CONNECT</span><br><span class="line">SelectionKey.OP_ACCEPT</span><br><span class="line">SelectionKey.OP_READ</span><br><span class="line">SelectionKey.OP_WRITE</span><br></pre></td></tr></table></figure>

<p>如果你对不止一种事件感兴趣，使用或运算符即可，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>

<h3 id="3-SelectionKey介绍"><a href="#3-SelectionKey介绍" class="headerlink" title="3. SelectionKey介绍"></a><strong>3. SelectionKey介绍</strong></h3><p>一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key.attachment(); <span class="comment">//返回SelectionKey的attachment，attachment可以在注册channel的时候指定。</span></span><br><span class="line">key.channel(); <span class="comment">// 返回该SelectionKey对应的channel。</span></span><br><span class="line">key.selector(); <span class="comment">// 返回该SelectionKey对应的Selector。</span></span><br><span class="line">key.interestOps(); <span class="comment">//返回代表需要Selector监控的IO操作的bit mask</span></span><br><span class="line">key.readyOps(); <span class="comment">// 返回一个bit mask，代表在相应channel上可以进行的IO操作。</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>key.interestOps():</p>
</blockquote>
<p>我们可以通过以下方法来判断Selector是否对Channel的某种事件感兴趣</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int interestSet &#x3D; selectionKey.interestOps();</span><br><span class="line">boolean isInterestedInAccept &#x3D; (interestSet &amp; SelectionKey.OP_ACCEPT) &#x3D;&#x3D; SelectionKey.OP_ACCEPT；</span><br><span class="line">boolean isInterestedInConnect &#x3D; interestSet &amp; SelectionKey.OP_CONNECT;</span><br><span class="line">boolean isInterestedInRead &#x3D; interestSet &amp; SelectionKey.OP_READ;</span><br><span class="line">boolean isInterestedInWrite &#x3D; interestSet &amp; SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>key.readyOps()</p>
</blockquote>
<p>ready 集合是通道已经准备就绪的操作的集合。JAVA中定义以下几个方法用来检查这些操作是否就绪.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建ready集合的方法int readySet &#x3D; selectionKey.readyOps();</span><br><span class="line">&#x2F;&#x2F;检查这些操作是否就绪的方法</span><br><span class="line">key.isAcceptable();&#x2F;&#x2F;是否可读，是返回 trueboolean isWritable()：&#x2F;&#x2F;是否可写，是返回 trueboolean isConnectable()：&#x2F;&#x2F;是否可连接，是返回 trueboolean isAcceptable()：&#x2F;&#x2F;是否可接收，是返回 true</span><br></pre></td></tr></table></figure>

<p><strong>从SelectionKey访问Channel和Selector很简单。如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Channel channel &#x3D; key.channel();</span><br><span class="line">Selector selector &#x3D; key.selector();</span><br><span class="line">key.attachment();</span><br></pre></td></tr></table></figure>

<p>可以将一个对象或者更多信息附着到SelectionKey上，这样就能方便的识别某个给定的通道。例如，可以附加 与通道一起使用的Buffer，或是包含聚集数据的某个对象。使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key.attach(theObject);</span><br><span class="line">Object attachedObj &#x3D; key.attachment();</span><br></pre></td></tr></table></figure>

<p>还可以在用register()方法向Selector注册Channel的时候附加对象。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SelectionKey key &#x3D; channel.register(selector, SelectionKey.OP_READ, theObject);</span><br></pre></td></tr></table></figure>

<h3 id="4-从Selector中选择channel-Selecting-Channels-via-a-Selector"><a href="#4-从Selector中选择channel-Selecting-Channels-via-a-Selector" class="headerlink" title="4. 从Selector中选择channel(Selecting Channels via a Selector)"></a><strong>4. 从Selector中选择channel(Selecting Channels via a Selector)</strong></h3><p>选择器维护注册过的通道的集合，并且这种注册关系都被封装在SelectionKey当中.</p>
<blockquote>
<p>Selector维护的三种类型SelectionKey集合：</p>
</blockquote>
<ul>
<li><p><strong>已注册的键的集合(Registered key set)</strong></p>
<p>  所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 <strong>keys()</strong> 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。</p>
</li>
<li><p><strong>已选择的键的集合(Selected key set)</strong></p>
<p>  所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 <strong>keys()</strong> 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。</p>
</li>
<li><p><strong>已取消的键的集合(Cancelled key set)</strong></p>
<p>  已注册的键的集合的子集，这个集合包含了 <strong>cancel()</strong> 方法被调用过的键(这个键已经被无效化)，但它们还没有被注销。这个集合是选择器对象的私有成员，因而无法直接访问。</p>
<p>  <strong>注意：</strong> 当键被取消（ 可以通过<strong>isValid( )</strong> 方法来判断）时，它将被放在相关的选择器的已取消的键的集合里。注册不会立即被取消，但键会立即失效。当再次调用 <strong>select( )</strong> 方法时（或者一个正在进行的select()调用结束时），已取消的键的集合中的被取消的键将被清理掉，并且相应的注销也将完成。通道会被注销，而新的SelectionKey将被返回。当通道关闭时，所有相关的键会自动取消（记住，一个通道可以被注册到多个选择器上）。当选择器关闭时，所有被注册到该选择器的通道都将被注销，并且相关的键将立即被无效化（取消）。一旦键被无效化，调用它的与选择相关的方法就将抛出CancelledKeyException。</p>
</li>
</ul>
<blockquote>
<p>select()方法介绍：</p>
</blockquote>
<p>在刚初始化的Selector对象中，这三个集合都是空的。 <strong>通过Selector的select（）方法可以选择已经准备就绪的通道</strong> （这些通道包含你感兴趣的的事件）。比如你对读就绪的通道感兴趣，那么select（）方法就会返回读事件已经就绪的那些通道。下面是Selector几个重载的select()方法：</p>
<ul>
<li>int select()：阻塞到至少有一个通道在你注册的事件上就绪了。</li>
<li>int select(long timeout)：和select()一样，但最长阻塞时间为timeout毫秒。</li>
<li>int selectNow()：非阻塞，只要有通道就绪就立刻返回。</li>
</ul>
<p><strong>select()方法返回的int值表示有多少通道已经就绪,是自上次调用select()方法后有多少通道变成就绪状态。之前在select（）调用时进入就绪的通道不会在本次调用中被记入，而在前一次select（）调用进入就绪但现在已经不在处于就绪的通道也不会被记入</strong>。例如：首次调用select()方法，如果有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。</p>
<p><strong>一旦调用select()方法，并且返回值不为0时，则 可以通过调用Selector的selectedKeys()方法来访问已选择键集合</strong> 。如下：  Set selectedKeys=selector.selectedKeys();  进而可以放到和某SelectionKey关联的Selector和Channel。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set selectedKeys &#x3D; selector.selectedKeys();</span><br><span class="line">Iterator keyIterator &#x3D; selectedKeys.iterator();</span><br><span class="line">while(keyIterator.hasNext()) &#123;</span><br><span class="line">    SelectionKey key &#x3D; keyIterator.next();</span><br><span class="line">    if(key.isAcceptable()) &#123;</span><br><span class="line">        &#x2F;&#x2F; a connection was accepted by a ServerSocketChannel.</span><br><span class="line">    &#125; else if (key.isConnectable()) &#123;</span><br><span class="line">        &#x2F;&#x2F; a connection was established with a remote server.</span><br><span class="line">    &#125; else if (key.isReadable()) &#123;</span><br><span class="line">        &#x2F;&#x2F; a channel is ready for reading</span><br><span class="line">    &#125; else if (key.isWritable()) &#123;</span><br><span class="line">        &#x2F;&#x2F; a channel is ready for writing</span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-停止选择的方法"><a href="#5-停止选择的方法" class="headerlink" title="5. 停止选择的方法"></a><strong>5. 停止选择的方法</strong></h3><p>选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在select（）方法中阻塞的线程。</p>
<ul>
<li><strong>wakeup()方法</strong> ：通过调用Selector对象的wakeup（）方法让处在阻塞状态的select()方法立刻返回 该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中的选择操作，那么下一次对select()方法的一次调用将立即返回。</li>
<li><strong>close()方法</strong> ：通过close（）方法关闭Selector， 该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似wakeup（）），同时使得注册到该Selector的所有Channel被注销，所有的键将被取消，但是Channel本身并不会关闭。</li>
</ul>
<h2 id="三-模板代码"><a href="#三-模板代码" class="headerlink" title="三 模板代码"></a><strong>三 模板代码</strong></h2><p><strong>一个服务端的模板代码：</strong></p>
<p>有了模板代码我们在编写程序时，大多数时间都是在模板代码中添加相应的业务代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServerSocketChannel ssc &#x3D; ServerSocketChannel.open();</span><br><span class="line">ssc.socket().bind(new InetSocketAddress(&quot;localhost&quot;, 8080));</span><br><span class="line">ssc.configureBlocking(false);</span><br><span class="line"></span><br><span class="line">Selector selector &#x3D; Selector.open();</span><br><span class="line">ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">while(true) &#123;</span><br><span class="line">    int readyNum &#x3D; selector.select();</span><br><span class="line">    if (readyNum &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;SelectionKey&gt; selectedKeys &#x3D; selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; it &#x3D; selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line">    while(it.hasNext()) &#123;</span><br><span class="line">        SelectionKey key &#x3D; it.next();</span><br><span class="line"></span><br><span class="line">        if(key.isAcceptable()) &#123;</span><br><span class="line">            &#x2F;&#x2F; 接受连接</span><br><span class="line">        &#125; else if (key.isReadable()) &#123;</span><br><span class="line">            &#x2F;&#x2F; 通道可读</span><br><span class="line">        &#125; else if (key.isWritable()) &#123;</span><br><span class="line">            &#x2F;&#x2F; 通道可写</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        it.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四-客户端与服务端简单交互实例"><a href="#四-客户端与服务端简单交互实例" class="headerlink" title="四 客户端与服务端简单交互实例"></a><strong>四 客户端与服务端简单交互实例</strong></h2><p><strong>服务端：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package selector;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SelectionKey;</span><br><span class="line">import java.nio.channels.Selector;</span><br><span class="line">import java.nio.channels.ServerSocketChannel;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class WebServer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ServerSocketChannel ssc &#x3D; ServerSocketChannel.open();</span><br><span class="line">            ssc.socket().bind(new InetSocketAddress(&quot;127.0.0.1&quot;, 8000));</span><br><span class="line">            ssc.configureBlocking(false);</span><br><span class="line"></span><br><span class="line">            Selector selector &#x3D; Selector.open();</span><br><span class="line">            &#x2F;&#x2F; 注册 channel，并且指定感兴趣的事件是 Accept</span><br><span class="line">            ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">            ByteBuffer readBuff &#x3D; ByteBuffer.allocate(1024);</span><br><span class="line">            ByteBuffer writeBuff &#x3D; ByteBuffer.allocate(128);</span><br><span class="line">            writeBuff.put(&quot;received&quot;.getBytes());</span><br><span class="line">            writeBuff.flip();</span><br><span class="line"></span><br><span class="line">            while (true) &#123;</span><br><span class="line">                int nReady &#x3D; selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt; keys &#x3D; selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; it &#x3D; keys.iterator();</span><br><span class="line"></span><br><span class="line">                while (it.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key &#x3D; it.next();</span><br><span class="line">                    it.remove();</span><br><span class="line"></span><br><span class="line">                    if (key.isAcceptable()) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 创建新的连接，并且把连接注册到selector上，而且，&#x2F;&#x2F; 声明这个channel只对读操作感兴趣。</span><br><span class="line">                        SocketChannel socketChannel &#x3D; ssc.accept();</span><br><span class="line">                        socketChannel.configureBlocking(false);</span><br><span class="line">                        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (key.isReadable()) &#123;</span><br><span class="line">                        SocketChannel socketChannel &#x3D; (SocketChannel) key.channel();</span><br><span class="line">                        readBuff.clear();</span><br><span class="line">                        socketChannel.read(readBuff);</span><br><span class="line"></span><br><span class="line">                        readBuff.flip();</span><br><span class="line">                        System.out.println(&quot;received : &quot; + new String(readBuff.array()));</span><br><span class="line">                        key.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else if (key.isWritable()) &#123;</span><br><span class="line">                        writeBuff.rewind();</span><br><span class="line">                        SocketChannel socketChannel &#x3D; (SocketChannel) key.channel();</span><br><span class="line">                        socketChannel.write(writeBuff);</span><br><span class="line">                        key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package selector;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.net.InetSocketAddress;</span><br><span class="line">import java.nio.ByteBuffer;</span><br><span class="line">import java.nio.channels.SocketChannel;</span><br><span class="line"></span><br><span class="line">public class WebClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            SocketChannel socketChannel &#x3D; SocketChannel.open();</span><br><span class="line">            socketChannel.connect(new InetSocketAddress(&quot;127.0.0.1&quot;, 8000));</span><br><span class="line"></span><br><span class="line">            ByteBuffer writeBuffer &#x3D; ByteBuffer.allocate(32);</span><br><span class="line">            ByteBuffer readBuffer &#x3D; ByteBuffer.allocate(32);</span><br><span class="line"></span><br><span class="line">            writeBuffer.put(&quot;hello&quot;.getBytes());</span><br><span class="line">            writeBuffer.flip();</span><br><span class="line"></span><br><span class="line">            while (true) &#123;</span><br><span class="line">                writeBuffer.rewind();</span><br><span class="line">                socketChannel.write(writeBuffer);</span><br><span class="line">                readBuffer.clear();</span><br><span class="line">                socketChannel.read(readBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p>先运行服务端，再运行客户端，服务端会不断收到客户端发送过来的消息。</p>
<p><a href="https://user-gold-cdn.xitu.io/2018/5/16/1636720b53ff3a72?w=1090&h=217&f=png&s=15376">https://user-gold-cdn.xitu.io/2018/5/16/1636720b53ff3a72?w=1090&amp;h=217&amp;f=png&amp;s=15376</a></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM之对象的创建过程</title>
    <url>/2021/07/09/JVM%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/isn4Ur.png" alt="image-20210709171519463"></p>
<span id="more"></span>

<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Java是一门面向对象的编程语言,Java程序运行过程中无时无刻都有对象被创建出来。在语言层面上,创建对象通常(例外:复制、反序列化)仅仅是一个new关键字而已,而在虚拟机中,对象(文中讨论的对象限于普通Java对象,不包括数组和Class对象等)的创建又是怎样一个过程呢?</p>
<ol>
<li><p>常量池中定位类的符号引用</p>
</li>
<li><p>检查符号引用所代表的类是否已被加载，解析和初始化过。如果没有,那必须先执行相应的类加载过程</p>
</li>
<li><p>为新生对象分配内存</p>
</li>
<li><p>初始化为零值 - 可以不赋就直接使用</p>
</li>
<li><p>设置对象头信息</p>
</li>
<li><p>执行对象<init>方法 - 构造方法</p>
</li>
</ol>
<h1 id="2-常量池中定位类的符号引用"><a href="#2-常量池中定位类的符号引用" class="headerlink" title="2 常量池中定位类的符号引用"></a>2 常量池中定位类的符号引用</h1><p>当Java虚拟机遇到一条字节码new指令时,首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用,并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有,那必须先执行相应的类加载过程。</p>
<h1 id="3-为新生对象分配内存"><a href="#3-为新生对象分配内存" class="headerlink" title="3 为新生对象分配内存"></a>3 为新生对象分配内存</h1><p>在类加载检查通过后,接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定，为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来。</p>
<h2 id="3-1-内存的分配方式"><a href="#3-1-内存的分配方式" class="headerlink" title="3.1 内存的分配方式"></a>3.1 内存的分配方式</h2><p>选择哪种分配方式由Java堆是否规整决定,而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理(Compact)的能力决定。</p>
<p>Serial、ParNew等带压缩整理过程的收集器对应的是指针碰撞。</p>
<p>CMS这种基于清除(Sweep)算法的收集器对应的是空闲列表。</p>
<h3 id="3-1-1-指针碰撞"><a href="#3-1-1-指针碰撞" class="headerlink" title="3.1.1 指针碰撞"></a>3.1.1 指针碰撞</h3><p>假设Java堆中内存是绝对规整的,所有被使用过的内存都被放在一边,空闲的内存被放在另一边,中间放着一个指针作为分界点的指示器,那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离,这种分配方式称为“指针碰撞”(Bump The Pointer)。</p>
<h3 id="3-1-2-空闲列表"><a href="#3-1-2-空闲列表" class="headerlink" title="3.1.2 空闲列表"></a>3.1.2 空闲列表</h3><p> 如果Java堆中的内存并不是规整的,已被使用的内存和空闲的内存相互交错在一起,那就没有办法简单地进行指针碰撞了,虚拟机就必须维护一个列表,记录上哪些内存块是可用的,在分配的时候从列表中找到一块足够大的空间划分给对象实例,并更新列表上的记录,这种分配方式称为“空闲列表”(Free List)。</p>
<p>使用CMS这种基于清除(Sweep)算法的收集器。</p>
<h2 id="3-2-分配内存的并发保证"><a href="#3-2-分配内存的并发保证" class="headerlink" title="3.2 分配内存的并发保证"></a>3.2 分配内存的并发保证</h2><p>除划分空间外还需要考虑一个问题：</p>
<p>对象创建在虚拟机中是非常频繁的行为,即使仅仅修改一个指针所指向的位置,在并发情况下也并不是线程安全的,可能出现正在给对象A分配内存,指针还没来得及修改,对象B又同时使用了原来的指针来分配内存的情况。</p>
<p>解决方法</p>
<h3 id="3-2-1-CAS-失败重试"><a href="#3-2-1-CAS-失败重试" class="headerlink" title="3.2.1 CAS + 失败重试"></a>3.2.1 CAS + 失败重试</h3><p>是对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性。</p>
<h3 id="3-2-2-本地线程分配缓冲"><a href="#3-2-2-本地线程分配缓冲" class="headerlink" title="3.2.2 本地线程分配缓冲"></a>3.2.2 本地线程分配缓冲</h3><p>是把内存分配的动作按照线程划分在不同的空间之中进行,即每个线程在Java堆中预先分配一小块内存,称为本地线程分配缓冲(Thread Local Allocation Buffer,TLAB),哪个线程要分配内存,就在哪个线程的本地缓冲区中分配,只有本地缓冲区用完了,分配新的缓存区时才需要同步锁定。</p>
<p>虚拟机是否使用TLAB,可以通过-XX:+/-UseTLAB参数来设定。</p>
<h1 id="4-初始化为零值-可以不赋就直接使用"><a href="#4-初始化为零值-可以不赋就直接使用" class="headerlink" title="4 初始化为零值 - 可以不赋就直接使用"></a>4 初始化为零值 - 可以不赋就直接使用</h1><p>内存分配完成之后,虚拟机必须将分配到的内存空间(但不包括对象头)都初始化为零值,如果使用了TLAB的话,这一项工作也可以提前至TLAB分配时顺便进行。</p>
<p>这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用,使程序能访问到这些字段的数据类型所对应的零值。</p>
<h1 id="5-设置对象头信息"><a href="#5-设置对象头信息" class="headerlink" title="5 设置对象头信息"></a>5 设置对象头信息</h1><p>Java虚拟机还要对对象进行必要的设置,例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码(实际上对象的哈希码会延后到真正调用<code>Object::hashCode()</code>方法时才计算)、对象的GC分代年龄等信息。这些信息存放在对象的对象头(Object Header)之中。</p>
<p>根据虚拟机当前运行状态的不同,如是否启用偏向锁等,对象头会有不同的设置方式。</p>
<p>这一步中从虚拟机的角度来说对象已经创建好了，但从程序的角度来说因为还没有执行构造方法，对象的创建才刚刚开始。</p>
<h1 id="6-执行对象-lt-init-gt-方法-构造方法"><a href="#6-执行对象-lt-init-gt-方法-构造方法" class="headerlink" title="6 执行对象&lt;init&gt;方法 - 构造方法"></a>6 执行对象<code>&lt;init&gt;</code>方法 - 构造方法</h1><p>在上面工作都完成之后,从虚拟机的视角来看,一个新的对象已经产生了。但是从Java程序的视角看来,对象创建才刚刚开始——构造函数,即Class文件中的<init>()方法还没有执行,所有的字段都为默认的零值,对象需要的其他资源和状态信息也还没有按照预定的意图构造好。</p>
<p>一般来说(由字节码流中new指令后面是否跟随<code>invokespecial</code>指令所决定,Java编译器会在遇到new关键字的地方同时生成这两条字节码指令,但如果直接通过其他方式产生的则不一定如此),<code>new</code>指令之后会接着执行<code>&lt;init&gt; ()</code>方法,按照程序员的意愿对对象进行初始化,这样一个真正可用的对象才算完全被构造出来。</p>
<h1 id="7-HotSpot-解释器代码片段"><a href="#7-HotSpot-解释器代码片段" class="headerlink" title="7 HotSpot 解释器代码片段"></a>7 HotSpot 解释器代码片段</h1><p>下面是HotSpot虚拟机字节码解释器(bytecodeInterpreter.cpp)中的代码片段。这个解释器实现很少有机会实际使用,大部分平台上都使用模板解释器;当代码通过即时编译器执行时差异就更大了。不过这段代码(以及笔者添加的注释)用于了解HotSpot的运作过程是没有什么问题的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 确保常量池中存放的是已解释的类</span></span><br><span class="line"><span class="keyword">if</span> (!constants-&gt;<span class="built_in">tag_at</span>(index).<span class="built_in">is_unresolved_klass</span>()) &#123;     </span><br><span class="line">    <span class="comment">// 断言确保是klassOop和instanceKlassOop(这部分下一节介绍)     </span></span><br><span class="line">    oop entry = (klassOop) *constants-&gt;<span class="built_in">obj_at_addr</span>(index);     </span><br><span class="line">    <span class="built_in">assert</span>(entry-&gt;<span class="built_in">is_klass</span>(), <span class="string">&quot;Should be resolved klass&quot;</span>);     </span><br><span class="line">    klassOop k_entry = (klassOop) entry;     </span><br><span class="line">    <span class="built_in">assert</span>(k_entry-&gt;<span class="built_in">klass_part</span>()-&gt;<span class="built_in">oop_is_instance</span>(), <span class="string">&quot;Should be instanceKlass&quot;</span>);          </span><br><span class="line">    instanceKlass* ik = (instanceKlass*) k_entry-&gt;<span class="built_in">klass_part</span>();     </span><br><span class="line">    <span class="comment">// 确保对象所属类型已经经过初始化阶段    </span></span><br><span class="line">    <span class="keyword">if</span> ( ik-&gt;<span class="built_in">is_initialized</span>() &amp;&amp; ik-&gt;<span class="built_in">can_be_fastpath_allocated</span>() ) &#123;         </span><br><span class="line">      <span class="comment">// 取对象长度        </span></span><br><span class="line">      <span class="keyword">size_t</span> obj_size = ik-&gt;<span class="built_in">size_helper</span>();         </span><br><span class="line">      oop result = <span class="literal">NULL</span>;         </span><br><span class="line">      <span class="comment">// 记录是否需要将对象所有字段置零值        </span></span><br><span class="line">      <span class="keyword">bool</span> need_zero = !ZeroTLAB;         </span><br><span class="line">      <span class="comment">// 是否在TLAB中分配对象        </span></span><br><span class="line">      <span class="keyword">if</span> (UseTLAB) &#123;             </span><br><span class="line">        result = (oop) THREAD-&gt;<span class="built_in">tlab</span>().<span class="built_in">allocate</span>(obj_size);         </span><br><span class="line">      &#125;         </span><br><span class="line">      <span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;             </span><br><span class="line">        need_zero = <span class="literal">true</span>;             </span><br><span class="line">        <span class="comment">// 直接在eden中分配对象retry:             </span></span><br><span class="line">        HeapWord* compare_to = *Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">top_addr</span>();             </span><br><span class="line">        HeapWord* new_top = compare_to + obj_size;             </span><br><span class="line">        <span class="comment">// cmpxchg是x86中的CAS指令,这里是一个C++方法,通过CAS方式分配空间,并发失败的               话,转到retry中重试直至成功分配为止            </span></span><br><span class="line">        <span class="keyword">if</span> (new_top &lt;= *Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">end_addr</span>()) &#123;                 </span><br><span class="line">          <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>(new_top, Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">top_addr</span>(), compare_to) != compare_to) &#123;                     </span><br><span class="line">            <span class="keyword">goto</span> retry;                 </span><br><span class="line">          &#125;                 </span><br><span class="line">          result = (oop) compare_to;           </span><br><span class="line">        &#125;         </span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span> (result != <span class="literal">NULL</span>) &#123;             </span><br><span class="line">        <span class="comment">// 如果需要,为对象初始化零值            </span></span><br><span class="line">        <span class="keyword">if</span> (need_zero ) &#123;                 </span><br><span class="line">          HeapWord* to_zero = (HeapWord*) result + <span class="built_in"><span class="keyword">sizeof</span></span>(oopDesc) / oopSize;                 </span><br><span class="line">          obj_size -= <span class="built_in"><span class="keyword">sizeof</span></span>(oopDesc) / oopSize;                 </span><br><span class="line">          <span class="keyword">if</span> (obj_size &gt; <span class="number">0</span> ) &#123;                    </span><br><span class="line">            <span class="built_in">memset</span>(to_zero, <span class="number">0</span>, obj_size * HeapWordSize);                 </span><br><span class="line">          &#125;          </span><br><span class="line">        &#125;             </span><br><span class="line">        <span class="comment">// 根据是否启用偏向锁,设置对象头信息            </span></span><br><span class="line">        <span class="keyword">if</span> (UseBiasedLocking) &#123;                 </span><br><span class="line">          result-&gt;<span class="built_in">set_mark</span>(ik-&gt;<span class="built_in">prototype_header</span>());            </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;               </span><br><span class="line">          result-&gt;<span class="built_in">set_mark</span>(markOopDesc::<span class="built_in">prototype</span>());     </span><br><span class="line">        &#125;         </span><br><span class="line">        result-&gt;<span class="built_in">set_klass_gap</span>(<span class="number">0</span>);          </span><br><span class="line">        result-&gt;<span class="built_in">set_klass</span>(k_entry);          </span><br><span class="line">        <span class="comment">// 将对象引用入栈,继续执行下一条指令          </span></span><br><span class="line">        <span class="built_in">SET_STACK_OBJECT</span>(result, <span class="number">0</span>);             </span><br><span class="line">        <span class="built_in">UPDATE_PC_AND_TOS_AND_CONTINUE</span>(<span class="number">3</span>, <span class="number">1</span>);         </span><br><span class="line">      &#125;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="8-参考资源"><a href="#8-参考资源" class="headerlink" title="8 参考资源"></a>8 参考资源</h1><p>《深入理解Java虚拟机：JVM高级特性与最佳特性（第三版）》</p>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC原子类-AtomicLongArray</title>
    <url>/2021/01/21/JUC%E5%8E%9F%E5%AD%90%E7%B1%BB-AtomicLongArray/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3514604.html">https://www.cnblogs.com/skywang12345/p/3514604.html</a></p>
</blockquote>
<p>在”Java多线程系列–“ <a href="https://www.notion.so/Java-JUC-AtomicLong-842f5bea464847abbfee4d03a18ca99f">Java多线程JUC原子类之 AtomicLong原子类</a> “中介绍过，AtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对”长整形数组”进行原子操作。</p>
<h1 id="AtomicLongArray函数列表"><a href="#AtomicLongArray函数列表" class="headerlink" title="AtomicLongArray函数列表"></a>AtomicLongArray函数列表</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建给定长度的新 AtomicLongArray。</span></span><br><span class="line">AtomicLongArray(<span class="keyword">int</span> length)</span><br><span class="line"><span class="comment">// 创建与给定数组具有相同长度的新 AtomicLongArray，并从给定数组复制其所有元素。</span></span><br><span class="line">AtomicLongArray(<span class="keyword">long</span>[] array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以原子方式将给定值添加到索引 i 的元素。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素减1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取位置 i 的当前值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将给定值与索引 i 的元素相加。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素减 1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndDecrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素加 1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将位置 i 的元素设置为给定值，并返回旧值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素加1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 最终将位置 i 的元素设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回该数组的长度。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将位置 i 的元素设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回数组当前值的字符串表示形式。</span></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>AtomicLongArray的代码很简单，下面仅以incrementAndGet()为例，对AtomicLong的原理进行说明。</p>
<h2 id="incrementAndGet-源码如下："><a href="#incrementAndGet-源码如下：" class="headerlink" title="incrementAndGet()源码如下："></a>incrementAndGet()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAndGet(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：incrementAndGet()的作用是以原子方式将long数组的索引 i 的元素加1，并返回加1之后的值。</p>
<h2 id="addAndGet-源码如下："><a href="#addAndGet-源码如下：" class="headerlink" title="addAndGet()源码如下："></a>addAndGet()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查数组是否越界</span></span><br><span class="line">    <span class="keyword">long</span> offset = checkedByteOffset(i);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取long型数组的索引 offset 的原始值</span></span><br><span class="line">        <span class="keyword">long</span> current = getRaw(offset);</span><br><span class="line">        <span class="comment">// 修改long型值</span></span><br><span class="line">        <span class="keyword">long</span> next = current + delta;</span><br><span class="line">        <span class="comment">// 通过CAS更新long型数组的索引 offset的值。</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetRaw(offset, current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：addAndGet()首先检查数组是否越界。如果没有越界的话，则先获取数组索引i的值；然后通过CAS函数更新i的值。</p>
<h2 id="getRaw-源码如下："><a href="#getRaw-源码如下：" class="headerlink" title="getRaw()源码如下："></a>getRaw()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getRaw</span><span class="params">(<span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getLongVolatile(array, offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：unsafe是通过Unsafe.getUnsafe()返回的一个Unsafe对象。通过Unsafe的CAS函数对long型数组的元素进行原子操作。如compareAndSetRaw()就是调用Unsafe的CAS函数，它的源码如下：</p>
<h2 id="compareAndSetRaw-源码如下："><a href="#compareAndSetRaw-源码如下：" class="headerlink" title="compareAndSetRaw()源码如下："></a>compareAndSetRaw()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndSetRaw</span><span class="params">(<span class="keyword">long</span> offset, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapLong(array, offset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicArrayLong</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建AtomicLongArray对象</span></span><br><span class="line">        <span class="keyword">long</span>[] arrLong = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">        AtomicLongArray ala = <span class="keyword">new</span> AtomicLongArray(arrLong);</span><br><span class="line"></span><br><span class="line">        ala.set(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, len=ala.length(); i&lt;len; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;get(%d) : %s\\n&quot;</span>, i, ala.get(i));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;getAndDecrement(0)&quot;</span>, ala.getAndDecrement(<span class="number">0</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;decrementAndGet(1)&quot;</span>, ala.decrementAndGet(<span class="number">1</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;getAndIncrement(2)&quot;</span>, ala.getAndIncrement(<span class="number">2</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;incrementAndGet(3)&quot;</span>, ala.incrementAndGet(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;addAndGet(100)&quot;</span>, ala.addAndGet(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;getAndAdd(100)&quot;</span>, ala.getAndAdd(<span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;compareAndSet()&quot;</span>, ala.compareAndSet(<span class="number">2</span>, <span class="number">31</span>, <span class="number">1000</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\\n&quot;</span>, <span class="string">&quot;get(2)&quot;</span>, ala.get(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">get(<span class="number">0</span>) : <span class="number">100</span></span><br><span class="line">get(<span class="number">1</span>) : <span class="number">20</span></span><br><span class="line">get(<span class="number">2</span>) : <span class="number">30</span></span><br><span class="line">get(<span class="number">3</span>) : <span class="number">40</span></span><br><span class="line">get(<span class="number">4</span>) : <span class="number">50</span></span><br><span class="line">  getAndDecrement(<span class="number">0</span>) : <span class="number">100</span></span><br><span class="line">  decrementAndGet(<span class="number">1</span>) : <span class="number">19</span></span><br><span class="line">  getAndIncrement(<span class="number">2</span>) : <span class="number">30</span></span><br><span class="line">  incrementAndGet(<span class="number">3</span>) : <span class="number">41</span></span><br><span class="line">      addAndGet(<span class="number">100</span>) : <span class="number">199</span></span><br><span class="line">      getAndAdd(<span class="number">100</span>) : <span class="number">19</span></span><br><span class="line">     compareAndSet() : <span class="keyword">true</span></span><br><span class="line">              get(<span class="number">2</span>) : <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC，Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-LocalDateTime记录</title>
    <url>/2019/08/28/Java8-LocalDateTime%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Java8-LocalDateTime记录"><a href="#Java8-LocalDateTime记录" class="headerlink" title="Java8-LocalDateTime记录"></a>Java8-LocalDateTime记录</h1><p>文中都使用的时区都是东8区，也就是北京时间。这是为了防止服务器设置时区错误时导致时间不对，如果您是其他时区，请自行修改。</p>
<h2 id="关键类介绍"><a href="#关键类介绍" class="headerlink" title="关键类介绍"></a>关键类介绍</h2><p>– Instant:它代表的是时间戳<br>– LocalDate:不包含具体时间的日期，比如2019-08-28。它可以用来存储生日，周年纪念日，入职日期等。<br>– LocalTime:它代表的是不含日期的时间<br>– LocalDateTime:它包含了日期及时间，不过还是没有偏移信息或者说时区。<br>– ZonedDateTime:这是一个包含时区的完整的日期时间，偏移量是以UTC/格林威治时间为基准的。</p>
<h2 id="Java8新增的DateTimeFormatter与SimpleDateFormat的区别"><a href="#Java8新增的DateTimeFormatter与SimpleDateFormat的区别" class="headerlink" title="Java8新增的DateTimeFormatter与SimpleDateFormat的区别"></a>Java8新增的DateTimeFormatter与SimpleDateFormat的区别</h2><p>两者最大的区别是，Java8的DateTimeFormatter是线程安全的，而SimpleDateFormat并不是线程安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析日期</span></span><br><span class="line">        String dateStr= <span class="string">&quot;2016年10月25日&quot;</span>;</span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        LocalDate date= LocalDate.parse(dateStr, formatter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//日期转换为字符串</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        DateTimeFormatter format = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy年MM月dd日 hh:mm a&quot;</span>);</span><br><span class="line">        String nowStr = now .format(format);</span><br><span class="line">        System.out.println(nowStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ThreadLocal来限制SimpleDateFormat</span></span><br><span class="line">        System.out.println(format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要在高并发环境下能有比较好的体验，可以使用ThreadLocal来限制SimpleDateFormat只能在线程内共享，这样就避免了多线程导致的线程安全问题。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> DateFormat <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get().format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LocalDateTime获取毫秒数"><a href="#LocalDateTime获取毫秒数" class="headerlink" title="LocalDateTime获取毫秒数"></a>LocalDateTime获取毫秒数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取秒数</span></span><br><span class="line">Long second = LocalDateTime.now().toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>));</span><br><span class="line"><span class="comment">//获取毫秒数</span></span><br><span class="line">Long milliSecond = LocalDateTime.now().toInstant(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).toEpochMilli();</span><br></pre></td></tr></table></figure>

<h2 id="LocalDateTime与String互转"><a href="#LocalDateTime与String互转" class="headerlink" title="LocalDateTime与String互转"></a>LocalDateTime与String互转</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间转字符串格式化</span></span><br><span class="line"> DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyyMMddHHmmssSSS&quot;</span>);</span><br><span class="line"> String dateTime = LocalDateTime.now(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).format(formatter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转时间</span></span><br><span class="line">String dateTimeStr = <span class="string">&quot;2018-07-28 14:11:15&quot;</span>;</span><br><span class="line">DateTimeFormatter df = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">LocalDateTime dateTime = LocalDateTime.parse(dateTimeStr, df);</span><br></pre></td></tr></table></figure>

<h2 id="Date与LocalDateTime互转"><a href="#Date与LocalDateTime互转" class="headerlink" title="Date与LocalDateTime互转"></a>Date与LocalDateTime互转</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将java.util.Date 转换为java8 的java.time.LocalDateTime,默认时区为东8区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">dateConvertToLocalDateTime</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.toInstant().atOffset(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).toLocalDateTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将java8 的 java.time.LocalDateTime 转换为 java.util.Date，默认时区为东8区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">localDateTimeConvertToDate</span><span class="params">(LocalDateTime localDateTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Date.from(localDateTime.toInstant(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试转换是否正确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDateConvertToLocalDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date date = DateUtils.parseDate(<span class="string">&quot;2018-08-01 21:22:22&quot;</span>, DateUtils.DATE_YMDHMS);</span><br><span class="line">    LocalDateTime localDateTime = DateUtils.dateConvertToLocalDateTime(date);</span><br><span class="line">    Long localDateTimeSecond = localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>));</span><br><span class="line">    Long dateSecond = date.toInstant().atOffset(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).toEpochSecond();</span><br><span class="line">    Assert.assertTrue(dateSecond.equals(localDateTimeSecond));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>LocalDateTime</tag>
        <tag>Date</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程JUC原子类之AtomicLongArray原子类</title>
    <url>/2021/01/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BJUC%E5%8E%9F%E5%AD%90%E7%B1%BB%E4%B9%8BAtomicLongArray%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3514604.html">https://www.cnblogs.com/skywang12345/p/3514604.html</a></p>
</blockquote>
<p>在”Java多线程系列–“ <a href="https://www.notion.so/Java-JUC-AtomicLong-842f5bea464847abbfee4d03a18ca99f">Java多线程JUC原子类之 AtomicLong原子类</a> “中介绍过，AtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对”长整形数组”进行原子操作。</p>
<h1 id="AtomicLongArray函数列表"><a href="#AtomicLongArray函数列表" class="headerlink" title="AtomicLongArray函数列表"></a>AtomicLongArray函数列表</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建给定长度的新 AtomicLongArray。</span></span><br><span class="line">AtomicLongArray(<span class="keyword">int</span> length)</span><br><span class="line"><span class="comment">// 创建与给定数组具有相同长度的新 AtomicLongArray，并从给定数组复制其所有元素。</span></span><br><span class="line">AtomicLongArray(<span class="keyword">long</span>[] array)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以原子方式将给定值添加到索引 i 的元素。</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素减1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">decrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取位置 i 的当前值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将给定值与索引 i 的元素相加。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素减 1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndDecrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素加 1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将位置 i 的元素设置为给定值，并返回旧值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将索引 i 的元素加1。</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 最终将位置 i 的元素设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回该数组的长度。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将位置 i 的元素设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回数组当前值的字符串表示形式。</span></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>AtomicLongArray的代码很简单，下面仅以incrementAndGet()为例，对AtomicLong的原理进行说明。</p>
<h2 id="incrementAndGet-源码如下："><a href="#incrementAndGet-源码如下：" class="headerlink" title="incrementAndGet()源码如下："></a>incrementAndGet()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAndGet(i, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：incrementAndGet()的作用是以原子方式将long数组的索引 i 的元素加1，并返回加1之后的值。</p>
<h2 id="addAndGet-源码如下："><a href="#addAndGet-源码如下：" class="headerlink" title="addAndGet()源码如下："></a>addAndGet()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查数组是否越界</span></span><br><span class="line">    <span class="keyword">long</span> offset = checkedByteOffset(i);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取long型数组的索引 offset 的原始值</span></span><br><span class="line">        <span class="keyword">long</span> current = getRaw(offset);</span><br><span class="line">        <span class="comment">// 修改long型值</span></span><br><span class="line">        <span class="keyword">long</span> next = current + delta;</span><br><span class="line">        <span class="comment">// 通过CAS更新long型数组的索引 offset的值。</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetRaw(offset, current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：addAndGet()首先检查数组是否越界。如果没有越界的话，则先获取数组索引i的值；然后通过CAS函数更新i的值。</p>
<h2 id="getRaw-源码如下："><a href="#getRaw-源码如下：" class="headerlink" title="getRaw()源码如下："></a>getRaw()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getRaw</span><span class="params">(<span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.getLongVolatile(array, offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：unsafe是通过Unsafe.getUnsafe()返回的一个Unsafe对象。通过Unsafe的CAS函数对long型数组的元素进行原子操作。如compareAndSetRaw()就是调用Unsafe的CAS函数，它的源码如下：</p>
<h2 id="compareAndSetRaw-源码如下："><a href="#compareAndSetRaw-源码如下：" class="headerlink" title="compareAndSetRaw()源码如下："></a>compareAndSetRaw()源码如下：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndSetRaw</span><span class="params">(<span class="keyword">long</span> offset, <span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapLong(array, offset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAtomicArrayLong</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建AtomicLongArray对象</span></span><br><span class="line">        <span class="keyword">long</span>[] arrLong = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">        AtomicLongArray ala = <span class="keyword">new</span> AtomicLongArray(arrLong);</span><br><span class="line"></span><br><span class="line">        ala.set(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, len=ala.length(); i&lt;len; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;get(%d) : %s\n&quot;</span>, i, ala.get(i));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;getAndDecrement(0)&quot;</span>, ala.getAndDecrement(<span class="number">0</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;decrementAndGet(1)&quot;</span>, ala.decrementAndGet(<span class="number">1</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;getAndIncrement(2)&quot;</span>, ala.getAndIncrement(<span class="number">2</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;incrementAndGet(3)&quot;</span>, ala.incrementAndGet(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;addAndGet(100)&quot;</span>, ala.addAndGet(<span class="number">0</span>, <span class="number">100</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;getAndAdd(100)&quot;</span>, ala.getAndAdd(<span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;compareAndSet()&quot;</span>, ala.compareAndSet(<span class="number">2</span>, <span class="number">31</span>, <span class="number">1000</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;get(2)&quot;</span>, ala.get(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">get(<span class="number">0</span>) : <span class="number">100</span></span><br><span class="line">get(<span class="number">1</span>) : <span class="number">20</span></span><br><span class="line">get(<span class="number">2</span>) : <span class="number">30</span></span><br><span class="line">get(<span class="number">3</span>) : <span class="number">40</span></span><br><span class="line">get(<span class="number">4</span>) : <span class="number">50</span></span><br><span class="line">  getAndDecrement(<span class="number">0</span>) : <span class="number">100</span></span><br><span class="line">  decrementAndGet(<span class="number">1</span>) : <span class="number">19</span></span><br><span class="line">  getAndIncrement(<span class="number">2</span>) : <span class="number">30</span></span><br><span class="line">  incrementAndGet(<span class="number">3</span>) : <span class="number">41</span></span><br><span class="line">      addAndGet(<span class="number">100</span>) : <span class="number">199</span></span><br><span class="line">      getAndAdd(<span class="number">100</span>) : <span class="number">19</span></span><br><span class="line">     compareAndSet() : <span class="keyword">true</span></span><br><span class="line">              get(<span class="number">2</span>) : <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程JUC原子类之 AtomicLong原子类</title>
    <url>/2021/01/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BJUC%E5%8E%9F%E5%AD%90%E7%B1%BB%E4%B9%8B-AtomicLong%E5%8E%9F%E5%AD%90%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3514593.html">https://www.cnblogs.com/skywang12345/p/3514593.html</a></p>
</blockquote>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>AtomicInteger, AtomicLong和AtomicBoolean这3个基本类型的原子类的原理和用法相似。所以以AtomicLong对基本类型的原子类进行介绍。内容主要包括：</p>
<ul>
<li>AtomicLong介绍和函数列表</li>
<li>AtomicLong源码分析(基于JDK1.8.0_251)</li>
<li>AtomicLong示例</li>
</ul>
<h1 id="2-AtomicLong介绍和函数列表"><a href="#2-AtomicLong介绍和函数列表" class="headerlink" title="2 AtomicLong介绍和函数列表"></a>2 AtomicLong介绍和函数列表</h1><p>AtomicLong是作用是对长整形进行原子操作。</p>
<p>在32位操作系统中，64位的long 和 double 变量由于会被JVM当作两个分离的32位来进行操作，所以不具有原子性。而使用AtomicLong能让long的操作保持原子型。</p>
<h2 id="2-1-函数列表"><a href="#2-1-函数列表" class="headerlink" title="2.1 函数列表"></a>2.1 函数列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">AtomicLong()</span><br><span class="line"><span class="comment">// 创建值为initialValue的AtomicLong对象</span></span><br><span class="line">AtomicLong(<span class="keyword">long</span> initialValue)</span><br><span class="line"><span class="comment">// 以原子方式设置当前值为newValue。</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> newValue)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值减 1，并返回减1后的值。等价于“--num”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">decrementAndGet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值减 1，并返回减1前的值。等价于“num--”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndDecrement</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值加 1，并返回加1后的值。等价于“++num”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将当前值加 1，并返回加1前的值。等价于“num++”</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndIncrement</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将delta与当前值相加，并返回相加后的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">long</span> delta)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式将delta添加到当前值，并返回相加前的值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">long</span> delta)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == expect，则以原子方式将该值设置为update。成功返回true，否则返回false，并且不修改原值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式设置当前值为newValue，并返回旧值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回当前值对应的int值</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前值对应的long值</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以 float 形式返回当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 以 double 形式返回当前值</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span>    </span></span><br><span class="line"><span class="function"><span class="comment">// 最后设置为给定值。延时设置变量值，这个等价于set()方法，但是由于字段是volatile类型的，因此次字段的修改会比普通字段（非volatile字段）有稍微的性能延时（尽管可以忽略），所以如果不是想立即读取设置的新值，允许在“后台”修改值，那么此方法就很有用。如果还是难以理解，这里就类似于启动一个后台线程如执行修改新值的任务，原线程就不等待修改结果立即返回（这种解释其实是不正确的，但是可以这么理解）。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(<span class="keyword">long</span> newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该设置为给定的更新值。JSR规范中说：以原子方式读取和有条件地写入变量但不 创建任何 happen-before 排序，因此不提供与除 weakCompareAndSet 目标外任何变量以前或后续读取或写入操作有关的任何保证。大意就是说调用weakCompareAndSet时并不能保证不存在happen-before的发生（也就是可能存在指令重排序导致此操作失败）。但是从Java源码来看，其实此方法并没有实现JSR规范的要求，最后效果和compareAndSet是等效的，都调用了unsafe.compareAndSwapInt()完成操作。</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="3-AtomicLong-源码分析"><a href="#3-AtomicLong-源码分析" class="headerlink" title="3 AtomicLong 源码分析"></a>3 AtomicLong 源码分析</h1><ul>
<li>AtomicLong源码分析</li>
</ul>
<p>AtomicLong的代码很简单，下面仅以incrementAndGet()为例，对AtomicLong的原理进行说明。</p>
<p>incrementAndGet()源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取AtomicLong当前对应的long值</span></span><br><span class="line">        <span class="keyword">long</span> current = get();</span><br><span class="line">        <span class="comment">// 将current加1</span></span><br><span class="line">        <span class="keyword">long</span> next = current + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 通过CAS函数，更新current的值</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSet(current, next))</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：</p>
<p>(01) incrementAndGet()首先会根据get()获取AtomicLong对应的long值。该值是volatile类型的变量，get()的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// value是AtomicLong对应的long值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line"><span class="comment">// 返回AtomicLong对应的long值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(02) incrementAndGet()接着将current加1,然后通过CAS函数，将新的值赋值给value。</p>
<p>compareAndSet()的源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compareAndSet()的作用是更新AtomicLong对应的long值。它会比较AtomicLong的原始值是否与expect相等，若相等的话，则设置AtomicLong的值为update。</p>
<h1 id="4-AtomicLong示例"><a href="#4-AtomicLong示例" class="headerlink" title="4 AtomicLong示例"></a>4 AtomicLong示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LongTest.java的源码</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建AtomicLong对象</span></span><br><span class="line">        AtomicLong mAtoLong = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">        mAtoLong.set(<span class="number">0x0123456789ABCDEFL</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;get()&quot;</span>, mAtoLong.get());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;intValue()&quot;</span>, mAtoLong.intValue());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;longValue()&quot;</span>, mAtoLong.longValue());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;doubleValue()&quot;</span>, mAtoLong.doubleValue());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;floatValue()&quot;</span>, mAtoLong.floatValue());</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;getAndDecrement()&quot;</span>, mAtoLong.getAndDecrement());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;decrementAndGet()&quot;</span>, mAtoLong.decrementAndGet());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;getAndIncrement()&quot;</span>, mAtoLong.getAndIncrement());</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;incrementAndGet()&quot;</span>, mAtoLong.incrementAndGet());</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;addAndGet(0x10)&quot;</span>, mAtoLong.addAndGet(<span class="number">0x10</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;getAndAdd(0x10)&quot;</span>, mAtoLong.getAndAdd(<span class="number">0x10</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;\n%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;get()&quot;</span>, mAtoLong.get());</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : %s\n&quot;</span>, <span class="string">&quot;compareAndSet()&quot;</span>, mAtoLong.compareAndSet(<span class="number">0x12345679L</span>, <span class="number">0xFEDCBA9876543210L</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%20s : 0x%016X\n&quot;</span>, <span class="string">&quot;get()&quot;</span>, mAtoLong.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">get() : <span class="number">0x0123456789ABCDEF</span></span><br><span class="line">          intValue() : <span class="number">0x0000000089ABCDEF</span></span><br><span class="line">         longValue() : <span class="number">0x0123456789ABCDEF</span></span><br><span class="line">       doubleValue() : <span class="number">8.1985529216486896E16</span></span><br><span class="line">        floatValue() : <span class="number">8.1985531E16</span></span><br><span class="line">   getAndDecrement() : <span class="number">0x0123456789ABCDEF</span></span><br><span class="line">   decrementAndGet() : <span class="number">0x0123456789ABCDED</span></span><br><span class="line">   getAndIncrement() : <span class="number">0x0123456789ABCDED</span></span><br><span class="line">   incrementAndGet() : <span class="number">0x0123456789ABCDEF</span></span><br><span class="line">     addAndGet(<span class="number">0x10</span>) : <span class="number">0x0123456789ABCDFF</span></span><br><span class="line">     getAndAdd(<span class="number">0x10</span>) : <span class="number">0x0123456789ABCDFF</span></span><br><span class="line"></span><br><span class="line">               get() : <span class="number">0x0123456789ABCE0F</span></span><br><span class="line">     compareAndSet() : <span class="keyword">false</span></span><br><span class="line">               get() : <span class="number">0x0123456789ABCE0F</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程JUC原子类之AtomicReference</title>
    <url>/2021/02/03/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BJUC%E5%8E%9F%E5%AD%90%E7%B1%BB%E4%B9%8BAtomicReference/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3514623.html">https://www.cnblogs.com/skywang12345/p/3514623.html</a></p>
</blockquote>
<h1 id="AtomicReference介绍和函数列表"><a href="#AtomicReference介绍和函数列表" class="headerlink" title="AtomicReference介绍和函数列表"></a>AtomicReference介绍和函数列表</h1><p>AtomicReference是作用是对”对象”进行原子操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 null 初始值创建新的 AtomicReference。</span></span><br><span class="line">AtomicReference()</span><br><span class="line"><span class="comment">// 使用给定的初始值创建新的 AtomicReference。</span></span><br><span class="line">AtomicReference(V initialValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect, V update)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取当前值。</span></span></span><br><span class="line"><span class="function">V <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以原子方式设置为给定值，并返回旧值。</span></span></span><br><span class="line"><span class="function">V <span class="title">getAndSet</span><span class="params">(V newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 最终设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(V newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置为给定值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(V newValue)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回当前值的字符串表示形式。</span></span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 如果当前值 == 预期值，则以原子方式将该值设置为给定的更新值。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(V expect, V update)</span></span></span><br></pre></td></tr></table></figure>

<h1 id="源码（JDK1-8-0-202）"><a href="#源码（JDK1-8-0-202）" class="headerlink" title="源码（JDK1.8.0_202）"></a>源码（JDK1.8.0_202）</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An object reference that may be updated atomically. See the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * java.util.concurrent.atomic&#125; package specification for description</span></span><br><span class="line"><span class="comment"> * of the properties of atomic variables.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; The type of object referred to by this reference</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReference</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1848883965231344442L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Unsafe对象，Unsafe的作用是提供CAS操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReference.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// volatile类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicReference with the given initial value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialValue the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicReference</span><span class="params">(V initialValue)</span> </span>&#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicReference with null initial value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Eventually sets to the given value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lazySet</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        unsafe.putOrderedObject(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful. False return indicates that</span></span><br><span class="line"><span class="comment">     * the actual value was not equal to the expected value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect, V update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets the value to the given updated value</span></span><br><span class="line"><span class="comment">     * if the current value &#123;<span class="doctag">@code</span> ==&#125; the expected value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;&lt;a href=&quot;package-summary.html#weakCompareAndSet&quot;&gt;May fail</span></span><br><span class="line"><span class="comment">     * spuriously and does not provide ordering guarantees&lt;/a&gt;, so is</span></span><br><span class="line"><span class="comment">     * only rarely an appropriate alternative to &#123;<span class="doctag">@code</span> compareAndSet&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expect the expected value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> update the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if successful</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">weakCompareAndSet</span><span class="params">(V expect, V update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically sets to the given value and returns the old value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newValue the new value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getAndSet</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (V)unsafe.getAndSetObject(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the previous value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getAndUpdate</span><span class="params">(UnaryOperator&lt;V&gt; updateFunction)</span> </span>&#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function, returning the updated value. The</span></span><br><span class="line"><span class="comment">     * function should be side-effect-free, since it may be re-applied</span></span><br><span class="line"><span class="comment">     * when attempted updates fail due to contention among threads.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> updateFunction a side-effect-free function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">updateAndGet</span><span class="params">(UnaryOperator&lt;V&gt; updateFunction)</span> </span>&#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the previous value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getAndAccumulate</span><span class="params">(V x,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> </span>&#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically updates the current value with the results of</span></span><br><span class="line"><span class="comment">     * applying the given function to the current and given values,</span></span><br><span class="line"><span class="comment">     * returning the updated value. The function should be</span></span><br><span class="line"><span class="comment">     * side-effect-free, since it may be re-applied when attempted</span></span><br><span class="line"><span class="comment">     * updates fail due to contention among threads.  The function</span></span><br><span class="line"><span class="comment">     * is applied with the current value as its first argument,</span></span><br><span class="line"><span class="comment">     * and the given update as the second argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x the update value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accumulatorFunction a side-effect-free function of two arguments</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the updated value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">accumulateAndGet</span><span class="params">(V x,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> </span>&#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the String representation of the current value.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the String representation of the current value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：AtomicReference的源码比较简单。它是通过”volatile”和”Unsafe提供的CAS函数实现”原子操作。(01) value是volatile类型。这保证了：当某线程修改value的值时，其他线程看到的value值都是最新的value值，即修改之后的volatile的值。(02) 通过CAS设置value。这保证了：当某线程池通过CAS函数(如compareAndSet函数)设置value时，它的操作是原子的，即线程在操作value时不会被中断。</p>
<h1 id="AtomicReference示例"><a href="#AtomicReference示例" class="headerlink" title="AtomicReference示例"></a>AtomicReference示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AtomicReferenceTest.java的源码</span></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个Person对象，它们的id分别是101和102。</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">101</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">102</span>);</span><br><span class="line">        <span class="comment">// 新建AtomicReference对象，初始化它的值为p1对象</span></span><br><span class="line">        AtomicReference ar = <span class="keyword">new</span> AtomicReference(p1);</span><br><span class="line">        <span class="comment">// 通过CAS设置ar。如果ar的值为p1的话，则将其设置为p2。</span></span><br><span class="line">        ar.compareAndSet(p1, p2);</span><br><span class="line"></span><br><span class="line">        Person p3 = (Person)ar.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;p3 is &quot;</span>+p3);</span><br><span class="line">        System.out.println(<span class="string">&quot;p3.equals(p1)=&quot;</span>+p3.equals(p1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id:&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p3 is id:<span class="number">102</span></span><br><span class="line">p3.equals(p1)=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p><strong>结果说明</strong>：新建AtomicReference对象ar时，将它初始化为p1。紧接着，通过CAS函数对它进行设置。如果ar的值为p1的话，则将其设置为p2。最后，获取ar对应的对象，并打印结果。p3.equals(p1)的结果为false，这是因为Person并没有覆盖equals()方法，而是采用继承自Object.java的equals()方法；而Object.java中的equals()实际上是调用”==”去比较两个对象，即比较两个对象的地址是否相等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之Lock锁</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8BLock%E9%94%81/</url>
    <content><![CDATA[<p>锁是用于通过多个线程控制对共享资源的访问的工具。一般来说，锁提供对共享资源的独占访问：一次只能有一个线程可以获取锁，并且对共享资源的所有访问都要求首先获取锁。 但是，一些锁可能允许并发访问共享资源，如ReadWriteLock的读写锁。</p>
<span id="more"></span>

<h1 id="Java-并发学习记录之-Lock-锁"><a href="#Java-并发学习记录之-Lock-锁" class="headerlink" title="Java 并发学习记录之 Lock 锁"></a>Java 并发学习记录之 Lock 锁</h1><p>@[toc]</p>
<h2 id="Lock-接口"><a href="#Lock-接口" class="headerlink" title="Lock 接口"></a>Lock 接口</h2><p>锁是用于通过多个线程控制对共享资源的访问的工具。一般来说，锁提供对共享资源的独占访问：一次只能有一个线程可以获取锁，并且对共享资源的所有访问都要求首先获取锁。 但是，一些锁可能允许并发访问共享资源，如ReadWriteLock的读写锁。</p>
<p>在Lock接口出现之前，Java程序是靠synchronized关键字实现锁功能的。JDK1.5之后并发包中新增了Lock接口以及相关实现类来实现锁功能。虽然缺少了隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种 synchronized 关键字所不具备的同步特性。</p>
<h3 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 Lock 是接口所以使用时要结合它的实现类，另外在 finall 语句块中释放锁的目的是保证获取到锁之后，最终能够被释放。同时注意最好不要把获取锁的过程写在 try 语句块中，因为如果在获取锁时发生了异常，异常抛出的同时也会导致锁无故释放。</p>
<h3 id="Lock接口提供的synchronized关键字不具备的主要特性："><a href="#Lock接口提供的synchronized关键字不具备的主要特性：" class="headerlink" title="Lock接口提供的synchronized关键字不具备的主要特性："></a>Lock接口提供的synchronized关键字不具备的主要特性：</h3><table>
<thead>
<tr>
<th>特性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>尝试非阻塞地获取锁</td>
<td>当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁</td>
</tr>
<tr>
<td>能被中断地获取锁</td>
<td>获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会被抛出，同时锁会被释放</td>
</tr>
<tr>
<td>超时获取锁</td>
<td>在指定的截止时间之前获取锁， 超过截止时间后仍旧无法获取则返回</td>
</tr>
</tbody></table>
<h3 id="Lock接口基本的方法："><a href="#Lock接口基本的方法：" class="headerlink" title="Lock接口基本的方法："></a>Lock接口基本的方法：</h3><table>
<thead>
<tr>
<th>方法名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void lock()</td>
<td>获得锁。如果锁不可用，则当前线程将被禁用以进行线程调度，并处于休眠状态，直到获取锁。</td>
</tr>
<tr>
<td>void lockInterruptibly()</td>
<td>获取锁，如果可用并立即返回。如果锁不可用，那么当前线程将被禁用以进行线程调度，并且处于休眠状态，和lock()方法不同的是在锁的获取中可以中断当前线程（相应中断）。</td>
</tr>
<tr>
<td>Condition newCondition()</td>
<td>获取等待通知组件，该组件和当前的锁绑定，当前线程只有获得了锁，才能调用该组件的wait()方法，而调用后，当前线程将释放锁。</td>
</tr>
<tr>
<td>boolean tryLock()</td>
<td>只有在调用时才可以获得锁。如果可用，则获取锁定，并立即返回值为true；如果锁不可用，则此方法将立即返回值为false 。</td>
</tr>
<tr>
<td>boolean tryLock(long time, TimeUnit unit)</td>
<td>超时获取锁，当前线程在一下三种情况下会返回：<br/>1. 当前线程在超时时间内获得了锁；<br/>2.当前线程在超时时间内被中断；<br/>3.超时时间结束，返回false.</td>
</tr>
<tr>
<td>void unlock()</td>
<td>释放锁。</td>
</tr>
</tbody></table>
<h3 id="对同步器-AbstractQueuedSynchronizer-的分析"><a href="#对同步器-AbstractQueuedSynchronizer-的分析" class="headerlink" title="对同步器 AbstractQueuedSynchronizer 的分析"></a>对同步器 AbstractQueuedSynchronizer 的分析</h3><ul>
<li><input disabled="" type="checkbox"> Java并发学习记录之同步器AbstractQueuedSynchronizer</li>
</ul>
<h2 id="Lock-实现类：ReentrantLock"><a href="#Lock-实现类：ReentrantLock" class="headerlink" title="Lock 实现类：ReentrantLock"></a>Lock 实现类：ReentrantLock</h2><p>重入锁 ReentrantLock，顾名思义，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，还支持获取锁时的公平和非公平锁选择。</p>
<h3 id="加锁2次释放2次"><a href="#加锁2次释放2次" class="headerlink" title="加锁2次释放2次"></a>加锁2次释放2次</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/28</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockR</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 加锁&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();<span class="comment">// 重进入验证</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 循环计数 = &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();<span class="comment">// 锁的释放</span></span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 解锁&quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantLockR lockR = <span class="keyword">new</span> ReentrantLockR();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(lockR);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(lockR);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(lockR);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190305213555836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以看到，运行结果是只有当线程运行完毕后才会释放锁，其它线程才能获得锁-&gt;执行业务代码-&gt;释放锁。<strong>其他线程的执行顺序是不确定的</strong>（为了这个图运行了很多遍）。</p>
<p>仔细观察代码，可以我加了两遍锁，同时也释放了两遍锁。</p>
<h3 id="如果，加锁两次释放一次："><a href="#如果，加锁两次释放一次：" class="headerlink" title="如果，加锁两次释放一次："></a>如果，加锁两次释放一次：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    lock.lock();<span class="comment">// 重进入验证</span></span><br><span class="line">    System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 加锁&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 循环计数 = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//      lock.unlock();// 锁的释放</span></span><br><span class="line">        System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 解锁&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190305213701157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="又如果，加锁1次却释放锁两次，就会抛异常："><a href="#又如果，加锁1次却释放锁两次，就会抛异常：" class="headerlink" title="又如果，加锁1次却释放锁两次，就会抛异常："></a>又如果，加锁1次却释放锁两次，就会抛异常：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="comment">//lock.lock();// 重进入验证</span></span><br><span class="line">    System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 加锁&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 循环计数 = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();<span class="comment">// 锁的释放</span></span><br><span class="line">        System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 解锁&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/2019030521374275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="公平与非公平获取锁的区别"><a href="#公平与非公平获取锁的区别" class="headerlink" title="公平与非公平获取锁的区别"></a>公平与非公平获取锁的区别</h3><p>如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是 FIFO。</p>
<p>ReentrantLock 的 非公平锁的获取（源码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReentrantLock 的 公平锁的获取（源码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Fair version of tryAcquire.  Don&#x27;t grant access unless</span></span><br><span class="line"><span class="comment"> * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比两个方法的不同点只是获取公平锁判断条件多了 <code>hasQueuedPredecessors()</code> 方法，即加入了同步队列中当前是否有前驱结点的判断，如果该方法返回 true，则表示当前线程需要等待前驱线程获取锁并释放锁之后才能继续获取锁。</p>
<p>当你看到 ReentrantLock 的构造函数，为什么非公平锁会被设定为默认的实现呢？</p>
<p>要知道一个刚释放锁的线程再次获取锁的几率会非常大，使得其他线程只能在同步队列中等待，从而让非公平锁使线程“饥饿”， 这是因为虽然公平锁保证了锁的获取按照 FIFO 原则，但代价是进行了大量的线程切换。非公平锁虽然可能会造成线程“饥饿”，但极少的线程切换，保证了更大的吞吐量。</p>
<h2 id="读写锁：ReadWriteLock"><a href="#读写锁：ReadWriteLock" class="headerlink" title="读写锁：ReadWriteLock"></a>读写锁：ReadWriteLock</h2><p>之前学习过的如 <code>synchronized</code> 关键字、<code>ReentrantLock</code> 重入锁都是排他锁，这些锁在同一时刻只允许一个线程进行访问。读写锁不同，在同一时刻允许多个<strong>读线程</strong>访问，但是在<strong>写线程</strong>访问时，所有的读线程和其它线程均会被阻塞。读写锁维护了一对锁（读锁-&gt;共享锁和写锁-&gt;排他锁），通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大的提升。</p>
<p>假设有这样一种情况，在程序中定义了一个共享的缓存数据结构，它在大部分的时间读服务（如查询）使用的很多，而写的服务很少，但每次写完后数据对读的服务可见。（读：很多；写：很少）</p>
<p>在这种情况下，你很可能会使用等待/通知机制来实现从而保证数据不会出现脏读。</p>
<p>改用读写锁来实现的话，只需在读操作时获取读锁，写操作时获取写锁。当前线程进行写操作时，其它的读写线程阻塞，当档期那线程的写锁释放后，其它线程继续执行，而如果其它线程都是读线程，那么都允许执行。</p>
<p>也就是说，在读大于写的情况下，使用读写锁具有比其他排他锁更好的并发性和吞吐量。</p>
<h3 id="ReadWriteLock-的实现类-ReentrantReadWriteLock-的特性"><a href="#ReadWriteLock-的实现类-ReentrantReadWriteLock-的特性" class="headerlink" title="ReadWriteLock 的实现类 ReentrantReadWriteLock 的特性"></a>ReadWriteLock 的实现类 ReentrantReadWriteLock 的特性</h3><table>
<thead>
<tr>
<th>特性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>公平性选择</td>
<td>支持非公平（默认）和公平的锁获取方式，吞吐量上来看还是非公平优于公平</td>
</tr>
<tr>
<td>重进入</td>
<td>该锁支持重进入，以读写线程为例：读线程在获取了读锁之后，能够再次获取读锁。而写线程在获取了写锁之后能够再次获取写锁也能够同时获取读锁</td>
</tr>
<tr>
<td>锁降级</td>
<td>遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级称为读锁</td>
</tr>
</tbody></table>
<h3 id="读写锁-ReentrantReadWriteLock-的使用测试"><a href="#读写锁-ReentrantReadWriteLock-的使用测试" class="headerlink" title="读写锁 ReentrantReadWriteLock 的使用测试"></a>读写锁 ReentrantReadWriteLock 的使用测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/1</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.readLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 获得读锁 &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.readLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.writeLock().lock();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 获得写锁 &quot;</span> + System.currentTimeMillis());</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，read() 方法中是关于读锁的操作， write() 方法中是关于写锁的操作。为了加强效果，分别让两个操作都睡眠 10s。</p>
<p>接下来将使用这两个方法进行组合从而进行三方面的测试：测试多个读锁间的不互斥、测试读锁与写锁互斥、测试写锁与写锁互斥。</p>
<h4 id="测试多个读锁间的不互斥"><a href="#测试多个读锁间的不互斥" class="headerlink" title="测试多个读锁间的不互斥"></a>测试多个读锁间的不互斥</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ReentrantReadWriteLockTest rwlSample = <span class="keyword">new</span> ReentrantReadWriteLockTest();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.read());</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.read());</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，发现两个线程几乎同时获得读锁。</p>
<h4 id="测试读锁与写锁互斥"><a href="#测试读锁与写锁互斥" class="headerlink" title="测试读锁与写锁互斥"></a>测试读锁与写锁互斥</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ReentrantReadWriteLockTest rwlSample = <span class="keyword">new</span> ReentrantReadWriteLockTest();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.read());</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.write());</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，发现两个线程互斥。</p>
<h4 id="测试写锁与写锁互斥"><a href="#测试写锁与写锁互斥" class="headerlink" title="测试写锁与写锁互斥"></a>测试写锁与写锁互斥</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ReentrantReadWriteLockTest rwlSample = <span class="keyword">new</span> ReentrantReadWriteLockTest();</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.write());</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; rwlSample.write());</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，发现两个线程互斥。</p>
<h3 id="对读写锁的分析"><a href="#对读写锁的分析" class="headerlink" title="对读写锁的分析"></a>对读写锁的分析</h3><ul>
<li><input disabled="" type="checkbox"> Java并发学习记录之读写锁分析</li>
</ul>
<h2 id="Condition-接口"><a href="#Condition-接口" class="headerlink" title="Condition 接口"></a>Condition 接口</h2><p><code>synchronized</code> 关键字与 <code>wait()</code> 和 <code>notify/notifyAll()</code> 方法相结合可以实现等待/通知机制，<br><code>Lock</code> 接口同样定义了等待/通知两种类型的方法，和前者一样，当前线程在调用这些方法前，<br>需要提前获取到 <code>Condition</code> 对象关联的锁。<code>Condition</code> 对象是由 <code>Lock</code> 接口实现类创建出来的<br><code>Condition condition = lock.newCondition();</code>。</p>
<p>在使用 notify/notifyAll()方法进行通知时，被通知的线程是有JVM选择的，<br>使用 Lock 类结合 Condition 实例可以实现“选择性通知”，这个功能非常重要，<br>而且是 Condition 接口默认提供的。</p>
<p>但是 synchronized 关键字就相当于整个 Lock 对象中只有一个 Condition 实例，<br>所有的线程都注册在它一个身上。如果执行 <code>notifyAll()</code> 方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，<br>而 Condition 实例的 <code>signalAll()</code> 方法只会唤醒注册在该 Condition 实例中的所有等待线程。</p>
<p>Condition 定义的（部分）方法介绍：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void await() throws InterruptedException</td>
<td>当前线程进入等待状态直到被通知或中断，当前线程将进入运行状态且从 await() 方法返回的情况，包括：<br/> 其它线程调用该 Condition 的 signal() 或 signalAll() 方法，而当前线程被选中唤醒<ul><li>其它线程（调用 interrupt() 方法）中断当前线程</li><li>如果当前等待线程从 await() 方法返回，那么表明该线程已经获取了 Condition 对象所对应的锁</li></ul></td>
</tr>
<tr>
<td>void awaitUninterruptibly()</td>
<td>当前线程进入等待状态直到被通知，对中断不敏感</td>
</tr>
<tr>
<td>long awaitNanos(long nanosTimeout) throws InterruptedException</td>
<td>当前线程进入等待状态直到被通知、中断或者到某个时间。返回值表示剩余时间，如果返回值是 0 或者负数，就表示超时</td>
</tr>
<tr>
<td>long awaitNanos(long nanosTimeout) throws InterruptedException</td>
<td>当前线程进入等待状态直到被通知、中断或者到某个时间。如果没有到指定时间就被通知返回 true，否则返回 false</td>
</tr>
<tr>
<td>boolean awaitUntil(Date deadline) throws InterruptedException</td>
<td>遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级称为读锁</td>
</tr>
<tr>
<td>void signal()</td>
<td>唤醒一个等待在 Condition 实例上的线程</td>
</tr>
<tr>
<td>void signalAll()</td>
<td>唤醒所有等待在 Condition 实例上的线程</td>
</tr>
</tbody></table>
<h3 id="Condition-使用示例"><a href="#Condition-使用示例" class="headerlink" title="Condition 使用示例"></a>Condition 使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-03-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionSample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionWait</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 释放锁并开始等待&quot;</span>);</span><br><span class="line">            <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">            condition.await();</span><br><span class="line">            <span class="keyword">long</span> time = System.currentTimeMillis() - l;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 获得锁并结束等待, 等待时间是 &quot;</span> + time + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conditionSignal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 开始释放锁并通知线程等待队列&quot;</span>);</span><br><span class="line">            condition.signal();</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;线程 &quot;</span> + Thread.currentThread().getId() + <span class="string">&quot; 释放锁并通知线程等待队列&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConditionSample sample = <span class="keyword">new</span> ConditionSample();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; sample.conditionWait());</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; sample.conditionSignal());</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190305213817994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在使用 wait/notify 实现等待通知机制的时候我们知道必须执行完 notify() 方法所在的 synchronized 代码块后才释放锁。<br>在这里也一样，必须执行完 signal 所在的 try 语句块之后才释放锁，condition.await() 后的语句才能被执行。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>《Java并发编程的艺术》<br>《Java并发编程实战》</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程JUC锁之公平锁</title>
    <url>/2021/04/25/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BJUC%E9%94%81%E4%B9%8B%E5%85%AC%E5%B9%B3%E9%94%81/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3496147.html">https://www.cnblogs.com/skywang12345/p/3496147.html</a></p>
</blockquote>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a><strong>1 基本概念</strong></h1><p>本章，我们会讲解“线程获取公平锁”的原理；在讲解之前，需要了解几个基本概念。后面的内容，都是基于这些概念的；这些概念可能比较枯燥，但从这些概念中，能窥见“java锁”的一些架构，这对我们了解锁是有帮助的。</p>
<span id="more"></span>

<ol>
<li><p><strong>AQS</strong> – 指AbstractQueuedSynchronizer类。<br>  AQS是java中管理“锁”的抽象类，锁的许多公共方法都是在这个类中实现。AQS是独占锁(例如，ReentrantLock)和共享锁(例如，Semaphore)的公共父类。</p>
</li>
<li><p><strong>AQS</strong>锁的类别 – 分为“<strong>独占锁</strong>”和“<strong>共享锁</strong>”两种。<br>  (01) <strong>独占锁</strong> – 锁在一个时间点只能被一个线程锁占有。根据锁的获取机制，它又划分为“<strong>公平锁</strong>”和“<strong>非公平锁</strong>”。公平锁，是按照通过CLH等待线程按照先来先得的规则，公平的获取锁；而非公平锁，则当线程要获取锁时，它会无视CLH等待队列而直接获取锁。独占锁的典型实例子是ReentrantLock，此外，ReentrantReadWriteLock.WriteLock也是独占锁。<br>  (02) <strong>共享锁</strong> – 能被多个线程同时拥有，能被共享的锁。JUC包中的ReentrantReadWriteLock.ReadLock，CyclicBarrier， CountDownLatch和Semaphore都是共享锁。这些锁的用途和原理，在以后的章节再详细介绍。</p>
</li>
<li><p><strong>CLH队列</strong> – Craig, Landin, and Hagersten lock queue<br>  CLH队列是AQS中“等待锁”的线程队列。在多线程中，为了保护竞争资源不被多个线程同时操作而起来错误，我们常常需要通过锁来保护这些资源。在独占锁中，竞争资源在一个时间点只能被一个线程锁访问；而其它线程则需要等待。CLH就是管理这些“等待锁”的线程的队列。<br>  CLH是一个非阻塞的 FIFO 队列。也就是说往里面插入或移除一个节点的时候，在并发条件下不会阻塞，而是通过自旋锁和 CAS 保证节点插入和移除的原子性。</p>
</li>
<li><p><strong>CAS函数</strong> – Compare And Swap<br>  CAS函数，是比较并交换函数，它是原子操作函数；即，通过CAS操作的数据都是以<strong>原子方式</strong>进行的。例如，compareAndSetHead(), compareAndSetTail(), compareAndSetNext()等函数。它们共同的特点是，这些函数所执行的动作是以原子的方式进行的。</p>
</li>
</ol>
<p><font color=red>本章是围绕“公平锁”如何获取锁而层次展开。“公平锁”涉及到的知识点比较多，但总的来说，不是特别难；如果读者能读懂AQS和ReentrantLock.java这两个类的大致意思，理解锁的原理和机制也就不成问题了。本章只是作者本人对锁的一点点理解，希望这部分知识能帮助您了解“公平锁”的获取过程，认识“锁”的框架。</font></p>
<h1 id="2-ReentrantLock数据结构"><a href="#2-ReentrantLock数据结构" class="headerlink" title="2 ReentrantLock数据结构"></a>2 <strong>ReentrantLock数据结构</strong></h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271417467039316.jpg" alt="img"></p>
<p>从图中可以看出：</p>
<ol>
<li>ReentrantLock实现了Lock接口。</li>
<li>ReentrantLock与sync是组合关系。ReentrantLock中，包含了Sync对象；而且，Sync是AQS的子类；更重要的是，Sync有两个子类FairSync(公平锁)和NonFairSync(非公平锁)。ReentrantLock是一个独占锁，至于它到底是公平锁还是非公平锁，就取决于sync对象是”FairSync的实例”还是”NonFairSync的实例”。</li>
</ol>
<h1 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3 源码解析"></a>3 源码解析</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JUC</tag>
        <tag>公平锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java多线程JUC锁-简介</title>
    <url>/2021/03/22/Java%E5%A4%9A%E7%BA%BF%E7%A8%8BJUC%E9%94%81-%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/skywang12345/p/3496098.html">Java多线程系列–“JUC锁”01之 框架</a></p>
</blockquote>
<p>[TOC]</p>
<h1 id="synchronized-同步锁"><a href="#synchronized-同步锁" class="headerlink" title="synchronized 同步锁"></a>synchronized 同步锁</h1><p>使用 <code>synchronized</code> 关键字进行同步，实现对竞争资源的互斥访问的锁。Java 1.0版本中就已经支持同步锁了。</p>
<p>同步锁的原理是，对于每一个对象，有且仅有一个同步锁；不同的线程能共同访问该同步锁。但是，在同一个时间点，该同步锁能且只能被一个线程获取到。这样，获取到同步锁的线程就能进行CPU调度，从而在CPU上执行；而没有获取到同步锁的线程，必须进行等待，直到获取到同步锁之后才能继续运行。这就是，多线程通过同步锁进行同步的原理！</p>
<h1 id="java-util-concurrent-包中的锁"><a href="#java-util-concurrent-包中的锁" class="headerlink" title="java.util.concurrent 包中的锁"></a>java.util.concurrent 包中的锁</h1><p><strong>相比同步锁，JUC包中的锁的功能更加强大，它为锁提供了一个框架，该框架允许更灵活地使用锁，只是它的用法更难罢了。</strong></p>
<p>JUC包中的锁，包括：Lock接口，ReadWriteLock接口，LockSupport阻塞原语，Condition条件，AbstractOwnableSynchronizer/AbstractQueuedSynchronizer/AbstractQueuedLongSynchronizer三个抽象类，ReentrantLock独占锁，ReentrantReadWriteLock读写锁。由于CountDownLatch，CyclicBarrier和Semaphore也是通过AQS来实现的；因此，我也将它们归纳到锁的框架中进行介绍。</p>
<p>先看看锁的框架图，如下所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271147386096273.jpg" alt="img"></p>
<h2 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h2><p>JUC包中的 Lock 接口支持那些语义不同(重入、公平等)的锁规则。所谓语义不同，是指锁可是有”公平机制的锁”、”非公平机制的锁”、”可重入的锁”等等。”公平机制”是指”不同线程获取锁的机制是公平的”，而”非公平机制”则是指”不同线程获取锁的机制是非公平的”，”可重入的锁”是指同一个锁能够被一个线程多次获取。</p>
<h2 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h2><p>ReadWriteLock 接口以和Lock类似的方式定义了一些读取者可以共享而写入者独占的锁。JUC包只有一个类实现了该接口，即 ReentrantReadWriteLock，因为它适用于大部分的标准用法上下文。但程序员可以创建自己的、适用于非标准要求的实现。</p>
<h2 id="AbstractOwnableSynchronizer-AbstractQueuedSynchronizer-AbstractQueuedLongSynchronizer"><a href="#AbstractOwnableSynchronizer-AbstractQueuedSynchronizer-AbstractQueuedLongSynchronizer" class="headerlink" title="AbstractOwnableSynchronizer/AbstractQueuedSynchronizer/AbstractQueuedLongSynchronizer"></a>AbstractOwnableSynchronizer/AbstractQueuedSynchronizer/AbstractQueuedLongSynchronizer</h2><p>AbstractQueuedSynchronizer就是被称之为<strong>AQS</strong>的类，它是一个非常有用的超类，可用来定义锁以及依赖于排队阻塞线程的其他同步器；ReentrantLock，ReentrantReadWriteLock，CountDownLatch，CyclicBarrier和Semaphore等这些类都是基于AQS类实现的。AbstractQueuedLongSynchronizer 类提供相同的功能但扩展了对同步状态的 64 位的支持。两者都扩展了类 AbstractOwnableSynchronizer（一个帮助记录当前保持独占同步的线程的简单类）。</p>
<h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><p>LockSupport提供“创建锁”和“其他同步类的基本线程阻塞原语”。<br>LockSupport的功能和”Thread中的Thread.suspend()和Thread.resume()有点类似”，LockSupport中的park() 和 unpark() 的作用分别是阻塞线程和解除阻塞线程。但是park()和unpark()不会遇到“Thread.suspend 和 Thread.resume所可能引发的死锁”问题。</p>
<h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><p>Condition需要和Lock联合使用，它的作用是代替Object监视器方法，可以通过await(),signal()来休眠/唤醒线程。<br>Condition 接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用 Object.wait 访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，单个 Lock 可能与多个 Condition 对象关联。为了避免兼容性问题，Condition 方法的名称与对应的 Object 版本中的不同。</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock是独占锁。所谓独占锁，是指只能被独自占领，即同一个时间点只能被一个线程锁获取到的锁。ReentrantLock锁包括”公平的ReentrantLock”和”非公平的ReentrantLock”。”公平的ReentrantLock”是指”不同线程获取锁的机制是公平的”，而”非公平的　　ReentrantLock”则是指”不同线程获取锁的机制是非公平的”，ReentrantLock是”可重入的锁”。<br>ReentrantLock的UML类图如下：</p>
<p><a href="https://images0.cnblogs.com/blog/497634/201401/271152070311302.jpg"><img src="https://gitee.com/littlefxc/oss/raw/master/images/271152070311302.jpg" alt="img"></a></p>
<ol>
<li>ReentrantLock实现了Lock接口。</li>
<li>ReentrantLock中有一个成员变量sync，sync是Sync类型；Sync是一个抽象类，而且它继承于AQS。</li>
<li>ReentrantLock中有”公平锁类”FairSync和”非公平锁类”NonfairSync，它们都是Sync的子类。ReentrantReadWriteLock中sync对象，是FairSync与NonfairSync中的一种，这也意味着ReentrantLock是”公平锁”或”非公平锁”中的一种，ReentrantLock默认是非公平锁。</li>
</ol>
<h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><p>ReentrantReadWriteLock是读写锁接口ReadWriteLock的实现类，它包括子类ReadLock和WriteLock。ReentrantLock是共享锁，而WriteLock是独占锁。<br>ReentrantReadWriteLock的UML类图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271152304845270.jpg" alt="img"></p>
<ol>
<li>ReentrantReadWriteLock实现了ReadWriteLock接口。</li>
<li>ReentrantReadWriteLock中包含sync对象，读锁readerLock和写锁writerLock。读锁ReadLock和写锁WriteLock都实现了Lock接口。</li>
<li>和”ReentrantLock”一样，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括”公平锁”FairSync和”非公平锁”NonfairSync。</li>
</ol>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。<br>CountDownLatch的UML类图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271151497193557.jpg" alt="img"></p>
<p>CountDownLatch包含了sync对象，sync是Sync类型。CountDownLatch的Sync是实例类，它继承于AQS。</p>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>CyclicBarrier是一个同步辅助类，允许一组线程互相等待，直到到达某个公共屏障点 (common barrier point)。因为该 barrier 在释放等待线程后可以重用，所以称它为循环 的 barrier。<br>CyclicBarrier的UML类图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271151078288989.jpg" alt="img"></p>
<p>CyclicBarrier是包含了”ReentrantLock对象lock”和”Condition对象trip”，它是通过独占锁实现的。<br><strong>CyclicBarrier和CountDownLatch的区别</strong>是：</p>
<ol>
<li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。</li>
<li> CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。</li>
</ol>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore是一个计数信号量，它的本质是一个”共享锁”。</p>
<p>信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。</p>
<p>Semaphore的UML类图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/271150551567427.jpg" alt="img"></p>
<p>和”ReentrantLock”一样，Semaphore包含了sync对象，sync是Sync类型；而且，Sync也是一个继承于AQS的抽象类。Sync也包括”公平信号量”FairSync和”非公平信号量”NonfairSync。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JUC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之synchronized</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8Bsynchronized/</url>
    <content><![CDATA[<h2 id="关键词-synchronized-的多种用法"><a href="#关键词-synchronized-的多种用法" class="headerlink" title="关键词 synchronized 的多种用法"></a>关键词 synchronized 的多种用法</h2><ul>
<li>指定加锁对象：对给定对象加锁，进入同步代码前要获得给定对象的锁</li>
<li>直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获得当前实例的锁</li>
<li>直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获得当前类的锁</li>
</ul>
<span id="more"></span>

<h1 id="Java-并发学习记录之synchronized"><a href="#Java-并发学习记录之synchronized" class="headerlink" title="Java 并发学习记录之synchronized"></a>Java 并发学习记录之synchronized</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现在学习的是关于如何使用 <code>synchronized</code> 关键词，关于它的原理不再此次学习范围内。</p>
<h2 id="实例变量的安全问题"><a href="#实例变量的安全问题" class="headerlink" title="实例变量的安全问题"></a>实例变量的安全问题</h2><p>如何变量是一个<strong>方法内部的私有变量</strong>，那么这个变量是安全的。</p>
<p>但是如果这个变量是<strong>实例变量</strong>，那么多个线程操作这个变量就会变得不安全（如果不使用 <code>synchronized</code> 的话）</p>
<h2 id="关键词-synchronized-的多种用法-1"><a href="#关键词-synchronized-的多种用法-1" class="headerlink" title="关键词 synchronized 的多种用法"></a>关键词 synchronized 的多种用法</h2><ul>
<li>指定加锁对象：对给定对象加锁，进入同步代码前要获得给定对象的锁</li>
<li>直接作用于实例方法：相当于对当前实例加锁，进入同步代码前要获得当前实例的锁</li>
<li>直接作用于静态方法：相当于对当前类加锁，进入同步代码前要获得当前类的锁</li>
</ul>
<h3 id="直接作用于实例方法的错误示范"><a href="#直接作用于实例方法的错误示范" class="headerlink" title="直接作用于实例方法的错误示范"></a>直接作用于实例方法的错误示范</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定加锁对象的错误示例：两个线程访问的不是同一个对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync1 account1 = <span class="keyword">new</span> AccountSync1();</span><br><span class="line">        AccountSync1 account2 = <span class="keyword">new</span> AccountSync1();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            money++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://img-blog.csdnimg.cn/20190221152717496.png" alt="在这里插入图片描述"></p>
<p>结果与我们的期望结果(200000)显然不同。</p>
<p><strong>为什么会这样呢？</strong></p>
<p>仔细查看代码，我们的 <code>money++</code> 这个操作做实际上有两步操作，为这段代码加锁，我们为 <code>run()</code> 方法添加 <code>synchronized</code>，<br>变为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        money++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在运行代码，仍然报错。（**我都已经加锁了???**）</p>
<p>在仔细查看一下代码，可以发现我们的代码中有两个线程，但这两个线程访问的是不同的实例，这就是得不到期望结果的原因了。<br>修改一下代码是两个线程访问同一个实例。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定加锁对象的错误示例：两个线程访问的不是同一个对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync1 account1 = <span class="keyword">new</span> AccountSync1();</span><br><span class="line"><span class="comment">//        AccountSync1 account2 = new AccountSync1();</span></span><br><span class="line">        <span class="comment">// 使两个线程访问同一实例</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            money++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在运行代码可以得到期望的结果 200000 了。</p>
<p>总之， 上述代码中关键词 <code>synchronized</code> 作用于一个实例方法，也就是说在进入被 <code>synchronized</code> 修饰的方法前，<br>多个线程必须获得同一个对象实例的锁，也就是访问同一个对象实例，这样才能保证线程的安全。</p>
<h3 id="指定加锁对象的错误示范"><a href="#指定加锁对象的错误示范" class="headerlink" title="指定加锁对象的错误示范"></a>指定加锁对象的错误示范</h3><p>我们将上面的代码稍许修改一下，将 synchronized 作用于指定的实例对象，例如 <code>this</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                money++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync2 account1 = <span class="keyword">new</span> AccountSync2();</span><br><span class="line">        AccountSync2 account2 = <span class="keyword">new</span> AccountSync2();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<p><img src="https://img-blog.csdnimg.cn/20190221152717496.png" alt="在这里插入图片描述"></p>
<p>可以看到这个错误示例中的改动仅仅只是将 <code>synchronized</code> 关键词放到方法内部，并作用于 <code>this</code>，<br>这个 <code>this</code> 表示当前实例对象。从这个分析我们就可以假设这段代码出错的原因是两个线程访问的不是同一个实例对象。</p>
<p>修改代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                money++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync2 account1 = <span class="keyword">new</span> AccountSync2();</span><br><span class="line"><span class="comment">//        AccountSync2 account2 = new AccountSync2();</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总之， 上述代码中关键词 <code>synchronized</code> 作用于一个对象实例，也就是说在进入被 <code>synchronized</code> 修饰的代码块前，<br>多个线程必须获得同一个对象实例的锁，也就是访问同一个对象实例，这样才能保证线程的安全。</p>
<h3 id="直接作用于静态方法"><a href="#直接作用于静态方法" class="headerlink" title="直接作用于静态方法"></a>直接作用于静态方法</h3><p>但是，还有一种方法可以保证多个线程访问多个对象实例却仍然保证线程安全的办法。就是对静态方法添加 <code>synchronized</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        money++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync3 account1 = <span class="keyword">new</span> AccountSync3();</span><br><span class="line">        AccountSync3 account2 = <span class="keyword">new</span> AccountSync3();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析上面代码，首先我们要知道在Java中一切都是对象，所以在Java中类本身也是一个对象。<br>在JVM初始化Java的时候是有一个顺序的：  </p>
<ol>
<li>先初始化父类的静态代码</li>
<li>初始化子类的静态代码</li>
<li>(创建实例时,如果不创建实例,则后面的不执行)初始化父类的非静态代码（变量定义等）</li>
<li>初始化父类构造函数</li>
<li>初始化子类非静态代码（变量定义等）</li>
<li>初始化子类构造函数</li>
</ol>
<p>简而言之，<code>synchronized</code> 修饰静态方法，加锁的是当前类本身。<br>验证我的想法，改造它为如下代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountSync4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (AccountSync4.class) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                money++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AccountSync4 account1 = <span class="keyword">new</span> AccountSync4();</span><br><span class="line">        AccountSync4 account2 = <span class="keyword">new</span> AccountSync4();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(account1);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(account2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过测试，我的想法是对的。同时，在本文开头指出 <code>synchronized</code> 的多种用法其实基于同一原理的不同表现形式。<br>要想操作加锁的内存空间，需要的是能够匹配这把锁的钥匙，<br>从而使得在某一时间内只有获得这把锁的线程才可以访问这把锁锁住的空间<br>例如，还可以进行这种改造 synchronized 修饰不可变对象如字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="string">&quot;abc&quot;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之volatile</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8Bvolatile/</url>
    <content><![CDATA[<h1 id="Java并发学习记录之volatile"><a href="#Java并发学习记录之volatile" class="headerlink" title="Java并发学习记录之volatile"></a>Java并发学习记录之volatile</h1><p>首先来个感性认识：</p>
<ul>
<li><code>volatile</code> 关键字仅能实现对原始变量(如boolen、short、int、long等)赋值操作的原子性，<br>但是复合操作如 <code>i++</code>则不保证。</li>
</ul>
<h2 id="volatile-和-synchronized-的区别"><a href="#volatile-和-synchronized-的区别" class="headerlink" title="volatile 和 synchronized 的区别"></a>volatile 和 synchronized 的区别</h2><p><code>volatile</code> 关键字解决的是内存可见性的问题，会使得所有对volatile变量的读写都会直接刷到主存，<br>即保证了变量的可见性。<br>这样就能满足一些对变量可见性有要求而对读取顺序没有要求的需求。</p>
<p><code>synchronized</code> 关键字解决的是执行控制的问题，它会阻止其它线程获取当前对象的监控锁，<br>这样就使得当前对象中被synchronized关键字保护的代码块无法被其它线程访问，也就无法并发执行。<br>更重要的是，<code>synchronized</code> 还会创建一个内存屏障，内存屏障指令保证了所有CPU操作结果都会直接刷到主存中，<br>从而保证了操作的内存可见性，同时也使得先获得这个锁的线程的所有操作，<br>都 happens-before 于随后获得这个锁的线程的操作。</p>
<h3 id="区别点"><a href="#区别点" class="headerlink" title="区别点"></a>区别点</h3><ol>
<li><p><code>volatile</code> 本质是在告诉 JVM 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；<br><code>synchronized</code> 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p>
</li>
<li><p><code>volatile</code> 仅能使用在变量级别；<code>synchronized</code> 则可以使用在变量、方法、和类级别的。</p>
</li>
<li><p><code>volatile</code> 仅能实现变量的修改可见性，不能保证原子性；<br>而 <code>synchronized</code> 则可以保证变量的修改可见性和原子性。</p>
</li>
<li><p><code>volatile</code> 不会造成线程的阻塞；<code>synchronized</code> 可能会造成线程的阻塞。</p>
</li>
<li><p><code>volatile</code> 标记的变量不会被编译器优化；<code>synchronized</code> 标记的变量可以被编译器优化</p>
</li>
<li><p><code>volatile</code> 关键字用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</p>
</li>
</ol>
<h2 id="volatile-的可见性"><a href="#volatile-的可见性" class="headerlink" title="volatile 的可见性"></a>volatile 的可见性</h2><p>下面是加了 <code>volatile</code> 关键字 和不加 <code>volatile</code> 关键字的区别，作图演示：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226171404638.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>区别在于，volatile 修饰的成员变量在每次被线程访问时，<br>都强迫从主存（共享内存）中重读该成员变量的值。<br>而且，当成员变量发生变化时，强迫线程将变化值回写到主内存（共享内存）。<br>这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值，这样也就保证了同步数据的可见性。</p>
<h3 id="验证-volatile-的可见性"><a href="#验证-volatile-的可见性" class="headerlink" title="验证 volatile 的可见性"></a>验证 volatile 的可见性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/21</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileSample</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> ready = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ready) &#123;</span><br><span class="line">            number++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(ready);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> VolatileSample();</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        ready = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码，我没有为 <code>ready</code> 变量添加 <code>volatile</code> 关键字，程序运行后陷入死循环。</p>
<p>为 <code>ready</code> 变量添加关键字 <code>volatile</code> 修饰后再次运行程序，及时停止，没有死循环。</p>
<p>验证结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226171419692.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之ThreadLocal</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8BThreadLocal/</url>
    <content><![CDATA[<h1 id="Java并发学习记录之ThreadLocal"><a href="#Java并发学习记录之ThreadLocal" class="headerlink" title="Java并发学习记录之ThreadLocal"></a>Java并发学习记录之ThreadLocal</h1><p>JDK 版本：1.8</p>
<hr>

<p>我们需要关注的，自然是 ThreadLocal 的 set() 方法和 get() 方法。</p>
<h2 id="ThreadLocal-的-set-方法："><a href="#ThreadLocal-的-set-方法：" class="headerlink" title="ThreadLocal 的 set() 方法："></a>ThreadLocal 的 set() 方法：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前线程对象</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 获得当前线程的 ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">// 将值放入 ThreadLocalMap 中</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 set 时，首先获得当前线程对象，然后通过 getMap() 拿到线程的 ThreadLocalMap，并将值放入<br> ThreadLocalMap 中。</p>
<p><strong>那么这个 ThreadLocalMap 和 Thread 有什么关系？</strong></p>
<p> 可以理解为一个 Map (虽然不是，但可以简单地理解为 HashMap)，但是它是定义在 Thread 内部的成员。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 与此线程相关的 ThreadLocal 值。这个 Map 由 ThreadLocal 类维护。 */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而设置到 ThreadLocal 中的值，就是写入 threadLocals 这个 Map。其中 key 为 ThreadLocal 当前对象，<br>value 就是我们需要的值。而 threads 本身就保存了自己所在线程的所有 “局部变量”，也就是一个 ThreadLocal 变量的集合。</p>
<p>而 get() 方法也是先取得当前线程的 ThreadLocalMap 对象。然后，通过将自己作为 key 取得内部的实际数据。</p>
<p>同时也可以看到在 Thread 的 exit() 方法中， Thread 类会进行一些清理工作，注意下述代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统调用此方法是为了让线程在实际退出之前有机会进行清理。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span>) &#123;</span><br><span class="line">            group.threadTerminated(<span class="keyword">this</span>);</span><br><span class="line">            group = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 侵略性地清除所有引用字段:参见bug 4006245 */</span></span><br><span class="line">        target = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">/* 加快这些资源的释放 */</span></span><br><span class="line">        threadLocals = <span class="keyword">null</span>;</span><br><span class="line">        inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line">        inheritedAccessControlContext = <span class="keyword">null</span>;</span><br><span class="line">        blocker = <span class="keyword">null</span>;</span><br><span class="line">        uncaughtExceptionHandler = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此如果我们使用线程池，那就意味着线程未必会退出。如果这样，将一些对象设置到 ThreadLocal 中，<br>可能会使系统出现内存泄漏（JVM无法回收你不再使用的对象）的可能。</p>
<p>但又要及时回收对象，就可以使用 ThreadLocal.remove()，告诉JVM，回收对象，防止内存泄漏。</p>
<p><strong>那么，ThreadLocalMap 是什么鬼？</strong></p>
<p>首先，通过前面的 ThreadLocal 的核心的 set() 方法分析，ThreadLocal 的 set 方法是通过代理给它的内部类ThreadLocalMap实现的。<br>于是对于 ThreadLocal 的分析就转换为对内部类 ThreadLocalMap 的分析。</p>
<h2 id="对-ThreadLocalMap-的-set-方法和相关属性-方法的分析："><a href="#对-ThreadLocalMap-的-set-方法和相关属性-方法的分析：" class="headerlink" title="对 ThreadLocalMap 的 set() 方法和相关属性/方法的分析："></a>对 ThreadLocalMap 的 set() 方法和相关属性/方法的分析：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ThreadLocalMap是一个定制的哈希映射，只适合维护线程本地值。</span></span><br><span class="line"><span class="comment">* 在ThreadLocal类之外不导出任何操作。类是包私有的，允许在类线程中声明字段。</span></span><br><span class="line"><span class="comment">* 为了帮助处理非常大且长期存在的使用，哈希表项对键使用弱引用。</span></span><br><span class="line"><span class="comment">* 但是，由于没有使用引用队列，因此只有在表开始耗尽空间时才保证删除过时的条目。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类继承了WeakReference是方便垃圾回收，在底层map扩容之前进行entry的回收，</span></span><br><span class="line"><span class="comment">     * 减少扩容的概率,提高性能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        Object value;</span><br><span class="line"></span><br><span class="line">        Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 底层数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * map中entry的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值，超过这个阈值之后就需要进行扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值是底层数组长度的2/3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setThreshold</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算下一个索引，hash算法定位失败的时候（也就是该索引位置存在元素）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一个位置索引，hash算法定位失败的时候（也就是该索引位置存在元素）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">prevIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 key 和 value 构建 ThreadLocalMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">        <span class="comment">//初始化table</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">        <span class="comment">//计算索引</span></span><br><span class="line">        <span class="comment">// &amp; (INITIAL_CAPACITY - 1) 这是取模的一种方式，对于2的幂作为模数取模，用此代替%(2^n)</span></span><br><span class="line">        <span class="comment">// firstKey.threadLocalHashCode 其主要目的就是为了让哈希码能均匀的分布在2的n次方的数组里, 也就是Entry[] table中</span></span><br><span class="line">        <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//设置阈值</span></span><br><span class="line">        setThreshold(INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父容器构造ThreadLocalMap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parentMap the map associated with parent thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalMap</span><span class="params">(ThreadLocalMap parentMap)</span> </span>&#123;</span><br><span class="line">        Entry[] parentTable = parentMap.table;</span><br><span class="line">        <span class="keyword">int</span> len = parentTable.length;</span><br><span class="line">        setThreshold(len);</span><br><span class="line">        table = <span class="keyword">new</span> Entry[len];</span><br><span class="line">        <span class="comment">//复制遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            Entry e = parentTable[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                ThreadLocal&lt;Object&gt; key = (ThreadLocal&lt;Object&gt;) e.get();</span><br><span class="line">                <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Object value = key.childValue(e.value);</span><br><span class="line">                    Entry c = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">                    <span class="comment">//该句相当于 hashcode % len但是&amp;运算更加高效</span></span><br><span class="line">                    <span class="keyword">int</span> h = key.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//hash算法定位失败，找下一个索引</span></span><br><span class="line">                    <span class="keyword">while</span> (table[h] != <span class="keyword">null</span>)</span><br><span class="line">                        h = nextIndex(h, len);</span><br><span class="line">                    table[h] = c;</span><br><span class="line">                    size++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadLocalMap使用线性探测法来解决哈希冲突，线性探测法的地址增量di = 1, 2, … , m-1，</span></span><br><span class="line"><span class="comment">     * 其中，i为探测次数。该方法一次探测下一个地址，直到有空的地址后插入，若整个空间都找不到空余的地址，则产生溢出。</span></span><br><span class="line"><span class="comment">     * 假设当前table长度为16，也就是说如果计算出来key的hash值为14，如果table[14]上已经有值，并且其key与当前key不一致，</span></span><br><span class="line"><span class="comment">     * 那么就发生了hash冲突，这个时候将14加1得到15，取table[15]进行判断，</span></span><br><span class="line"><span class="comment">     * 这个时候如果还是冲突会回到0，取table[0],以此类推，直到可以插入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">         <span class="comment">//计算索引。</span></span><br><span class="line">        <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据获取到的索引进行循环，如果当前索引上的table[i]不为空，在没有return的情况下，</span></span><br><span class="line">        <span class="comment">// 就使用nextIndex()获取下一个（方法注释上提到到线性探测法）。</span></span><br><span class="line">        <span class="keyword">for</span> (Entry e = tab[i];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="comment">//table[i]上key不为空，并且和当前key相同，更新value</span></span><br><span class="line">            <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//table[i]上的key为空，说明被回收了（上面的弱引用中提到过）。</span></span><br><span class="line">            <span class="comment">//这个时候说明改table[i]可以重新使用，用新的key-value将其替换,并删除其他无效的entry</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                replaceStaleEntry(key, value, i);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到为空的插入位置，插入值，在为空的位置插入需要对size进行加1操作</span></span><br><span class="line">        tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">        <span class="keyword">int</span> sz = ++size;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * cleanSomeSlots用于清除那些e.get()==null，也就是table[index] != null &amp;&amp; table[index].get()==null</span></span><br><span class="line"><span class="comment">         * 之前提到过，这种数据key关联的对象已经被回收，所以这个Entry(table[index])可以被置null。</span></span><br><span class="line"><span class="comment">         * 如果没有清除任何entry,并且当前使用量达到了负载因子所定义(长度的2/3)，那么进行rehash()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">            rehash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 替换无效entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">        Entry e;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 根据传入的无效entry的位置（staleSlot）,向前扫描</span></span><br><span class="line"><span class="comment">         * 一段连续的entry(这里的连续是指一段相邻的entry并且table[i] != null),</span></span><br><span class="line"><span class="comment">         * 直到找到一个无效entry，或者扫描完也没找到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> slotToExpunge = staleSlot;<span class="comment">//之后用于清理的起点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = prevIndex(staleSlot, len);</span><br><span class="line">             (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">             i = prevIndex(i, len))</span><br><span class="line">            <span class="keyword">if</span> (e.get() == <span class="keyword">null</span>)</span><br><span class="line">                slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向后扫描一段连续的entry</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nextIndex(staleSlot, len);</span><br><span class="line">             (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">             i = nextIndex(i, len)) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  如果找到了key，将其与传入的无效entry替换，也就是与table[staleSlot]进行替换</span></span><br><span class="line">            <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line"></span><br><span class="line">                tab[i] = tab[staleSlot];</span><br><span class="line">                tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果向前查找没有找到无效entry，则更新slotToExpunge为当前值i</span></span><br><span class="line">                <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                    slotToExpunge = i;</span><br><span class="line">                cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果向前查找没有找到无效entry，并且当前向后扫描的entry无效，则更新slotToExpunge为当前值i</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">                slotToExpunge = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到key,也就是说key之前不存在table中，就直接最开始的无效entry——tab[staleSlot]上直接新增即可</span></span><br><span class="line">        tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">        tab[staleSlot] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// slotToExpunge != staleSlot,说明存在其他的无效entry需要进行清理。</span></span><br><span class="line">        <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连续段清除</span></span><br><span class="line"><span class="comment">     * 根据传入的staleSlot,清理对应的无效entry——table[staleSlot],</span></span><br><span class="line"><span class="comment">     * 并且根据当前传入的staleSlot,向后扫描一段连续的entry(这里的连续是指一段相邻的entry并且table[i] != null),</span></span><br><span class="line"><span class="comment">     * 对可能存在hash冲突的entry进行rehash，并且清理遇到的无效entry.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> staleSlot key为null,需要无效entry所在的table中的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回下一个为空的solt的索引。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清理无效entry，置空</span></span><br><span class="line">        tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">        tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//size减1，置空后table的被使用量减1</span></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Rehash until we encounter null</span></span><br><span class="line">        Entry e;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="comment">// 从staleSlot开始向后扫描一段连续的entry</span></span><br><span class="line">        <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">             (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">             i = nextIndex(i, len)) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="comment">//如果遇到key为null,表示无效entry，进行清理.</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                e.value = <span class="keyword">null</span>;</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                size--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果key不为null,计算索引</span></span><br><span class="line">                <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 计算出来的索引——h，与其现在所在位置的索引——i不一致，置空当前的table[i]</span></span><br><span class="line"><span class="comment">                 * 从h开始向后线性探测到第一个空的slot，把当前的entry挪过去。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                    tab[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span><br><span class="line">                    <span class="comment">// null because multiple entries could have been stale.</span></span><br><span class="line">                    <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                        h = nextIndex(h, len);</span><br><span class="line">                    tab[h] = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下一个为空的solt的索引。</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启发式的扫描清除，扫描次数由传入的参数n决定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 从i向后开始扫描（不包括i，因为索引为i的Slot肯定为null）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 控制扫描次数，正常情况下为 log2(n) ，</span></span><br><span class="line"><span class="comment">     * 如果找到了无效entry，会将n重置为table的长度len,进行段清除。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * map.set()点用的时候传入的是元素个数，replaceStaleEntry()调用的时候传入的是table的长度len</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if any stale entries have been removed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cleanSomeSlots</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">            Entry e = tab[i];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                n = len;</span><br><span class="line">                removed = <span class="keyword">true</span>;</span><br><span class="line">                i = expungeStaleEntry(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> removed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Re-pack and/or re-size the table. First scan the entire</span></span><br><span class="line"><span class="comment">     * table removing stale entries. If this doesn&#x27;t sufficiently</span></span><br><span class="line"><span class="comment">     * shrink the size of the table, double the table size.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//全清理</span></span><br><span class="line">        expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// threshold = 2/3 * len，所以threshold - threshold / 4 = 1en/2</span></span><br><span class="line">        <span class="comment">// 这里主要是因为上面做了一次全清理所以size减小，需要进行判断。</span></span><br><span class="line">        <span class="comment">// 判断的时候把阈值调低了。</span></span><br><span class="line">        <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">            resize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容，扩大为原来的2倍（这样保证了长度为2的冥）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldLen = oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> newLen = oldLen * <span class="number">2</span>;</span><br><span class="line">        Entry[] newTab = <span class="keyword">new</span> Entry[newLen];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">            Entry e = oldTab[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">                <span class="comment">//虽然做过一次清理，但在扩容的时候可能会又存在key==null的情况。</span></span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    e.value = <span class="keyword">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//同样适用线性探测来设置值。</span></span><br><span class="line">                    <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">while</span> (newTab[h] != <span class="keyword">null</span>)</span><br><span class="line">                        h = nextIndex(h, newLen);</span><br><span class="line">                    newTab[h] = e;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置新的阈值</span></span><br><span class="line">        setThreshold(newLen);</span><br><span class="line">        size = count;</span><br><span class="line">        table = newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全清理，清理所有无效entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expungeStaleEntries</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            Entry e = tab[j];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//使用连续段清理</span></span><br><span class="line">                expungeStaleEntry(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的分析，从 ThreadLocal 的 set() 着手分析再深入到 ThreadLocalMap 的 set() 方法。</p>
<p>同样的对于 ThreadLocalMap 中的 getEntry() 也从 ThreadLocal 的 get() 方法入手。</p>
<h2 id="ThreadLocal-中的-get"><a href="#ThreadLocal-中的-get" class="headerlink" title="ThreadLocal 中的 get()"></a>ThreadLocal 中的 get()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//同set方法类似获取对应线程中的ThreadLocalMap实例</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为空返回初始化值</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化设值的方法，可以被子类覆盖。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取初始化值，默认为null(如果没有子类进行覆盖)</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//不为空不用再初始化，直接调用set操作设值</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//第一次初始化，createMap在上面介绍set()的时候有介绍过。</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap-中的-getEntry"><a href="#ThreadLocalMap-中的-getEntry" class="headerlink" title="ThreadLocalMap 中的 getEntry()"></a>ThreadLocalMap 中的 getEntry()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ThreadLocal.ThreadLocalMap.<span class="function">Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据key计算索引，获取entry</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry e = table[i];</span><br><span class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过直接计算出来的key找不到对于的value的时候适用这个方法.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ThreadLocal.ThreadLocalMap.<span class="function">Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, ThreadLocal.ThreadLocalMap.Entry e)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//清除无效的entry</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//基于线性探测法向后扫描</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocalMap中的remove"><a href="#ThreadLocalMap中的remove" class="headerlink" title="ThreadLocalMap中的remove()"></a>ThreadLocalMap中的remove()</h2><p>同样的 remove() ，就是找到对应的table[],调用 weakrefrence 的 clear()清除引用，<br>然后再调用 expungeStaleEntry() 进行清除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">    ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">//计算索引</span></span><br><span class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//进行线性探测，查找正确的key</span></span><br><span class="line">    <span class="keyword">for</span> (ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">            <span class="comment">//调用weakrefrence的clear()清除引用</span></span><br><span class="line">            e.clear();</span><br><span class="line">            <span class="comment">//连续段清除</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><p><a href="https://blog.csdn.net/u011080472/article/details/51177412">哈希表——线性探测法、链地址法、查找成功、查找不成功的平均长度</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之wait/notify机制</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8Bwait-notify%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>为了支持多线程之间的协作，JDK提供了两个非常重要的接口线程等待 <code>wait()</code> 方法和<br>通知 <code>notify()</code> 方法。</p>
<span id="more"></span>

<h1 id="Java-并发学习记录之-wait-notify-机制"><a href="#Java-并发学习记录之-wait-notify-机制" class="headerlink" title="Java 并发学习记录之 wait/notify 机制"></a>Java 并发学习记录之 wait/notify 机制</h1><p>为了支持多线程之间的协作，JDK提供了两个非常重要的接口线程等待 <code>wait()</code> 方法和<br>通知 <code>notify()</code> 方法。</p>
<ul>
<li><code>wait()</code>: 使调用该方法的线程释放共享资源锁，然后从运行状态退出，进入等待队列，直到被再次唤醒</li>
<li><code>notify()</code>: 随机唤醒等待队列中等待同一共享资源的 “一个线程”，<br>并使该线程退出等待队列，进入可运行状态，也就是 <code>notify()</code> 方法仅通知“一个线程”</li>
<li><code>wait(long)</code>: 超时等待一段时间，这里的参数时间是毫秒，也就是等待长达n毫秒，<br>如果没有通知就超时返回</li>
<li><code>wait(long, int)</code>: 对于超时时间更细力度的控制，可以达到纳秒</li>
<li><code>notifyAll()</code>: 使所有正在等待队列中等待同一共享资源的 “全部线程” 退出等待队列，<br>进入可运行状态。此时，优先级最高的那个线程最先执行，但也有可能是随机执行，<br>这取决于JVM虚拟机的实现</li>
</ul>
<p>文字表达太枯燥了，作图演示有关线程状态的变化：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226100712829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="简单实例演示"><a href="#简单实例演示" class="headerlink" title="简单实例演示"></a>简单实例演示</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/22</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifySample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> WaitThread();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> NotifyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (WaitNotifySample.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程1:开始&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1:等待中。。。&quot;</span>);</span><br><span class="line">                    WaitNotifySample.class.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程1:结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (WaitNotifySample.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程2:开始&quot;</span>);</span><br><span class="line">                WaitNotifySample.class.notify();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程2:notify() 后必须等待 synchronized 代码执行完后才释放&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程2:结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226100738541.png" alt="在这里插入图片描述"></p>
<h3 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h3><p>开启了两个线程 t1, t2。</p>
<ol>
<li>t1首先获得锁，在执行 <code>wait()</code> 方法前先要申请锁，<br>其中 <code>synchronized(WaitNotifySample.class)</code> 这样写不要觉得奇怪(Java编程思想：一切都是对象)<br>我只是图方便而已，</li>
<li>所以在执行 <code>wait()</code> 方法时，它是持有 <code>WaitNotifySample.class</code> 的锁的。</li>
<li><code>wait()</code> 方法后，t1 会进行等待，并释放 <code>WaitNotifySample.class</code> 的锁。</li>
<li>t2 线程在执行 <code>notify()</code> 前也会申请 <code>WaitNotifySample.class</code> 的锁.</li>
<li><strong><code>notify()</code> 方法后并不会立即释放锁, 而是必须执行完notify()方法所在的synchronized代码块后才释放。</strong><br>我在这里让 t2 睡眠两秒使得效果更加明显.</li>
</ol>
<h3 id="wait-与-sleep-的区别"><a href="#wait-与-sleep-的区别" class="headerlink" title="wait() 与 sleep() 的区别"></a>wait() 与 sleep() 的区别</h3><p>从上面的执行结果也可以看出来, <code>wait()</code> 方法后当前线程是会释放目标对象的锁, 而 <code>sleep()</code> 仍然是阻塞的说明线程没有释放任何资源.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习记录之线程间通信</title>
    <url>/2019/05/07/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B9%8B%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="Java-并发学习记录之线程间通信"><a href="#Java-并发学习记录之线程间通信" class="headerlink" title="Java 并发学习记录之线程间通信"></a>Java 并发学习记录之线程间通信</h1><h2 id="volatile-和-synchronized-关键字"><a href="#volatile-和-synchronized-关键字" class="headerlink" title="volatile 和 synchronized 关键字"></a>volatile 和 synchronized 关键字</h2><p><a href="https://blog.csdn.net/Little_fxc/article/details/87938990">Java并发学习记录之volatile</a></p>
<p><a href="https://blog.csdn.net/Little_fxc/article/details/87861917">Java并发学习记录之synchronized</a></p>
<h2 id="等待-通知机制"><a href="#等待-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p><a href="https://blog.csdn.net/Little_fxc/article/details/87929728">Java并发学习记录之wait-notify机制</a></p>
<h2 id="管道输入-输出流"><a href="#管道输入-输出流" class="headerlink" title="管道输入/输出流"></a>管道输入/输出流</h2><p>管道输入/输出流和普通文件的输入/输出流或者网络输入、输出流不同之处在于管道输入/输出流主要用于线程之间的数据传输，<br>而且传输的媒介为内存。</p>
<p>管道输入/输出流主要包括下列两类的实现：</p>
<ul>
<li>面向字节： PipedOutputStream、 PipedInputStream</li>
<li>面向字符: PipedWriter、 PipedReader</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.pipe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PipedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PipedWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管道输入/输出主要用于线程间的数据传输，传输的媒介是内存。具体实现：</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;面向字节:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;PipedWriter&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;PipedReader&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;面向字符:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;PipedOutputStream&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;PipedInputStream&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Piped</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        PipedWriter writer = <span class="keyword">new</span> PipedWriter();</span><br><span class="line">        PipedReader reader = <span class="keyword">new</span> PipedReader();</span><br><span class="line">        <span class="comment">// 将输出流和输入流进行必要的连接</span></span><br><span class="line">        writer.connect(reader);</span><br><span class="line">        Thread printThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Print(reader), <span class="string">&quot;PrintThread&quot;</span>);</span><br><span class="line">        printThread.start();</span><br><span class="line">        <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((receive = System.in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                writer.write(receive);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PipedReader reader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Print</span><span class="params">(PipedReader reader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.reader = reader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> receive = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> ((receive = reader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>) receive);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行该示例，输入一组字符串，可以看到 printThread 进行了原样输出。</p>
<p><img src="https://img-blog.csdnimg.cn/20190226171159253.png" alt="在这里插入图片描述"></p>
<p>Tips：<br>对于 Piped 类型的流，必须要进行绑定，也就是调用 <code>connect()</code>，否则会抛异常。</p>
<h2 id="Thread-join-的使用"><a href="#Thread-join-的使用" class="headerlink" title="Thread.join() 的使用"></a>Thread.join() 的使用</h2><p>在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，<br>主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，<br>也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。另外，<br>一个线程需要等待另一个线程也需要用到join()方法。</p>
<p>Thread类除了提供 <code>join()</code> 方法之外，还提供了 <code>join(long millis)</code>、<code>join(long millis, int nanos)</code><br>两个具有超时特性的方法。这两个超时方法表示，如果线程thread在指定的超时时间没有终止，<br>那么将会从该超时方法中返回。</p>
<p>重点看一下 <code>join(long millis)</code> 的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinLongTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MyThread threadTest = <span class="keyword">new</span> MyThread();</span><br><span class="line">            threadTest.start();</span><br><span class="line"></span><br><span class="line">            threadTest.join(<span class="number">1000</span>);<span class="comment">// 主线成等待子线程1秒</span></span><br><span class="line"><span class="comment">//            Thread.sleep(1000);</span></span><br><span class="line">            System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程结束&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/2019022617121653.png" alt="在这里插入图片描述"></p>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>之前我们讲保证线程资源安全问题时，使用<strong>同步</strong>加锁的方式保证线程安全。还有一种办法就是<strong>隔离</strong>资源的做法。</p>
<p>所谓的<strong>隔离</strong>，即每个线程使用自己的局部资源。将资源隔离不让其它线程访问，<br>从被隔离资源的角度来说，能够访问它的只有当前线程。既然只有当前线程可以访问的数据，自然是线程安全的。<br>一个典型的例子就是 <code>Servlet</code>。</p>
<h3 id="ThreadLocal-的简单使用"><a href="#ThreadLocal-的简单使用" class="headerlink" title="ThreadLocal 的简单使用"></a>ThreadLocal 的简单使用</h3><p>首先来一个不使用 ThreadLocal 的类，然后在逐渐对其改造。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            es.execute(<span class="keyword">new</span> ParseDate(i));</span><br><span class="line">        &#125;</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseDate</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ParseDate</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">ParseDateWithSync</span><br><span class="line">                    Date date = SDF.parse(<span class="string">&quot;2019-02-26 16:23:&quot;</span> + i % <span class="number">60</span>);</span><br><span class="line">                    System.out.println(i + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190226171230594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>一般这种问题主要是因为 SimpleDateFormat 在多线程环境下，是线程不安全的，所以如果你在多线程环境中共享了SimpleDateFormat的实例，<br>比如你在类似日期类中定义了一个全局的 SimpleDateFormat 对象，这样子肯定会出现上述的报错</p>
<p>一种解决办法就是加锁，在上面代码中可以将注释去掉后再次运行，也就不会出现这个问题了。</p>
<p>但是我现在要使用保存线程局部变量的ThreadLocal对象来保存每一个线程的SimpleDateFormat对象，针对上述代码做出改变：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.thread.threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/26</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseDateWithThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String pattern = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            es.execute(<span class="keyword">new</span> ParseDate(i));</span><br><span class="line">        &#125;</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseDate</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ParseDate</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.i = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果当前线程不持有 SimpleDateFormat 对象。那就新建并保存设置在当前线程中，如果已持有，则直接使用。</span></span><br><span class="line">                <span class="keyword">if</span> (threadLocal.get()==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    threadLocal.set(<span class="keyword">new</span> SimpleDateFormat(pattern));</span><br><span class="line">                &#125;</span><br><span class="line">                Date date = threadLocal.get().parse(<span class="string">&quot;2019-02-26 16:23:&quot;</span> + i % <span class="number">60</span>);</span><br><span class="line">                System.out.println(i + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：从上面代码中也可以看出，为每一个线程分配一个对象的工作并不是由 ThreadLocal 来完成的，<br>而是需要开发人员在应用层面保证的。ThreadLocal 只是起到了一个容器的作用。</p>
<h3 id="ThreadLocal的原理"><a href="#ThreadLocal的原理" class="headerlink" title="ThreadLocal的原理"></a>ThreadLocal的原理</h3><p><a href="https://blog.csdn.net/Little_fxc/article/details/87979410">ThreadLocal的原理</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合学习之fail-fast</title>
    <url>/2019/05/14/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8Bfail-fast/</url>
    <content><![CDATA[<span id="more"></span>

<p>[TOC]</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文主要以 ArrayList 为例，对 Iterator 的快速失败(<code>fail-fast</code>), 也就是 Java 集合的错误检测机制进行学习总结。主要内容有：</p>
<ol>
<li>简介</li>
<li>错误展示</li>
<li>问题解决</li>
<li>理解原理</li>
<li>JDK的解决办法</li>
</ol>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>“快速失败”也就是 fail-fast，它是 Java 集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生 <code>fail-fast</code> 机制。<br>记住是有可能，而不是一定。例如：假设存在两个线程（线程 1、线程 2），线程 1 通过 Iterator 在遍历集合 A 中的元素，<br>在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），<br>那么这个时候程序就会抛出 ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>
<h2 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.base.collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java 集合的错误检测机制 fail-fast 的示例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailFastTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//private static List&lt;String&gt; list = new CopyOnWriteArrayList&lt;String&gt;();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程one迭代list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">threadOne</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = iterator.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadOne 遍历:&quot;</span> + i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当i == 3时，修改list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">threadTwo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; <span class="number">6</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ThreadTwo run：&quot;</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                    list.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> threadOne().start();</span><br><span class="line">        <span class="keyword">new</span> threadTwo().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ThreadOne 遍历:0</span><br><span class="line">ThreadTwo run：0</span><br><span class="line">ThreadTwo run：1</span><br><span class="line">ThreadTwo run：2</span><br><span class="line">ThreadTwo run：3</span><br><span class="line">ThreadTwo run：4</span><br><span class="line">ThreadTwo run：5</span><br><span class="line">Exception in thread &quot;Thread-0&quot; java.util.ConcurrentModificationException</span><br><span class="line">	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)</span><br><span class="line">	at java.util.ArrayList$Itr.next(ArrayList.java:851)</span><br><span class="line">	at com.littlefxc.examples.base.collections.FailFastTest$threadOne.run(FailFastTest.java:25)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>先说解决办法：</p>
<ol>
<li>在遍历过程中所有涉及到改变 modCount 值得地方全部加上 synchronized 或者直接使用 Collections.synchronizedList，这样就可以解决。但是不推荐，因为增删造成的同步锁可能会阻塞遍历操作。</li>
<li>使用 CopyOnWriteArrayList 来替换 ArrayList。推荐使用该方案。</li>
</ol>
<h2 id="理解原理"><a href="#理解原理" class="headerlink" title="理解原理"></a>理解原理</h2><p>同过上面的错误示例和问题解决，可以初步了解到产生 <code>fail-fast</code> 的原因就在于<br>当某一个线程遍历list的过程中，list的内容被另外一个线程所改变了；<br>就会抛出 <code>ConcurrentModificationException</code> 异常，产生fail-fast事件。</p>
<p><code>ConcurrentModificationException</code> 的产生：当方法检测到对象的并发修改，但不允许这种修改时就抛出该异常。</p>
<p>也就是说，即便是在单线程环境中，只要违反了规则，同样也可能会抛出异常。</p>
<p>当我对代码运行多次时，发现代码运行有几率不抛出异常，这就说明迭代器的快速失败行为并不能得到保证，所以，不要写依赖这个异常的程序代码。<br>正确的做法是：<code>ConcurrentModificationException</code> 应该仅用于检测 bug。</p>
<p><code>AbstractList</code> 抛出 <code>ConcurrentModificationException</code> 的部分代码(Java8)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//神略代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// AbstractList中唯一的属性</span></span><br><span class="line">    <span class="comment">// 用来记录List修改的次数：每修改一次(添加/删除等操作)，将modCount+1</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回List对应迭代器。实际上，是返回Itr对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Itr是Iterator(迭代器)的实现类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改数的记录值。</span></span><br><span class="line">        <span class="comment">// 每次新建Itr()对象时，都会保存新建该对象时对应的modCount；</span></span><br><span class="line">        <span class="comment">// 以后每次遍历List中的元素的时候，都会比较expectedModCount和modCount是否相等；</span></span><br><span class="line">        <span class="comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取下一个元素之前，都会判断“新建Itr对象时保存的modCount”和“当前的modCount”是否相等；</span></span><br><span class="line">            <span class="comment">// 若不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件。</span></span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                E next = get(cursor);</span><br><span class="line">                lastRet = cursor++;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                    cursor--;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从中，我们可以发现在调用 next() 和 remove()时，都会执行 checkForComodification()。若 “modCount 不等于 expectedModCount”，则抛出ConcurrentModificationException异常，产生fail-fast事件。</p>
<p>要搞明白 fail-fast机制，我们就要需要理解什么时候“modCount 不等于 expectedModCount”！<br>从Itr类中，我们知道 expectedModCount 在创建Itr对象时，被赋值为 modCount。通过Itr，我们知道：expectedModCount不可能被修改为不等于 modCount。所以，需要考证的就是modCount何时会被修改。</p>
<p>那么它(modCount)在什么时候因为什么原因而发生改变呢？</p>
<p>ArrayList部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最小化列表容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定动态扩容所需容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            <span class="comment">// any size if not default element table</span></span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// larger than default for default empty table. It&#x27;s already</span></span><br><span class="line">            <span class="comment">// supposed to be at default size.</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定动态扩容所需容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 将指定元素的索引及后续元素的索引向右移动(索引+1)</span></span><br><span class="line"><span class="comment">     * 2. 在指定的索引插入元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">    </span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 将指定索引及后续元素的索引向左移动</span></span><br><span class="line"><span class="comment">     * 2. 数组元素实际数量 - 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">    </span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环比较元素，获取要移除元素的索引，然后将该索引及后续元素的索引向左移动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环设置所有元素值为null, 加快垃圾回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的源代码我们可以看出，ArrayList 中无论 add、remove、clear 方法只要是涉及了改变 ArrayList 元素的个数的方法都会导致 modCount 的改变。<br>所以我们这里可以初步判断由于 expectedModCount 得值与 modCount 的改变不同步，导致两者之间不等从而产生 fail-fast 机制。</p>
<p>场景还原：</p>
<p>有两个线程（线程 A，线程 B），其中线程 A 负责遍历 list、线程B修改 list。线程 A 在遍历 list 过程的某个时候（此时 expectedModCount = modCount=N），<br>线程启动，同时线程B增加一个元素，这是 modCount 的值发生改变（modCount + 1 = N + 1）。<br>线程 A 继续遍历执行 next 方法时，通告 checkForComodification 方法发现 expectedModCount = N ，而 modCount = N + 1，两者不等，<br>这时就抛出ConcurrentModificationException 异常，从而产生 fail-fast 机制。</p>
<p>至此，<strong>我们就完全了解了fail-fast是如何产生的！</strong></p>
<p>也就是，当多个线程对同一个集合进行操作的时候，某线程访问集合的过程中，该集合的内容被其他线程所改变(即其它线程通过add、remove、clear等方法，改变了modCount的值)；<br>这时，就会抛出ConcurrentModificationException异常，产生fail-fast事件。</p>
<h2 id="JDK的解决办法：CopyOnWriteArrayList"><a href="#JDK的解决办法：CopyOnWriteArrayList" class="headerlink" title="JDK的解决办法：CopyOnWriteArrayList"></a>JDK的解决办法：CopyOnWriteArrayList</h2><p>CopyOnWriteArrayList 是 ArrayList 的一个线程安全的变体，其中所有可变操作（add、set 等等）都是通过对底层数组进行一次新的复制来实现的。<br>该类产生的开销比较大，但是在两种情况下，它非常适合使用。</p>
<ol>
<li>在不能或不想进行同步遍历，但又需要从并发线程中排除冲突时。</li>
<li>当遍历操作的数量大大超过可变操作的数量时。</li>
</ol>
<p>遇到这两种情况使用 CopyOnWriteArrayList 来替代 ArrayList 再适合不过了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.*;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回集合对应的迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> COWIterator&lt;E&gt;(getArray(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略代码...</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> cursor;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">COWIterator</span><span class="params">(Object[] elements, <span class="keyword">int</span> initialCursor)</span> </span>&#123;</span><br><span class="line">            cursor = initialCursor;</span><br><span class="line">            <span class="comment">// 新建COWIterator时，将集合中的元素保存到一个新的拷贝数组中。</span></span><br><span class="line">            <span class="comment">// 这样，当原始集合的数据改变，拷贝数据中的值也不会变化。</span></span><br><span class="line">            snapshot = elements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &lt; snapshot.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (! hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> (E) snapshot[cursor++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (! hasPrevious())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            <span class="keyword">return</span> (E) snapshot[--cursor];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 省略代码...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以从上面的源码中可以看出：</p>
<ol>
<li>和 ArrayList 继承于 AbstractList 不同，CopyOnWriteArrayList 没有继承于 AbstractList，它仅仅只是实现了 List 接口。</li>
<li>ArrayList 的 iterator() 函数返回的 Iterator 是在 AbstractList 中实现的；而 CopyOnWriteArrayList 是自己实现 Iterator。</li>
<li>ArrayList 的 Iterator 实现类中调用 next() 时，会“调用 checkForComodification() 比较 <code>expectedModCount </code> 和 <code>modCount</code> 的大小”；但是，CopyOnWriteArrayList 的 Iterator 实现类中，没有所谓的 checkForComodification()，更不会抛出 ConcurrentModificationException 异常！</li>
</ol>
<p>CopyOnWriterArrayList 的 add 方法与 ArrayList 的 add 方法有一个最大的不同点就在于，下面三句代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">newElements[len] = e;</span><br><span class="line">setArray(newElements);</span><br></pre></td></tr></table></figure>

<p>就是这三句代码使得 CopyOnWriterArrayList 不会抛 ConcurrentModificationException 异常。<br>它们就是 copy 原来的 array，再在 copy 数组上进行 add 操作，这样做就完全不会影响 COWIterator 中的 array 了</p>
<p>CopyOnWriterArrayList 的核心概念就是：</p>
<p>任何对 array 在结构上有所改变的操作（add、remove、clear 等），CopyOnWriterArrayList 都会 copy 现有的数据，再在 copy 的数据上修改，<br>这样就不会影响 COWIterator 中的数据了，修改完成之后改变原有数据的引用即可。同时这样造成的代价就是产生大量的对象，<br>同时数组的 copy 也是相当有损耗的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合学习之ArrayList</title>
    <url>/2019/05/07/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8BArrayList/</url>
    <content><![CDATA[<h1 id="Java源码学习之ArrayList"><a href="#Java源码学习之ArrayList" class="headerlink" title="Java源码学习之ArrayList"></a>Java源码学习之ArrayList</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空数组, new ArrayList(0)的时候默认数组构建一个空数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空数组, 调用无参构造函数的时候默认给一个空数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存数据的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ArrayList的实际元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个初始容量来构造一个空数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数构造方法默认为空数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法传入一个Collection， 则将Collection里面的值copy到arrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调整当前实例的容量为实际数组的大小，用于最小化实例的内存空间。</span></span><br><span class="line"><span class="comment">     * 可以解决平时新增、删除元素后elementData过大的问题。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定动态扩容所需容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 超出了数组可容纳的长度，需要进行动态扩展</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 一些JVM可能存储Headerwords</span></span><br><span class="line"><span class="comment">     * 2. 避免一些机器内存溢出，减少出错几率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态扩容的核心方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//  先对容量扩大1.5倍, 这里 oldCapacity &gt;&gt; 1 是二进制操作右移，相当于除以2, 我称之为期望容量</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// minCapacity 我称之为最小容量</span></span><br><span class="line">        <span class="comment">// 比较期望容量与最小容量</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="comment">// 判断期望容量是否超过 Integer.MAX_VALUE - 8. 一般很少用到，那么多数据也不会用ArrayList来做容器了吧</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这辈子都不太有机会用到吧</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 将指定元素的索引及后续元素的索引向右移动(索引+1)</span></span><br><span class="line"><span class="comment">     * 2. 在指定的索引插入元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 将指定索引及后续元素的索引向左移动</span></span><br><span class="line"><span class="comment">     * 2. 数组元素实际数量 - 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环比较元素，获取要移除元素的索引，然后将该索引及后续元素的索引向左移动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环设置所有元素值为null, 加快垃圾回收</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要将前面的源码读懂，后面的都是类似的</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的源码分析中就可以看出 <code>ArrayList</code> 的本质就是数组。<code>ArrayList</code> 的一些特性都来源于数组：有序、元素可重复、插入慢、 索引快。<br>而所谓的动态扩容不就是复制原数组到扩容后的数组。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java集合学习之LinkedList</title>
    <url>/2019/05/23/Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8BLinkedList/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>双链表实现了List和Deque接口。 实现所有可选列表操作，并允许所有元素（包括null ）。</p>
<p>所有的操作都能像双向列表一样预期。 索引到列表中的操作将从开始或结束遍历列表，以更接近指定的索引为准。</p>
<p><strong>请注意，此实现不同步。</strong> 如果多个线程同时访问链接列表，并且至少有一个线程在结构上修改列表，则必须在外部进行同步。 （结构修改是添加或删除一个或多个元素的任何操作;仅设置元素的值不是结构修改。）<br>这通常通过在自然封装列表的对象上进行同步来实现。 如果没有这样的对象存在，列表应该使用 Collections.synchronizedList 方法“包装”。 这最好在创建时完成，以防止意外的不同步访问列表：</p>
<pre><code>List list = Collections.synchronizedList(new LinkedList(...)); 
</code></pre>
<p>这个类的 iterator 和 listIterator 方法返回的迭代器是故障快速的 ：如果列表在迭代器创建之后的任何时间被结构化地修改，除了通过迭代器自己的remove或add方法之外，<br>迭代器将会抛出一个ConcurrentModificationException 。 因此，面对并发修改，迭代器将快速而干净地失败，而不是在未来未确定的时间冒着任意的非确定性行为。</p>
<p>请注意，迭代器的故障快速行为无法保证，因为一般来说，在不同步并发修改的情况下，无法做出任何硬性保证。<br>失败快速迭代器尽力投入ConcurrentModificationException 。 因此，编写依赖于此异常的程序的正确性将是错误的：迭代器的故障快速行为应仅用于检测错误。</p>
<p>（以上来自 Java8 api）</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看一下 LinkedList 的继承关系：</p>
<p><img src="../images/LinkedListUML.png" alt="LinkedListUML.png"></p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>LinkedList 是一个继承于 AbstractSequentialList 的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。<br>最大限度地减少了实现受“连续访问”数据存储（如链接列表）支持的此接口所需的工作,从而以减少实现 List 接口的复杂度。</li>
<li>LinkedList 实现 List 接口，能对它进行序列（有序集合）操作。</li>
<li>LinkedList 实现 Deque 接口，即能将LinkedList当作双端队列使用。</li>
<li>LinkedList 实现了 Cloneable 接口，即覆盖了函数 clone()，能克隆。</li>
<li>LinkedList 实现 java.io.Serializable 接口，这意味着 LinkedList 支持序列化，能通过序列化去传输。</li>
<li>LinkedList 是非同步的。</li>
</ol>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">// list中的元素个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表头节点</span></span><br><span class="line"><span class="comment">     * 不变式: (first == null &amp;&amp; last == null) || (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表尾节点</span></span><br><span class="line"><span class="comment">     * 不变式: (first == null &amp;&amp; last == null) || (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;<span class="comment">// 实际存放的元素</span></span><br><span class="line">        Node&lt;E&gt; next;<span class="comment">// 后一个节点</span></span><br><span class="line">        Node&lt;E&gt; prev;<span class="comment">// 前一个节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构造函数元素顺序分别为前，自己，后。就像排队一样</span></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>由于采用的是链表结构，所以不像 ArrayList 一样，有指定容量的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 构造一个空列表.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 构造一个包含指定 collection 中的元素的列表，这些元素按其 collection 的迭代器返回的顺序排列</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>();<span class="comment">// 什么都不做</span></span><br><span class="line">         addAll(c);<span class="comment">// 将 c 集合里的元素添加进链表</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 按照指定集合的迭代器返回的顺序将指定集合中的所有元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 判断参数是迭代器或添加操作的有效位置的索引。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">       &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 从指定位置开始，将指定集合中的所有元素插入此列表。 </span></span><br><span class="line"><span class="comment">       * 将当前位置的元素（如果有）和任何后续元素向右移动（增加其索引）。 </span></span><br><span class="line"><span class="comment">       * 新元素将按照指定集合的迭代器返回的顺序出现在列表中。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">          checkPositionIndex(index);<span class="comment">// 检查索引是否正确，即在 0 &lt;= index &lt;= size</span></span><br><span class="line">  </span><br><span class="line">          Object[] a = c.toArray();<span class="comment">// 将 collection 转为数组</span></span><br><span class="line">          <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">          <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  </span><br><span class="line">          Node&lt;E&gt; pred, succ;<span class="comment">// 声明 pred 为&quot;当前要插入节点的前一个节点&quot;，succ 为&quot;当前要插入节点的后一个节点&quot;</span></span><br><span class="line">          <span class="keyword">if</span> (index == size) &#123;<span class="comment">// 说明要插入元素的位置就在链表的末尾，后置元素为null，前一个元素就是last</span></span><br><span class="line">              succ = <span class="keyword">null</span>;</span><br><span class="line">              pred = last;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123; <span class="comment">// 说明在链表的中间插入，这时 pred 为原来 index 的 prev，succ 为原来的元素</span></span><br><span class="line">              succ = node(index);<span class="comment">// 利用双向链表的特性，进行更快的遍历</span></span><br><span class="line">              pred = succ.prev;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">for</span> (Object o : a) &#123;<span class="comment">// 遍历数组，逐个添加</span></span><br><span class="line">              <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> E e = (E) o;</span><br><span class="line">              Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">              <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                  first = newNode;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                  pred.next = newNode;</span><br><span class="line">              pred = newNode;<span class="comment">// 将新节点作为pred，为下一个元素插入做准备</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;<span class="comment">// 如果后继元素为空，那么插入完后的最后一个元素，就 pred 就是 last</span></span><br><span class="line">              last = pred;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;<span class="comment">// 否则就维护最后一个元素和之前的元素之间的关系</span></span><br><span class="line">              pred.next = succ;</span><br><span class="line">              succ.prev = pred;</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          size += numNew;</span><br><span class="line">          modCount++;<span class="comment">// 链表结构发生改动</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 返回指定元素索引处的(非空)节点</span></span><br><span class="line"><span class="comment">       * 利用双向链表的特性，进行更快的遍历</span></span><br><span class="line"><span class="comment">       * 双向链表和索引值联系起来：通过一个计数索引值来实现</span></span><br><span class="line"><span class="comment">       *    当我们调用get(int index)时，首先会比较“index”和“双向链表长度的1/2”；</span></span><br><span class="line"><span class="comment">       *    若前者大，则从链表头开始往后查找，直到 index 位置；</span></span><br><span class="line"><span class="comment">       *    否则，从链表末尾开始先前查找，直到 index 位置.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line">      </span><br><span class="line">          <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;<span class="comment">// 如果index在链表的前半部分，则从头部节点开始遍历</span></span><br><span class="line">              Node&lt;E&gt; x = first;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                  x = x.next;</span><br><span class="line">              <span class="keyword">return</span> x;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果index在链表的后半部分，则从尾部节点开始遍历</span></span><br><span class="line">              Node&lt;E&gt; x = last;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                  x = x.prev;</span><br><span class="line">              <span class="keyword">return</span> x;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增加-add-E-e"><a href="#增加-add-E-e" class="headerlink" title="增加 add(E e)"></a>增加 add(E e)</h3><p>作为链表，添加新元素就是在链表的末尾插入新元素。</p>
<p>注意，如果末尾元素是 null ，又该如何处理？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">         linkLast(e);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接 e 作为最后一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;<span class="comment">// 记录last节点</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);<span class="comment">// 初始化新的节点</span></span><br><span class="line"></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)<span class="comment">// 末尾元素是 null,是个空列表</span></span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;<span class="comment">// 链表结构发生改动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LinkedList 还有其他的增加方法：</p>
<ul>
<li>add(int index, E element)：在此列表中指定的位置插入指定的元素。</li>
<li>addAll(Collection&lt;? extends E&gt; c)：添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序。</li>
<li>addAll(int index, Collection&lt;? extends E&gt; c)：将指定 collection 中的所有元素从指定位置开始插入此列表。</li>
<li>AddFirst(E e): 将指定元素插入此列表的开头。</li>
<li>addLast(E e): 将指定元素添加到此列表的结尾。</li>
</ul>
<h3 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h3><p>处理思路：</p>
<ol>
<li>由于插入的元素可能为null，所以要对o进行判断，否则不论是o为null还是遍历的时候元素为null，都会导致报空指针异常</li>
<li>找到元素后，对前后的元素关系重新维护，要考虑到元素是否在头尾的情况</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;<span class="comment">// 是否为 null 的判断</span></span><br><span class="line">            <span class="comment">// 从头节点遍历链表寻找第一个 x(null) 元素</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);<span class="comment">// 取消链接 x(null) 元素，重新维护删除元素后的前后关系</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 与上面的逻辑相同</span></span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="comment">// 局部保存被删除节点的前后节点</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;<span class="comment">// prev 为 null 说明 x 节点为 first 节点，则删除后，next 为 first</span></span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 否则 prev的下一个元素为x的next</span></span><br><span class="line">            prev.next = next;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;<span class="comment">// 设为 null，方便GC</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;<span class="comment">// next 为null说明x节点为 last 节点，则删除后，next 为 prev</span></span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 否则 next 的上一个元素为x的prev</span></span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;<span class="comment">// 设为 null，方便GC</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        x.item = <span class="keyword">null</span>;<span class="comment">// 设为 null，方便GC</span></span><br><span class="line">        size--;</span><br><span class="line">        modCount++;<span class="comment">// 链表结构发生改变</span></span><br><span class="line">        <span class="keyword">return</span> element;<span class="comment">//返回被删除节点的数据体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的移除方法：</p>
<ul>
<li>clear()： 从此列表中移除所有元素。</li>
<li>remove()：获取并移除此列表的头（第一个元素）。</li>
<li>remove(int index)：移除此列表中指定位置处的元素。</li>
<li>remove(Objec o)：从此列表中移除首次出现的指定元素（如果存在）。</li>
<li>removeFirst()：移除并返回此列表的第一个元素。</li>
<li>removeFirstOccurrence(Object o)：从此列表中移除第一次出现的指定元素（从头部到尾部遍历列表时）。</li>
<li>removeLast()：移除并返回此列表的最后一个元素。</li>
<li>removeLastOccurrence(Object o)：从此列表中移除最后一次出现的指定元素（从头部到尾部遍历列表时）。</li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询的方法非常简单，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);<span class="comment">// 检查索引index 是否在 [0,size] 区间内</span></span><br><span class="line">        <span class="keyword">return</span> node(index).item;<span class="comment">//利用双向链表的特性，进行更快的遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它的查询方法：</p>
<ul>
<li>getFirst()：返回此列表的第一个元素。</li>
<li>getLast()：返回此列表的最后一个元素。</li>
<li>indexOf(Object o)：返回此列表中首次出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1。</li>
<li>lastIndexOf(Object o)：返回此列表中最后出现的指定元素的索引，如果此列表中不包含该元素，则返回 -1。</li>
</ul>
<h3 id="迭代器-listIterator"><a href="#迭代器-listIterator" class="headerlink" title="迭代器 listIterator"></a>迭代器 listIterator</h3><p>关于集合的快速失败机制的详细了解可以<a href="Java%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E4%B9%8Bfail-fast.md">看这里</a></p>
<p>iterator() 调用的其实是 listIterator() 方法，对于不同的实现类，都会实现不同的方法，但是其原理是一致的，<br>都是为了防止多线程操作同一个集合而出现的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);<span class="comment">// 检查索引的正确性[0, size]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; lastReturned;<span class="comment">// 记录上次返回的元素</span></span><br><span class="line">        <span class="keyword">private</span> Node&lt;E&gt; next;<span class="comment">// 记录下一个元素</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;<span class="comment">// 用来判断迭代过程中，是否有对元素的改动(fail-fast)</span></span><br><span class="line">    </span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            <span class="comment">// assert isPositionIndex(index);</span></span><br><span class="line">            next = (index == size) ? <span class="keyword">null</span> : node(index);<span class="comment">//初始化next，以便在next方法中返回</span></span><br><span class="line">            nextIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();<span class="comment">// 判断是否有对元素的改动，有则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    </span><br><span class="line">            lastReturned = next;<span class="comment">// next()当中的next元素就是要返回的结果</span></span><br><span class="line">            next = next.next;</span><br><span class="line">            nextIndex++;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 省略其它代码。。。</span></span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="有关队列、栈的方法"><a href="#有关队列、栈的方法" class="headerlink" title="有关队列、栈的方法"></a>有关队列、栈的方法</h3><ul>
<li>peek():返回第一个节点,若LinkedList的大小为0,则返回null</li>
<li>peekFirst():返回第一个节点,若LinkedList的大小为0,则返回null</li>
<li>peekLast():返回最后一个节点,若LinkedList的大小为0,则返回null</li>
<li>element():返回第一个节点,若LinkedList的大小为0,则抛出异常</li>
<li>poll():删除并返回第一个节点,若LinkedList的大小为0,则返回null</li>
<li>pollFirst():删除并返回第一个节点,若LinkedList的大小为0,则返回null</li>
<li>pollLast():删除并返回最后一个节点,若LinkedList的大小为0,则返回null</li>
<li>offer(E e):将e添加双向链表末尾</li>
<li>offerFirst(E e):将e添加双向链表开头</li>
<li>offerLast(E e):将e添加双向链表末尾</li>
<li>push(E e):将e插入到双向链表开头</li>
<li>pop():删除并返回第一个节点</li>
</ul>
<p>LinkedList 作为 FIFO(先进先出) 的队列, 下表的方法等效：</p>
<table>
<thead>
<tr>
<th>队列方法</th>
<th>等效方法</th>
</tr>
</thead>
<tbody><tr>
<td>add(e)</td>
<td>addLast(e)</td>
</tr>
<tr>
<td>offer(e)</td>
<td>offerLast(e)</td>
</tr>
<tr>
<td>remove()</td>
<td>removeFirst()</td>
</tr>
<tr>
<td>poll()</td>
<td>pollFirst()</td>
</tr>
<tr>
<td>element()</td>
<td>getFirst()</td>
</tr>
<tr>
<td>peek()</td>
<td>peekFirst()</td>
</tr>
</tbody></table>
<p>LinkedList 作为 LIFO(后进先出) 的栈, 下表的方法等效：</p>
<table>
<thead>
<tr>
<th>栈方法</th>
<th>等效方法</th>
</tr>
</thead>
<tbody><tr>
<td>push(e)</td>
<td>addFirst(e)</td>
</tr>
<tr>
<td>pop()</td>
<td>removeFirst()</td>
</tr>
<tr>
<td>peek()</td>
<td>peekFirst()</td>
</tr>
</tbody></table>
<h3 id="LinkedList-的遍历方法和性能比较"><a href="#LinkedList-的遍历方法和性能比较" class="headerlink" title="LinkedList 的遍历方法和性能比较"></a>LinkedList 的遍历方法和性能比较</h3><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>LinkedList 实际上是通过双向链表去实现的。它包含一个非常重要的内部类：<code>Node</code>。<code>Node</code> 是双向链表节点所对应的数据结构，<br>它包括的属性有：当前节点所包含的值，上一个节点，下一个节点。</li>
<li>从 LinkedList 的实现方式中可以发现，它不存在LinkedList容量不足的问题。</li>
<li>LinkedList 的克隆函数，即是将全部元素克隆到一个新的LinkedList对象中。</li>
<li>LinkedList 实现java.io.Serializable。当写入到输出流时，先写入“容量”，再依次写入“每一个节点保护的值”；<br>当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</li>
<li>由于 LinkedList 实现了Deque，而 Deque 接口定义了在双端队列两端访问元素的方法。提供插入、移除和检查元素的方法。<br>每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java集合</tag>
      </tags>
  </entry>
  <entry>
    <title>JedisCommand接口说明</title>
    <url>/2019/05/07/JedisCommand%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Common interface for sharded and non-sharded Jedis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JedisCommands</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据到缓存中，若key已存在则覆盖 value的长度不能超过1073741824 bytes (1 GB)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">set</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储数据到缓存中，并制定过期时间和当Key存在时是否覆盖。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nxxx </span></span><br><span class="line"><span class="comment">     *            nxxx的值只能取NX或者XX，如果取NX，则只有当key不存在是才进行set，如果取XX，则只有当key已经存在时才进行set</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expx expx的值只能取EX或者PX，代表数据过期时间的单位，EX代表秒，PX代表毫秒。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间，单位是expx所代表的单位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">set</span><span class="params">(String key, String value, String nxxx, String expx, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从缓存中根据key取得其String类型的值，如果key不存在则返回null，如果key存在但value不是string类型的，</span></span><br><span class="line"><span class="comment">     * 则返回一个error。这个方法只能从缓存中取得value为string类型的值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查某个key是否在缓存中存在，如果存在返回true，否则返回false；需要注意的是，即使该key所对应的value是一个空字符串，</span></span><br><span class="line"><span class="comment">     * 也依然会返回true。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">exists</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果一个key设置了过期时间，则取消其过期时间，使其永久存在。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回1或者0,1代表取消过期时间成功，0代表不成功(只有当key不存在时这种情况才会发生)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">persist</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回某个key所存储的数据类型，返回的数据类型有可能是&quot;none&quot;, &quot;string&quot;, &quot;list&quot;, &quot;set&quot;, &quot;zset&quot;,</span></span><br><span class="line"><span class="comment">     * &quot;hash&quot;. &quot;none&quot;代表key不存在。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为key设置一个特定的过期时间，单位为秒。过期时间一到，redis将会从缓存中删除掉该key。</span></span><br><span class="line"><span class="comment">     * 即使是有过期时间的key，redis也会在持久化时将其写到硬盘中，并把相对过期时间改为绝对的Unix过期时间。</span></span><br><span class="line"><span class="comment">     * 在一个有设置过期时间的key上重复设置过期时间将会覆盖原先设置的过期时间。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回1表示成功设置过期时间，返回0表示key不存在。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">expire</span><span class="params">(String key, <span class="keyword">int</span> seconds)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制同&#123;<span class="doctag">@link</span> expire&#125;一样，只是时间单位改为毫秒。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> milliseconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值同 &#123;<span class="doctag">@link</span> expire&#125;一样。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">pexpire</span><span class="params">(String key, <span class="keyword">long</span> milliseconds)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与&#123;<span class="doctag">@link</span> expire&#125;不一样，expireAt设置的时间不是能存活多久，而是固定的UNIX时间（从1970年开始算起），单位为秒。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unixTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">expireAt</span><span class="params">(String key, <span class="keyword">long</span> unixTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同&#123;<span class="doctag">@link</span> expireAt&#125;机制相同，但单位为毫秒。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> millisecondsTimestamp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">pexpireAt</span><span class="params">(String key, <span class="keyword">long</span> millisecondsTimestamp)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个key还能活多久，单位为秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果该key本来并没有设置过期时间，则返回-1，如果该key不存在，则返回-2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">ttl</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置或者清除指定key的value上的某个位置的比特位，如果该key原先不存在，则新创建一个key，其value将会自动分配内存，</span></span><br><span class="line"><span class="comment">     * 直到可以放下指定位置的bit值。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value true代表1，false代表0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回原来位置的bit值是否是1，如果是1，则返回true，否则返回false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">setbit</span><span class="params">(String key, <span class="keyword">long</span> offset, <span class="keyword">boolean</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置或者清除指定key的value上的某个位置的比特位，如果该key原先不存在，则新创建一个key，其value将会自动分配内存，</span></span><br><span class="line"><span class="comment">     * 直到可以放下指定位置的bit值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 只能是&quot;1&quot;或者&quot;0&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回原来位置的bit值是否是1，如果是1，则返回true，否则返回false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">setbit</span><span class="params">(String key, <span class="keyword">long</span> offset, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得偏移量为offset的bit值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true代表1，false代表0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">getbit</span><span class="params">(String key, <span class="keyword">long</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个命令的作用是覆盖key对应的string的一部分，从指定的offset处开始，覆盖value的长度。</span></span><br><span class="line"><span class="comment">     * 如果offset比当前key对应string还要长，</span></span><br><span class="line"><span class="comment">     * 那这个string后面就补0以达到offset。不存在的keys被认为是空字符串，所以这个命令可以确保key有一个足够大的字符串</span></span><br><span class="line"><span class="comment">     * 能在offset处设置value。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 该命令修改后的字符串长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">setrange</span><span class="params">(String key, <span class="keyword">long</span> offset, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得start - end之间的子字符串，若偏移量为负数，代表从末尾开始计算，例如-1代表倒数第一个，-2代表倒数第二个</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startOffset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endOffset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getrange</span><span class="params">(String key, <span class="keyword">long</span> startOffset, <span class="keyword">long</span> endOffset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动将key对应到value并且返回原来key对应的value。如果key存在但是对应的value不是字符串，就返回错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getSet</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参考 &#123;<span class="doctag">@link</span> set(String key, String value, String nxxx, String expx, long</span></span><br><span class="line"><span class="comment">     * time)&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">setnx</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参考 &#123;<span class="doctag">@link</span> set(String key, String value, String nxxx, String expx, long</span></span><br><span class="line"><span class="comment">     * time)&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">setex</span><span class="params">(String key, <span class="keyword">int</span> seconds, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定key的值减少某个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回减少后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">decrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定Key的值减少1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回减少后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">decr</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的key的值增加指定的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的key的值增加指定的值(浮点数)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">incrByFloat</span><span class="params">(String key, <span class="keyword">double</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的key的值增加1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若key存在，将value追加到原有字符串的末尾。若key不存在，则创建一个新的空字符串。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回字符串的总长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">append</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回start - end 之间的子字符串(start 和 end处的字符也包括在内)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回子字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">substr</span><span class="params">(String key, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置hash表里field字段的值为value。如果key不存在，则创建一个新的hash表</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果该字段已经存在，那么将会更新该字段的值，返回0.如果字段不存在，则新创建一个并且返回1.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hset</span><span class="params">(String key, String field, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果该key对应的值是一个Hash表，则返回对应字段的值。 如果不存在该字段，或者key不存在，则返回一个&quot;nil&quot;值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">hget</span><span class="params">(String key, String field)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当字段不存在时，才进行set。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果该字段已经存在，则返回0.若字段不存在，则创建后set，返回1.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hsetnx</span><span class="params">(String key, String field, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置多个字段和值，如果字段存在，则覆盖。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 设置成功返回OK，设置不成功则返回EXCEPTION</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">hmset</span><span class="params">(String key, Map&lt;String, String&gt; hash)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在hash中获取多个字段的值，若字段不存在，则其值为nil。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 按顺序返回多个字段的值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">hmget</span><span class="params">(String key, String... fields)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对hash中指定字段的值增加指定的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hincrBy</span><span class="params">(String key, String field, <span class="keyword">long</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash中指定字段是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 若存在返回1，若不存在返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hexists</span><span class="params">(String key, String field)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash中指定字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除成功返回1， 删除不成功返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hdel</span><span class="params">(String key, String... field)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 指定的哈希集包含的字段的数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 哈希集中字段的数量，当 key 指定的哈希集不存在时返回 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hlen</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 指定的哈希集中所有字段的名字。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 哈希集中的字段列表，当 key 指定的哈希集不存在时返回空列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">hkeys</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 指定的哈希集中所有字段的值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 哈希集中的值的列表，当 key 指定的哈希集不存在时返回空列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">hvals</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 指定的哈希集中所有的字段和值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 key 指定的哈希集中所有的字段和值,若key不存在返回空map。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, String&gt; <span class="title">hgetAll</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向存于 key 的列表的尾部插入所有指定的值。如果 key 不存在，那么会创建一个空的列表然后再进行 push 操作。 当 key</span></span><br><span class="line"><span class="comment">     * 保存的不是一个列表，那么会返回一个错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 可以使用一个命令把多个元素打入队列，只需要在命令后面指定多个参数。元素是从左到右一个接一个从列表尾部插入。 比如命令 RPUSH mylist a</span></span><br><span class="line"><span class="comment">     * b c 会返回一个列表，其第一个元素是 a ，第二个元素是 b ，第三个元素是 c。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在 push 操作后的列表长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">rpush</span><span class="params">(String key, String... string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将所有指定的值插入到存于 key 的列表的头部。如果 key 不存在，那么在进行 push 操作前会创建一个空列表。 如果 key</span></span><br><span class="line"><span class="comment">     * 对应的值不是一个 list 的话，那么会返回一个错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 可以使用一个命令把多个元素 push 进入列表，只需在命令末尾加上多个指定的参数。元素是从最左端的到最右端的、一个接一个被插入到 list</span></span><br><span class="line"><span class="comment">     * 的头部。 所以对于这个命令例子 LPUSH mylist a b c，返回的列表是 c 为第一个元素， b 为第二个元素， a 为第三个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在 push 操作后的列表长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lpush</span><span class="params">(String key, String... string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 里的list的长度。 如果 key 不存在，那么就被看作是空list，并且返回长度为 0。 当存储在 key</span></span><br><span class="line"><span class="comment">     * 里的值不是一个list的话，会返回error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key对应的list的长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">llen</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回存储在 key 的列表里指定范围内的元素。 start 和 end</span></span><br><span class="line"><span class="comment">     * 偏移量都是基于0的下标，即list的第一个元素下标是0（list的表头），第二个元素下标是1，以此类推。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 偏移量也可以是负数，表示偏移量是从list尾部开始计数。 例如， -1 表示列表的最后一个元素，-2 是倒数第二个，以此类推。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围里的列表元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">lrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修剪(trim)一个已存在的 list，这样 list 就会只包含指定范围的指定元素。start 和 stop 都是由0开始计数的， 这里的 0</span></span><br><span class="line"><span class="comment">     * 是列表里的第一个元素（表头），1 是第二个元素，以此类推。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">ltrim</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回列表里的元素的索引 index 存储在 key 里面。 下标是从0开始索引的，所以 0 是表示第一个元素， 1 表示第二个元素，并以此类推。</span></span><br><span class="line"><span class="comment">     * 负数索引用于指定从列表尾部开始索引的元素。在这种方法下，-1 表示最后一个元素，-2 表示倒数第二个元素，并以此往前推。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当 key 位置的值不是一个列表的时候，会返回一个error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 请求的对应元素，或者当 index 超过范围的时候返回 nil。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">lindex</span><span class="params">(String key, <span class="keyword">long</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 index 位置的list元素的值为 value。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当index超出范围时会返回一个error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 状态恢复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">lset</span><span class="params">(String key, <span class="keyword">long</span> index, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从存于 key 的列表里移除前 count 次出现的值为 value 的元素。 这个 count 参数通过下面几种方式影响这个操作：</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * count &gt; 0: 从头往尾移除值为 value 的元素。 count &lt; 0: 从尾往头移除值为 value 的元素。 count = 0:</span></span><br><span class="line"><span class="comment">     * 移除所有值为 value 的元素。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 比如， LREM list -2 &quot;hello&quot; 会从存于 list 的列表里移除最后两个出现的 &quot;hello&quot;。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 需要注意的是，如果list里没有存在key就会被当作空list处理，所以当 key 不存在的时候，这个命令会返回 0。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lrem</span><span class="params">(String key, <span class="keyword">long</span> count, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并且返回 key 对应的 list 的第一个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回第一个元素的值，或者当 key 不存在时返回 nil。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">lpop</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并返回存于 key 的 list 的最后一个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最后一个元素的值，或者当 key 不存在的时候返回 nil。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">rpop</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加一个或多个指定的member元素到集合的 key中.指定的一个或者多个元素member 如果已经在集合key中存在则忽略.如果集合key</span></span><br><span class="line"><span class="comment">     * 不存在，则新建集合key,并添加member元素到集合key中.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果key 的类型不是集合则返回错误.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回新成功添加到集合里元素的数量，不包括已经存在于集合中的元素.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sadd</span><span class="params">(String key, String... member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key集合所有的元素.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 该命令的作用与使用一个参数的SINTER 命令作用相同.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 集合中的所有元素.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">smembers</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在key集合中移除指定的元素. 如果指定的元素不是key集合中的元素则忽略 如果key集合不存在则被视为一个空的集合，该命令返回0.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果key的类型不是一个集合,则返回错误.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从集合中移除元素的个数，不包括不存在的成员.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">srem</span><span class="params">(String key, String... member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并返回一个集合中的随机元素</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 该命令与 SRANDMEMBER相似,不同的是srandmember命令返回一个随机元素但是不移除.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被移除的元素, 当key不存在的时候返回 nil .</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">spop</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除并返回多个集合中的随机元素</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被移除的元素, 当key不存在的时候值为 nil .</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">spop</span><span class="params">(String key, <span class="keyword">long</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回集合存储的key的基数 (集合元素的数量).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 集合的基数(元素的数量),如果key不存在,则返回 0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">scard</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回成员 member 是否是存储的集合 key的成员.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果member元素是集合key的成员，则返回1.如果member元素不是key的成员，或者集合key不存在，则返回0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">sismember</span><span class="params">(String key, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 仅提供key参数,那么随机返回key集合中的一个元素.该命令作用类似于SPOP命令, 不同的是SPOP命令会将被选择的随机元素从集合中移除,</span></span><br><span class="line"><span class="comment">     * 而SRANDMEMBER仅仅是返回该随记元素,而不做任何操作.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回随机的元素,如果key不存在则返回nil</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">srandmember</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果count是整数且小于元素的个数，返回含有 count</span></span><br><span class="line"><span class="comment">     * 个不同的元素的数组,如果count是个整数且大于集合中元素的个数时,仅返回整个集合的所有元素</span></span><br><span class="line"><span class="comment">     * ,当count是负数,则会返回一个包含count的绝对值的个数元素的数组</span></span><br><span class="line"><span class="comment">     * ，如果count的绝对值大于元素的个数,则返回的结果集里会出现一个元素出现多次的情况.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个随机的元素数组,如果key不存在则返回一个空的数组.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">srandmember</span><span class="params">(String key, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的string类型value的长度。如果key对应的非string类型，就返回错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key对应的字符串value的长度，或者0（key不存在）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">strlen</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该命令添加指定的成员到key对应的有序集合中，每个成员都有一个分数。你可以指定多个分数/成员组合。如果一个指定的成员已经在对应的有序集合中了，</span></span><br><span class="line"><span class="comment">     * 那么其分数就会被更新成最新的</span></span><br><span class="line"><span class="comment">     * ，并且该成员会重新调整到正确的位置，以确保集合有序。如果key不存在，就会创建一个含有这些成员的有序集合，就好像往一个空的集合中添加一样</span></span><br><span class="line"><span class="comment">     * 。如果key存在，但是它并不是一个有序集合，那么就返回一个错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 分数的值必须是一个表示数字的字符串，并且可以是double类型的浮点数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回添加到有序集合中元素的个数，不包括那种已经存在只是更新分数的元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zadd</span><span class="params">(String key, <span class="keyword">double</span> score, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该命令添加指定的成员到key对应的有序集合中，每个成员都有一个分数。你可以指定多个分数/成员组合。如果一个指定的成员已经在对应的有序集合中了，</span></span><br><span class="line"><span class="comment">     * 那么其分数就会被更新成最新的</span></span><br><span class="line"><span class="comment">     * ，并且该成员会重新调整到正确的位置，以确保集合有序。如果key不存在，就会创建一个含有这些成员的有序集合，就好像往一个空的集合中添加一样</span></span><br><span class="line"><span class="comment">     * 。如果key存在，但是它并不是一个有序集合，那么就返回一个错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 分数的值必须是一个表示数字的字符串，并且可以是double类型的浮点数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scoreMembers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回添加到有序集合中元素的个数，不包括那种已经存在只是更新分数的元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zadd</span><span class="params">(String key, Map&lt;String, Double&gt; scoreMembers)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，指定区间内的成员。其中成员按score值递增(从小到大)来排序。具有相同score值的成员按字典序来排列。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果你需要成员按score值递减(score相等时按字典序递减)来排列，请使用ZREVRANGE命令。</span></span><br><span class="line"><span class="comment">     * 下标参数start和stop都以0为底，也就是说，以0表示有序集第一个成员，以1表示有序集第二个成员，以此类推。</span></span><br><span class="line"><span class="comment">     * 你也可以使用负数下标，以-1表示最后一个成员，-2表示倒数第二个成员，以此类推。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 超出范围的下标并不会引起错误。如果start的值比有序集的最大下标还要大，或是start &gt;</span></span><br><span class="line"><span class="comment">     * stop时，ZRANGE命令只是简单地返回一个空列表。</span></span><br><span class="line"><span class="comment">     * 另一方面，假如stop参数的值比有序集的最大下标还要大，那么Redis将stop当作最大下标来处理。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从集合中删除指定member元素，当key存在，但是其不是有序集合类型，就返回一个错误。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是从有序集合中删除的成员个数，不包括不存在的成员。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zrem</span><span class="params">(String key, String... member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为有序集key的成员member的score值加上增量increment。如果key中不存在member，就在key中添加一个member，</span></span><br><span class="line"><span class="comment">     * score是increment（就好像它之前的score是0.0）。如果key不存在，就创建一个只含有指定member成员的有序集合。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当key不是有序集类型时，返回一个错误。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * score值必须整数值或双精度浮点数。也有可能给一个负数来减少score的值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> member成员的新score值.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zincrby</span><span class="params">(String key, <span class="keyword">double</span> score, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中成员member的排名。其中有序集成员按score值递增(从小到大)顺序排列。排名以0为底，也就是说，</span></span><br><span class="line"><span class="comment">     * score值最小的成员排名为0。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 使用ZREVRANK命令可以获得成员按score值递减(从大到小)排列的排名。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果member是有序集key的成员，返回member的排名的整数。 如果member不是有序集key的成员，返回 nil。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zrank</span><span class="params">(String key, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中成员member的排名，其中有序集成员按score值从大到小排列。排名以0为底，也就是说，score值最大的成员排名为0。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 使用ZRANK命令可以获得成员按score值递增(从小到大)排列的排名。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果member是有序集key的成员，返回member的排名。整型数字。 如果member不是有序集key的成员，返回Bulk</span></span><br><span class="line"><span class="comment">     *         reply: nil.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zrevrank</span><span class="params">(String key, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，指定区间内的成员。其中成员的位置按score值递减(从大到小)来排列。具有相同score值的成员按字典序的反序排列。</span></span><br><span class="line"><span class="comment">     * 除了成员按score值递减的次序排列这一点外，ZREVRANGE命令的其他方面和ZRANGE命令一样。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围的元素列表(可选是否含有分数)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrevrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，指定区间内的成员。其中成员按score值递增(从小到大)来排序。具有相同score值的成员按字典序来排列。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果你需要成员按score值递减(score相等时按字典序递减)来排列，请使用ZREVRANGE命令。</span></span><br><span class="line"><span class="comment">     * 下标参数start和stop都以0为底，也就是说，以0表示有序集第一个成员，以1表示有序集第二个成员，以此类推。</span></span><br><span class="line"><span class="comment">     * 你也可以使用负数下标，以-1表示最后一个成员，-2表示倒数第二个成员，以此类推。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 超出范围的下标并不会引起错误。如果start的值比有序集的最大下标还要大，或是start &gt;</span></span><br><span class="line"><span class="comment">     * stop时，ZRANGE命令只是简单地返回一个空列表。</span></span><br><span class="line"><span class="comment">     * 另一方面，假如stop参数的值比有序集的最大下标还要大，那么Redis将stop当作最大下标来处理。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 使用WITHSCORES选项，来让成员和它的score值一并返回，返回列表以value1,score1, ...,</span></span><br><span class="line"><span class="comment">     * valueN,scoreN的格式表示，而不是value1,...,valueN。客户端库可能会返回一些更复杂的数据类型，比如数组、元组等。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围的元素列表(以元组集合的形式)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrangeWithScores</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，指定区间内的成员。其中成员的位置按score值递减(从大到小)来排列。具有相同score值的成员按字典序的反序排列。</span></span><br><span class="line"><span class="comment">     * 除了成员按score值递减的次序排列这一点外，ZREVRANGE命令的其他方面和ZRANGE命令一样。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围的元素列表(可选是否含有分数)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrevrangeWithScores</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集元素个数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key存在的时候，返回有序集的元素个数，否则返回0。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zcard</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，成员member的score值。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果member元素不是有序集key的成员，或key不存在，返回nil。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> member成员的score值（double型浮点数）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zscore</span><span class="params">(String key, String member)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对一个集合或者一个列表排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 对集合，有序集合，或者列表的value进行排序。默认情况下排序只对数字排序，双精度浮点数。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #sort(String, String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #sort(String, SortingParams)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #sort(String, SortingParams, String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 假设集合或列表包含的是数字元素，那么返回的将会是从小到大排列的一个列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">sort</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定参数来对列表或集合进行排序.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;b&gt;examples:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 一下是一些例子列表或者key-value:</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * x = [1, 2, 3]</span></span><br><span class="line"><span class="comment">     * y = [a, b, c]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * k1 = z</span></span><br><span class="line"><span class="comment">     * k2 = y</span></span><br><span class="line"><span class="comment">     * k3 = x</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * w1 = 9</span></span><br><span class="line"><span class="comment">     * w2 = 8</span></span><br><span class="line"><span class="comment">     * w3 = 7</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 排序:</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * sort(x) or sort(x, sp.asc())</span></span><br><span class="line"><span class="comment">     * -&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(x, sp.desc())</span></span><br><span class="line"><span class="comment">     * -&gt; [3, 2, 1]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(y)</span></span><br><span class="line"><span class="comment">     * -&gt; [c, a, b]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(y, sp.alpha())</span></span><br><span class="line"><span class="comment">     * -&gt; [a, b, c]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(y, sp.alpha().desc())</span></span><br><span class="line"><span class="comment">     * -&gt; [c, b, a]</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Limit (e.g. for Pagination):</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * sort(x, sp.limit(0, 2))</span></span><br><span class="line"><span class="comment">     * -&gt; [1, 2]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(y, sp.alpha().desc().limit(1, 2))</span></span><br><span class="line"><span class="comment">     * -&gt; [b, a]</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 使用外部键来排序:</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * sort(x, sb.by(w*))</span></span><br><span class="line"><span class="comment">     * -&gt; [3, 2, 1]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(x, sb.by(w*).desc())</span></span><br><span class="line"><span class="comment">     * -&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * Getting external keys:</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;</span></span><br><span class="line"><span class="comment">     * sort(x, sp.by(w*).get(k*))</span></span><br><span class="line"><span class="comment">     * -&gt; [x, y, z]</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * sort(x, sp.by(w*).get(#).get(k*))</span></span><br><span class="line"><span class="comment">     * -&gt; [3, x, 2, y, 1, z]</span></span><br><span class="line"><span class="comment">     * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #sort(String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #sort(String, SortingParams, String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sortingParameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a list of sorted elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">sort</span><span class="params">(String key, SortingParams sortingParameters)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素个数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zcount</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回有序集key中，score值在min和max之间(默认包括score值等于min或max)的成员。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素个数。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zcount</span><span class="params">(String key, String min, String max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key, String min, String max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列, 指定返回结果的数量及区间。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列, 指定返回结果的数量及区间。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定分数范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key, String min, String max, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列。返回元素和其分数，而不只是元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrangeByScoreWithScores</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列, 指定返回结果的数量及区间。 返回元素和其分数，而不只是元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrangeByScoreWithScores</span><span class="params">(String key, <span class="keyword">double</span> min, <span class="keyword">double</span> max, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列。返回元素和其分数，而不只是元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrangeByScoreWithScores</span><span class="params">(String key, String min, String max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回key的有序集合中的分数在min和max之间的所有元素（包括分数等于max或者min的元素）。元素被认为是从低分到高分排序的。</span></span><br><span class="line"><span class="comment">     * 具有相同分数的元素按字典序排列, 指定返回结果的数量及区间。 返回元素和其分数，而不只是元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrangeByScoreWithScores</span><span class="params">(String key, String min, String max, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScore一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrevrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> max, <span class="keyword">double</span> min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScore一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrevrangeByScore</span><span class="params">(String key, String max, String min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScore一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrevrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> max, <span class="keyword">double</span> min, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScoreWithScores一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrevrangeByScoreWithScores</span><span class="params">(String key, <span class="keyword">double</span> max, <span class="keyword">double</span> min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScore一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">zrevrangeByScore</span><span class="params">(String key, String max, String min, <span class="keyword">int</span> offset, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScoreWithScores一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrevrangeByScoreWithScores</span><span class="params">(String key, String max, String min)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScoreWithScores一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrevrangeByScoreWithScores</span><span class="params">(String key, <span class="keyword">double</span> max, <span class="keyword">double</span> min, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机制与zrangeByScoreWithScores一样，只是返回结果为降序排序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Tuple&gt; <span class="title">zrevrangeByScoreWithScores</span><span class="params">(String key, String max, String min, <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除有序集key中，指定排名(rank)区间内的所有成员。下标参数start和stop都以0为底，0处是分数最小的那个元素。这些索引也可是负数，</span></span><br><span class="line"><span class="comment">     * 表示位移从最高分处开始数。例如，-1是分数最高的元素，-2是分数第二高的，依次类推。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被移除成员的数量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zremrangeByRank</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除有序集key中，所有score值介于min和max之间(包括等于min或max)的成员。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 自版本2.1.6开始，score值等于min或max的成员也可以不包括在内，语法请参见ZRANGEBYSCORE命令。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的元素的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zremrangeByScore</span><span class="params">(String key, <span class="keyword">double</span> start, <span class="keyword">double</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除有序集key中，所有score值介于min和max之间(包括等于min或max)的成员。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 自版本2.1.6开始，score值等于min或max的成员也可以不包括在内，语法请参见ZRANGEBYSCORE命令。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的元素的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zremrangeByScore</span><span class="params">(String key, String start, String end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当插入到有序集合中的元素都具有相同的分数时，这个命令可以返回min和max指定范围内的元素的数量。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">zlexcount</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String min, <span class="keyword">final</span> String max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把 value 插入存于 key 的列表中在基准值 pivot 的前面或后面。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当 key 不存在时，这个list会被看作是空list，任何操作都不会发生。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 当 key 存在，但保存的不是一个list的时候，会返回error。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pivot 前或后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在 insert 操作后的 list 长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">linsert</span><span class="params">(String key, Client.LIST_POSITION where, String pivot, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有当 key 已经存在并且存着一个 list 的时候，在这个 key 下面的 list 的头部插入 value。 与 LPUSH 相反，当</span></span><br><span class="line"><span class="comment">     * key 不存在的时候不会进行任何操作。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在 push 操作后的 list 长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lpushx</span><span class="params">(String key, String... string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将值 value 插入到列表 key 的表尾, 当且仅当 key 存在并且是一个列表。 和 RPUSH 命令相反, 当 key</span></span><br><span class="line"><span class="comment">     * 不存在时，RPUSHX 命令什么也不做。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 在Push操作后List的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">rpushx</span><span class="params">(String key, String... string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> unusable command, this will be removed in 3.0.0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">blpop</span><span class="params">(String arg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BLPOP 是阻塞式列表的弹出原语。 它是命令 LPOP 的阻塞版本，这是因为当给定列表内没有任何元素可供弹出的时候， 连接将被 BLPOP</span></span><br><span class="line"><span class="comment">     * 命令阻塞。 当给定多个 key 参数时，按参数 key 的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。 &#123;<span class="doctag">@link</span> http</span></span><br><span class="line"><span class="comment">     * ://www.redis.cn/commands/blpop.html&#125;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">blpop</span><span class="params">(<span class="keyword">int</span> timeout, String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> unusable command, this will be removed in 3.0.0.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">brpop</span><span class="params">(String arg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BRPOP 是一个阻塞的列表弹出原语。 它是 RPOP 的阻塞版本，因为这个命令会在给定list无法弹出任何元素的时候阻塞连接。</span></span><br><span class="line"><span class="comment">     * 该命令会按照给出的 key 顺序查看 list，并在找到的第一个非空 list 的尾部弹出一个元素。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 请在 BLPOP 文档 中查看该命令的准确语义，因为 BRPOP 和 BLPOP</span></span><br><span class="line"><span class="comment">     * 基本是完全一样的，除了它们一个是从尾部弹出元素，而另一个是从头部弹出元素。 &#123;<span class="doctag">@link</span> http</span></span><br><span class="line"><span class="comment">     * ://www.redis.cn/commands/brpop.html&#125;</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">brpop</span><span class="params">(<span class="keyword">int</span> timeout, String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除一个Key,如果删除的key不存在，则直接忽略。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除的keys的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">del</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回显</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 回显输入的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">echo</span><span class="params">(String string)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前数据库的 key 移动到给定的数据库 db 当中。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 因此，也可以利用这一特性，将 MOVE 当作锁(locking)原语(primitive)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dbIndex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移动成功返回 1 失败则返回 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">move</span><span class="params">(String key, <span class="keyword">int</span> dbIndex)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串的字节数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字节数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">bitcount</span><span class="params">(<span class="keyword">final</span> String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串指定起始位置的字节数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">bitcount</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代hash里面的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cursor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ScanResult&lt;Map.Entry&lt;String, String&gt;&gt; hscan(<span class="keyword">final</span> String key, <span class="keyword">final</span> String cursor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代set里面的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cursor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ScanResult&lt;String&gt; <span class="title">sscan</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String cursor)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代zset里面的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cursor</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ScanResult&lt;Tuple&gt; <span class="title">zscan</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String cursor)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>KAFKA 配置参数详解</title>
    <url>/2021/02/19/KAFKA-%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>3.1    Broker Configs</p>
<p>基本配置如下：</p>
<p>-broker.id<br>-log.dirs<br>-zookeeper.connect</p>
<span id="more"></span>

<p>Topic-level配置以及其默认值将在<a href="http://kafka.apache.org/documentation.html#topic-config">下面</a>讨论。</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>broker.id</td>
<td></td>
<td>每个broker都可以用一个唯一的非负整数id进行标识；这个id可以作为broker的“名字”，并且它的存在使得broker无须混淆consumers就可以迁移到不同的host/port上。你可以选择任意你喜欢的数字作为id，只要id是唯一的即可。</td>
</tr>
<tr>
<td>log.dirs</td>
<td>/tmp/kafka-logs</td>
<td>kafka存放数据的路径。这个路径并不是唯一的，可以是多个，路径之间只需要使用逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进行。</td>
</tr>
<tr>
<td>port</td>
<td>6667</td>
<td>server接受客户端连接的端口</td>
</tr>
<tr>
<td>zookeeper.connect</td>
<td>null</td>
<td>ZooKeeper连接字符串的格式为：hostname:port，此处hostname和port分别是ZooKeeper集群中某个节点的host和port；为了当某个host宕掉之后你能通过其他ZooKeeper节点进行连接，你可以按照一下方式制定多个hosts： hostname1:port1, hostname2:port2, hostname3:port3.ZooKeeper 允许你增加一个“chroot”路径，将集群中所有kafka数据存放在特定的路径下。当多个Kafka集群或者其他应用使用相同ZooKeeper集群时，可以使用这个方式设置数据存放路径。这种方式的实现可以通过这样设置连接字符串格式，如下所示： hostname1：port1，hostname2：port2，hostname3：port3/chroot/path 这样设置就将所有kafka集群数据存放在/chroot/path路径下。注意，在你启动broker之前，你必须创建这个路径，并且consumers必须使用相同的连接格式。</td>
</tr>
<tr>
<td>message.max.bytes</td>
<td>1000000</td>
<td>server可以接收的消息最大尺寸。重要的是，consumer和producer有关这个属性的设置必须同步，否则producer发布的消息对consumer来说太大。</td>
</tr>
<tr>
<td>num.network.threads</td>
<td>3</td>
<td>server用来处理网络请求的网络线程数目；一般你不需要更改这个属性。</td>
</tr>
<tr>
<td>num.io.threads</td>
<td>8</td>
<td>server用来处理请求的I/O线程的数目；这个线程数目至少要等于硬盘的个数。</td>
</tr>
<tr>
<td>background.threads</td>
<td>4</td>
<td>用于后台处理的线程数目，例如文件删除；你不需要更改这个属性。</td>
</tr>
<tr>
<td>queued.max.requests</td>
<td>500</td>
<td>在网络线程停止读取新请求之前，可以排队等待I/O线程处理的最大请求个数。</td>
</tr>
<tr>
<td>host.name</td>
<td>null</td>
<td>broker的hostname；如果hostname已经设置的话，broker将只会绑定到这个地址上；如果没有设置，它将绑定到所有接口，并发布一份到ZK</td>
</tr>
<tr>
<td>advertised.host.name</td>
<td>null</td>
<td>如果设置，则就作为broker 的hostname发往producer、consumers以及其他brokers</td>
</tr>
<tr>
<td>advertised.port</td>
<td>null</td>
<td>此端口将给与producers、consumers、以及其他brokers，它会在建立连接时用到； 它仅在实际端口和server需要绑定的端口不一样时才需要设置。</td>
</tr>
<tr>
<td>socket.send.buffer.bytes</td>
<td>100 * 1024</td>
<td>SO_SNDBUFF 缓存大小，server进行socket 连接所用</td>
</tr>
<tr>
<td>socket.receive.buffer.bytes</td>
<td>100 * 1024</td>
<td>SO_RCVBUFF缓存大小，server进行socket连接时所用</td>
</tr>
<tr>
<td>socket.request.max.bytes</td>
<td>100 * 1024 * 1024</td>
<td>server允许的最大请求尺寸； 这将避免server溢出，它应该小于Java heap size</td>
</tr>
<tr>
<td>num.partitions</td>
<td>1</td>
<td>如果创建topic时没有给出划分partitions个数，这个数字将是topic下partitions数目的默认数值。</td>
</tr>
<tr>
<td>log.segment.bytes</td>
<td>1014<em>1024</em>1024</td>
<td>topic partition的日志存放在某个目录下诸多文件中，这些文件将partition的日志切分成一段一段的；这个属性就是每个文件的最大尺寸；当尺寸达到这个数值时，就会创建新文件。此设置可以由每个topic基础设置时进行覆盖。 查看 <a href="http://kafka.apache.org/documentation.html#topic-config">the per-topic configuration section</a></td>
</tr>
<tr>
<td>log.roll.hours</td>
<td>24 * 7</td>
<td>即使文件没有到达log.segment.bytes，只要文件创建时间到达此属性，就会创建新文件。这个设置也可以有topic层面的设置进行覆盖； 查看<a href="http://kafka.apache.org/documentation.html#topic-config">the per-topic configuration section</a></td>
</tr>
<tr>
<td>log.cleanup.policy</td>
<td>delete</td>
<td></td>
</tr>
<tr>
<td>log.retention.minutes和log.retention.hours</td>
<td>7 days</td>
<td>每个日志文件删除之前保存的时间。默认数据保存时间对所有topic都一样。 log.retention.minutes 和 log.retention.bytes 都是用来设置删除日志文件的，无论哪个属性已经溢出。 这个属性设置可以在topic基本设置时进行覆盖。 查看<a href="http://kafka.apache.org/documentation.html#topic-config">the per-topic configuration section</a></td>
</tr>
<tr>
<td>log.retention.bytes</td>
<td>-1</td>
<td>每个topic下每个partition保存数据的总量；注意，这是每个partitions的上限，因此这个数值乘以partitions的个数就是每个topic保存的数据总量。同时注意：如果log.retention.hours和log.retention.bytes都设置了，则超过了任何一个限制都会造成删除一个段文件。 注意，这项设置可以由每个topic设置时进行覆盖。 查看<a href="http://kafka.apache.org/documentation.html#topic-config">the per-topic configuration section</a></td>
</tr>
<tr>
<td>log.retention.check.interval.ms</td>
<td>5 minutes</td>
<td>检查日志分段文件的间隔时间，以确定是否文件属性是否到达删除要求。</td>
</tr>
<tr>
<td>log.cleaner.enable</td>
<td>false</td>
<td>当这个属性设置为false时，一旦日志的保存时间或者大小达到上限时，就会被删除；如果设置为true，则当保存属性达到上限时，就会进行<a href="https://cwiki.apache.org/confluence/display/KAFKA/Log+Compaction">log compaction</a>。</td>
</tr>
<tr>
<td>log.cleaner.threads</td>
<td>1</td>
<td>进行日志压缩的线程数</td>
</tr>
<tr>
<td>log.cleaner.io.max.bytes.per.second</td>
<td>None</td>
<td>进行log compaction时，log cleaner可以拥有的最大I/O数目。这项设置限制了cleaner，以避免干扰活动的请求服务。</td>
</tr>
<tr>
<td>log.cleaner.io.buffer.size</td>
<td>500<em>1024</em>1024</td>
<td>log cleaner清除过程中针对日志进行索引化以及精简化所用到的缓存大小。最好设置大点，以提供充足的内存。</td>
</tr>
<tr>
<td>log.cleaner.io.buffer.load.factor</td>
<td>512*1024</td>
<td>进行log cleaning时所需要的I/O chunk尺寸。你不需要更改这项设置。</td>
</tr>
<tr>
<td>log.cleaner.io.buffer.load.factor</td>
<td>0.9</td>
<td>log cleaning中所使用的hash表的负载因子；你不需要更改这个选项。</td>
</tr>
<tr>
<td>log.cleaner.backoff.ms</td>
<td>15000</td>
<td>进行日志是否清理检查的时间间隔</td>
</tr>
<tr>
<td>log.cleaner.min.cleanable.ratio</td>
<td>0.5</td>
<td>这项配置控制log compactor试图清理日志的频率（假定<a href="https://cwiki.apache.org/confluence/display/KAFKA/Log+Compaction">log compaction</a>是打开的）。默认避免清理压缩超过50%的日志。这个比率绑定了备份日志所消耗的最大空间（50%的日志备份时压缩率为50%）。更高的比率则意味着浪费消耗更少，也就可以更有效的清理更多的空间。这项设置在每个topic设置中可以覆盖。 查看<a href="http://kafka.apache.org/documentation.html#topic-config">the per-topic configuration section</a>。</td>
</tr>
<tr>
<td>log.cleaner.delete.retention.ms</td>
<td>1day</td>
<td>保存时间；保存压缩日志的最长时间；也是客户端消费消息的最长时间，荣log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据；会被topic创建时的指定时间覆盖。</td>
</tr>
<tr>
<td>log.index.size.max.bytes</td>
<td>10<em>1024</em>1024</td>
<td>每个log segment的最大尺寸。注意，如果log尺寸达到这个数值，即使尺寸没有超过log.segment.bytes限制，也需要产生新的log segment。</td>
</tr>
<tr>
<td>log.index.interval.bytes</td>
<td>4096</td>
<td>当执行一次fetch后，需要一定的空间扫描最近的offset，设置的越大越好，一般使用默认值就可以</td>
</tr>
<tr>
<td>log.flush.interval.messages</td>
<td>Long.MaxValue</td>
<td>log文件“sync”到磁盘之前累积的消息条数。因为磁盘IO操作是一个慢操作，但又是一个“数据可靠性”的必要手段，所以检查是否需要固化到硬盘的时间间隔。需要在“数据可靠性”与“性能”之间做必要的权衡，如果此值过大，将会导致每次“发sync”的时间过长（IO阻塞），如果此值过小，将会导致“fsync”的时间较长（IO阻塞），如果此值过小，将会导致”发sync“的次数较多，这也就意味着整体的client请求有一定的延迟，物理server故障，将会导致没有fsync的消息丢失。</td>
</tr>
<tr>
<td>log.flush.scheduler.interval.ms</td>
<td>Long.MaxValue</td>
<td>检查是否需要fsync的时间间隔</td>
</tr>
<tr>
<td>log.flush.interval.ms</td>
<td>Long.MaxValue</td>
<td>仅仅通过interval来控制消息的磁盘写入时机，是不足的，这个数用来控制”fsync“的时间间隔，如果消息量始终没有达到固化到磁盘的消息数，但是离上次磁盘同步的时间间隔达到阈值，也将触发磁盘同步。</td>
</tr>
<tr>
<td>log.delete.delay.ms</td>
<td>60000</td>
<td>文件在索引中清除后的保留时间，一般不需要修改</td>
</tr>
<tr>
<td>auto.create.topics.enable</td>
<td>true</td>
<td>是否允许自动创建topic。如果是真的，则produce或者fetch 不存在的topic时，会自动创建这个topic。否则需要使用命令行创建topic</td>
</tr>
<tr>
<td>controller.socket.timeout.ms</td>
<td>30000</td>
<td>partition管理控制器进行备份时，socket的超时时间。</td>
</tr>
<tr>
<td>controller.message.queue.size</td>
<td>Int.MaxValue</td>
<td>controller-to-broker-channles的buffer 尺寸</td>
</tr>
<tr>
<td>default.replication.factor</td>
<td>1</td>
<td>默认备份份数，仅指自动创建的topics</td>
</tr>
<tr>
<td>replica.lag.time.max.ms</td>
<td>10000</td>
<td>如果一个follower在这个时间内没有发送fetch请求，leader将从ISR重移除这个follower，并认为这个follower已经挂了</td>
</tr>
<tr>
<td>replica.lag.max.messages</td>
<td>4000</td>
<td>如果一个replica没有备份的条数超过这个数值，则leader将移除这个follower，并认为这个follower已经挂了</td>
</tr>
<tr>
<td>replica.socket.timeout.ms</td>
<td>30*1000</td>
<td>leader 备份数据时的socket网络请求的超时时间</td>
</tr>
<tr>
<td>replica.socket.receive.buffer.bytes</td>
<td>64*1024</td>
<td>备份时向leader发送网络请求时的socket receive buffer</td>
</tr>
<tr>
<td>replica.fetch.max.bytes</td>
<td>1024*1024</td>
<td>备份时每次fetch的最大值</td>
</tr>
<tr>
<td>replica.fetch.min.bytes</td>
<td>500</td>
<td>leader发出备份请求时，数据到达leader的最长等待时间</td>
</tr>
<tr>
<td>replica.fetch.min.bytes</td>
<td>1</td>
<td>备份时每次fetch之后回应的最小尺寸</td>
</tr>
<tr>
<td>num.replica.fetchers</td>
<td>1</td>
<td>从leader备份数据的线程数</td>
</tr>
<tr>
<td>replica.high.watermark.checkpoint.interval.ms</td>
<td>5000</td>
<td>每个replica检查是否将最高水位进行固化的频率</td>
</tr>
<tr>
<td>fetch.purgatory.purge.interval.requests</td>
<td>1000</td>
<td>fetch 请求清除时的清除间隔</td>
</tr>
<tr>
<td>producer.purgatory.purge.interval.requests</td>
<td>1000</td>
<td>producer请求清除时的清除间隔</td>
</tr>
<tr>
<td>zookeeper.session.timeout.ms</td>
<td>6000</td>
<td>zookeeper会话超时时间。</td>
</tr>
<tr>
<td>zookeeper.connection.timeout.ms</td>
<td>6000</td>
<td>客户端等待和zookeeper建立连接的最大时间</td>
</tr>
<tr>
<td>zookeeper.sync.time.ms</td>
<td>2000</td>
<td>zk follower落后于zk leader的最长时间</td>
</tr>
<tr>
<td>controlled.shutdown.enable</td>
<td>true</td>
<td>是否能够控制broker的关闭。如果能够，broker将可以移动所有leaders到其他的broker上，在关闭之前。这减少了不可用性在关机过程中。</td>
</tr>
<tr>
<td>controlled.shutdown.max.retries</td>
<td>3</td>
<td>在执行不彻底的关机之前，可以成功执行关机的命令数。</td>
</tr>
<tr>
<td>controlled.shutdown.retry.backoff.ms</td>
<td>5000</td>
<td>在关机之间的backoff时间</td>
</tr>
<tr>
<td>auto.leader.rebalance.enable</td>
<td>true</td>
<td>如果这是true，控制者将会自动平衡brokers对于partitions的leadership</td>
</tr>
<tr>
<td>leader.imbalance.per.broker.percentage</td>
<td>10</td>
<td>每个broker所允许的leader最大不平衡比率</td>
</tr>
<tr>
<td>leader.imbalance.check.interval.seconds</td>
<td>300</td>
<td>检查leader不平衡的频率</td>
</tr>
<tr>
<td>offset.metadata.max.bytes</td>
<td>4096</td>
<td>允许客户端保存他们offsets的最大个数</td>
</tr>
<tr>
<td>max.connections.per.ip</td>
<td>Int.MaxValue</td>
<td>每个ip地址上每个broker可以被连接的最大数目</td>
</tr>
<tr>
<td>max.connections.per.ip.overrides</td>
<td></td>
<td>每个ip或者hostname默认的连接的最大覆盖</td>
</tr>
<tr>
<td>connections.max.idle.ms</td>
<td>600000</td>
<td>空连接的超时限制</td>
</tr>
<tr>
<td>log.roll.jitter.{ms,hours}</td>
<td>0</td>
<td>从logRollTimeMillis抽离的jitter最大数目</td>
</tr>
<tr>
<td>num.recovery.threads.per.data.dir</td>
<td>1</td>
<td>每个数据目录用来日志恢复的线程数目</td>
</tr>
<tr>
<td>unclean.leader.election.enable</td>
<td>true</td>
<td>指明了是否能够使不在ISR中replicas设置用来作为leader</td>
</tr>
<tr>
<td>delete.topic.enable</td>
<td>false</td>
<td>能够删除topic</td>
</tr>
<tr>
<td>offsets.topic.num.partitions</td>
<td>50</td>
<td>The number of partitions for the offset commit topic. Since changing this after deployment is currently unsupported, we recommend using a higher setting for production (e.g., 100-200).</td>
</tr>
<tr>
<td>offsets.topic.retention.minutes</td>
<td>1440</td>
<td>存在时间超过这个时间限制的offsets都将被标记为待删除</td>
</tr>
<tr>
<td>offsets.retention.check.interval.ms</td>
<td>600000</td>
<td>offset管理器检查陈旧offsets的频率</td>
</tr>
<tr>
<td>offsets.topic.replication.factor</td>
<td>3</td>
<td>topic的offset的备份份数。建议设置更高的数字保证更高的可用性</td>
</tr>
<tr>
<td>offset.topic.segment.bytes</td>
<td>104857600</td>
<td>offsets topic的segment尺寸。</td>
</tr>
<tr>
<td>offsets.load.buffer.size</td>
<td>5242880</td>
<td>这项设置与批量尺寸相关，当从offsets segment中读取时使用。</td>
</tr>
<tr>
<td>offsets.commit.required.acks</td>
<td>-1</td>
<td>在offset commit可以接受之前，需要设置确认的数目，一般不需要更改</td>
</tr>
</tbody></table>
<p>offsets.commit.timeout.ms   5000    offset commit的延迟时间，这和producer request的超时时间相似。</p>
<p>更多细节可以在scala 类 kafka.server.KafkaConfig中找到。</p>
<p>topic-level的配置</p>
<p>有关topics的配置既有全局的又有每个topic独有的配置。如果没有给定特定topic设置，则应用默认的全局设置。这些覆盖会在每次创建topic发生。下面的例子：创建一个topic，命名为my-topic，自定义最大消息尺寸以及刷新比率为：<br>&gt;  bin/kafka-topics.sh –zookeeper localhost:2181 –create –topic my-topic –partitions 1<br>–replication-factor 1 –config max.message.bytes=64000 –config flush.messages=1</p>
<p>需要删除重写时，可以按照以下来做：</p>
<p>&gt; bin/kafka-topics.sh –zookeeper localhost:2181 –alter –topic my-topic<br>–deleteConfig max.message.bytes</p>
<p>以下是topic-level的配置选项。server的默认配置在Server Default Property列下给出了，设定这些默认值不会改变原有的设置</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
<th>Server Default Property</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>cleanup.policy</td>
<td>delete</td>
<td>log.cleanup.policy</td>
<td>要么是”delete“要么是”compact“； 这个字符串指明了针对旧日志部分的利用方式；默认方式（”delete”）将会丢弃旧的部分当他们的回收时间或者尺寸限制到达时。”compact“将会进行日志压缩</td>
</tr>
<tr>
<td>delete.retention.ms</td>
<td>86400000 (24 hours)</td>
<td>log.cleaner.delete.retention.ms</td>
<td>对于压缩日志保留的最长时间，也是客户端消费消息的最长时间，通log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据。此项配置可以在topic创建时的置顶参数覆盖</td>
</tr>
<tr>
<td>flush.messages</td>
<td>None</td>
<td>log.flush.interval.messages</td>
<td>此项配置指定时间间隔：强制进行fsync日志。例如，如果这个选项设置为1，那么每条消息之后都需要进行fsync，如果设置为5，则每5条消息就需要进行一次fsync。一般来说，建议你不要设置这个值。此参数的设置,需要在”数据可靠性”与”性能”之间做必要的权衡.如果此值过大,将会导致每次”fsync”的时间较长(IO阻塞),如果此值过小,将会导致”fsync”的次数较多,这也意味着整体的client请求有一定的延迟.物理server故障,将会导致没有fsync的消息丢失.</td>
</tr>
<tr>
<td>flush.ms</td>
<td>None</td>
<td>log.flush.interval.ms</td>
<td>此项配置用来置顶强制进行fsync日志到磁盘的时间间隔；例如，如果设置为1000，那么每1000ms就需要进行一次fsync。一般不建议使用这个选项</td>
</tr>
<tr>
<td>index.interval.bytes</td>
<td>4096</td>
<td>log.index.interval.bytes</td>
<td>默认设置保证了我们每4096个字节就对消息添加一个索引，更多的索引使得阅读的消息更加靠近，但是索引规模却会由此增大；一般不需要改变这个选项</td>
</tr>
<tr>
<td>max.message.bytes</td>
<td>1000000</td>
<td>max.message.bytes</td>
<td>kafka追加消息的最大尺寸。注意如果你增大这个尺寸，你也必须增大你consumer的fetch 尺寸，这样consumer才能fetch到这些最大尺寸的消息。</td>
</tr>
<tr>
<td>min.cleanable.dirty.ratio</td>
<td>0.5</td>
<td>min.cleanable.dirty.ratio</td>
<td>此项配置控制log压缩器试图进行清除日志的频率。默认情况下，将避免清除压缩率超过50%的日志。这个比率避免了最大的空间浪费</td>
</tr>
<tr>
<td>min.insync.replicas</td>
<td>1</td>
<td>min.insync.replicas</td>
<td>当producer设置request.required.acks为-1时，min.insync.replicas指定replicas的最小数目（必须确认每一个repica的写数据都是成功的），如果这个数目没有达到，producer会产生异常。</td>
</tr>
<tr>
<td>retention.bytes</td>
<td>None</td>
<td>log.retention.bytes</td>
<td>如果使用“delete”的retention 策略，这项配置就是指在删除日志之前，日志所能达到的最大尺寸。默认情况下，没有尺寸限制而只有时间限制</td>
</tr>
<tr>
<td>retention.ms</td>
<td>7 days</td>
<td>log.retention.minutes</td>
<td>如果使用“delete”的retention策略，这项配置就是指删除日志前日志保存的时间。</td>
</tr>
<tr>
<td>segment.bytes</td>
<td>1GB</td>
<td>log.segment.bytes</td>
<td>kafka中log日志是分成一块块存储的，此配置是指log日志划分成块的大小</td>
</tr>
<tr>
<td>segment.index.bytes</td>
<td>10MB</td>
<td>log.index.size.max.bytes</td>
<td>此配置是有关offsets和文件位置之间映射的索引文件的大小；一般不需要修改这个配置</td>
</tr>
<tr>
<td>segment.ms</td>
<td>7 days</td>
<td>log.roll.hours</td>
<td>即使log的分块文件没有达到需要删除、压缩的大小，一旦log 的时间达到这个上限，就会强制新建一个log分块文件</td>
</tr>
<tr>
<td>segment.jitter.ms</td>
<td>0</td>
<td>log.roll.jitter.{ms,hours}</td>
<td>The maximum jitter to subtract from logRollTimeMillis.</td>
</tr>
</tbody></table>
<p>3.2 Consumer Configs<br>consumer基本配置如下：<br>group.id<br>zookeeper.connect</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>group.id</td>
<td></td>
<td>用来唯一标识consumer进程所在组的字符串，如果设置同样的group id，表示这些processes都是属于同一个consumer group</td>
</tr>
<tr>
<td>zookeeper.connect</td>
<td></td>
<td>指定zookeeper的连接的字符串，格式是hostname：port，此处host和port都是zookeeper server的host和port，为避免某个zookeeper 机器宕机之后失联，你可以指定多个hostname：port，使用逗号作为分隔： hostname1：port1，hostname2：port2，hostname3：port3 可以在zookeeper连接字符串中加入zookeeper的chroot路径，此路径用于存放他自己的数据，方式： hostname1：port1，hostname2：port2，hostname3：port3/chroot/path</td>
</tr>
<tr>
<td>consumer.id</td>
<td>null</td>
<td>不需要设置，一般自动产生</td>
</tr>
<tr>
<td>socket.timeout.ms</td>
<td>30*100</td>
<td>网络请求的超时限制。真实的超时限制是  max.fetch.wait+socket.timeout.ms</td>
</tr>
<tr>
<td>socket.receive.buffer.bytes</td>
<td>64*1024</td>
<td>socket用于接收网络请求的缓存大小</td>
</tr>
<tr>
<td>fetch.message.max.bytes</td>
<td>1024*1024</td>
<td>每次fetch请求中，针对每次fetch消息的最大字节数。这些字节将会督导用于每个partition的内存中，因此，此设置将会控制consumer所使用的memory大小。这个fetch请求尺寸必须至少和server允许的最大消息尺寸相等，否则，producer可能发送的消息尺寸大于consumer所能消耗的尺寸。</td>
</tr>
<tr>
<td>num.consumer.fetchers</td>
<td>1</td>
<td>用于fetch数据的fetcher线程数</td>
</tr>
<tr>
<td>auto.commit.enable</td>
<td>true</td>
<td>如果为真，consumer所fetch的消息的offset将会自动的同步到zookeeper。这项提交的offset将在进程挂掉时，由新的consumer使用</td>
</tr>
<tr>
<td>auto.commit.interval.ms</td>
<td>60*1000</td>
<td>consumer向zookeeper提交offset的频率，单位是秒</td>
</tr>
<tr>
<td>queued.max.message.chunks</td>
<td>2</td>
<td>用于缓存消息的最大数目，以供consumption。每个chunk必须和fetch.message.max.bytes相同</td>
</tr>
<tr>
<td>rebalance.max.retries</td>
<td>4</td>
<td>当新的consumer加入到consumer group时，consumers集合试图重新平衡分配到每个consumer的partitions数目。如果consumers集合改变了，当分配正在执行时，这个重新平衡会失败并重入</td>
</tr>
<tr>
<td>fetch.min.bytes</td>
<td>1</td>
<td>每次fetch请求时，server应该返回的最小字节数。如果没有足够的数据返回，请求会等待，直到足够的数据才会返回。</td>
</tr>
<tr>
<td>fetch.wait.max.ms</td>
<td>100</td>
<td>如果没有足够的数据能够满足fetch.min.bytes，则此项配置是指在应答fetch请求之前，server会阻塞的最大时间。</td>
</tr>
<tr>
<td>rebalance.backoff.ms</td>
<td>2000</td>
<td>在重试reblance之前backoff时间</td>
</tr>
<tr>
<td>refresh.leader.backoff.ms</td>
<td>200</td>
<td>在试图确定某个partition的leader是否失去他的leader地位之前，需要等待的backoff时间</td>
</tr>
<tr>
<td>auto.offset.reset</td>
<td>largest</td>
<td>zookeeper中没有初始化的offset时，如果offset是以下值的回应： smallest：自动复位offset为smallest的offset largest：自动复位offset为largest的offset anything else：向consumer抛出异常</td>
</tr>
<tr>
<td>consumer.timeout.ms</td>
<td>-1</td>
<td>如果没有消息可用，即使等待特定的时间之后也没有，则抛出超时异常</td>
</tr>
<tr>
<td>exclude.internal.topics</td>
<td>true</td>
<td>是否将内部topics的消息暴露给consumer</td>
</tr>
<tr>
<td>paritition.assignment.strategy</td>
<td>range</td>
<td>选择向consumer 流分配partitions的策略，可选值：range，roundrobin</td>
</tr>
<tr>
<td>client.id</td>
<td>group id value</td>
<td>是用户特定的字符串，用来在每次请求中帮助跟踪调用。它应该可以逻辑上确认产生这个请求的应用</td>
</tr>
<tr>
<td>zookeeper.session.timeout.ms</td>
<td>6000</td>
<td>zookeeper 会话的超时限制。如果consumer在这段时间内没有向zookeeper发送心跳信息，则它会被认为挂掉了，并且reblance将会产生</td>
</tr>
<tr>
<td>zookeeper.connection.timeout.ms</td>
<td>6000</td>
<td>客户端在建立通zookeeper连接中的最大等待时间</td>
</tr>
<tr>
<td>zookeeper.sync.time.ms</td>
<td>2000</td>
<td>ZK follower可以落后ZK leader的最大时间</td>
</tr>
<tr>
<td>offsets.storage</td>
<td>zookeeper</td>
<td>用于存放offsets的地点： zookeeper或者kafka</td>
</tr>
<tr>
<td>offset.channel.backoff.ms</td>
<td>1000</td>
<td>重新连接offsets channel或者是重试失败的offset的fetch/commit请求的backoff时间</td>
</tr>
<tr>
<td>offsets.channel.socket.timeout.ms</td>
<td>10000</td>
<td>当读取offset的fetch/commit请求回应的socket 超时限制。此超时限制是被consumerMetadata请求用来请求offset管理</td>
</tr>
<tr>
<td>offsets.commit.max.retries</td>
<td>5</td>
<td>重试offset commit的次数。这个重试只应用于offset commits在shut-down之间。他</td>
</tr>
<tr>
<td>dual.commit.enabled</td>
<td>true</td>
<td>如果使用“kafka”作为offsets.storage，你可以二次提交offset到zookeeper(还有一次是提交到kafka）。在zookeeper-based的offset storage到kafka-based的offset storage迁移时，这是必须的。对任意给定的consumer group来说，比较安全的建议是当完成迁移之后就关闭这个选项</td>
</tr>
<tr>
<td>partition.assignment.strategy</td>
<td>range</td>
<td>在“range”和“roundrobin”策略之间选择一种作为分配partitions给consumer 数据流的策略； 循环的partition分配器分配所有可用的partitions以及所有可用consumer 线程。它会将partition循环的分配到consumer线程上。如果所有consumer实例的订阅都是确定的，则partitions的划分是确定的分布。循环分配策略只有在以下条件满足时才可以：（1）每个topic在每个consumer实力上都有同样数量的数据流。（2）订阅的topic的集合对于consumer group中每个consumer实例来说都是确定的。</td>
</tr>
</tbody></table>
<p>更多细节可以查看 scala类： kafka.consumer.ConsumerConfig</p>
<p>3.3  Producer Configs<br>producer基本的配置属性包含：<br>（1） metadata.broker.list<br>（2）request.required.acks<br>（3）producer.type<br>（4）serializer.class</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>metadata.broker.list</td>
<td></td>
<td>服务于bootstrapping。producer仅用来获取metadata（topics，partitions，replicas）。发送实际数据的socket连接将基于返回的metadata数据信息而建立。格式是： host1：port1，host2：port2 这个列表可以是brokers的子列表或者是一个指向brokers的VIP</td>
</tr>
<tr>
<td>request.required.acks</td>
<td>0</td>
<td>此配置是表明当一次produce请求被认为完成时的确认值。特别是，多少个其他brokers必须已经提交了数据到他们的log并且向他们的leader确认了这些信息。典型的值包括： 0： 表示producer从来不等待来自broker的确认信息（和0.7一样的行为）。这个选择提供了最小的时延但同时风险最大（因为当server宕机时，数据将会丢失）。 1：表示获得leader replica已经接收了数据的确认信息。这个选择时延较小同时确保了server确认接收成功。 -1：producer会获得所有同步replicas都收到数据的确认。同时时延最大，然而，这种方式并没有完全消除丢失消息的风险，因为同步replicas的数量可能是1.如果你想确保某些replicas接收到数据，那么你应该在topic-level设置中选项min.insync.replicas设置一下。请阅读一下设计文档，可以获得更深入的讨论。</td>
</tr>
<tr>
<td>request.timeout.ms</td>
<td>10000</td>
<td>broker尽力实现request.required.acks需求时的等待时间，否则会发送错误到客户端</td>
</tr>
<tr>
<td>producer.type</td>
<td>sync</td>
<td>此选项置顶了消息是否在后台线程中异步发送。正确的值： （1） async： 异步发送 （2） sync： 同步发送 通过将producer设置为异步，我们可以批量处理请求（有利于提高吞吐率）但是这也就造成了客户端机器丢掉未发送数据的可能性</td>
</tr>
<tr>
<td>serializer.class</td>
<td>kafka.serializer.DefaultEncoder</td>
<td>消息的序列化类别。默认编码器输入一个字节byte[]，然后返回相同的字节byte[]</td>
</tr>
<tr>
<td>key.serializer.class</td>
<td></td>
<td>关键字的序列化类。如果没给与这项，默认情况是和消息一致</td>
</tr>
<tr>
<td>partitioner.class</td>
<td>kafka.producer.DefaultPartitioner</td>
<td>partitioner 类，用于在subtopics之间划分消息。默认partitioner基于key的hash表</td>
</tr>
<tr>
<td>compression.codec</td>
<td>none</td>
<td>此项参数可以设置压缩数据的codec，可选codec为：“none”， “gzip”， “snappy”</td>
</tr>
<tr>
<td>compressed.topics</td>
<td>null</td>
<td>此项参数可以设置某些特定的topics是否进行压缩。如果压缩codec是NoCompressCodec之外的codec，则对指定的topics数据应用这些codec。如果压缩topics列表是空，则将特定的压缩codec应用于所有topics。如果压缩的codec是NoCompressionCodec，压缩对所有topics军不可用。</td>
</tr>
<tr>
<td>message.send.max.retries</td>
<td>3</td>
<td>此项参数将使producer自动重试失败的发送请求。此项参数将置顶重试的次数。注意：设定非0值将导致重复某些网络错误：引起一条发送并引起确认丢失</td>
</tr>
<tr>
<td>retry.backoff.ms</td>
<td>100</td>
<td>在每次重试之前，producer会更新相关topic的metadata，以此进行查看新的leader是否分配好了。因为leader的选择需要一点时间，此选项指定更新metadata之前producer需要等待的时间。</td>
</tr>
<tr>
<td>topic.metadata.refresh.interval.ms</td>
<td>600*1000</td>
<td>producer一般会在某些失败的情况下（partition missing，leader不可用等）更新topic的metadata。他将会规律的循环。如果你设置为负值，metadata只有在失败的情况下才更新。如果设置为0，metadata会在每次消息发送后就会更新（不建议这种选择，系统消耗太大）。重要提示： 更新是有在消息发送后才会发生，因此，如果producer从来不发送消息，则metadata从来也不会更新。</td>
</tr>
<tr>
<td>queue.buffering.max.ms</td>
<td>5000</td>
<td>当应用async模式时，用户缓存数据的最大时间间隔。例如，设置为100时，将会批量处理100ms之内消息。这将改善吞吐率，但是会增加由于缓存产生的延迟。</td>
</tr>
<tr>
<td>queue.buffering.max.messages</td>
<td>10000</td>
<td>当使用async模式时，在在producer必须被阻塞或者数据必须丢失之前，可以缓存到队列中的未发送的最大消息条数</td>
</tr>
<tr>
<td>batch.num.messages</td>
<td>200</td>
<td>使用async模式时，可以批量处理消息的最大条数。或者消息数目已到达这个上线或者是queue.buffer.max.ms到达，producer才会处理</td>
</tr>
<tr>
<td>send.buffer.bytes</td>
<td>100*1024</td>
<td>socket 写缓存尺寸</td>
</tr>
<tr>
<td>client.id</td>
<td>“”</td>
<td>这个client id是用户特定的字符串，在每次请求中包含用来追踪调用，他应该逻辑上可以确认是那个应用发出了这个请求。</td>
</tr>
</tbody></table>
<p>更多细节需要查看 scala类<br>kafka.producer.ProducerConfig</p>
<p>3、4 New Producer Configs<br>我们正在努力替换现有的producer。代码在trunk中是可用的，可以认为beta版本。下面是新producer的配置</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Default</th>
<th>Importance</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>boostrap.servers</td>
<td>list</td>
<td></td>
<td>high</td>
<td>用于建立与kafka集群连接的host/port组。数据将会在所有servers上均衡加载，不管哪些server是指定用于bootstrapping。这个列表仅仅影响初始化的hosts（用于发现全部的servers）。这个列表格式： host1:port1,host2:port2,… 因为这些server仅仅是用于初始化的连接，以发现集群所有成员关系（可能会动态的变化），这个列表不需要包含所有的servers（你可能想要不止一个server，尽管这样，可能某个server宕机了）。如果没有server在这个列表出现，则发送数据会一直失败，直到列表可用。</td>
</tr>
<tr>
<td>acks</td>
<td>string</td>
<td>1</td>
<td>high</td>
<td>producer需要server接收到数据之后发出的确认接收的信号，此项配置就是指procuder需要多少个这样的确认信号。此配置实际上代表了数据备份的可用性。以下设置为常用选项： （1）acks=0： 设置为0表示producer不需要等待任何确认收到的信息。副本将立即加到socket buffer并认为已经发送。没有任何保障可以保证此种情况下server已经成功接收数据，同时重试配置不会发生作用（因为客户端不知道是否失败）回馈的offset会总是设置为-1； （2）acks=1： 这意味着至少要等待leader已经成功将数据写入本地log，但是并没有等待所有follower是否成功写入。这种情况下，如果follower没有成功备份数据，而此时leader又挂掉，则消息会丢失。 （3）acks=all： 这意味着leader需要等待所有备份都成功写入日志，这种策略会保证只要有一个备份存活就不会丢失数据。这是最强的保证。 （4）其他的设置，例如acks=2也是可以的，这将需要给定的acks数量，但是这种策略一般很少用。</td>
</tr>
<tr>
<td>buffer.memory</td>
<td>long</td>
<td>33554432</td>
<td>high</td>
<td>producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。</td>
</tr>
<tr>
<td>compression.type</td>
<td>string</td>
<td>none</td>
<td>high</td>
<td>producer用于压缩数据的压缩类型。默认是无压缩。正确的选项值是none、gzip、snappy。 压缩最好用于批量处理，批量处理消息越多，压缩性能越好。</td>
</tr>
<tr>
<td>retries</td>
<td>int</td>
<td>0</td>
<td>high</td>
<td>设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。注意，这些重试与客户端接收到发送错误时的重试没有什么不同。允许重试将潜在的改变数据的顺序，如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。</td>
</tr>
<tr>
<td>batch.size</td>
<td>int</td>
<td>16384</td>
<td>medium</td>
<td>producer将试图批处理消息记录，以减少请求次数。这将改善client与server之间的性能。这项配置控制默认的批量处理消息字节数。 不会试图处理大于这个字节数的消息字节数。 发送到brokers的请求将包含多个批量处理，其中会包含对每个partition的一个请求。 较小的批量处理数值比较少用，并且可能降低吞吐量（0则会仅用批量处理）。较大的批量处理数值将会浪费更多内存空间，这样就需要分配特定批量处理数值的内存大小。</td>
</tr>
<tr>
<td>client.id</td>
<td>string</td>
<td></td>
<td>medium</td>
<td>当向server发出请求时，这个字符串会发送给server。目的是能够追踪请求源头，以此来允许ip/port许可列表之外的一些应用可以发送信息。这项应用可以设置任意字符串，因为没有任何功能性的目的，除了记录和跟踪</td>
</tr>
<tr>
<td>linger.ms</td>
<td>long</td>
<td>0</td>
<td>medium</td>
<td>producer组将会汇总任何在请求与发送之间到达的消息记录一个单独批量的请求。通常来说，这只有在记录产生速度大于发送速度的时候才能发生。然而，在某些条件下，客户端将希望降低请求的数量，甚至降低到中等负载一下。这项设置将通过增加小的延迟来完成–即，不是立即发送一条记录，producer将会等待给定的延迟时间以允许其他消息记录发送，这些消息记录可以批量处理。这可以认为是TCP种Nagle的算法类似。这项设置设定了批量处理的更高的延迟边界：一旦我们获得某个partition的batch.size，他将会立即发送而不顾这项设置，然而如果我们获得消息字节数比这项设置要小的多，我们需要“linger”特定的时间以获取更多的消息。 这个设置默认为0，即没有延迟。设定linger.ms=5，例如，将会减少请求数目，但是同时会增加5ms的延迟。</td>
</tr>
<tr>
<td>max.request.size</td>
<td>int</td>
<td>1028576</td>
<td>medium</td>
<td>请求的最大字节数。这也是对最大记录尺寸的有效覆盖。注意：server具有自己对消息记录尺寸的覆盖，这些尺寸和这个设置不同。此项设置将会限制producer每次批量发送请求的数目，以防发出巨量的请求。</td>
</tr>
<tr>
<td>receive.buffer.bytes</td>
<td>int</td>
<td>32768</td>
<td>medium</td>
<td>TCP receive缓存大小，当阅读数据时使用</td>
</tr>
<tr>
<td>send.buffer.bytes</td>
<td>int</td>
<td>131072</td>
<td>medium</td>
<td>TCP send缓存大小，当发送数据时使用</td>
</tr>
<tr>
<td>timeout.ms</td>
<td>int</td>
<td>30000</td>
<td>medium</td>
<td>此配置选项控制server等待来自followers的确认的最大时间。如果确认的请求数目在此时间内没有实现，则会返回一个错误。这个超时限制是以server端度量的，没有包含请求的网络延迟</td>
</tr>
<tr>
<td>block.on.buffer.full</td>
<td>boolean</td>
<td>true</td>
<td>low</td>
<td>当我们内存缓存用尽时，必须停止接收新消息记录或者抛出错误。默认情况下，这个设置为真，然而某些阻塞可能不值得期待，因此立即抛出错误更好。设置为false则会这样：producer会抛出一个异常错误：BufferExhaustedException， 如果记录已经发送同时缓存已满</td>
</tr>
<tr>
<td>metadata.fetch.timeout.ms</td>
<td>long</td>
<td>60000</td>
<td>low</td>
<td>是指我们所获取的一些元素据的第一个时间数据。元素据包含：topic，host，partitions。此项配置是指当等待元素据fetch成功完成所需要的时间，否则会跑出异常给客户端。</td>
</tr>
<tr>
<td>metadata.max.age.ms</td>
<td>long</td>
<td>300000</td>
<td>low</td>
<td>以微秒为单位的时间，是在我们强制更新metadata的时间间隔。即使我们没有看到任何partition leadership改变。</td>
</tr>
<tr>
<td>metric.reporters</td>
<td>list</td>
<td>[]</td>
<td>low</td>
<td>类的列表，用于衡量指标。实现MetricReporter接口，将允许增加一些类，这些类在新的衡量指标产生时就会改变。JmxReporter总会包含用于注册JMX统计</td>
</tr>
<tr>
<td>metrics.num.samples</td>
<td>int</td>
<td>2</td>
<td>low</td>
<td>用于维护metrics的样本数</td>
</tr>
<tr>
<td>metrics.sample.window.ms</td>
<td>long</td>
<td>30000</td>
<td>low</td>
<td>metrics系统维护可配置的样本数量，在一个可修正的window size。这项配置配置了窗口大小，例如。我们可能在30s的期间维护两个样本。当一个窗口推出后，我们会擦除并重写最老的窗口</td>
</tr>
<tr>
<td>recoonect.backoff.ms</td>
<td>long</td>
<td>10</td>
<td>low</td>
<td>连接失败时，当我们重新连接时的等待时间。这避免了客户端反复重连</td>
</tr>
<tr>
<td>retry.backoff.ms</td>
<td>long</td>
<td>100</td>
<td>low</td>
<td>在试图重试失败的produce请求之前的等待时间。避免陷入发送-失败的死循环中。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>安装kafka集群</title>
    <url>/2021/04/07/Kafka-Cluster-Config/</url>
    <content><![CDATA[<h1 id="安装kafka集群"><a href="#安装kafka集群" class="headerlink" title="安装kafka集群"></a>安装kafka集群</h1><h2 id="下载kafka"><a href="#下载kafka" class="headerlink" title="下载kafka"></a>下载kafka</h2><p>#kafka官网：<br><a href="http://kafka.apache.org/">http://kafka.apache.org/</a><br><a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p>
<span id="more"></span>

<h2 id="配置-server-properties"><a href="#配置-server-properties" class="headerlink" title="配置 server.properties"></a>配置 server.properties</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line"># this work for additional information regarding copyright ownership.</span><br><span class="line"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line"># (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="line"># the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#    http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line"># see kafka.server.KafkaConfig for additional details and defaults</span><br><span class="line"></span><br><span class="line">############################# Server Basics #############################</span><br><span class="line"></span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">#每个broker在集群中的唯一标识，不能重复</span><br><span class="line">broker.id&#x3D;0</span><br><span class="line">#端口</span><br><span class="line">port&#x3D;9092</span><br><span class="line">#broker主机地址</span><br><span class="line">host.name&#x3D;server1</span><br><span class="line"></span><br><span class="line">############################# Socket Server Settings #############################</span><br><span class="line"></span><br><span class="line"># The address the socket server listens on. It will get the value returned from</span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners &#x3D; listener_name:&#x2F;&#x2F;host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners &#x3D; PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line">#listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;:9092</span><br><span class="line"></span><br><span class="line"># Hostname and port the broker will advertise to producers and consumers. If not set,</span><br><span class="line"># it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value</span><br><span class="line"># returned from java.net.InetAddress.getCanonicalHostName().</span><br><span class="line">#advertised.listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;your.host.name:9092</span><br><span class="line"></span><br><span class="line"># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details</span><br><span class="line">#listener.security.protocol.map&#x3D;PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span><br><span class="line"></span><br><span class="line"># The number of threads that the server uses for receiving requests from the network and sending responses to the network</span><br><span class="line">#broker处理消息的线程数</span><br><span class="line">num.network.threads&#x3D;3</span><br><span class="line"></span><br><span class="line"># The number of threads that the server uses for processing requests, which may include disk I&#x2F;O</span><br><span class="line">#broker处理磁盘io的线程数</span><br><span class="line">num.io.threads&#x3D;8</span><br><span class="line"></span><br><span class="line"># The send buffer (SO_SNDBUF) used by the socket server</span><br><span class="line">#socket发送数据缓冲区</span><br><span class="line">socket.send.buffer.bytes&#x3D;102400</span><br><span class="line"></span><br><span class="line"># The receive buffer (SO_RCVBUF) used by the socket server</span><br><span class="line">#socket接收数据缓冲区</span><br><span class="line">socket.receive.buffer.bytes&#x3D;102400</span><br><span class="line"></span><br><span class="line"># The maximum size of a request that the socket server will accept (protection against OOM)</span><br><span class="line">#socket接收请求最大值</span><br><span class="line">socket.request.max.bytes&#x3D;104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line"></span><br><span class="line"># A comma seperated list of directories under which to store log files</span><br><span class="line">#kafka数据存放目录位置，多个位置用逗号隔开</span><br><span class="line">log.dirs&#x3D;&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;kafka_2.11-1.0.0&#x2F;kfk-logs</span><br><span class="line"></span><br><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">#topic默认的分区数</span><br><span class="line">num.partitions&#x3D;1</span><br><span class="line"></span><br><span class="line"># The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.</span><br><span class="line"># This value is recommended to be increased for installations with data dirs located in RAID array.</span><br><span class="line">#恢复线程数</span><br><span class="line">num.recovery.threads.per.data.dir&#x3D;1</span><br><span class="line"></span><br><span class="line">############################# Internal Topic Settings  #############################</span><br><span class="line"># The replication factor for the group metadata internal topics &quot;__consumer_offsets&quot; and &quot;__transaction_state&quot;</span><br><span class="line"># For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.</span><br><span class="line">#默认副本数</span><br><span class="line">offsets.topic.replication.factor&#x3D;1</span><br><span class="line">transaction.state.log.replication.factor&#x3D;1</span><br><span class="line">transaction.state.log.min.isr&#x3D;1</span><br><span class="line"></span><br><span class="line">############################# Log Flush Policy #############################</span><br><span class="line"></span><br><span class="line"># Messages are immediately written to the filesystem but by default we only fsync() to sync</span><br><span class="line"># the OS cache lazily. The following configurations control the flush of data to disk.</span><br><span class="line"># There are a few important trade-offs here:</span><br><span class="line">#    1. Durability: Unflushed data may be lost if you are not using replication.</span><br><span class="line">#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.</span><br><span class="line">#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.</span><br><span class="line"># The settings below allow one to configure the flush policy to flush data after a period of time or</span><br><span class="line"># every N messages (or both). This can be done globally and overridden on a per-topic basis.</span><br><span class="line"></span><br><span class="line"># The number of messages to accept before forcing a flush of data to disk</span><br><span class="line">#log.flush.interval.messages&#x3D;10000</span><br><span class="line"></span><br><span class="line"># The maximum amount of time a message can sit in a log before we force a flush</span><br><span class="line">#log.flush.interval.ms&#x3D;1000</span><br><span class="line"></span><br><span class="line">############################# Log Retention Policy #############################</span><br><span class="line"></span><br><span class="line"># The following configurations control the disposal of log segments. The policy can</span><br><span class="line"># be set to delete segments after a period of time, or after a given size has accumulated.</span><br><span class="line"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span><br><span class="line"># from the end of the log.</span><br><span class="line"></span><br><span class="line"># The minimum age of a log file to be eligible for deletion due to age</span><br><span class="line">#消息日志最大存储时间，这里是7天</span><br><span class="line">log.retention.hours&#x3D;168</span><br><span class="line"></span><br><span class="line"># A size-based retention policy for logs. Segments are pruned from the log unless the remaining</span><br><span class="line"># segments drop below log.retention.bytes. Functions independently of log.retention.hours.</span><br><span class="line">#log.retention.bytes&#x3D;1073741824</span><br><span class="line"></span><br><span class="line"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span><br><span class="line">#每个日志段文件大小，这里是1g</span><br><span class="line">log.segment.bytes&#x3D;1073741824</span><br><span class="line"></span><br><span class="line"># The interval at which log segments are checked to see if they can be deleted according</span><br><span class="line"># to the retention policies</span><br><span class="line">#消息日志文件大小检查间隔时间</span><br><span class="line">log.retention.check.interval.ms&#x3D;300000</span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">#zookeeper集群地址</span><br><span class="line">zookeeper.connect&#x3D;server1:2181,server2:2181,server3:2181</span><br><span class="line"></span><br><span class="line"># Timeout in ms for connecting to zookeeper</span><br><span class="line">#zookeeper连接超时时间</span><br><span class="line">zookeeper.connection.timeout.ms&#x3D;6000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Group Coordinator Settings #############################</span><br><span class="line"></span><br><span class="line"># The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.</span><br><span class="line"># The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.</span><br><span class="line"># The default value for this is 3 seconds.</span><br><span class="line"># We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.</span><br><span class="line"># However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.</span><br><span class="line">group.initial.rebalance.delay.ms&#x3D;0</span><br></pre></td></tr></table></figure>

<h2 id="修改其它节点的配置文件"><a href="#修改其它节点的配置文件" class="headerlink" title="修改其它节点的配置文件"></a>修改其它节点的配置文件</h2><h3 id="server2节点"><a href="#server2节点" class="headerlink" title="server2节点"></a>server2节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;kafka&#x2F;kafka_2.11-1.0.0&#x2F;config</span><br><span class="line"></span><br><span class="line">vim server.properties</span><br><span class="line">----------------------------------------------------</span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id&#x3D;1</span><br><span class="line">port&#x3D;9092</span><br></pre></td></tr></table></figure>

<h3 id="server3节点"><a href="#server3节点" class="headerlink" title="server3节点"></a>server3节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;kafka&#x2F;kafka_2.11-1.0.0&#x2F;config</span><br><span class="line"></span><br><span class="line">vim server.properties</span><br><span class="line">----------------------------------------------------</span><br><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id&#x3D;2</span><br><span class="line">port&#x3D;9092</span><br></pre></td></tr></table></figure>

<h1 id="启动kafka集群"><a href="#启动kafka集群" class="headerlink" title="启动kafka集群"></a>启动kafka集群</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别在三台节点执行：node01/node02/node03</span></span><br><span class="line"><span class="comment">## 启动kafka集群-daemon(以后台服务方式启动) 后面跟的是以配置文件启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/kafka_2.11-1.0.0/bin/kafka-server-start.sh -daemon /usr/<span class="built_in">local</span>/kafka/kafka_2.11-1.0.0/config/server.properties</span><br><span class="line"></span><br><span class="line"> <span class="comment">## 停止kafka集群</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/kafka_2.11-1.0.0/bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>

<h1 id="zookeeper-查看-kafka-集群"><a href="#zookeeper-查看-kafka-集群" class="headerlink" title="zookeeper 查看 kafka 集群"></a>zookeeper 查看 kafka 集群</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">zkCli.sh</span><br><span class="line">ls /brokers/ids</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>说明正确kafka正确启动了</p>
]]></content>
  </entry>
  <entry>
    <title>Kafka核心概念</title>
    <url>/2021/02/02/Kafka/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-Kafka-核心概念详解"><a href="#1-Kafka-核心概念详解" class="headerlink" title="1 Kafka 核心概念详解"></a>1 Kafka 核心概念详解</h1><h2 id="1-1-Kafka-MQ-的应用场景"><a href="#1-1-Kafka-MQ-的应用场景" class="headerlink" title="1.1 Kafka(MQ) 的应用场景"></a>1.1 Kafka(MQ) 的应用场景</h2><h3 id="1-1-1-Kafka-MQ-之异步化、服务解耦、削峰填谷"><a href="#1-1-1-Kafka-MQ-之异步化、服务解耦、削峰填谷" class="headerlink" title="1.1.1 Kafka(MQ)之异步化、服务解耦、削峰填谷"></a>1.1.1 Kafka(MQ)之异步化、服务解耦、削峰填谷</h3><ul>
<li><p>异步化</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_1.png" alt="kafka_1_1"></p>
</li>
<li><p>服务解耦、削峰填谷</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_2.png" alt="kafka_1_2"></p>
</li>
</ul>
<span id="more"></span>

<h3 id="1-1-2-Kafka-海量日志收集"><a href="#1-1-2-Kafka-海量日志收集" class="headerlink" title="1.1.2 Kafka 海量日志收集"></a>1.1.2 Kafka 海量日志收集</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_3.png" alt="kafka_1_3"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210203211950113.png" alt="image-20210203211950113"></p>
<ul>
<li><p>Kafka 之数据同步应用</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_4.png" alt="kafka_1_4"></p>
</li>
<li><p>Kafka 之实时计算</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_5.png" alt="kafka_1_5"></p>
</li>
</ul>
<h2 id="1-2-Kafka-基本概念"><a href="#1-2-Kafka-基本概念" class="headerlink" title="1.2 Kafka 基本概念"></a>1.2 Kafka 基本概念</h2><h3 id="1-2-1-集群架构概念"><a href="#1-2-1-集群架构概念" class="headerlink" title="1.2.1 集群架构概念"></a>1.2.1 集群架构概念</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_6.png" alt="kafka_1_6"></p>
<h3 id="1-2-2-Topic、Partition"><a href="#1-2-2-Topic、Partition" class="headerlink" title="1.2.2 Topic、Partition"></a>1.2.2 Topic、Partition</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_7.png" alt="kafka_1_7"></p>
<h3 id="1-2-3-副本-replica"><a href="#1-2-3-副本-replica" class="headerlink" title="1.2.3 副本(replica)"></a>1.2.3 副本(replica)</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_8.png" alt="kafka_1_8"></p>
<h3 id="1-2-4-ISR详解-In-Sync-Replicas"><a href="#1-2-4-ISR详解-In-Sync-Replicas" class="headerlink" title="1.2.4 ISR详解(In Sync Replicas)"></a>1.2.4 ISR详解(In Sync Replicas)</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_9.png" alt="kafka_1_9"></p>
<p>上图表示拉取及时的情况</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_10.png" alt="kafka_1_10"></p>
<p>上图表示拉取滞后的情况。</p>
<p><font color=red><strong>PS: 当Kafka集群中的 leader 挂了之后，Kafka集群会重新选举leader，这是只有在 ISR 集合里面的Kafka才会被选举成为leader。</strong></font></p>
<ul>
<li><p>HW: High Watermark， 高水位线，消费者只能最多拉取到高水位线的消息</p>
</li>
<li><p>LEO: Log End Offset，日志文件的最后一条记录的 offset(偏移量)</p>
</li>
<li><p>ISR 集合与 HW 和 LEO 直接存在着密不可分的关系</p>
</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_11.png" alt="kafka_1_11"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_12.png" alt="kafka_1_12"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_13.png" alt="kafka_1_13"></p>
<p>上图右边的图形表示数据传入到leader节点，但还没有同步到follower节点上</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/kafka_1_14.png" alt="kafka_1_14"></p>
<p>上图HW移动了一格，表示 follower1 节点和follower2 节点都同步了第3条数据，而第4条数据因为follower2节点没有同步到，Kafka消费者就消费不了第4条数据。</p>
<h2 id="1-3-Kafka-环境搭建"><a href="#1-3-Kafka-环境搭建" class="headerlink" title="1.3 Kafka 环境搭建"></a>1.3 Kafka 环境搭建</h2><p><a href="https://blog.csdn.net/Little_fxc/article/details/108626224?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161236585916780269848148%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=161236585916780269848148&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v1~rank_blog_v1-1-108626224.pc_v1_rank_blog_v1&utm_term=zookeeper&spm=1018.2226.3001.4450">zookeeper 集群搭建</a></p>
<p><a href="https://www.cnblogs.com/luzhanshi/p/13369834.html">Kafka 集群搭建</a></p>
<p><a href="https://www.cnblogs.com/pzb-shadow/p/13030365.html">Kafka Manager - Kafka集群管理工具</a><br><a href="https://blog.csdn.net/asd136912/article/details/103735037">kafka 命令行工具常用命令行操作</a></p>
<h2 id="1-4-Kafka-极速入门"><a href="#1-4-Kafka-极速入门" class="headerlink" title="1.4 Kafka 极速入门"></a>1.4 Kafka 极速入门</h2><h3 id="1-4-1-构建生产者步骤"><a href="#1-4-1-构建生产者步骤" class="headerlink" title="1.4.1 构建生产者步骤"></a>1.4.1 构建生产者步骤</h3><ol>
<li>配置生产者参数属性和创建生产者对象</li>
<li>构建消息：ProducerRecord</li>
<li>发送消息</li>
<li>关闭生产者</li>
</ol>
<h3 id="1-4-2-构建消费者步骤"><a href="#1-4-2-构建消费者步骤" class="headerlink" title="1.4.2 构建消费者步骤"></a>1.4.2 构建消费者步骤</h3><ol>
<li>配置消费者参数属性和创建消费者对象</li>
<li>订阅主题</li>
<li>拉取消息并进行消费处理</li>
<li>提交消费偏移量，关闭消费者</li>
</ol>
<h3 id="1-4-3-代码实现"><a href="#1-4-3-代码实现" class="headerlink" title="1.4.3 代码实现"></a>1.4.3 代码实现</h3><h4 id="1-4-3-1-配置类"><a href="#1-4-3-1-配置类" class="headerlink" title="1.4.3.1 配置类"></a>1.4.3.1 配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kafka配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaProducer&lt;String, String&gt; <span class="title">producerRecord</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 配置kafka集群地址，不用将全部机器都写上，zk会自动发现全部的kafka broke</span></span><br><span class="line">        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092,localhost:9093&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置发送消息的应答方式</span></span><br><span class="line">        properties.setProperty(ProducerConfig.ACKS_CONFIG, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">        <span class="comment">// 重试次数</span></span><br><span class="line">        properties.setProperty(ProducerConfig.RETRIES_CONFIG, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// 重试间隔时间</span></span><br><span class="line">        properties.setProperty(ProducerConfig.RETRY_BACKOFF_MS_CONFIG, <span class="string">&quot;100&quot;</span>);</span><br><span class="line">        <span class="comment">// 一批次发送的消息大小 16KB</span></span><br><span class="line">        properties.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, <span class="string">&quot;16348&quot;</span>);</span><br><span class="line">        <span class="comment">// 一个批次等待时间,10ms</span></span><br><span class="line">        properties.setProperty(ProducerConfig.LINGER_MS_CONFIG, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">        <span class="comment">// RecordAccumulator 缓冲区大小  32M，如果缓冲区满了会阻塞发送端</span></span><br><span class="line">        properties.setProperty(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="string">&quot;33554432&quot;</span>);</span><br><span class="line">        <span class="comment">// 配置拦截器, 多个逗号隔开</span></span><br><span class="line">        properties.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, <span class="string">&quot;com.xiaolyuh.interceptor.TraceInterceptor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Serializer&lt;String&gt; keySerializer = <span class="keyword">new</span> StringSerializer();</span><br><span class="line">        Serializer&lt;String&gt; valueSerializer = <span class="keyword">new</span> StringSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaProducer&lt;&gt;(properties, keySerializer, valueSerializer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-2-生产者"><a href="#1-4-3-2-生产者" class="headerlink" title="1.4.3.2 生产者"></a>1.4.3.2 生产者</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootStudentKafkaApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer&lt;String, String&gt; kafkaProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSyncKafkaSend</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 同步发送测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ProducerRecord&lt;String, String&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;test_cluster_topic&quot;</span>, <span class="string">&quot;key-&quot;</span> + i, <span class="string">&quot;value-&quot;</span> + i);</span><br><span class="line">            <span class="comment">// 同步发送，这里我们还可以指定发送到那个分区，还可以添加header</span></span><br><span class="line">            kafkaProducer.send(producerRecord, <span class="keyword">new</span> KafkaCallback&lt;&gt;(producerRecord)).get(<span class="number">50</span>, TimeUnit.MINUTES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadName::&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsyncKafkaSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 异步发送测试</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ProducerRecord&lt;String, String&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">&quot;test_cluster_topic2&quot;</span>, <span class="string">&quot;key-&quot;</span> + i, <span class="string">&quot;value-&quot;</span> + i);</span><br><span class="line">            <span class="comment">// 异步发送，这里我们还可以指定发送到那个分区，还可以添加header</span></span><br><span class="line">            kafkaProducer.send(producerRecord, <span class="keyword">new</span> KafkaCallback&lt;&gt;(producerRecord));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadName::&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="comment">// 记得刷新，否则消息有可能没有发出去</span></span><br><span class="line">        kafkaProducer.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步回调函数，该方法会在 Producer 收到 ack 时调用，当Exception不为空表示发送消息失败。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KafkaCallback</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProducerRecord&lt;K, V&gt; producerRecord;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KafkaCallback</span><span class="params">(ProducerRecord&lt;K, V&gt; producerRecord)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producerRecord = producerRecord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ThreadName::&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(exception)) &#123;</span><br><span class="line">            System.out.println(metadata.partition() + <span class="string">&quot;-&quot;</span> + metadata.offset() + <span class="string">&quot;:::&quot;</span> + producerRecord.key() + <span class="string">&quot;=&quot;</span> + producerRecord.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(exception)) &#123;</span><br><span class="line">            <span class="comment">// TODO  告警，消息落库从发</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-3-消费者"><a href="#1-4-3-3-消费者" class="headerlink" title="1.4.3.3 消费者"></a>1.4.3.3 消费者</h4><p>Kafka中的消息消费是一个不断轮询的过程，消费者所要做的就是重复地调用<code>poll()</code>方法，而<code>poll()</code>方法返回的是所订阅的主题（分区）上的一组消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerDemo</span> </span>&#123;</span><br><span class="line">    ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">&quot;localhost:9092,localhost:9093&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 非常重要的属性配置：与我们的消费者订阅组有关系</span></span><br><span class="line">            properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">&quot;groupId&quot;</span>);</span><br><span class="line">            <span class="comment">// 消费者提交 offset：自动提交 &amp; 手工提交，默认是自动提交</span></span><br><span class="line">            properties.setProperty(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">            <span class="comment">// 请求超时时间</span></span><br><span class="line">            properties.setProperty(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, <span class="string">&quot;60000&quot;</span>);</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            Deserializer&lt;String&gt; keyDeserializer = <span class="keyword">new</span> StringDeserializer();</span><br><span class="line">            Deserializer&lt;String&gt; valueDeserializer = <span class="keyword">new</span> StringDeserializer();</span><br><span class="line">            <span class="comment">// 创建消费者对象</span></span><br><span class="line">            KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(properties, keyDeserializer, valueDeserializer);</span><br><span class="line">            <span class="comment">// 订阅感兴趣的主题</span></span><br><span class="line">            consumer.subscribe(Arrays.asList(<span class="string">&quot;test_cluster_topic&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// KafkaConsumer的assignment（）方法来判定是否分配到了相应的分区，如果为空表示没有分配到分区</span></span><br><span class="line">            Set&lt;TopicPartition&gt; assignment = consumer.assignment();</span><br><span class="line">            <span class="keyword">while</span> (assignment.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 阻塞1秒</span></span><br><span class="line">                consumer.poll(<span class="number">1000</span>);</span><br><span class="line">                assignment = consumer.assignment();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// KafkaConsumer 分配到了分区，开始消费</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 拉取记录，如果没有记录则柱塞1000ms。</span></span><br><span class="line">                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                    String traceId = <span class="keyword">new</span> String(record.headers().lastHeader(<span class="string">&quot;traceId&quot;</span>).value());</span><br><span class="line">                    System.out.printf(<span class="string">&quot;traceId = %s, offset = %d, key = %s, value = %s%n&quot;</span>, traceId, record.offset(), record.key(), record.value());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 异步确认提交</span></span><br><span class="line">                consumer.commitAsync((offsets, exception) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Objects.isNull(exception)) &#123;</span><br><span class="line">                        <span class="comment">// TODO 告警、落盘、重试</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-4-拦截器"><a href="#1-4-3-4-拦截器" class="headerlink" title="1.4.3.4 拦截器"></a>1.4.3.4 拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链路ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TraceInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> errorCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> successCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最先调用，读取配置信息，只调用一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(configs));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 它运行在用户主线程中，在消息序列化和计算分区之前调用，这里最好不小修改topic 和分区参数，否则会出一些奇怪的现象。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Headers headers = <span class="keyword">new</span> RecordHeaders();</span><br><span class="line">        headers.add(<span class="string">&quot;traceId&quot;</span>, UUID.randomUUID().toString().getBytes(Charset.forName(<span class="string">&quot;UTF8&quot;</span>)));</span><br><span class="line">        <span class="comment">// 修改消息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProducerRecord&lt;&gt;(record.topic(), record.partition(), record.key(), record.value(), headers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法会在消息从 RecordAccumulator 成功发送到 Kafka Broker 之后，或者在发送过程 中失败时调用。</span></span><br><span class="line"><span class="comment">     * 并且通常都是在 producer 回调逻辑触发之前调用。</span></span><br><span class="line"><span class="comment">     * onAcknowledgement 运行在 producer 的 IO 线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢 producer 的消息 发送效率。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metadata</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(exception)) &#123;</span><br><span class="line">            <span class="comment">// TODO  出错了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 interceptor，主要用于执行一些资源清理工作，只调用一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========close============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-5-Kafka-基本配置参数讲解"><a href="#1-5-Kafka-基本配置参数讲解" class="headerlink" title="1.5 Kafka 基本配置参数讲解"></a>1.5 Kafka 基本配置参数讲解</h2><ul>
<li><p>配置文件: <code>$KAFKA_HOME/config/server.properties</code></p>
<ul>
<li><p>zookeeper.connect</p>
<p>CS格式参数，可以指定值为zk1:2181,zk2:2181,zk3:2181，不同Kafka集群可以指定：zk1:2181,zk2:2181,zk3:2181/kafka1，chroot只需要写一次</p>
</li>
<li><p>listeners</p>
<p>设置内网访问Kafka服务的监听器</p>
</li>
<li><p>broker.id</p>
<p>每个broker都可以用一个唯一的非负整数id进行标识；这个id可以作为broker的“名字”，并且它的存在使得broker无须混淆consumers就可以迁移到不同的host/port上。你可以选择任意你喜欢的数字作为id，只要id是唯一的即可。</p>
</li>
<li><p>log.dir 和 log.dirs</p>
<p>kafka存放数据的路径。这个路径并不是唯一的，可以是多个，路径之间只需要使用逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进行。</p>
</li>
<li><p>message.max.bytes</p>
<p>server可以接收的消息最大尺寸。重要的是，consumer和producer有关这个属性的设置必须同步，否则producer发布的消息对consumer来说太大。</p>
</li>
</ul>
</li>
<li><p><a href="https://littlefxc.gitee.io/blog/passages/KAFKA-%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/">详细配置参数</a></p>
</li>
</ul>
<h2 id="1-6-Kafka-之生产者"><a href="#1-6-Kafka-之生产者" class="headerlink" title="1.6 Kafka 之生产者"></a>1.6 Kafka 之生产者</h2><h3 id="1-6-1-发送消息：ProducerRecord"><a href="#1-6-1-发送消息：ProducerRecord" class="headerlink" title="1.6.1 发送消息：ProducerRecord"></a>1.6.1 发送消息：ProducerRecord</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerRecord</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer partition;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Headers headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS: 一条消息会通过 Key 去计算出来实际的 partition，按照 partitiion 去存储的。</p>
<h3 id="1-6-2-必要的参数配置项"><a href="#1-6-2-必要的参数配置项" class="headerlink" title="1.6.2 必要的参数配置项"></a>1.6.2 必要的参数配置项</h3><ul>
<li><p>bootstrap.servers：逗号分隔符，多个地址，防止单点故障</p>
</li>
<li><p>key.serializer, value.serializer：kafka实际发送的是二进制的内容，所以必须序列化</p>
</li>
<li><p>client.id：kafka 对应生产者的ID。如果不设置，Kafka 内部会自动生成一个非空字符串</p>
</li>
<li><p>简化的配置Key: ProducerConfig</p>
</li>
<li><p>KafkaProducer 是线程安全的（kafka消费者不是线程安全的）</p>
</li>
</ul>
<h3 id="1-6-3-发送消息的3种方法"><a href="#1-6-3-发送消息的3种方法" class="headerlink" title="1.6.3 发送消息的3种方法"></a>1.6.3 发送消息的3种方法</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210225221350755.png" alt="image-20210225221350755"></p>
<p>Kafka 发送消息提供了 3 种方法：</p>
<ul>
<li>sendOffsetsToTransaction: 事务相关</li>
<li>send(ProducerRecord&lt;K,V&gt;):Future<RecordMetadata>：异步，但是使用 Future.get()方法相当于同步</li>
<li>send(ProducerRecord&lt;K,V&gt;, Callback):Future<RecordMetadata>：异步，返回值会放到 Callback 回调函数里</li>
</ul>
<h3 id="1-6-4-KafkaProducer-消息发送重试机制"><a href="#1-6-4-KafkaProducer-消息发送重试机制" class="headerlink" title="1.6.4 KafkaProducer 消息发送重试机制"></a>1.6.4 KafkaProducer 消息发送重试机制</h3><ul>
<li>retries 参数</li>
<li>可重试异常(例如：网络抖动) &amp; 不可重试异常(例如：磁盘满了、消息体积太大)</li>
</ul>
<h2 id="1-7-Kafka-之生产者重要参数详解"><a href="#1-7-Kafka-之生产者重要参数详解" class="headerlink" title="1.7 Kafka 之生产者重要参数详解"></a>1.7 Kafka 之生产者重要参数详解</h2><ul>
<li><p>acks: 指定发送消息后，Broker端至少有多少个副本接收到该消息；默认 acks = 1；（Broker端只要主分区写入成功，就可以给客户端去回送响应，<strong>如果leader宕机了，则会丢失数据</strong> ）</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/format,png.png" alt="这里写图片描述"></p>
</li>
<li><p>acks = 0：生产者发送消息之后不需要等待任何服务端的响应；（这种情况下数据传输效率最高，但是数据可靠性确是最低的。）</p>
</li>
<li><p>acks = -1 或者 acks=all：生产者在发送消息之后，需要等待 ISR 中的所有副本都成功写入消息之后才能够收到来自服务端的成功响应。</p>
<p>你以为这样就能保证数据不丢失了吗？例如当ISR中的成员只有leader的时候，就相当于 acks=1 了。</p>
<p>那么该怎么样保证数据的可靠性能？还需要<code>min.insync.replicas</code>这个参数(可以在broker或者topic层面进行设置)的配合，这样才能发挥最大的功效。</p>
<ul>
<li><p>min.insync.replicas这个参数设定ISR中的最小副本数是多少，默认值为1，当且仅当request.required.acks参数设置为-1时，此参数才生效。</p>
<p>如果ISR中的副本数少于<code>min.insync.replicas</code>配置的数量时，客户端会返回异常：org.apache.kafka.common.errors.NotEnoughReplicasExceptoin: Messages are rejected since there are fewer in-sync replicas than required。</p>
</li>
<li><p>ISR中的flower全部完成数据同步后，leader此时挂掉，会重新选举leader，数据不会丢失。</p>
</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/format,png-20210322221324553.png" alt="这里写图片描述"></p>
<ul>
<li>数据发送到leader后 ，部分ISR的副本同步，leader此时挂掉。比如follower1和follower2都有可能变成新的leader, producer端会得到返回异常，producer端会重新发送数据，数据可能会重复。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/format,png-20210322221608062.png" alt="这里写图片描述"></p>
</li>
<li><p>max.request.size:该参数用来限制生产者客户端能发送的消息的最大值，默认 1M（10485768）</p>
</li>
<li><p>retries 和 retry.backoff.msretries: 重试次数和重试间隔，默认100</p>
</li>
<li><p>compression.type: 这个参数用来指定消息的压缩方式，默认值为 none ， 可选配置：gzip，snappy 和 lz4</p>
</li>
<li><p>connections.max.idle.ms:这个参数用来指定在多久之后关闭限制的连接，默认值是54000ms，即9分钟</p>
</li>
<li><p>linger.ms：这个参数用来指定生产者发送 ProducerBatch 之前等待更多消息（ProducerRecord）加入ProducerBatch的时间，默认值为0</p>
</li>
<li><p>batch.size:累计多少条消息，则一次进行批量发送</p>
</li>
<li><p>buffer.memory:缓存提升性能参数，默认 32 M</p>
</li>
<li><p>receive.buffer.bytes: 这个参数用来设置Socket接受消息缓冲区（SO_RECBUF）的大小，默认值为32678（B），即32KB</p>
</li>
<li><p>send.buffer.bytes: 这个参数用来设置Socket发送消息缓存区（SO_SNDBUF）的大小，默认值为131072（B），即128KB。</p>
</li>
<li><p>request.timeout.ms: 这个参数用来配置Producer等待请求响应的最长时间，默认值为 3000 ms</p>
</li>
</ul>
<h2 id="1-8-Kafka-之拦截器"><a href="#1-8-Kafka-之拦截器" class="headerlink" title="1.8 Kafka 之拦截器"></a>1.8 Kafka 之拦截器</h2><p>拦截器（interceptor）：Kafka对应着有生产者和消费者两种拦截器</p>
<p>生产者实现接口：org.apache.kafka.clients.producer.ProducerInterceptor</p>
<p>消费者实现接口：org.apache.kafka.clients.consumer.ConsumerInterceptor</p>
<h2 id="1-9-Kafka-之序列化和反序列化"><a href="#1-9-Kafka-之序列化和反序列化" class="headerlink" title="1.9 Kafka 之序列化和反序列化"></a>1.9 Kafka 之序列化和反序列化</h2><ul>
<li><p>序列化反序列化：生产者需要用序列化器（Serializer）把对象转换成字节数组才能通过网络发送Kafka；而在对侧，消费者需要用反序列化器（Derializer）把从Kafka中收到的字节数组转换成相应的对象。</p>
</li>
<li><p>序列化接口：<code>org.apache.kafka.common.serialization.Serializer</code></p>
<p>除了用于String类型的序列化器之外还有：ByteArray、ByteBuffer、Bytes、Double、Integer、Long这几种类型，它们都实现了org.apache.kafka.common.serialization.Serializer接口，此接口有三种方法：</p>
<ul>
<li><p>public void configure(Map&lt;String, ?&gt; configs, boolean isKey)：用来配置当前类。</p>
</li>
<li><p>public byte[] serialize(String topic, T data)：用来执行序列化。</p>
</li>
<li><p>public void close()：用来关闭当前序列化器。一般情况下这个方法都是个空方法，如果实现了此方法，必须确保此方法的幂等性，因为这个方法很可能会被KafkaProducer调用多次。</p>
</li>
</ul>
<p>如何自定义序列化？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要序列化的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs, <span class="keyword">boolean</span> isKey)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(String topic, User data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] id, name;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                id = data.getId().getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data.getName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                name = data.getName().getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                name = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">4</span>+<span class="number">4</span>+id.length + name.length);</span><br><span class="line">            buffer.putInt(id.length);</span><br><span class="line">            buffer.put(id);</span><br><span class="line">            buffer.putInt(name.length);</span><br><span class="line">            buffer.put(name);</span><br><span class="line">            <span class="keyword">return</span> buffer.array();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用: 记得也要将相应的String类型改为User类型，如：</span></span><br><span class="line">properties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;com.examples.fengxuechao.UserSerializer&quot;</span>);</span><br><span class="line">Producer&lt;String,User&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String,User&gt;(properties);</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">ProducerRecord&lt;String, User&gt; producerRecord = <span class="keyword">new</span> ProducerRecord&lt;String, User&gt;(topic,user);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>反序列化接口：<code>org.apache.kafka.common.serialization.Derializer</code></p>
<p>同接口同样有 3 个方法：</p>
<ul>
<li>public void configure(Map&lt;String, ?&gt; configs, boolean isKey)：用来配置当前类。</li>
<li>public byte[] serialize(String topic, T data)：用来执行反序列化。如果data为null建议处理的时候直接返回null而不是抛出一个异常。</li>
<li>public void close()：用来关闭当前序列化器。</li>
</ul>
<p>如何反序列化？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDeserializer</span> <span class="keyword">implements</span> <span class="title">Deserializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs, <span class="keyword">boolean</span> isKey)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deserialize</span><span class="params">(String topic, <span class="keyword">byte</span>[] data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (data.length &lt; <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">&quot;Size of data received by UserDeserializer is shorter than expected!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(data);</span><br><span class="line">        <span class="keyword">int</span> idLen, nameLen;</span><br><span class="line">        String id, name;</span><br><span class="line">        idLen = buffer.getInt();</span><br><span class="line">        <span class="keyword">byte</span>[] idBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[idLen];</span><br><span class="line">        buffer.get(idBytes);</span><br><span class="line">        nameLen = buffer.getInt();</span><br><span class="line">        <span class="keyword">byte</span>[] nameBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[nameLen];</span><br><span class="line">        buffer.get(nameBytes);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            id = <span class="keyword">new</span> String(idBytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            name = <span class="keyword">new</span> String(nameBytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">&quot;Error occur when deserializing!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name,address);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其实序列化完全可以和Avro、ProtoBuf等联合使用，而且更加的方便快捷。不过，如无必要，用默认的String序列化就可以了（使用自定义的序列化就不容易变了，如User类要添加一个属性）。</p>
<h2 id="1-10-Kafka-之分区器"><a href="#1-10-Kafka-之分区器" class="headerlink" title="1.10 Kafka 之分区器"></a>1.10 Kafka 之分区器</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210325223028295.png" alt="image-20210325223028295"></p>
<p>上图是生产者发送消息后会经历一系列的过程：</p>
<ol>
<li>生产者发送消息</li>
<li>拦截器</li>
<li>序列化</li>
<li>分区：如果消息中没有指定分区，就会使用分区器</li>
<li>到达Broker</li>
</ol>
<p>生产者消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerRecord</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 所要发送的topic</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;       </span><br><span class="line">    <span class="comment">// 指定的partition序号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer partition;  </span><br><span class="line">    <span class="comment">// 一组键值对，与RabbitMQ中的headers类似，kafka0.11.x版本才引入的一个属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Headers headers;    </span><br><span class="line">    <span class="comment">// 消息的key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="comment">// 消息的value,即消息体</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V value;</span><br><span class="line">    <span class="comment">// 消息的时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Long timestamp;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>org.apache.kafka:kafka-clients:2.0.1</code>中的 <code>KafkaProducer</code> 的<code>partition</code>源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * computes partition for given record.</span></span><br><span class="line"><span class="comment">     * if the record has partition returns the value otherwise</span></span><br><span class="line"><span class="comment">     * calls configured partitioner class to compute the partition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(ProducerRecord&lt;K, V&gt; record, <span class="keyword">byte</span>[] serializedKey, <span class="keyword">byte</span>[] serializedValue, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        Integer partition = record.partition();</span><br><span class="line">        <span class="keyword">return</span> partition != <span class="keyword">null</span> ?</span><br><span class="line">                partition :</span><br><span class="line">                partitioner.partition(</span><br><span class="line">                        record.topic(), record.key(), serializedKey, record.value(), serializedValue, cluster);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看出的确是先判断有无指明ProducerRecord的partition字段，如果没有指明，则再进一步计算分区。上面这段代码中的partitioner在默认情况下是指Kafka默认实现的<code>org.apache.kafka.clients.producer.DefaultPartitioner</code>，其源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default partitioning strategy:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If a partition is specified in the record, use it</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition is specified but a key is present choose a partition based on a hash of the key</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;If no partition or key is present choose a partition in a round-robin fashion</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicInteger&gt; topicCounterMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compute the partition for the given record.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic The topic name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key to partition on (or null if no key)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes serialized key to partition on (or null if no key)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The value to partition on or null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueBytes serialized value to partition on or null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cluster The current cluster metadata</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">        <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextValue = nextValue(topic);</span><br><span class="line">            List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">            <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> part = Utils.toPositive(nextValue) % availablePartitions.size();</span><br><span class="line">                <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// no partitions are available, give a non-available partition</span></span><br><span class="line">                <span class="keyword">return</span> Utils.toPositive(nextValue) % numPartitions;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line">            <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">nextValue</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        AtomicInteger counter = topicCounterMap.get(topic);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == counter) &#123;</span><br><span class="line">            counter = <span class="keyword">new</span> AtomicInteger(ThreadLocalRandom.current().nextInt());</span><br><span class="line">            AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter);</span><br><span class="line">            <span class="keyword">if</span> (currentCounter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                counter = currentCounter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由上源码可以看出partition的计算方式：</p>
<ol>
<li>如果key为null，则按照一种轮询的方式来计算分区分配</li>
<li>如果key不为null则使用称之为<code>murmur</code>的Hash算法（非加密型Hash函数，具备高运算性能及低碰撞率）来计算分区分配。</li>
</ol>
<p>当然我们也可自定义自己的分区器，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == keyBytes || keyBytes.length&lt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> atomicInteger.getAndIncrement() % numPartitions;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//借用String的hashCode的计算方式</span></span><br><span class="line">        <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : keyBytes) &#123;</span><br><span class="line">            hash = <span class="number">31</span> * hash + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash % numPartitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-11-Kafka-之消费者与消费者组"><a href="#1-11-Kafka-之消费者与消费者组" class="headerlink" title="1.11 Kafka 之消费者与消费者组"></a>1.11 Kafka 之消费者与消费者组</h2><h3 id="1-11-1-概念"><a href="#1-11-1-概念" class="headerlink" title="1.11.1 概念"></a>1.11.1 概念</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210325232006969.png" alt="image-20210325232006969"></p>
<p>说明：</p>
<ul>
<li><p>一个Topic可以有多个分区</p>
</li>
<li><p>一个主题可以有多个消费者组</p>
</li>
<li><p>一个消费者组可以有多个消费者，一个消费者只能属于一个消费者组</p>
</li>
<li><p>每一个分区可以被多个消费者组消费，每一个分区只能被一个消费者组中的一个消费者所消费，详见下图</p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210329224142774.png" alt="image-20210329224142774"></p>
<p>  <img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210329224552763.png" alt="image-20210329224552763"></p>
<p>  一个消费者组内的消费者数量多于分区时，多出来的消费者不做任何事。</p>
</li>
</ul>
<h3 id="1-11-2-消息中间件模型"><a href="#1-11-2-消息中间件模型" class="headerlink" title="1.11.2 消息中间件模型"></a>1.11.2 消息中间件模型</h3><ul>
<li><p>点对点（P2P，Point-to-Point）模式</p>
<p>点对点模式是基于队列的，消息生产者发送消息到队列，消息消费者从队列接受消息。</p>
</li>
<li><p>发布/订阅（Pub/Sub）模式</p>
<p>发布/订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点成为主题（Topic），主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者从主题中订阅消息</p>
</li>
<li><p>Kafka同时支持两种消息投递模式，而这正是得益于消费者与消费者组模型的契合</p>
<ul>
<li>所有的消费者都隶属于同一个消费组，相当于点对点模型</li>
<li>所有的消费者都隶属于不同的消费者组，相当于发布/订阅模型</li>
</ul>
</li>
</ul>
<h3 id="1-11-3-Kafka-消费者必要参数方法"><a href="#1-11-3-Kafka-消费者必要参数方法" class="headerlink" title="1.11.3 Kafka 消费者必要参数方法"></a>1.11.3 Kafka 消费者必要参数方法</h3><ul>
<li>bootstrap.servers: 用来指定连接Kafka集群所需的broker地址清单</li>
<li>key.deserializer 和 value.deserializer: 反序列化参数</li>
<li>group.id: 消费者所属消费组</li>
<li>subscribe：消费主题订阅，支持集合/标准正则表达式</li>
<li>assign：只订阅主题的某个分区</li>
</ul>
<h3 id="1-11-4-kafka-消费者提交位移"><a href="#1-11-4-kafka-消费者提交位移" class="headerlink" title="1.11.4 kafka 消费者提交位移"></a>1.11.4 kafka 消费者提交位移</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210331223055144.png" alt="image-20210331223055144"></p>
<p>在实际的工作中一般采用手动提交位移的方式，这样会有比较好的容错性，我们会知道这条消息到底有没有消费成功，如果处理失败，那我们可以再次提交等兜底的策略。</p>
<p><strong>Kafka 自动提交参数</strong></p>
<pre><code>- 自动提交：enable.auto.commit, 默认 true
- 提交周期间隔：auto.commit.interval.ms，默认值为 5 秒
</code></pre>
<p><strong>手工提交参数</strong></p>
<ul>
<li>enable.auto.commit，配置为 false</li>
<li>提交方式：commitSync &amp;commitAsync</li>
<li>同步提交：整体提交 &amp; 分区提交</li>
</ul>
<h3 id="1-11-5-消费者subscribe-与-assign-详解"><a href="#1-11-5-消费者subscribe-与-assign-详解" class="headerlink" title="1.11.5 消费者subscribe 与 assign 详解"></a>1.11.5 消费者subscribe 与 assign 详解</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210331233706053.png" alt="image-20210331233706053"></p>
<p>从上图中可以看到 subscribe 方法有 4 个重载的方法，对于 KafkaConsumer  消息的订阅，可以有多个主题，也可以支持正则表达式匹配。</p>
<p>假如我们只想要订阅一个 partition 呢？<br>使用 <code>assign</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartitionInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic; <span class="comment">// 主题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> partition; 分区</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node leader; <span class="comment">// 主节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node[] replicas; <span class="comment">// Kafka 节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node[] inSyncReplicas; <span class="comment">// ISR Kafka 节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node[] offlineReplicas; <span class="comment">// OSR Kafka节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicPartition</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> partition;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String topic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 拉取某个主题下的所有分区</span><br><span class="line">List&lt;PartitionInfo&gt; tpInfoList = consumer.partitionsFor(<span class="string">&quot;topic&quot;</span>)</span><br><span class="line"># 订阅主题为 topic 的 第 0 个分区，0 是从 PartitionInfo 中取来的</span><br><span class="line">consumer.assign(Arrays.asList(<span class="keyword">new</span> TopicPartition(<span class="string">&quot;topic&quot;</span>, <span class="number">0</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="1-11-6-Kafka消费者之多线程"><a href="#1-11-6-Kafka消费者之多线程" class="headerlink" title="1.11.6 Kafka消费者之多线程"></a>1.11.6 Kafka消费者之多线程</h3><ul>
<li>KafkaProducer 是线程安全的，但是KafkaConsumer却是线程非安全的</li>
<li>KafkaConsumer中定义了一个 <code>acquire</code>方法用来检测是否只有一个线程在操作，如果有其它线程操作则会抛出 ConcurrentModifactionException</li>
<li>KafkaConsumer在执行所有动作时都会先执行 <code>acquire</code> 方法检测是否线程安全</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210406221942118.png" alt="image-20210406221942118"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210406224758405.png" alt="image-20210406224758405"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210406230608886.png" alt="image-20210406230608886"></p>
<h3 id="1-11-7-Kafka-消费者重要参数"><a href="#1-11-7-Kafka-消费者重要参数" class="headerlink" title="1.11.7 Kafka 消费者重要参数"></a>1.11.7 Kafka 消费者重要参数</h3><p>性能调优参考</p>
<ul>
<li>fetch.min.bytes: 一次拉取最小数据量，默认1B</li>
<li>fetch.max.bytes: 一次拉取最大数据量，默认50M</li>
<li>max.partition.fetch.bytes: 一次fetch请求，从一个partition中取得的records最大大小，默认1M</li>
<li>fetch.max.wait.ms: Fetch 请求发给broker后，在broker中可能会被阻塞的时长，默认500</li>
<li>fetch.poll.records: Consumer 每次调用 poll() 时取到的records的最大数，默认 500 条</li>
</ul>
<h2 id="1-12-Kafka-高级应用整合-Spring-Boot"><a href="#1-12-Kafka-高级应用整合-Spring-Boot" class="headerlink" title="1.12 Kafka 高级应用整合 Spring Boot"></a>1.12 Kafka 高级应用整合 Spring Boot</h2><ol>
<li>Maven配置</li>
<li>application.properties</li>
<li>创建KafkaTemplate对象</li>
<li>@KafkaListener 监听消息</li>
</ol>
<h3 id="1-12-1-核心依赖"><a href="#1-12-1-核心依赖" class="headerlink" title="1.12.1 核心依赖"></a>1.12.1 核心依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> 				</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<h3 id="1-12-2-生产者-application-properties-配置"><a href="#1-12-2-生产者-application-properties-配置" class="headerlink" title="1.12.2 生产者 application.properties 配置"></a>1.12.2 生产者 application.properties 配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Spring 整合 kafka</span></span><br><span class="line"><span class="string">spring.kafka.bootstrap-servers=localhost:9092</span></span><br><span class="line"><span class="comment">## kafka producer 发送消息失败时的一个重试的次数</span></span><br><span class="line"><span class="string">spring.kafka.producer.retries=0</span></span><br><span class="line"><span class="comment">## 批量发送数据的配置 </span></span><br><span class="line"><span class="string">spring.kafka.producer.batch-size=16384</span></span><br><span class="line"><span class="comment">## 设置kafka 生产者内存缓存区的大小（32M）</span></span><br><span class="line"><span class="string">spring.kafka.producer.buffer-memory=33554432</span></span><br><span class="line"><span class="comment">## kafka消息的序列化配置</span></span><br><span class="line"><span class="string">spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="string">spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。</span></span><br><span class="line"><span class="comment"># acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。</span></span><br><span class="line"><span class="comment"># acks=-1: 表示分区leader必须等待消息被成功写入到所有的ISR副本(同步副本)中才认为producer请求成功。这种方案提供最高的消息持久性保证，但是理论上吞吐率也是最差的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 	这个是kafka生产端最重要的选项</span></span><br><span class="line"><span class="string">spring.kafka.producer.acks=1</span></span><br></pre></td></tr></table></figure>

<h3 id="1-12-3-KafkaProducerService"><a href="#1-12-3-KafkaProducerService" class="headerlink" title="1.12.3 KafkaProducerService"></a>1.12.3 KafkaProducerService</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, Object object)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; future = kafkaTemplate.send(topic, object);</span><br><span class="line">		</span><br><span class="line">		future.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;SendResult&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult&lt;String, Object&gt; result)</span> </span>&#123;</span><br><span class="line">				log.info(<span class="string">&quot;发送消息成功: &quot;</span> + result.toString());</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">				log.error(<span class="string">&quot;发送消息失败: &quot;</span> + throwable.getMessage());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-12-4-消费者-application-properties-配置"><a href="#1-12-4-消费者-application-properties-配置" class="headerlink" title="1.12.4 消费者 application.properties 配置"></a>1.12.4 消费者 application.properties 配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.kafka.bootstrap-servers=192.168.11.51:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## consumer 消息的签收机制：手工签收</span></span><br><span class="line"><span class="string">spring.kafka.consumer.enable-auto-commit=false</span></span><br><span class="line"><span class="string">spring.kafka.listener.ack-mode=manual</span></span><br><span class="line"><span class="comment"># 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span></span><br><span class="line"><span class="comment"># latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span></span><br><span class="line"><span class="comment"># earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录</span></span><br><span class="line"><span class="string">spring.kafka.consumer.auto-offset-reset=earliest</span></span><br><span class="line"><span class="comment">## 序列化配置</span></span><br><span class="line"><span class="string">spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="string">spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.kafka.listener.concurrency=5</span></span><br></pre></td></tr></table></figure>

<h3 id="1-12-5-KafkaConsumerService"><a href="#1-12-5-KafkaConsumerService" class="headerlink" title="1.12.5 KafkaConsumerService"></a>1.12.5 KafkaConsumerService</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class KafkaConsumerService &#123;</span><br><span class="line"></span><br><span class="line">   @KafkaListener(groupId &#x3D; &quot;group02&quot;, topics &#x3D; &quot;topic02&quot;)</span><br><span class="line">   public void onMessage(ConsumerRecord&lt;String, Object&gt; record, Acknowledgment acknowledgment, Consumer&lt;?, ?&gt; consumer) &#123;</span><br><span class="line">      log.info(&quot;消费端接收消息: &#123;&#125;&quot;, record.value());</span><br><span class="line">      &#x2F;&#x2F; 收工签收机制</span><br><span class="line">      acknowledgment.acknowledge();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-12-6-单元测试"><a href="#1-12-6-单元测试" class="headerlink" title="1.12.6 单元测试"></a>1.12.6 单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> KafkaProducerService kafkaProducerService;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String topic = <span class="string">&quot;topic02&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">1000</span>; i ++) &#123;</span><br><span class="line">			kafkaProducerService.sendMessage(topic, <span class="string">&quot;hello kafka&quot;</span> + i);</span><br><span class="line">			Thread.sleep(<span class="number">5</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2-Kafka-海量日志收集系统实战"><a href="#2-Kafka-海量日志收集系统实战" class="headerlink" title="2 Kafka 海量日志收集系统实战"></a>2 Kafka 海量日志收集系统实战</h1><h2 id="2-1-架构设计"><a href="#2-1-架构设计" class="headerlink" title="2.1 架构设计"></a>2.1 架构设计</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210408215126380.png" alt="image-20210408215126380"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210408224353954.png" alt="image-20210408224353954"></p>
<p>说明：</p>
<ul>
<li><p>为什么不用SpringBoot默认的logback</p>
<p>因为log4j2 性能好</p>
</li>
<li><p>app.log 存储全量的日志，一般限制在 info 级别</p>
</li>
<li><p>error.log 存储 warn 级别以上的日志</p>
<p>方便后面做数据告警、分析，不选择 app.log 是因其日志太多</p>
</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210408225148721.png" alt="image-20210408225148721"></p>
<p>说明：</p>
<ul>
<li>xpack-watch, trigger shell：通过触发器插件做一个对错误日志的上报和告警的功能</li>
</ul>
<h2 id="2-2-日志输出"><a href="#2-2-日志输出" class="headerlink" title="2.2 日志输出"></a>2.2 日志输出</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210408230441675.png" alt="image-20210408230441675"></p>
<p>Log4j2.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">schema</span>=<span class="string">&quot;Log4J-V2.0.xsd&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;600&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_NAME&quot;</span>&gt;</span>collector<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%d&#123;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZZ&#125;] : 用的是UTC时间，原因是 ELK 是UTC时间，为了保持一致 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%level&#123;length=5&#125;] : 日志级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%thread-%tid] : 线程ID --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%logger] : 日志输出的具体信息 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%X&#123;hostName&#125;] [%X&#123;ip&#125;] [%X&#123;applicationName&#125;] : X 代表 MDC 自定义的日志输出 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%F,%L,%C,%M] :  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- [%m] : message，代表要打印的日志内容--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &#x27;%ex&#x27;%n : ex 代表异常， %n 代表换行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternLayout&quot;</span>&gt;</span>[%d&#123;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZZ&#125;] [%level&#123;length=5&#125;] [%thread-%tid] [%logger] [%X&#123;hostName&#125;] [%X&#123;ip&#125;] [%X&#123;applicationName&#125;] [%F,%L,%C,%M] [%m] ## &#x27;%ex&#x27;%n<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;patternLayout&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;appAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/app-$&#123;FILE_NAME&#125;.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/app-$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;patternLayout&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;500MB&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">&quot;errorAppender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/error-$&#123;FILE_NAME&#125;.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;LOG_HOME&#125;/error-$&#123;FILE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log&quot;</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;$&#123;patternLayout&#125;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;warn&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span>              </span><br><span class="line">          <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;500MB&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">&quot;20&quot;</span>/&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 业务相关 异步logger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncLogger</span> <span class="attr">name</span>=<span class="string">&quot;com.fengxuechao.examples.collector.*&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;appAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncLogger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AsyncLogger</span> <span class="attr">name</span>=<span class="string">&quot;com.fengxuechao.examples.collector.*&quot;</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">includeLocation</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;errorAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AsyncLogger</span>&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Appender-Ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Appender-Ref</span> <span class="attr">ref</span>=<span class="string">&quot;appAppender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;errorAppender&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3-日志收集"><a href="#2-3-日志收集" class="headerlink" title="2.3 日志收集"></a>2.3 日志收集</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210419220943341.png" alt="image-20210419220943341"></p>
<p>filebeat.yml配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Each - is an input. Most options can be set at the input level, so</span></span><br><span class="line"><span class="comment"># you can use different inputs for various configurations.</span></span><br><span class="line"><span class="comment"># Below are the input specific configurations.</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Change to true to enable this input configuration.</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Paths that should be crawled and fetched. Glob based paths.</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="comment"># - /var/log/*.log</span></span><br><span class="line">    <span class="comment">#- c:\programdata\elasticsearch\logs\*</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># app-服务名.log, 为什么写死, 防止发生轮转抓取历史数据</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/usr/local/var/foodie/logs/app-collector.log</span></span><br><span class="line">  <span class="comment"># 定义写入ES时的 _type 值</span></span><br><span class="line">  <span class="attr">document_type:</span> <span class="string">&quot;app-log&quot;</span></span><br><span class="line">  <span class="comment"># 指定匹配的表达式（匹配以 [ 开头的字符串）</span></span><br><span class="line">  <span class="attr">multiline:</span></span><br><span class="line">    <span class="comment"># 指定匹配的表达式（匹配以 [ 开头的字符串）</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&#x27;^\[&#x27;</span></span><br><span class="line">    <span class="comment"># 是否匹配到</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 合并到上一行的末尾</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br><span class="line">    <span class="comment"># 最大的行数</span></span><br><span class="line">    <span class="attr">max_lines:</span> <span class="number">2000</span></span><br><span class="line">    <span class="comment"># 如果在规定的时间没有新的日志事件就不等待后面的日志</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">2s</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">logbiz:</span> <span class="string">collector</span></span><br><span class="line">    <span class="attr">logtopic:</span> <span class="string">app-log-collector</span></span><br><span class="line">    <span class="attr">evn:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/usr/local/var/foodie/logs/error-collector.log</span></span><br><span class="line">  <span class="comment"># 定义写入ES时的 _type 值</span></span><br><span class="line">  <span class="attr">document_type:</span> <span class="string">&quot;error-log&quot;</span></span><br><span class="line">  <span class="comment"># 指定匹配的表达式（匹配以 [ 开头的字符串）</span></span><br><span class="line">  <span class="attr">multiline:</span></span><br><span class="line">    <span class="comment"># 指定匹配的表达式（匹配以 [ 开头的字符串）</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&#x27;^\[&#x27;</span></span><br><span class="line">    <span class="comment"># 是否匹配到</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 合并到上一行的末尾</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br><span class="line">    <span class="comment"># 最大的行数</span></span><br><span class="line">    <span class="attr">max_lines:</span> <span class="number">2000</span></span><br><span class="line">    <span class="comment"># 如果在规定的时间没有新的日志事件就不等待后面的日志</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">2s</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">logbiz:</span> <span class="string">collector</span></span><br><span class="line">    <span class="attr">logtopic:</span> <span class="string">error-log-collector</span></span><br><span class="line">    <span class="attr">evn:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p>检查配置文件是否正确</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./filebeat -c filebeat.yml -configtest</span><br></pre></td></tr></table></figure>

<p>启动filebeat</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/filebeat &amp;</span><br></pre></td></tr></table></figure>

<h2 id="2-4-日志过滤"><a href="#2-4-日志过滤" class="headerlink" title="2.4 日志过滤"></a>2.4 日志过滤</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210420223154642.png" alt="image-20210420223154642"></p>
<p><a href="https://www.cnblogs.com/huhangfei/p/7605511.html">Logstash使用介绍</a></p>
<h2 id="2-5-日志持久化、可视化"><a href="#2-5-日志持久化、可视化" class="headerlink" title="2.5 日志持久化、可视化"></a>2.5 日志持久化、可视化</h2><ol>
<li><p>ElasticSearch 索引创建周期、命名规范选择</p>
<p>logstash 配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">  <span class="string">kafka</span> &#123;</span><br><span class="line">    <span class="comment">## error-log-服务名称</span></span><br><span class="line">    <span class="string">topics_pattern</span> <span class="string">=&gt;</span> <span class="string">&quot;error-log-.*&quot;</span></span><br><span class="line">    <span class="string">bootstrap_servers</span> <span class="string">=&gt;</span> <span class="string">&quot;192.168.11.51:9092&quot;</span></span><br><span class="line">    <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json</span></span><br><span class="line">    <span class="string">consumer_threads</span> <span class="string">=&gt;</span> <span class="number">4</span></span><br><span class="line">    <span class="string">decorate_events</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># auto_offset_rest =&gt; &quot;latest&quot;</span></span><br><span class="line">    <span class="string">group_id</span> <span class="string">=&gt;</span> <span class="string">&quot;error-log-group&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">  <span class="comment">## 时区转换, 每天创建一个索引</span></span><br><span class="line">  <span class="string">ruby</span> &#123;</span><br><span class="line">    <span class="string">code</span> <span class="string">=&gt;</span> <span class="string">&quot;event.set(&#x27;index_time&#x27;, event.timestamp.time.localtime.strftime(&#x27;%Y.%m.%d&#x27;))&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">if</span> <span class="string">&quot;app-log&quot;</span> <span class="string">in</span> [<span class="string">fields</span>][<span class="string">logtopic</span>] &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">      <span class="comment">## 表达式</span></span><br><span class="line">      <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>,<span class="string">&quot;\[<span class="template-variable">%&#123;NOTSPACE:currentDateTime&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:level&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:thread-id&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:class&#125;</span>\] \[<span class="template-variable">%&#123;DATA:hostName&#125;</span>\] \[<span class="template-variable">%&#123;DATA:ip&#125;</span>\] \[<span class="template-variable">%&#123;DATA:applicationName&#125;</span>\] \[<span class="template-variable">%&#123;DATA:location&#125;</span>\] \[<span class="template-variable">%&#123;DATA:messageInfo&#125;</span>\] ## (\&#x27;\&#x27;|<span class="template-variable">%&#123;QUOTEDSTRING:throwable&#125;</span>)&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">if</span> <span class="string">&quot;error-log&quot;</span> <span class="string">in</span> [<span class="string">fields</span>][<span class="string">logtopic</span>] &#123;</span><br><span class="line">    <span class="string">grok</span> &#123;</span><br><span class="line">      <span class="comment">## 表达式</span></span><br><span class="line">      <span class="string">match</span> <span class="string">=&gt;</span> [<span class="string">&quot;message&quot;</span>,<span class="string">&quot;\[<span class="template-variable">%&#123;NOTSPACE:currentDateTime&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:level&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:thread-id&#125;</span>\] \[<span class="template-variable">%&#123;NOTSPACE:class&#125;</span>\] \[<span class="template-variable">%&#123;DATA:hostName&#125;</span>\] \[<span class="template-variable">%&#123;DATA:ip&#125;</span>\] \[<span class="template-variable">%&#123;DATA:applicationName&#125;</span>\] \[<span class="template-variable">%&#123;DATA:location&#125;</span>\] \[<span class="template-variable">%&#123;DATA:messageInfo&#125;</span>\] ## (\&#x27;\&#x27;|<span class="template-variable">%&#123;QUOTEDSTRING:throwable&#125;</span>)&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">if</span> <span class="string">&quot;app-log&quot;</span> <span class="string">in</span> [<span class="string">fields</span>][<span class="string">logtopic</span>] &#123;</span><br><span class="line">    <span class="comment">## es 插件</span></span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.11.35:9200&quot;</span>]</span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment">## 索引名。+ 号开头的就会自动认为后面是时间格式</span></span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;app-log-<span class="template-variable">%&#123;[fields][logbiz]&#125;</span>-<span class="template-variable">%&#123;index_time&#125;</span>&quot;</span></span><br><span class="line">      <span class="comment"># 是否嗅探集群ip：一般设置 true：http://192.168.11.35:9200/_nodes/http?pretty</span></span><br><span class="line">      <span class="comment"># 通过嗅探机制进行 es 集群负载均衡发日志消息</span></span><br><span class="line">      <span class="string">sniffing</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># logstash 默认自带一个mapping模版.进行模版覆盖</span></span><br><span class="line">      <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">if</span> <span class="string">&quot;error-log&quot;</span> <span class="string">in</span> [<span class="string">fields</span>][<span class="string">logtopic</span>] &#123;</span><br><span class="line">    <span class="comment">## es 插件</span></span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">      <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.11.35:9200&quot;</span>]</span><br><span class="line">      <span class="string">user</span> <span class="string">=&gt;</span> <span class="string">&quot;elastic&quot;</span></span><br><span class="line">      <span class="string">password</span> <span class="string">=&gt;</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment">## 索引名。+ 号开头的就会自动认为后面是时间格式</span></span><br><span class="line">      <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;app-log-<span class="template-variable">%&#123;[fields][logbiz]&#125;</span>-<span class="template-variable">%&#123;index_time&#125;</span>&quot;</span></span><br><span class="line">      <span class="comment"># 是否嗅探集群ip：一般设置 true：http://192.168.11.35:9200/_nodes/http?pretty</span></span><br><span class="line">      <span class="comment"># 通过嗅探机制进行 es 集群负载均衡发日志消息</span></span><br><span class="line">      <span class="string">sniffing</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># logstash 默认自带一个mapping模版.进行模版覆盖</span></span><br><span class="line">      <span class="string">template_overwrite</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Kibana 控制台应用、可视化日志</p>
</li>
<li><p>监控和告警</p>
<ol>
<li><p>Watcher 插件作用介绍基本使用</p>
<p><a href="https://www.cnblogs.com/lhxsoft/p/13089381.html">ElasticSearch(ES)预警服务 Watcher安装以及探究</a></p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 创建一个watcher,比如定义一个trigger 每个10s钟看一下input里的数据</span><br><span class="line">## 创建一个watcher,比如定义一个trigger 每个5s钟看一下input里的数据</span><br><span class="line">PUT _xpack&#x2F;watcher&#x2F;watch&#x2F;error_log_collector_watcher</span><br><span class="line">&#123;</span><br><span class="line">  &quot;trigger&quot;: &#123;</span><br><span class="line">    &quot;schedule&quot;: &#123;</span><br><span class="line">      &quot;interval&quot;: &quot;5s&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;input&quot;: &#123;</span><br><span class="line">    &quot;search&quot;: &#123;</span><br><span class="line">      &quot;request&quot;: &#123;</span><br><span class="line">        &quot;indices&quot;: [&quot;&lt;error_log_collector-&#123;now+8h&#x2F;d&#125;&gt;&quot;],</span><br><span class="line">        &quot;body&quot;: &#123;</span><br><span class="line">          &quot;size&quot;: 0,</span><br><span class="line">          &quot;query&quot;: &#123;</span><br><span class="line">            &quot;bool&quot;: &#123;</span><br><span class="line">              &quot;must&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;&quot;level&quot;: &quot;ERROR&quot;&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              ],</span><br><span class="line">              &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;currentDateTime&quot;: &#123;</span><br><span class="line">                    &quot;gt&quot;: &quot;now-30s&quot; , &quot;lt&quot;: &quot;now&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;condition&quot;: &#123;</span><br><span class="line">    &quot;compare&quot;: &#123;</span><br><span class="line">      &quot;ctx.payload.hits.total&quot;: &#123;</span><br><span class="line">        &quot;gt&quot;: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  &quot;transform&quot;: &#123;</span><br><span class="line">    &quot;search&quot;: &#123;</span><br><span class="line">      &quot;request&quot;: &#123;</span><br><span class="line">        &quot;indices&quot;: [&quot;&lt;error-log-collector-&#123;now+8h&#x2F;d&#125;&gt;&quot;],</span><br><span class="line">        &quot;body&quot;: &#123;</span><br><span class="line">          &quot;size&quot;: 1,</span><br><span class="line">          &quot;query&quot;: &#123;</span><br><span class="line">            &quot;bool&quot;: &#123;</span><br><span class="line">              &quot;must&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;term&quot;: &#123;&quot;level&quot;: &quot;ERROR&quot;&#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              ],</span><br><span class="line">              &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;currentDateTime&quot;: &#123;</span><br><span class="line">                    &quot;gt&quot;: &quot;now-30s&quot; , &quot;lt&quot;: &quot;now&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125; </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;sort&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;currentDateTime&quot;: &#123;</span><br><span class="line">                    &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;actions&quot;: &#123;</span><br><span class="line">    &quot;test_error&quot;: &#123;</span><br><span class="line">      &quot;webhook&quot; : &#123;</span><br><span class="line">        &quot;method&quot; : &quot;POST&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http:&#x2F;&#x2F;192.168.11.31:8001&#x2F;accurateWatch&quot;,</span><br><span class="line">        &quot;body&quot; : &quot;&#123;\&quot;title\&quot;: \&quot;异常错误告警\&quot;, \&quot;applicationName\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.applicationName&#125;&#125;&#123;&#123;&#x2F;ctx.payload.hits.hits&#125;&#125;\&quot;, \&quot;level\&quot;:\&quot;告警级别P1\&quot;, \&quot;body\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.messageInfo&#125;&#125;&#123;&#123;&#x2F;ctx.payload.hits.hits&#125;&#125;\&quot;, \&quot;executionTime\&quot;: \&quot;&#123;&#123;#ctx.payload.hits.hits&#125;&#125;&#123;&#123;_source.currentDateTime&#125;&#125;&#123;&#123;&#x2F;ctx.payload.hits.hits&#125;&#125;\&quot;&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 查看一个watcher</span><br><span class="line"># </span><br><span class="line">GET _xpack&#x2F;watcher&#x2F;watch&#x2F;error_log_collector_watcher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#删除一个watcher</span><br><span class="line">DELETE _xpack&#x2F;watcher&#x2F;watch&#x2F;error_log_collector_watcher</span><br><span class="line"></span><br><span class="line">#执行watcher</span><br><span class="line"># POST _xpack&#x2F;watcher&#x2F;watch&#x2F;error_log_collector_watcher&#x2F;_execute</span><br><span class="line"></span><br><span class="line">#查看执行结果</span><br><span class="line">GET &#x2F;.watcher-history*&#x2F;_search?pretty</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sort&quot; : [</span><br><span class="line">    &#123; &quot;result.execution_time&quot; : &quot;desc&quot; &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;watch_id&quot;: &quot;error_log_collector_watcher&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET error-log-collector-2019.09.18&#x2F;_search?size&#x3D;10</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;level&quot;: &quot;ERROR&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;currentDateTime&quot;: &#123;</span><br><span class="line">            &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ] </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET error-log-collector-2019.09.18&#x2F;_search?size&#x3D;10</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;level&quot;: &quot;ERROR&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;currentDateTime&quot;: &#123;</span><br><span class="line">            &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Watcher API 详解</p>
</li>
<li><p>Watcher 实战应用告警</p>
</li>
</ol>
</li>
</ol>
<h1 id="3-Kafka-数据同步"><a href="#3-Kafka-数据同步" class="headerlink" title="3 Kafka 数据同步"></a>3 Kafka 数据同步</h1><h2 id="3-1-什么是数据同步？"><a href="#3-1-什么是数据同步？" class="headerlink" title="3.1 什么是数据同步？"></a>3.1 什么是数据同步？</h2><blockquote>
<p>转载自<a href="https://www.cnblogs.com/binghe001/p/13445117.html">https://www.cnblogs.com/binghe001/p/13445117.html</a></p>
</blockquote>
<p>在当今互联网行业，尤其是现在分布式、微服务开发环境下，为了提高搜索效率，以及搜索的精准度，会大量使用Redis、Memcached等NoSQL数据库，也会使用大量的Solr、Elasticsearch等全文检索服务。那么，这个时候，就会有一个问题需要我们来思考和解决：那就是数据同步的问题！如何将实时变化的数据库中的数据同步到Redis/Memcached或者Solr/Elasticsearch中呢？</p>
<p>例如，我们在分布式环境下向数据库中不断的写入数据，而我们读数据可能需要从Redis、Memcached或者Elasticsearch、Solr等服务中读取。那么，数据库与各个服务中数据的实时同步问题，成为了我们亟待解决的问题。</p>
<p>试想，由于业务需要，我们引入了Redis、Memcached或者Elasticsearch、Solr等服务。使得我们的应用程序可能会从不同的服务中读取数据，如下图所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110610852.png" alt="20200806110610852"></p>
<p>本质上讲，无论我们引入了何种服务或者中间件，数据最终都是从我们的MySQL数据库中读取出来的。那么，问题来了，如何将MySQL中的数据实时同步到其他的服务或者中间件呢？</p>
<h2 id="3-2-如何去选择数据同步技术？"><a href="#3-2-如何去选择数据同步技术？" class="headerlink" title="3.2 如何去选择数据同步技术？"></a>3.2 如何去选择数据同步技术？</h2><h3 id="3-2-1-在业务代码中同步"><a href="#3-2-1-在业务代码中同步" class="headerlink" title="3.2.1 在业务代码中同步"></a>3.2.1 在业务代码中同步</h3><p>在增加、修改、删除之后，执行操作Solr索引库的逻辑代码。例如下面的代码片段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseResult <span class="title">updateStatus</span><span class="params">(Long[] ids, String status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        goodsService.updateStatus(ids, status);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;status_success&quot;</span>.equals(status))&#123;</span><br><span class="line">            List&lt;TbItem&gt; itemList = goodsService.getItemList(ids, status);</span><br><span class="line">            itemSearchService.importList(itemList);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="keyword">true</span>, <span class="string">&quot;修改状态成功&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="keyword">false</span>, <span class="string">&quot;修改状态失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<p>操作简便。</p>
<p><strong>缺点：</strong></p>
<p>业务耦合度高。</p>
<p>执行效率变低。</p>
<h3 id="3-2-2-定时任务同步"><a href="#3-2-2-定时任务同步" class="headerlink" title="3.2.2 定时任务同步"></a>3.2.2 定时任务同步</h3><p>在数据库中执行完增加、修改、删除操作后，通过定时任务定时的将数据库的数据同步到Solr索引库中。</p>
<p>定时任务技术有：SpringTask，Quartz。</p>
<p><strong>这里执行定时任务时，需要注意的一个技巧是：第一次执行定时任务时，从MySQL数据库中以时间字段进行倒序排列查询相应的数据，并记录当前查询数据的时间字段的最大值，以后每次执行定时任务查询数据的时候，只要按时间字段倒序查询数据表中的时间字段大于上次记录的时间值的数据，并且记录本次任务查询出的时间字段的最大值即可，从而不需要再次查询数据表中的所有数据。</strong></p>
<p><strong>注意：这里所说的时间字段指的是标识数据更新的时间字段，也就是说，使用定时任务同步数据时，为了避免每次执行任务都会进行全表扫描，最好是在数据表中增加一个更新记录的时间字段。</strong></p>
<p><strong>优点：</strong></p>
<p>同步Solr索引库的操作与业务代码完全解耦。</p>
<p><strong>缺点：</strong></p>
<p>数据的实时性并不高。</p>
<h3 id="3-2-3-通过MQ实现同步"><a href="#3-2-3-通过MQ实现同步" class="headerlink" title="3.2.3 通过MQ实现同步"></a>3.2.3 通过MQ实现同步</h3><p>在数据库中执行完增加、修改、删除操作后，向MQ中发送一条消息，此时，同步程序作为MQ中的消费者，从消息队列中获取消息，然后执行同步Solr索引库的逻辑。</p>
<p>我们可以使用下图来简单的标识通过MQ实现数据同步的过程。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110631185.png" alt="img"></p>
<p>我们可以使用如下代码实现这个过程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResponseResult <span class="title">updateStatus</span><span class="params">(Long[] ids, String status)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        goodsService.updateStatus(ids, status);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;status_success&quot;</span>.equals(status))&#123;</span><br><span class="line">            List&lt;TbItem&gt; itemList = goodsService.getItemList(ids, status);</span><br><span class="line">            <span class="keyword">final</span> String jsonString = JSON.toJSONString(itemList);</span><br><span class="line">            jmsTemplate.send(queueSolr, <span class="keyword">new</span> MessageCreator()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> session.createTextMessage(jsonString);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="keyword">true</span>, <span class="string">&quot;修改状态成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult(<span class="keyword">false</span>, <span class="string">&quot;修改状态失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<p>业务代码解耦，并且能够做到准实时。</p>
<p><strong>缺点：</strong></p>
<p>需要在业务代码中加入发送消息到MQ的代码，数据调用接口耦合。</p>
<h3 id="3-2-4-通过Canal实现实时同步"><a href="#3-2-4-通过Canal实现实时同步" class="headerlink" title="3.2.4 通过Canal实现实时同步"></a>3.2.4 通过Canal实现实时同步</h3><p>Canal是阿里巴巴开源的一款数据库日志增量解析组件，通过Canal来解析数据库的日志信息，来检测数据库中表结构和数据的变化，从而更新Solr索引库。</p>
<p>使用Canal可以做到业务代码完全解耦，API完全解耦，可以做到准实时。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210426224407408.png" alt="image-20210426224407408"></p>
<h2 id="3-3-数据同步框架：Canal"><a href="#3-3-数据同步框架：Canal" class="headerlink" title="3.3 数据同步框架：Canal"></a>3.3 数据同步框架：Canal</h2><h3 id="3-3-1-Canal简介"><a href="#3-3-1-Canal简介" class="headerlink" title="3.3.1 Canal简介"></a>3.3.1 Canal简介</h3><p>阿里巴巴MySQL数据库binlog增量订阅与消费组件，基于数据库增量日志解析，提供增量数据订阅与消费，目前主要支持了MySQL。</p>
<p>Canal开源地址：<a href="https://github.com/alibaba/canal%E3%80%82">https://github.com/alibaba/canal。</a></p>
<h3 id="3-3-2-Canal工作原理"><a href="#3-3-2-Canal工作原理" class="headerlink" title="3.3.2 Canal工作原理"></a>3.3.2 Canal工作原理</h3><p><strong>MySQL主从复制的实现</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110656500.png" alt="img"></p>
<p>从上图可以看出，主从复制主要分成三步：</p>
<ul>
<li><p>Master节点将数据的改变记录到二进制日志（binary log）中（这些记录叫做二进制日志事件，binary log events，可以通过show binlog events进行查看）。</p>
</li>
<li><p>Slave节点将Master节点的二进制日志事件（binary log events）拷贝到它的中继日志（relay log）。</p>
</li>
<li><p>Slave节点重做中继日志中的事件将改变反映到自己本身的数据库中。</p>
</li>
</ul>
<h3 id="3-3-3-Canal内部原理"><a href="#3-3-3-Canal内部原理" class="headerlink" title="3.3.3 Canal内部原理"></a>3.3.3 Canal内部原理</h3><p>首先，我们来看下Canal的原理图，如下所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110711964.png" alt="img"></p>
<p>原理大致描述如下：</p>
<ul>
<li>Canal 模拟 MySQL slave 的交互协议，伪装自己为 MySQL Slave ，向 MySQL Master 发送dump 协议</li>
<li>MySQL Master 收到 dump 请求，开始推送 binary log 给 Slave (即 Canal )</li>
<li>Canal 解析 binary log 对象(原始为 byte 流)</li>
</ul>
<p><strong>优点</strong>：实时性、分布式、ACK机制</p>
<p><strong>缺点</strong>：</p>
<ul>
<li>只支持增量同步，不支持全量同步</li>
<li>MySQL -&gt; ES、RDB</li>
<li>一个 instance 只能有一个消费者</li>
<li>单点压力过大</li>
</ul>
<h3 id="3-3-4-Canal内部结构"><a href="#3-3-4-Canal内部结构" class="headerlink" title="3.3.4 Canal内部结构"></a>3.3.4 Canal内部结构</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110725934.png" alt="img"></p>
<p>说明如下：</p>
<ul>
<li>Server：代表一个Canal运行实例，对应一个JVM进程。</li>
<li>Instance：对应一个数据队列（1个Server对应1个或者多个Instance）。</li>
</ul>
<p>接下来，我们再来看下Instance下的子模块，如下所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/2020080611073643.png" alt="img"></p>
<ul>
<li>EventParser：数据源接入，模拟Slave协议和Master节点进行交互，协议解析。</li>
<li>EventSink：EventParser和EventStore的连接器，对数据进行过滤、加工、归并和分发等处理。</li>
<li>EventSore：数据存储。</li>
<li>MetaManager：增量订阅和消费信息管理。</li>
</ul>
<h3 id="3-3-5-Canal-环境准备"><a href="#3-3-5-Canal-环境准备" class="headerlink" title="3.3.5 Canal 环境准备"></a>3.3.5 Canal 环境准备</h3><h4 id="3-3-5-1-设置MySQL远程访问"><a href="#3-3-5-1-设置MySQL远程访问" class="headerlink" title="3.3.5.1 设置MySQL远程访问"></a>3.3.5.1 设置MySQL远程访问</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-5-2-MySQL配置"><a href="#3-3-5-2-MySQL配置" class="headerlink" title="3.3.5.2 MySQL配置"></a>3.3.5.2 MySQL配置</h4><p>注意：这里的MySQL是基于5.7版本进行说明的。</p>
<p>Canal的原理基于MySQL binlog技术，所以，要想使用Canal就要开启MySQL的binlog写入功能，建议配置binlog的模式为row。</p>
<p>可以在MySQL命令行输入如下命令来查看binlog的模式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>执行效果如下所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110746949.png" alt="img"></p>
<p>可以看到，在MySQL中默认的binlog格式为STATEMENT，这里我们需要将STATEMENT修改为ROW。修改/etc/my.cnf文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>在[mysqld]下面新增如下三项配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">log-bin=mysql-bin  <span class="comment">#开启MySQL二进制日志</span></span><br><span class="line">binlog_format=ROW <span class="comment">#将二进制日志的格式设置为ROW</span></span><br><span class="line">server_id=1 <span class="comment">#server_id需要唯一，不能与Canal的slaveId重复</span></span><br></pre></td></tr></table></figure>

<p>修改完my.cnf文件后，需要重启MySQL服务。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>

<p>接下来，我们再次查看binlog模式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;binlog_format&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110759401.png" alt="img"></p>
<p>可以看到，此时，MySQL的binlog模式已经被设置为ROW了。</p>
<h4 id="3-3-5-3-MySQL创建用户授权"><a href="#3-3-5-3-MySQL创建用户授权" class="headerlink" title="3.3.5.3 MySQL创建用户授权"></a>3.3.5.3 MySQL创建用户授权</h4><p>Canal的原理是模式自己为MySQL Slave，所以一定要设置MySQL Slave的相关权限。这里，需要创建一个主从同步的账户，并且赋予这个账户相关的权限。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110810452.png" alt="img"></p>
<h3 id="3-3-6-Canal部署安装"><a href="#3-3-6-Canal部署安装" class="headerlink" title="3.3.6 Canal部署安装"></a>3.3.6 Canal部署安装</h3><h4 id="3-3-6-1-下载Canal"><a href="#3-3-6-1-下载Canal" class="headerlink" title="3.3.6.1 下载Canal"></a>3.3.6.1 下载Canal</h4><p>这里，我们以Canal 1.1.1版本进行说明，小伙伴们可以到链接 <a href="https://github.com/alibaba/canal/releases/tag/canal-1.1.1">https://github.com/alibaba/canal/releases/tag/canal-1.1.1</a> 下载Canal 1.1.1版本。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110822997.png" alt="img"></p>
<h4 id="3-3-6-2-上传解压"><a href="#3-3-6-2-上传解压" class="headerlink" title="3.3.6.2 上传解压"></a>3.3.6.2 上传解压</h4><p>将下载好的Canal安装包，上传到服务器，并执行如下命令进行解压</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/canal</span><br><span class="line">tar -zxvf canal.deployer-1.1.1.tar.gz -C /usr/<span class="built_in">local</span>/canal/</span><br></pre></td></tr></table></figure>

<p>解压后的目录如下所示。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110834262.png" alt="img"></p>
<p>各目录的说明如下：</p>
<ul>
<li>bin：存储可执行脚本。</li>
<li>conf：存放配置文件。</li>
<li>lib：存放其他依赖或者第三方库。</li>
<li>logs：存放的是日志文件。</li>
</ul>
<h4 id="3-3-6-3-修改配置文件"><a href="#3-3-6-3-修改配置文件" class="headerlink" title="3.3.6.3 修改配置文件"></a>3.3.6.3 修改配置文件</h4><p>在Canal的conf目录下有一个canal.properties文件，这个文件中配置的是Canal Server相关的配置，在这个文件中有如下一行配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">canal.destinations=example</span><br></pre></td></tr></table></figure>

<p>这里的example就相当于Canal的一个Instance，可以在这里配置多个Instance，多个Instance之间以逗号分隔即可。同时，这里的example也对应着Canal的conf目录下的一个文件夹。也就是说，Canal中的每个Instance实例都对应着conf目录下的一个子目录。</p>
<p>接下来，我们需要修改Canal的conf目录下的example目录的一个配置文件instance.properties。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim instance.properties</span><br></pre></td></tr></table></figure>

<p>修改如下配置项。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">## canal slaveId,注意：不要与MySQL的server_id重复</span></span><br><span class="line">canal.instance.mysql.slaveId = 1234</span><br><span class="line"></span><br><span class="line"><span class="comment">#position info，需要改成自己的数据库信息</span></span><br><span class="line">canal.instance.master.address = 127.0.0.1:3306</span><br><span class="line">canal.instance.master.journal.name =</span><br><span class="line">canal.instance.master.position =</span><br><span class="line">canal.instance.master.timestamp =</span><br><span class="line"></span><br><span class="line"><span class="comment">#canal.instance.standby.address =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.journal.name =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.position =</span></span><br><span class="line"><span class="comment">#canal.instance.standby.timestamp =</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#username/password，需要改成自己的数据库信息</span></span><br><span class="line">canal.instance.dbUsername = canal</span><br><span class="line">canal.instance.dbPassword = canal</span><br><span class="line">canal.instance.defaultDatabaseName =canaldb</span><br><span class="line">canal.instance.connectionCharset = UTF-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#table regex</span></span><br><span class="line">canal.instance.filter.regex = canaldb\\..*</span><br><span class="line"><span class="comment">#################################################</span></span><br></pre></td></tr></table></figure>

<p>选项含义：</p>
<ul>
<li>canal.instance.mysql.slaveId : mysql集群配置中的serverId概念，需要保证和当前mysql集群中id唯一;</li>
<li>canal.instance.master.address: mysql主库链接地址;</li>
<li>canal.instance.dbUsername : mysql数据库帐号;</li>
<li>canal.instance.dbPassword : mysql数据库密码;</li>
<li>canal.instance.defaultDatabaseName : mysql链接时默认数据库;</li>
<li>canal.instance.connectionCharset : mysql 数据解析编码;</li>
<li>canal.instance.filter.regex : mysql 数据解析关注的表，Perl正则表达式.</li>
</ul>
<h3 id="3-3-7-启动Canal"><a href="#3-3-7-启动Canal" class="headerlink" title="3.3.7 启动Canal"></a>3.3.7 启动Canal</h3><p>配置完Canal后，就可以启动Canal了。进入到Canal的bin目录下，输入如下命令启动Canal。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<h3 id="3-3-8-测试Canal"><a href="#3-3-8-测试Canal" class="headerlink" title="3.3.8 测试Canal"></a>3.3.8 测试Canal</h3><h3 id="3-3-9-导入并修改源码"><a href="#3-3-9-导入并修改源码" class="headerlink" title="3.3.9 导入并修改源码"></a>3.3.9 导入并修改源码</h3><p>这里，我们使用Canal的源码进行测试，下载Canal的源码后，将其导入到IDEA中。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/20200806110843888.png" alt="img"></p>
<p>接下来，我们找到example下的SimpleCanalClientTest类进行测试。这个类的源码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.otter.canal.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.common.utils.AddressUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单机模式的测试例子</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jianghang 2013-4-15 下午04:19:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCanalClientTest</span> <span class="keyword">extends</span> <span class="title">AbstractCanalClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleCanalClientTest</span><span class="params">(String destination)</span></span>&#123;</span><br><span class="line">           <span class="keyword">super</span>(destination);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据ip，直接创建链接，无HA的功能</span></span><br><span class="line">        String destination = <span class="string">&quot;example&quot;</span>;</span><br><span class="line">        String ip = AddressUtils.getHostIp();</span><br><span class="line">        CanalConnector connector = CanalConnectors.newSingleConnector(</span><br><span class="line">            <span class="keyword">new</span> InetSocketAddress(ip, <span class="number">11111</span>),</span><br><span class="line">                destination,</span><br><span class="line">                <span class="string">&quot;canal&quot;</span>,</span><br><span class="line">                <span class="string">&quot;canal&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SimpleCanalClientTest clientTest = <span class="keyword">new</span> SimpleCanalClientTest(destination);</span><br><span class="line">        clientTest.setConnector(connector);</span><br><span class="line">        clientTest.start();</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;## stop the canal client&quot;</span>);</span><br><span class="line">                    clientTest.stop();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;##something goes wrong when stopping canal:&quot;</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;## canal client is down.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，这个类中，使用的destination为example。在这个类中，我们只需要将IP地址修改为Canal Server的IP即可。</p>
<p>具体为：将如下一行代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ip = AddressUtils.getHostIp();</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ip = <span class="string">&quot;192.168.175.100&quot;</span></span><br></pre></td></tr></table></figure>

<p>由于我们在配置Canal时，没有指定用户名和密码，所以，我们还需要将如下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CanalConnector connector = CanalConnectors.newSingleConnector(</span><br><span class="line">    <span class="keyword">new</span> InetSocketAddress(ip, <span class="number">11111</span>),</span><br><span class="line">    destination,</span><br><span class="line">    <span class="string">&quot;canal&quot;</span>,</span><br><span class="line">    <span class="string">&quot;canal&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CanalConnector connector = CanalConnectors.newSingleConnector(</span><br><span class="line">    <span class="keyword">new</span> InetSocketAddress(ip, <span class="number">11111</span>),</span><br><span class="line">    destination,</span><br><span class="line">    <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>修改完成后，运行main方法启动程序。</p>
<h3 id="3-3-10-测试数据变更"><a href="#3-3-10-测试数据变更" class="headerlink" title="3.3.10 测试数据变更"></a>3.3.10 测试数据变更</h3><p>接下来，在MySQL中创建一个canaldb数据库。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database canaldb;</span><br></pre></td></tr></table></figure>

<p>此时会在IDEA的命令行输出相关的日志信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">****************************************************</span><br><span class="line">* Batch Id: [7] ,count : [3] , memsize : [149] , Time : 2020-08-05 23:25:35</span><br><span class="line">* Start : [mysql-bin.000007:6180:1540286735000(2020-08-05 23:25:35)] </span><br><span class="line">* End : [mysql-bin.000007:6356:1540286735000(2020-08-05 23:25:35)] </span><br><span class="line">****************************************************</span><br></pre></td></tr></table></figure>

<p>接下来，我在canaldb数据库中创建数据表，并对数据表中的数据进行增删改查，程序输出的日志信息如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在mysql进行数据变更后，这里会显示mysql的bin日志。</span></span><br><span class="line">****************************************************</span><br><span class="line">* Batch Id: [7] ,count : [3] , memsize : [149] , Time : 2020-08-05 23:25:35</span><br><span class="line">* Start : [mysql-bin.000007:6180:1540286735000(2020-08-05 23:25:35)] </span><br><span class="line">* End : [mysql-bin.000007:6356:1540286735000(2020-08-05 23:25:35)] </span><br><span class="line">****************************************************</span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000007:6180] , executeTime : 1540286735000(2020-08-05 23:25:35) , gtid : () , delay : 393ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 43</span><br><span class="line">----------------&gt; binlog[mysql-bin.000007:6311] , name[canal,canal_table] , eventType : DELETE , executeTime : 1540286735000(2020-08-05 23:25:35) , gtid : () , delay : 393 ms</span><br><span class="line">id : 8    <span class="built_in">type</span>=int(10) unsigned</span><br><span class="line">name : 512    <span class="built_in">type</span>=varchar(255)</span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 249</span><br><span class="line">================&gt; binlog[mysql-bin.000007:6356] , executeTime : 1540286735000(2020-08-05 23:25:35) , gtid : () , delay : 394ms</span><br><span class="line"></span><br><span class="line">****************************************************</span><br><span class="line">* Batch Id: [8] ,count : [3] , memsize : [149] , Time : 2020-08-05 23:25:35</span><br><span class="line">* Start : [mysql-bin.000007:6387:1540286869000(2020-08-05 23:25:49)] </span><br><span class="line">* End : [mysql-bin.000007:6563:1540286869000(2020-08-05 23:25:49)] </span><br><span class="line">****************************************************</span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000007:6387] , executeTime : 1540286869000(2020-08-05 23:25:49) , gtid : () , delay : 976ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 43</span><br><span class="line">----------------&gt; binlog[mysql-bin.000007:6518] , name[canal,canal_table] , eventType : INSERT , executeTime : 1540286869000(2020-08-05 23:25:49) , gtid : () , delay : 976 ms</span><br><span class="line">id : 21    <span class="built_in">type</span>=int(10) unsigned    update=<span class="literal">true</span></span><br><span class="line">name : aaa    <span class="built_in">type</span>=varchar(255)    update=<span class="literal">true</span></span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 250</span><br><span class="line">================&gt; binlog[mysql-bin.000007:6563] , executeTime : 1540286869000(2020-08-05 23:25:49) , gtid : () , delay : 977ms</span><br><span class="line"></span><br><span class="line">****************************************************</span><br><span class="line">* Batch Id: [9] ,count : [3] , memsize : [161] , Time : 2020-08-05 23:26:22</span><br><span class="line">* Start : [mysql-bin.000007:6594:1540286902000(2020-08-05 23:26:22)] </span><br><span class="line">* End : [mysql-bin.000007:6782:1540286902000(2020-08-05 23:26:22)] </span><br><span class="line">****************************************************</span><br><span class="line"></span><br><span class="line">================&gt; binlog[mysql-bin.000007:6594] , executeTime : 1540286902000(2020-08-05 23:26:22) , gtid : () , delay : 712ms</span><br><span class="line"> BEGIN ----&gt; Thread id: 43</span><br><span class="line">----------------&gt; binlog[mysql-bin.000007:6725] , name[canal,canal_table] , eventType : UPDATE , executeTime : 1540286902000(2020-08-05 23:26:22) , gtid : () , delay : 712 ms</span><br><span class="line">id : 21    <span class="built_in">type</span>=int(10) unsigned</span><br><span class="line">name : aaac    <span class="built_in">type</span>=varchar(255)    update=<span class="literal">true</span></span><br><span class="line">----------------</span><br><span class="line"> END ----&gt; transaction id: 252</span><br><span class="line">================&gt; binlog[mysql-bin.000007:6782] , executeTime : 1540286902000(2020-08-05 23:26:22) , gtid : () , delay : 713ms</span><br></pre></td></tr></table></figure>

<h3 id="3-3-11-数据同步实现"><a href="#3-3-11-数据同步实现" class="headerlink" title="3.3.11 数据同步实现"></a>3.3.11 数据同步实现</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210426230029824.png" alt="image-20210426230029824"></p>
<h4 id="3-3-11-1-需求"><a href="#3-3-11-1-需求" class="headerlink" title="3.3.11.1 需求"></a>3.3.11.1 需求</h4><p>将数据库数据的变化, 通过canal解析binlog日志, 实时更新到solr(ES 也可以)的索引库中。</p>
<h4 id="3-3-11-2-具体实现"><a href="#3-3-11-2-具体实现" class="headerlink" title="3.3.11.2 具体实现"></a>3.3.11.2 具体实现</h4><p><strong>创建工程</strong></p>
<p>创建Maven工程mykit-canal-demo，并在pom.xml文件中添加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.protocol<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.solr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>solr-solrj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>创建log4j配置文件</strong></p>
<p>在工程的src/main/resources目录下创建log4j.properties文件，内容如下所示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">log4j.rootCategory=debug, CONSOLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="comment"># log4j.appender.LOGFILE=org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="comment"># log4j.appender.LOGFILE.File=d:\axis.log</span></span><br><span class="line"><span class="comment"># log4j.appender.LOGFILE.Append=true</span></span><br><span class="line"><span class="comment"># log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># log4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure>

<p><strong>创建实体类</strong></p>
<p>在io.mykit.canal.demo.bean包下创建一个Book实体类，用于测试Canal的数据传输，如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.bean;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.beans.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6350345408771427834L</span>;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;book_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;book_author&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;book_publishtime&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date publishtime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;book_price&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(&quot;book_publishgroup&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String publishgroup;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPublishtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publishtime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishtime</span><span class="params">(Date publishtime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publishtime = publishtime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPublishgroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publishgroup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishgroup</span><span class="params">(String publishgroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publishgroup = publishgroup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, publishtime=&quot;</span> + publishtime +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&quot;, publishgroup=&#x27;&quot;</span> + publishgroup + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，我们在Book实体类中，使用Solr的注解@Field定义了实体类字段与Solr域之间的关系。</p>
<p><strong>各种工具类的实现</strong></p>
<p>接下来，我们就在io.mykit.canal.demo.utils包下创建各种工具类。</p>
<ul>
<li>BinlogValue</li>
</ul>
<p>用于存储binlog分析的每行每列的value值，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.utils;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ClassName: BinlogValue &lt;br/&gt; </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * binlog分析的每行每列的value值；&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 新增数据：beforeValue 和 value 均为现有值；&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 修改数据：beforeValue是修改前的值；value为修改后的值；&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 删除数据：beforeValue和value均是删除前的值； 这个比较特殊主要是为了删除数据时方便获取删除前的值&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinlogValue</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6350345408773943086L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String value;</span><br><span class="line">	<span class="keyword">private</span> String beforeValue;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * binlog分析的每行每列的value值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 新增数据： value：为现有值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 修改数据：value为修改后的值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 删除数据：value是删除前的值； 这个比较特殊主要是为了删除数据时方便获取删除前的值&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.value = value;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * binlog分析的每行每列的beforeValue值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 新增数据：beforeValue为现有值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 修改数据：beforeValue是修改前的值；&lt;br&gt;</span></span><br><span class="line"><span class="comment">	 * 删除数据：beforeValue为删除前的值； &lt;br&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBeforeValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> beforeValue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeforeValue</span><span class="params">(String beforeValue)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.beforeValue = beforeValue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>CanalDataParser</li>
</ul>
<p>用于解析数据，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.SystemUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.Column;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.Entry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.EntryType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.EventType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.RowChange;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.RowData;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.TransactionBegin;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.TransactionEnd;</span><br><span class="line"><span class="keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanalDataParser</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE_FORMAT 	= <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String yyyyMMddHHmmss = <span class="string">&quot;yyyyMMddHHmmss&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String yyyyMMdd 		= <span class="string">&quot;yyyyMMdd&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEP 			= SystemUtils.LINE_SEPARATOR;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> String  context_format     = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> String  row_format         = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> String  transaction_format = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> String row_log = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CanalDataParser.class);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">        context_format = SEP + <span class="string">&quot;****************************************************&quot;</span> + SEP;</span><br><span class="line">        context_format += <span class="string">&quot;* Batch Id: [&#123;&#125;] ,count : [&#123;&#125;] , memsize : [&#123;&#125;] , Time : &#123;&#125;&quot;</span> + SEP;</span><br><span class="line">        context_format += <span class="string">&quot;* Start : [&#123;&#125;] &quot;</span> + SEP;</span><br><span class="line">        context_format += <span class="string">&quot;* End : [&#123;&#125;] &quot;</span> + SEP;</span><br><span class="line">        context_format += <span class="string">&quot;****************************************************&quot;</span> + SEP;</span><br><span class="line"></span><br><span class="line">        row_format = SEP</span><br><span class="line">                     + <span class="string">&quot;----------------&gt; binlog[&#123;&#125;:&#123;&#125;] , name[&#123;&#125;,&#123;&#125;] , eventType : &#123;&#125; , executeTime : &#123;&#125; , delay : &#123;&#125;ms&quot;</span></span><br><span class="line">                     + SEP;</span><br><span class="line"></span><br><span class="line">        transaction_format = SEP + <span class="string">&quot;================&gt; binlog[&#123;&#125;:&#123;&#125;] , executeTime : &#123;&#125; , delay : &#123;&#125;ms&quot;</span> + SEP;</span><br><span class="line"></span><br><span class="line">        row_log = <span class="string">&quot;schema[&#123;&#125;], table[&#123;&#125;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;InnerBinlogEntry&gt; <span class="title">convertToInnerBinlogEntry</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">		List&lt;InnerBinlogEntry&gt; innerBinlogEntryList = <span class="keyword">new</span> ArrayList&lt;InnerBinlogEntry&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(message == <span class="keyword">null</span>) &#123;</span><br><span class="line">			logger.info(<span class="string">&quot;接收到空的 message; 忽略&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> innerBinlogEntryList;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> batchId = message.getId();</span><br><span class="line">        <span class="keyword">int</span> size = message.getEntries().size();</span><br><span class="line">        <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">        	logger.info(<span class="string">&quot;接收到空的message[size=&quot;</span> + size + <span class="string">&quot;]; 忽略&quot;</span>);</span><br><span class="line">        	<span class="keyword">return</span> innerBinlogEntryList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printLog(message, batchId, size);</span><br><span class="line">        List&lt;Entry&gt; entrys = message.getEntries();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出日志</span></span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entrys) &#123;</span><br><span class="line">        	<span class="keyword">long</span> executeTime = entry.getHeader().getExecuteTime();</span><br><span class="line">            <span class="keyword">long</span> delayTime = <span class="keyword">new</span> Date().getTime() - executeTime;</span><br><span class="line">        	</span><br><span class="line">            <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN) &#123;</span><br><span class="line">                    TransactionBegin begin = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        begin = TransactionBegin.parseFrom(entry.getStoreValue());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;parse event has an error , data:&quot;</span> + entry.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 打印事务头信息，执行的线程id，事务耗时</span></span><br><span class="line">                    logger.info(<span class="string">&quot;BEGIN ----&gt; Thread id: &#123;&#125;&quot;</span>,  begin.getThreadId());</span><br><span class="line">                    logger.info(transaction_format, <span class="keyword">new</span> Object[] &#123;entry.getHeader().getLogfileName(),</span><br><span class="line">                                String.valueOf(entry.getHeader().getLogfileOffset()), String.valueOf(entry.getHeader().getExecuteTime()), String.valueOf(delayTime) &#125;);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;</span><br><span class="line">                    TransactionEnd end = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        end = TransactionEnd.parseFrom(entry.getStoreValue());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;parse event has an error , data:&quot;</span> + entry.toString(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 打印事务提交信息，事务id</span></span><br><span class="line">                    logger.info(<span class="string">&quot;END ----&gt; transaction id: &#123;&#125;&quot;</span>, end.getTransactionId());</span><br><span class="line">                    logger.info(transaction_format,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;entry.getHeader().getLogfileName(),  String.valueOf(entry.getHeader().getLogfileOffset()),</span><br><span class="line">                                String.valueOf(entry.getHeader().getExecuteTime()), String.valueOf(delayTime) &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析结果</span></span><br><span class="line">            <span class="keyword">if</span> (entry.getEntryType() == EntryType.ROWDATA) &#123;</span><br><span class="line">                RowChange rowChage = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rowChage = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;parse event has an error , data:&quot;</span> + entry.toString(), e);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                EventType eventType = rowChage.getEventType();</span><br><span class="line"></span><br><span class="line">                logger.info(row_format, <span class="keyword">new</span> Object[] &#123; entry.getHeader().getLogfileName(),</span><br><span class="line">                            String.valueOf(entry.getHeader().getLogfileOffset()), entry.getHeader().getSchemaName(),</span><br><span class="line">                            entry.getHeader().getTableName(), eventType, String.valueOf(entry.getHeader().getExecuteTime()), String.valueOf(delayTime) &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//组装数据结果</span></span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.INSERT || eventType == EventType.DELETE || eventType == EventType.UPDATE) &#123;</span><br><span class="line">                	String schemaName = entry.getHeader().getSchemaName();</span><br><span class="line">                	String tableName = entry.getHeader().getTableName();</span><br><span class="line">                	List&lt;Map&lt;String, BinlogValue&gt;&gt; rows = parseEntry(entry);</span><br><span class="line"></span><br><span class="line">                	InnerBinlogEntry innerBinlogEntry = <span class="keyword">new</span> InnerBinlogEntry();</span><br><span class="line">                	innerBinlogEntry.setEntry(entry);</span><br><span class="line">                	innerBinlogEntry.setEventType(eventType);</span><br><span class="line">                	innerBinlogEntry.setSchemaName(schemaName);</span><br><span class="line">                	innerBinlogEntry.setTableName(tableName.toLowerCase());</span><br><span class="line">                	innerBinlogEntry.setRows(rows);</span><br><span class="line"></span><br><span class="line">                	innerBinlogEntryList.add(innerBinlogEntry);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                	logger.info(<span class="string">&quot; 存在 INSERT INSERT UPDATE 操作之外的SQL [&quot;</span> + eventType.toString() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">return</span> innerBinlogEntryList;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> List&lt;Map&lt;String, BinlogValue&gt;&gt; parseEntry(Entry entry) &#123;</span><br><span class="line">		List&lt;Map&lt;String, BinlogValue&gt;&gt; rows = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, BinlogValue&gt;&gt;();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String schemaName = entry.getHeader().getSchemaName();</span><br><span class="line">        	String tableName = entry.getHeader().getTableName();</span><br><span class="line">			RowChange rowChage = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">			EventType eventType = rowChage.getEventType();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 处理每个Entry中的每行数据</span></span><br><span class="line">			<span class="keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;</span><br><span class="line">				StringBuilder rowlog = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;rowlog schema[&quot;</span> + schemaName + <span class="string">&quot;], table[&quot;</span> + tableName + <span class="string">&quot;], event[&quot;</span> + eventType.toString() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">				</span><br><span class="line">				Map&lt;String, BinlogValue&gt; row = <span class="keyword">new</span> HashMap&lt;String, BinlogValue&gt;();</span><br><span class="line">				List&lt;Column&gt; beforeColumns = rowData.getBeforeColumnsList();</span><br><span class="line">				List&lt;Column&gt; afterColumns = rowData.getAfterColumnsList();</span><br><span class="line">				beforeColumns = rowData.getBeforeColumnsList();</span><br><span class="line">			    <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;<span class="comment">//delete</span></span><br><span class="line">			    	<span class="keyword">for</span>(Column column : beforeColumns) &#123;</span><br><span class="line">			    		BinlogValue binlogValue = <span class="keyword">new</span> BinlogValue();</span><br><span class="line">			    		binlogValue.setValue(column.getValue());</span><br><span class="line">			    		binlogValue.setBeforeValue(column.getValue());</span><br><span class="line">				    	row.put(column.getName(), binlogValue);</span><br><span class="line">				    &#125;</span><br><span class="line">			    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(eventType == EventType.UPDATE) &#123;<span class="comment">//update</span></span><br><span class="line">			    	<span class="keyword">for</span>(Column column : beforeColumns) &#123;</span><br><span class="line">			    		BinlogValue binlogValue = <span class="keyword">new</span> BinlogValue();</span><br><span class="line">			    		binlogValue.setBeforeValue(column.getValue());</span><br><span class="line">				    	row.put(column.getName(), binlogValue);</span><br><span class="line">				    &#125;</span><br><span class="line">			    	<span class="keyword">for</span>(Column column : afterColumns) &#123;</span><br><span class="line">			    		BinlogValue binlogValue = row.get(column.getName());</span><br><span class="line">			    		<span class="keyword">if</span>(binlogValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">			    			binlogValue = <span class="keyword">new</span> BinlogValue();</span><br><span class="line">			    		&#125;</span><br><span class="line">			    		binlogValue.setValue(column.getValue());</span><br><span class="line">				    	row.put(column.getName(), binlogValue);</span><br><span class="line">				    &#125;</span><br><span class="line">			    &#125; <span class="keyword">else</span> &#123; <span class="comment">// insert</span></span><br><span class="line">			    	<span class="keyword">for</span>(Column column : afterColumns) &#123;</span><br><span class="line">			    		BinlogValue binlogValue = <span class="keyword">new</span> BinlogValue();</span><br><span class="line">			    		binlogValue.setValue(column.getValue());</span><br><span class="line">			    		binlogValue.setBeforeValue(column.getValue());</span><br><span class="line">				    	row.put(column.getName(), binlogValue);</span><br><span class="line">				    &#125;</span><br><span class="line">			    &#125; </span><br><span class="line">			   </span><br><span class="line">			    rows.add(row);</span><br><span class="line">			    String rowjson = JacksonUtil.obj2str(row);</span><br><span class="line">			    </span><br><span class="line">			    logger.info(<span class="string">&quot;########################### Data Parse Result ###########################&quot;</span>);</span><br><span class="line">			    logger.info(rowlog + <span class="string">&quot; , &quot;</span> + rowjson);</span><br><span class="line">			    logger.info(<span class="string">&quot;########################### Data Parse Result ###########################&quot;</span>);</span><br><span class="line">			    logger.info(<span class="string">&quot;&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InvalidProtocolBufferException e) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;parseEntry has an error , data:&quot;</span> + entry.toString(), e);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">(Message message, <span class="keyword">long</span> batchId, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> memsize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : message.getEntries()) &#123;</span><br><span class="line">            memsize += entry.getHeader().getEventLength();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String startPosition = <span class="keyword">null</span>;</span><br><span class="line">        String endPosition = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(message.getEntries())) &#123;</span><br><span class="line">            startPosition = buildPositionForDump(message.getEntries().get(<span class="number">0</span>));</span><br><span class="line">            endPosition = buildPositionForDump(message.getEntries().get(message.getEntries().size() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(DATE_FORMAT);</span><br><span class="line">        logger.info(context_format, <span class="keyword">new</span> Object[] &#123;batchId, size, memsize, format.format(<span class="keyword">new</span> Date()), startPosition, endPosition &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">buildPositionForDump</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = entry.getHeader().getExecuteTime();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(time);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(DATE_FORMAT);</span><br><span class="line">        <span class="keyword">return</span> entry.getHeader().getLogfileName() + <span class="string">&quot;:&quot;</span> + entry.getHeader().getLogfileOffset() + <span class="string">&quot;:&quot;</span> + entry.getHeader().getExecuteTime() + <span class="string">&quot;(&quot;</span> + format.format(date) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>DateUtils</li>
</ul>
<p>时间工具类，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_PATTERN = <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(FORMAT_PATTERN);</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parseDate</span><span class="params">(String datetime)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(datetime != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(datetime))&#123;</span><br><span class="line">			<span class="keyword">return</span> sdf.parse(datetime);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date datetime)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(datetime != <span class="keyword">null</span> )&#123;</span><br><span class="line">			<span class="keyword">return</span> sdf.format(datetime);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">formatStringDateToLong</span><span class="params">(String datetime)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(datetime != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(datetime))&#123;</span><br><span class="line">			Date d =  sdf.parse(datetime);</span><br><span class="line">			<span class="keyword">return</span> d.getTime();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">formatDateToLong</span><span class="params">(Date datetime)</span> <span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(datetime != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> datetime.getTime();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>InnerBinlogEntry</li>
</ul>
<p>Binlog实体类，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.Entry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry.EventType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerBinlogEntry</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * canal原生的Entry</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Entry entry;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该Entry归属于的表名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String tableName;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该Entry归属数据库名</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String schemaName;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 该Entry本次的操作类型，对应canal原生的枚举；EventType.INSERT; EventType.UPDATE; EventType.DELETE;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> EventType eventType;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> List&lt;Map&lt;String, BinlogValue&gt;&gt; rows = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, BinlogValue&gt;&gt;();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Entry <span class="title">getEntry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> entry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEntry</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.entry = entry;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTableName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> tableName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTableName</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tableName = tableName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> EventType <span class="title">getEventType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> eventType;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEventType</span><span class="params">(EventType eventType)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.eventType = eventType;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getSchemaName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> schemaName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSchemaName</span><span class="params">(String schemaName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.schemaName = schemaName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> List&lt;Map&lt;String, BinlogValue&gt;&gt; getRows() &#123;</span><br><span class="line">		<span class="keyword">return</span> rows;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRows</span><span class="params">(List&lt;Map&lt;String, BinlogValue&gt;&gt; rows)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.rows = rows;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JacksonUtil</li>
</ul>
<p>Json工具类，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonGenerationException;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.JsonParseException;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.JsonMappingException;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.jackson.map.ObjectMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">obj2str</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        String json = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            json = mapper.writeValueAsString(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonGenerationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">str2obj</span><span class="params">(String content, Class&lt;T&gt; valueType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.readValue(content, valueType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>同步程序的实现</strong></p>
<p>准备好实体类和工具类后，我们就可以编写同步程序来实现MySQL数据库中的数据实时同步到Solr索引库了，我们在io.mykit.canal.demo.main包中常见MykitCanalDemoSync类，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.mykit.canal.demo.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.mykit.canal.demo.bean.Book;</span><br><span class="line"><span class="keyword">import</span> io.mykit.canal.demo.utils.BinlogValue;</span><br><span class="line"><span class="keyword">import</span> io.mykit.canal.demo.utils.CanalDataParser;</span><br><span class="line"><span class="keyword">import</span> io.mykit.canal.demo.utils.DateUtils;</span><br><span class="line"><span class="keyword">import</span> io.mykit.canal.demo.utils.InnerBinlogEntry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnector;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.client.CanalConnectors;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.CanalEntry;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.otter.canal.protocol.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.SolrServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.solr.client.solrj.impl.HttpSolrServer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDataBootStart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SyncDataBootStart.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String hostname = <span class="string">&quot;192.168.175.100&quot;</span>;</span><br><span class="line">        Integer port = <span class="number">11111</span>;</span><br><span class="line">        String destination = <span class="string">&quot;example&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取CanalServer 连接</span></span><br><span class="line">        CanalConnector canalConnector = CanalConnectors.newSingleConnector(<span class="keyword">new</span> InetSocketAddress(hostname, port), destination, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接CanalServer</span></span><br><span class="line">        canalConnector.connect();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅Destination</span></span><br><span class="line">        canalConnector.subscribe();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//轮询拉取数据</span></span><br><span class="line">        Integer batchSize = <span class="number">5</span>*<span class="number">1024</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Message message = canalConnector.getWithoutAck(batchSize);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> messageId = message.getId();</span><br><span class="line">            <span class="keyword">int</span> size = message.getEntries().size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(messageId == -<span class="number">1</span> || size == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//进行数据同步</span></span><br><span class="line">                <span class="comment">//1. 解析Message对象</span></span><br><span class="line">                List&lt;InnerBinlogEntry&gt; innerBinlogEntries = CanalDataParser.convertToInnerBinlogEntry(message);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2. 将解析后的数据信息 同步到Solr的索引库中.</span></span><br><span class="line">                syncDataToSolr(innerBinlogEntries);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//提交确认</span></span><br><span class="line">            canalConnector.ack(messageId);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">syncDataToSolr</span><span class="params">(List&lt;InnerBinlogEntry&gt; innerBinlogEntries)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取solr的连接</span></span><br><span class="line">        SolrServer solrServer = <span class="keyword">new</span> HttpSolrServer(<span class="string">&quot;http://192.168.175.101:8080/solr&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数据集合 , 根据数据集合中的数据信息, 来决定执行增加, 修改 , 删除操作 .</span></span><br><span class="line">        <span class="keyword">if</span>(innerBinlogEntries != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (InnerBinlogEntry innerBinlogEntry : innerBinlogEntries) &#123;</span><br><span class="line"></span><br><span class="line">                CanalEntry.EventType eventType = innerBinlogEntry.getEventType();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果是Insert, update , 则需要同步数据到 solr 索引库</span></span><br><span class="line">                <span class="keyword">if</span>(eventType == CanalEntry.EventType.INSERT || eventType == CanalEntry.EventType.UPDATE)&#123;</span><br><span class="line">                    List&lt;Map&lt;String, BinlogValue&gt;&gt; rows = innerBinlogEntry.getRows();</span><br><span class="line">                    <span class="keyword">if</span>(rows != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (Map&lt;String, BinlogValue&gt; row : rows) &#123;</span><br><span class="line">                            BinlogValue id = row.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                            BinlogValue name = row.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                            BinlogValue author = row.get(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">                            BinlogValue publishtime = row.get(<span class="string">&quot;publishtime&quot;</span>);</span><br><span class="line">                            BinlogValue price = row.get(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">                            BinlogValue publishgroup = row.get(<span class="string">&quot;publishgroup&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                            book.setId(Integer.parseInt(id.getValue()));</span><br><span class="line">                            book.setName(name.getValue());</span><br><span class="line">                            book.setAuthor(author.getValue());</span><br><span class="line">                            book.setPrice(Double.parseDouble(price.getValue()));</span><br><span class="line">                            book.setPublishgroup(publishgroup.getValue());</span><br><span class="line">                            book.setPublishtime(DateUtils.parseDate(publishtime.getValue()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="comment">//导入数据到solr索引库</span></span><br><span class="line">                            solrServer.addBean(book);</span><br><span class="line">                            solrServer.commit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(eventType == CanalEntry.EventType.DELETE)&#123;</span><br><span class="line">                    <span class="comment">//如果是Delete操作, 则需要删除solr索引库中的数据 .</span></span><br><span class="line">                    List&lt;Map&lt;String, BinlogValue&gt;&gt; rows = innerBinlogEntry.getRows();</span><br><span class="line">                    <span class="keyword">if</span>(rows != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (Map&lt;String, BinlogValue&gt; row : rows) &#123;</span><br><span class="line">                            BinlogValue id = row.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//根据ID删除solr的索引库</span></span><br><span class="line">                            solrServer.deleteById(id.getValue());</span><br><span class="line">                            solrServer.commit();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>接下来，启动SyncDataBootStart类的main方法，监听Canal Server，而Canal Server监听MySQL binlog的日志变化，一旦MySQL的binlog日志发生变化，则SyncDataBootStart会立刻收到变更信息，并将变更信息解析成Book对象实时更新到Solr库中。如果在MySQL数据库中删除了数据，则也会实时删除Solr库中的数据。</p>
<h1 id="4-参考资源"><a href="#4-参考资源" class="headerlink" title="4 参考资源"></a>4 参考资源</h1><p><a href="https://blog.csdn.net/u013256816/article/details/71091774">kafka数据可靠性深度解读</a></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived原理和配置详解</title>
    <url>/2021/07/08/Keepalived%E5%8E%9F%E7%90%86%E5%92%8C%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="1-Keepalived-简介"><a href="#1-Keepalived-简介" class="headerlink" title="1 Keepalived 简介"></a>1 Keepalived 简介</h1><p>Keepalived 软件起初是专为 LVS 负载均衡软件设计的，用来管理并监控 LVS 集群系统中各个服务节点的状态，后来又加入了可以实现高可用的 VRRP 功能。因此，Keepalived除了能够管理 LVS 软件外，还可以作为其他服务（例如：Nginx、Haproxy、MySQL等）的高可用解决方案软件。</p>
<p>Keepalived 软件主要通过 VRRP 协议实现高可用功能的，VRRP 是 Virtual Router Redundancy Protocol （虚拟路由器冗余协议）的缩写，VRRP 出现的目的就是为了解决动态路由单点故障问题的，它能够保证当个别节点宕机时，整个网络可以不间断的运行。所以，Keepalived 一方面具有配置管理 LVS 的功能，同时还具有对LVS 下面节点进行健康检查的功能，另一方面也可以实现系统网络服务的高可用功能。</p>
<p>Keepalived  软件的官方站点： <a href="http://www.keepalived.org/">http://www.keepalived.org</a></p>
<h1 id="2-Keepalived-服务的三个重要功能"><a href="#2-Keepalived-服务的三个重要功能" class="headerlink" title="2 Keepalived 服务的三个重要功能"></a>2 Keepalived 服务的三个重要功能</h1><h2 id="2-1-管理-LVS-负载均衡软件"><a href="#2-1-管理-LVS-负载均衡软件" class="headerlink" title="2.1 管理 LVS 负载均衡软件"></a>2.1 管理 LVS 负载均衡软件</h2><p>早期的 LVS 软件，需要通过命令行或脚本实现管理，并且没有针对 LVS 节点的健康检查功能。为了解决 LVS 的这些使用不便的问题，Keepalived就诞生了，可以说，Keepalived软件起初是专为了解决 LVS 的问题而诞生的。因此，Keepalived和LVS的感情很深，它们的关系如同夫妻一样，可以紧密的结合，愉快的工作。Keepalived 可以通过读取自身的配置文件实现通过更底层的接口直接管理 LVS 的配置以及控制服务的启动、停止等功能，这使得 LVS 的应用就更加简单方便了。</p>
<h2 id="2-2-实现对-LVS-集群节点健康检查功能（healthcheck）"><a href="#2-2-实现对-LVS-集群节点健康检查功能（healthcheck）" class="headerlink" title="2.2 实现对 LVS 集群节点健康检查功能（healthcheck）"></a>2.2 实现对 LVS 集群节点健康检查功能（healthcheck）</h2><p>Keepalived 可以通过在自身的keepalived.conf文件里配置 LVS 的节点 IP 和相关参数实现对 LVS 的直接管理；除此之外，当 LVS 集群中的某一个甚至是几个节点服务器同时发生故障无法提供服务时，Keepalived 服务会自动将失效的节点服务器从 LVS 的正常转发队列中清楚出去，并转换到别的正常节点服务器上，从而保证最终用户的访问不受影响；当故障的节点服务器被修复后，Keepalived 服务又会自动地把它们加入到正常转发队列中，对客户提供服务。</p>
<h2 id="2-3作为系统网络服务的高可用功能（failover）"><a href="#2-3作为系统网络服务的高可用功能（failover）" class="headerlink" title="2.3作为系统网络服务的高可用功能（failover）"></a>2.3作为系统网络服务的高可用功能（failover）</h2><p>Keepalived 可以实现任意两台主机之间，例如 Master 和 Backup 主机之间的故障转移和自动切换，这个主机可以是普通的不能停机的业务服务器，也可以是 LVS 负载均衡、Nginx 反向代理这样的服务器。</p>
<p>Keepalived 高可用功能实现的原理为：两台主机同时安装好 keepalived 软件并启动服务，开始正常工作时，由角色为 Master 的主机获得所有资源并对用户提供服务，角色 Backup 的主机作为 Master 主机的热备；当角色为 Master 的主机失效或出现故障时，角色为 Backup 的主机将自动接管 Master 主机的所有工作，包括接管 VIP 资源及相应资源服务；而当角色为 Master 的主机故障修复后，又会自动接管回它原来处理的工作，角色为 Backup 的主机则同时释放 Master 主机失效它接管的工作，此时，两台主机将恢复到最初启动时各自的原始角色及工作状态。</p>
<h1 id="3-运行原理"><a href="#3-运行原理" class="headerlink" title="3 运行原理"></a>3 运行原理</h1><p>Keepalived 高可用服务对之间的故障切换转移，是通过 VRRP 协议（虚拟路由冗余协议）来实现的。</p>
<p>在 Keepalived 服务正常工作时，主 Master 节点会不断地向备节点发送（多播的方式）心跳消息，用以告诉备 Backup 节点自己还活着，当主 Master 节点发生故障时，就无法发送心跳消息了，备节点也就因此无法继续检测到来自Master 节点的心跳了，进而调用自身的接管程序，接管主 Master 节点的 IP 资源及服务。而当主 Master 节点恢复时，备 Backup 节点又会释放主节点故障时自身接管的 IP 资源及服务，恢复到原来备用角色。</p>
<h1 id="4-选举策略"><a href="#4-选举策略" class="headerlink" title="4 选举策略"></a>4 选举策略</h1><p>选举策略是根据 VRRP 协议，完全按照权重大小，权重最大（0～255）的是 MASTER 机器，下面几种情况会触发选举</p>
<ol>
<li>keepalived 启动的时候</li>
<li>master 服务器出现故障（断网，重启，或者本机器上的 keepalived crash 等，而本机器上其他应用程序 crash 不算）</li>
<li>有新的备份服务器加入且权重最大</li>
</ol>
<h1 id="5-VRRP协议"><a href="#5-VRRP协议" class="headerlink" title="5 VRRP协议"></a>5 VRRP协议</h1><p>VRRP 协议，全称 Virtual Router Redundancy Protocol，中文名为虚拟路由冗余协议，VRRP 的出现就是为了解决静态路由的单点故障问题，VRRP 协议是通过一种竞选机制来将路由的任务交给某台 VRRP 路由器的。VRRP 协议早期是用来解决交换机、路由器等设备单点故障的。</p>
<h2 id="5-1-VRRP-原理描述（同样适用于-Keepalived-的工作原理）"><a href="#5-1-VRRP-原理描述（同样适用于-Keepalived-的工作原理）" class="headerlink" title="5.1 VRRP 原理描述（同样适用于 Keepalived 的工作原理）"></a>5.1 VRRP 原理描述（同样适用于 Keepalived 的工作原理）</h2><p>在一组 VRRP 路由器集群中，有多台物理 VRRP 路由器，但是这多台物理的机器并不是同时工作的，而是由一台称为 MASTER 的机器负责路由工作，其他的机器都是 BACKUP。MASTER 角色并非一成不变，VRRP 协议会让每个 VRRP 路由参与竞选，最终获胜的就是 MASTER。MASTER 拥有虚拟路由器的 IP 地址，我们把这个 IP 地址称为 VIP，MASTER 负责转发发送给网关地址的数据包和响应 ARP 请求。</p>
<h2 id="5-2-VRRP-是如何工作的？"><a href="#5-2-VRRP-是如何工作的？" class="headerlink" title="5.2 VRRP 是如何工作的？"></a>5.2 VRRP 是如何工作的？</h2><p>VRRP 协议通过竞选机制来实现虚拟路由器的功能，所有的协议报文都是通过 IP 多播（默认的多播地址：224.0.0.18）形式进行发送。虚拟路由器由 VRID （范围0-255）和一组 IP 地址组成，对外表现为一个周知的 MAC 地址：00-00-5E-00-01-{VRID}。所以，在一个虚拟路由器中，不管谁是 MASTER，对外都是相同的 MAC 地址和 IP 地址，如果其中一台虚拟路由器宕机，角色发生切换，那么客户端并不需要因为 MASTER 的变化修改自己的路由设置，可以做到透明的切换。这样就实现了如果一台机器宕机，那么备用的机器会拥有 MASTER 上的 IP 地址，实现高可用功能。</p>
<h2 id="5-3-VRRP-是如何通信的？"><a href="#5-3-VRRP-是如何通信的？" class="headerlink" title="5.3 VRRP 是如何通信的？"></a>5.3 VRRP 是如何通信的？</h2><p>在一组虚拟路由器中，只有作为 MASTER 的 VRRP 路由器会一直发送 VRRP 广播包，此时 BACKUP 不会抢占 MASTER 。当 MASTER 不可用时，这个时候 BACKUP  就收不到来自 MASTER 的广播包了，此时多台 BACKUP 中优先级最高的路由器会去抢占为 MASTER。这种抢占是非常快速的（可能只有1秒甚至更少），以保证服务的连续性。出于安全性考虑，VRRP 数据包使用了加密协议进行了加密。</p>
<h1 id="6-Keepalived-高可用服务脑裂问题"><a href="#6-Keepalived-高可用服务脑裂问题" class="headerlink" title="6 Keepalived 高可用服务脑裂问题"></a>6 Keepalived 高可用服务脑裂问题</h1><h2 id="6-1-什么是脑裂？"><a href="#6-1-什么是脑裂？" class="headerlink" title="6.1 什么是脑裂？"></a>6.1 什么是脑裂？</h2><p>由于某些原因，导致两台高可用服务器在指定时间内，无法检测到对方的心跳消息，各自取得资源及服务的所有权，而此时的两台高可用服务器都还活着并在正常运行，这样就会导致同一个 IP 或服务在两端同时存在发生冲突，最严重的是两台主机占用同一个 VIP 地址，当用户写入数据时可能会分别写入到两端，这可能会导致服务器两端的数据不一致或造成数据丢失，这种情况就被称为脑裂。</p>
<h2 id="6-2-导致脑裂发生的原因"><a href="#6-2-导致脑裂发生的原因" class="headerlink" title="6.2 导致脑裂发生的原因"></a>6.2 导致脑裂发生的原因</h2><p>一般来说，脑裂的发生，有以下几种原因：</p>
<p>1）高可用服务器之间心跳线链路故障，导致无法正常通信。</p>
<p>心跳线坏了（包括断了，老化）<br>网卡及相关驱动坏了，IP 配置及冲突问题（网卡直连）<br>心跳线连接的设备故障（网卡及交换机）<br>2）高可用服务器上开启了 iptables 防火墙阻挡了心跳消息传输。</p>
<p>3）高可用服务器上心跳网卡地址等信息配置不正确，导致发送心跳失败。</p>
<p>4）其他服务配置不当等原因，如心跳方式不同，心跳广播冲突、软件 BUG等。</p>
<p>注意：Keepalived 配置里同一 VRRP 实例如果 virtual_router_id 参数两端配置不一致，也会导致脑裂问题发生。</p>
<h2 id="6-3-解决脑裂的具体方案"><a href="#6-3-解决脑裂的具体方案" class="headerlink" title="6.3 解决脑裂的具体方案"></a>6.3 解决脑裂的具体方案</h2><p>在实际生产环境中，可以从以下几个方面来防止脑裂问题的发生</p>
<p>1）同时使用串行电缆和以太网电缆连接，同时用两条心跳线路，这样一条线路坏了，另一个还是好的，依然能够传送心跳消息</p>
<p>2）当检测到脑裂时强行关闭一个心跳节点（这个功能需要特殊设备支持，如Stonith、fence）。相当于备节点接收不到心跳消息，发送关机命令通过单独的线路关闭主节点的电源。</p>
<p>3）做好对脑裂的监控报警（如邮件及手机短信等或值班），在问题发生时人为第一时间介入仲裁，降低损失。例如，百度的监控报警短信就有上行和下行的区别。报警信息报到管理员手机上，管理员可以通过手机回复对应数字或简单的字符串操作返回给服务器，让服务器根据指令自动处理相应故障，这样解决故障的时间更短。</p>
<p>4）如果开启防火墙，一定要让心跳消息通过，一般通过允许 IP 段的形式。</p>
<h1 id="7-KeepAlived-配置详解"><a href="#7-KeepAlived-配置详解" class="headerlink" title="7 KeepAlived 配置详解"></a>7 KeepAlived 配置详解</h1><p>Keepalived的所有配置都在一个配置文件里面，主要分为三类：</p>
<ul>
<li>全局配置</li>
<li>VRRPD配置</li>
<li>LVS 配置</li>
</ul>
<h2 id="7-1-全局配置"><a href="#7-1-全局配置" class="headerlink" title="7.1 全局配置"></a>7.1 全局配置</h2><p>全局配置是对整个 Keepalived 生效的配置，一个典型的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;         #设置 keepalived 在发生事件（比如切换）的时候，需要发送到的email地址，可以设置多个，每行一个。</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc    #设置通知邮件发送来自于哪里，如果本地开启了sendmail的话，可以使用上面的默认值。</span><br><span class="line">   smtp_server 192.168.200.1    #指定发送邮件的smtp服务器。</span><br><span class="line">   smtp_connect_timeout 30      #设置smtp连接超时时间，单位为秒。</span><br><span class="line">   router_id LVS_DEVEL          #是运行keepalived的一个表示，多个集群设置不同。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-VRRPD配置"><a href="#7-2-VRRPD配置" class="headerlink" title="7.2 VRRPD配置"></a>7.2 VRRPD配置</h2><p>VRRPD 的配置是 Keepalived 比较重要的配置，主要分为两个部分 VRRP 同步组和 VRRP实例，也就是想要使用 VRRP 进行高可用选举，那么就一定需要配置一个VRRP实例，在实例中来定义 VIP、服务器角色等。</p>
<h3 id="7-2-1-VRRP-Sync-Groups"><a href="#7-2-1-VRRP-Sync-Groups" class="headerlink" title="7.2.1 VRRP Sync Groups**"></a>7.2.1 VRRP Sync Groups**</h3><p>不使用Sync Group的话，如果机器（或者说router）有两个网段，一个内网一个外网，每个网段开启一个VRRP实例，假设VRRP配置为检查内网，那么当外网出现问题时，VRRPD认为自己仍然健康，那么不会发生Master和Backup的切换，从而导致了问题。Sync group就是为了解决这个问题，可以把两个实例都放进一个Sync Group，这样的话，group里面任何一个实例出现问题都会发生切换。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_sync_group VG_1&#123; #监控多个网段的实例</span><br><span class="line">group &#123;</span><br><span class="line">　　　　VI_1 #实例名</span><br><span class="line">　　　　VI_2</span><br><span class="line">　　　　......</span><br><span class="line">&#125;</span><br><span class="line">notify_master &#x2F;path&#x2F;xx.sh 　　　　#指定当切换到master时，执行的脚本</span><br><span class="line">netify_backup &#x2F;path&#x2F;xx.sh 　　　　#指定当切换到backup时，执行的脚本</span><br><span class="line">notify_fault &quot;path&#x2F;xx.sh VG_1&quot;   #故障时执行的脚本</span><br><span class="line">notify &#x2F;path&#x2F;xx.sh</span><br><span class="line">smtp_alert 　　#使用global_defs中提供的邮件地址和smtp服务器发送邮件通知</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-2-VRRP实例（instance）配置"><a href="#7-2-2-VRRP实例（instance）配置" class="headerlink" title="7.2.2 VRRP实例（instance）配置"></a>7.2.2 VRRP实例（instance）配置</h3><p>VRRP实例就表示在上面开启了VRRP协议，这个实例说明了VRRP的一些特征，比如主从，VRID等，可以在每个interface上开启一个实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER         #指定实例初始状态，实际的MASTER和BACKUP是选举决定的。</span><br><span class="line">    interface eth0       #指定实例绑定的网卡</span><br><span class="line">    virtual_router_id 51 #设置VRID标记，多个集群不能重复(0..255)</span><br><span class="line">    priority 100         #设置优先级，优先级高的会被竞选为Master，Master要高于BACKUP至少50</span><br><span class="line">    advert_int 1         #检查的时间间隔，默认1s</span><br><span class="line">    nopreempt            #设置为不抢占，说明：这个配置只能在BACKUP主机上面设置</span><br><span class="line">    preempt_delay        #抢占延迟，默认5分钟</span><br><span class="line">    debug                #debug级别</span><br><span class="line">    authentication &#123;     #设置认证</span><br><span class="line">        auth_type PASS    #认证方式，支持PASS和AH，官方建议使用PASS</span><br><span class="line">        auth_pass 1111    #认证的密码</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;     #设置VIP，可以设置多个，用于切换时的地址绑定。格式：#&lt;IPADDR&gt;&#x2F;&lt;MASK&gt; brd &lt;IPADDR&gt; dev &lt;STRING&gt; scope &lt;SCOPT&gt; label &lt;LABE</span><br><span class="line">        192.168.200.16&#x2F;24 dev eth0 label eth0:1</span><br><span class="line">        192.168.200.17&#x2F;24 dev eth1 label eth1:1</span><br><span class="line">        192.168.200.18</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-2-3-VRRP-脚本"><a href="#7-2-3-VRRP-脚本" class="headerlink" title="7.2.3 VRRP 脚本"></a>7.2.3 VRRP 脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># VRRP 脚本 </span><br><span class="line"># 如下所示为相关配置示例</span><br><span class="line">vrrp_script check_running &#123;</span><br><span class="line">   script &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;check_running&quot;</span><br><span class="line">   interval 10</span><br><span class="line">   weight 10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance http &#123;</span><br><span class="line">   state BACKUP</span><br><span class="line">   smtp_alert</span><br><span class="line">   interface eth0</span><br><span class="line">   virtual_router_id 101</span><br><span class="line">   priority 90</span><br><span class="line">   advert_int 3</span><br><span class="line">   authentication &#123;</span><br><span class="line">   auth_type PASS</span><br><span class="line">   auth_pass whatever</span><br><span class="line">   &#125;</span><br><span class="line">   virtual_ipaddress &#123;</span><br><span class="line">   1.1.1.1</span><br><span class="line">   &#125;</span><br><span class="line">   track_script &#123;</span><br><span class="line">   check_running </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 首先在 vrrp_script 区域定义脚本名字和脚本执行的间隔和脚本执行的优先级变更, 如下所示:</span><br><span class="line">vrrp_script check_running &#123;</span><br><span class="line">            script &quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;check_running&quot;</span><br><span class="line">            interval 10     # 脚本执行间隔</span><br><span class="line">            weight 10       # 脚本结果导致的优先级变更 10 表示优先级 + 10-10 则表示优先级 - 10</span><br><span class="line">            &#125;</span><br><span class="line"># 然后在实例(vrrp_instance) 里面引用有点类似脚本里面的函数引用一样先定义后引用函数名</span><br><span class="line">track_script &#123;</span><br><span class="line">      check_running </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意:<br>VRRP 脚本 (vrrp_script) 和 VRRP 实例 (vrrp_instance) 属于同一个级别<br>keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。一般脚本检测返回的值为 0，说明脚本检测成功，如果为非 0 数值，则说明检测失败<br>如果脚本执行结果为 0，并且 weight 配置的值大于 0，则优先级相应的增加, 如果 weight 为非 0，则优先级不变<br>如果脚本执行结果非 0，并且 weight 配置的值小于 0，则优先级相应的减少, 如果 weight 为 0，则优先级不变<br>其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。<br>这里需要注意的是：<br>1） 优先级不会不断的提高或者降低<br>2） 可以编写多个检测脚本并为每个检测脚本设置不同的 weight<br>3） 不管提高优先级还是降低优先级，最终优先级的范围是在[1,254]，不会出现优先级小于等于 0 或者优先级大于等于 255 的情况<br>这样可以做到利用脚本检测业务进程的状态，并动态调整优先级从而实现主备切换。</p>
<h2 id="7-3-LVS-配置"><a href="#7-3-LVS-配置" class="headerlink" title="7.3 LVS 配置"></a>7.3 LVS 配置</h2><p>虚拟服务器virtual_server定义块 ，虚拟服务器定义是keepalived框架最重要的项目了，是keepalived.conf必不可少的部分。 该部分是用来管理LVS的，是实现keepalive和LVS相结合的模块。ipvsadm命令可以实现的管理在这里都可以通过参数配置实现，注意：real_server是被包含在viyual_server模块中的，是子模块。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtual_server 192.168.202.200 23 &#123;        &#x2F;&#x2F;VIP地址，要和vrrp_instance模块中的virtual_ipaddress地址一致</span><br><span class="line">　　　　delay_loop 6   #健康检查时间间隔</span><br><span class="line">　　　　lb_algo rr 　　#lvs调度算法rr|wrr|lc|wlc|lblc|sh|dh</span><br><span class="line">　　　　lb_kind DR    #负载均衡转发规则NAT|DR|RUN</span><br><span class="line">　　　　persistence_timeout 5 #会话保持时间</span><br><span class="line">　　　　protocol TCP    #使用的协议</span><br><span class="line">　　　　persistence_granularity &lt;NETMASK&gt; #lvs会话保持粒度</span><br><span class="line">　　　　virtualhost &lt;string&gt;    #检查的web服务器的虚拟主机（host：头）</span><br><span class="line">　　　　sorry_server&lt;IPADDR&gt; &lt;port&gt; #备用机，所有realserver失效后启用</span><br><span class="line"></span><br><span class="line">real_server 192.168.200.5 23 &#123;             &#x2F;&#x2F;RS的真实IP地址</span><br><span class="line">            weight 1 #默认为1,0为失效</span><br><span class="line">            inhibit_on_failure #在服务器健康检查失效时，将其设为0，而不是直接从ipvs中删除</span><br><span class="line">            notify_up &lt;string&gt; | &lt;quoted-string&gt; #在检测到server up后执行脚本</span><br><span class="line">            notify_down &lt;string&gt; | &lt;quoted-string&gt; #在检测到server down后执行脚本</span><br><span class="line"></span><br><span class="line">TCP_CHECK &#123;                    &#x2F;&#x2F;常用</span><br><span class="line">            connect_timeout 3 #连接超时时间</span><br><span class="line">            nb_get_retry 3 #重连次数</span><br><span class="line">            delay_before_retry 3 #重连间隔时间</span><br><span class="line">            connect_port 23  #健康检查的端口的端口</span><br><span class="line">            bindto &lt;ip&gt;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">HTTP_GET | SSL_GET&#123;          &#x2F;&#x2F;不常用</span><br><span class="line">    url&#123; #检查url，可以指定多个</span><br><span class="line">         path &#x2F;</span><br><span class="line">         digest &lt;string&gt; #检查后的摘要信息</span><br><span class="line">         status_code 200 #检查的返回状态码</span><br><span class="line">        &#125;</span><br><span class="line">    connect_port &lt;port&gt;</span><br><span class="line">    bindto &lt;IPADD&gt;</span><br><span class="line">    connect_timeout 5</span><br><span class="line">    nb_get_retry 3</span><br><span class="line">    delay_before_retry 2</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">SMTP_CHECK&#123;                 &#x2F;&#x2F;不常用</span><br><span class="line">    host&#123;</span><br><span class="line">    connect_ip &lt;IP ADDRESS&gt;</span><br><span class="line">    connect_port &lt;port&gt; #默认检查25端口</span><br><span class="line">    bindto &lt;IP ADDRESS&gt;</span><br><span class="line">         &#125;</span><br><span class="line">    connect_timeout 5</span><br><span class="line">    retry 3</span><br><span class="line">    delay_before_retry 2</span><br><span class="line">    helo_name &lt;string&gt; | &lt;quoted-string&gt; #smtp helo请求命令参数，可选</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">MISC_CHECK&#123;                 &#x2F;&#x2F;不常用</span><br><span class="line">    misc_path &lt;string&gt; | &lt;quoted-string&gt; #外部脚本路径</span><br><span class="line">    misc_timeout #脚本执行超时时间</span><br><span class="line">    misc_dynamic #如设置该项，则退出状态码会用来动态调整服务器的权重，返回0 正常，不修改；返回1，</span><br><span class="line"></span><br><span class="line">　　检查失败，权重改为0；返回2-255，正常，权重设置为：返回状态码-2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes集群安装指南</title>
    <url>/2020/04/27/Kubenete%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat /etc/centos-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>

<p><strong>overlay2介绍</strong></p>
<p>overlay的改进版，只支持4.0以上内核添加了Multiple lower layers in overlayfs的特性，所以overlay2可以直接造成muitiple lower layers不用像overlay一样要通过硬链接的方式(最大128层) centos的话支持3.10.0-514及以上内核版本也有此特性，所以消耗更少的inode</p>
<p>docker官方overlay2的PR:<br><a href="https://github.com/moby/moby/pull/22126">https://github.com/moby/moby/pull/22126</a></p>
<p>LINUX KERNERL 4.0 release说明：<br><a href="https://kernelnewbies.org/Linux_4.0">https://kernelnewbies.org/Linux_4.0</a></p>
<h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><p>为将来要作为主节点的服务器设置主机名。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-master-1 --static</span><br></pre></td></tr></table></figure>

<h3 id="配置服务器hosts"><a href="#配置服务器hosts" class="headerlink" title="配置服务器hosts"></a>配置服务器hosts</h3><p>各个服务器上都要配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 k8s-master-1</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.212.155 salt</span><br><span class="line"></span><br><span class="line">0.0.0.0 aliyun.one</span><br><span class="line">0.0.0.0 lsd.systemten.org</span><br><span class="line">0.0.0.0 pastebin.com</span><br><span class="line">0.0.0.0 pm.cpuminerpool.com</span><br><span class="line">0.0.0.0 systemten.org</span><br><span class="line"></span><br><span class="line">192.168.200.19 k8s-master-1</span><br><span class="line">192.168.154.14 ip-192-168-154-14</span><br><span class="line">192.168.154.15 ip-192-168-154-15</span><br><span class="line">192.168.154.16 ip-192-168-154-16</span><br></pre></td></tr></table></figure>

<h3 id="关闭swap，注释swap分区"><a href="#关闭swap，注释swap分区" class="headerlink" title="关闭swap，注释swap分区"></a>关闭swap，注释swap分区</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># swapoff -a</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/fstab</span></span><br><span class="line"><span class="comment"># Created by anaconda on Mon Mar 26 20:43:49 2018</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><br><span class="line"><span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=848d5a8b-0ee9-481f-b1ff-833fb35cfd03 /boot                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/centos-home /home                   xfs     defaults        0 0</span><br><span class="line"><span class="comment">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span></span><br></pre></td></tr></table></figure>

<h3 id="添加网易-yum-镜像"><a href="#添加网易-yum-镜像" class="headerlink" title="添加网易 yum 镜像"></a>添加网易 yum 镜像</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base - 163.com</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span></span><br><span class="line">baseurl=http://mirrors.163.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates</span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates - 163.com</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span></span><br><span class="line">baseurl=http://mirrors.163.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras - 163.com</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span></span><br><span class="line">baseurl=http://mirrors.163.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus - 163.com</span><br><span class="line">baseurl=http://mirrors.163.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.163.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>在各个服务器上关闭防火墙</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl stop firewalld.service            #停止firewall</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl disable firewalld.service         #禁止firewall开机启动</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl stop iptables.service             #停止iptables</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl disable iptables.service          #禁止iptables开机启动l</span></span><br></pre></td></tr></table></figure>

<h3 id="配置内核参数，将桥接的IPv4流量传递到iptables的链"><a href="#配置内核参数，将桥接的IPv4流量传递到iptables的链" class="headerlink" title="配置内核参数，将桥接的IPv4流量传递到iptables的链"></a>配置内核参数，将桥接的IPv4流量传递到iptables的链</h3><p>各个服务器都要配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>

<h3 id="禁用SELinux"><a href="#禁用SELinux" class="headerlink" title="禁用SELinux"></a>禁用SELinux</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># sestatus</span></span><br><span class="line">SELinux status: disabled</span><br></pre></td></tr></table></figure>

<h2 id="安装配置-docker"><a href="#安装配置-docker" class="headerlink" title="安装配置 docker"></a>安装配置 docker</h2><p>官方文档地址：<a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS</a></p>
<p>Docker官方文档对安装步骤描述已经足够详细, 过程并不复杂, 本文便不再赘述.</p>
<h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><p>本文安装docker的版本是<code>18.09</code>, 安装时请按照文档描述的方式明确指定版本号<code>yum install docker-ce-18.09.9-3.el7 docker-ce-cli-18.09.9-3.el7 containerd.io</code>.</p>
<h3 id="配置-docker"><a href="#配置-docker" class="headerlink" title="配置 docker"></a>配置 docker</h3><p>官方文档地址：<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/">容器运行时</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>, <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>, <span class="string">&quot;https://fzhifedh.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;hub.51iwifi.com&quot;</span>,<span class="string">&quot;alpha-harbor.51iwifi.com&quot;</span>,<span class="string">&quot;192.168.195.2&quot;</span>,<span class="string">&quot;134.108.20.13&quot;</span>],</span><br><span class="line">  <span class="string">&quot;max-concurrent-downloads&quot;</span>: 10,</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-level&quot;</span>: <span class="string">&quot;warn&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;10m&quot;</span>,</span><br><span class="line">    <span class="string">&quot;max-file&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安装完后重启"><a href="#安装完后重启" class="headerlink" title="安装完后重启"></a>安装完后重启</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl enable docker</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl start docker</span></span><br></pre></td></tr></table></figure>

<p>同样在各个服务器上都要保持一致</p>
<h2 id="安装-Kubernetes-kubectl-kubelet-kubeadm"><a href="#安装-Kubernetes-kubectl-kubelet-kubeadm" class="headerlink" title="安装 Kubernetes(kubectl, kubelet, kubeadm)"></a>安装 Kubernetes(kubectl, kubelet, kubeadm)</h2><h3 id="添加阿里kubernetes源"><a href="#添加阿里kubernetes源" class="headerlink" title="添加阿里kubernetes源"></a>添加阿里kubernetes源</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">exclude=kube*</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># systemctl enable kubelet</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># kubeadm config print init-defaults &gt; kubeadm-init.yaml</span></span><br></pre></td></tr></table></figure>

<p>该文件有两处需要修改:</p>
<p>将<code>advertiseAddress: 1.2.3.4</code>修改为本机地址<br>将<code>imageRepository: k8s.gcr.io</code>修改为<code>imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</code></p>
<p>修改完毕后文件如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-master-1</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.18.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># kubeadm config images pull --config kubeadm-init.yaml</span></span><br></pre></td></tr></table></figure>

<h3 id="执行初始化"><a href="#执行初始化" class="headerlink" title="执行初始化"></a>执行初始化</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># kubeadm config images pull --config kubeadm-init.yaml</span></span><br></pre></td></tr></table></figure>

<p>等待执行完毕后, 会输出如下内容:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line">...</span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.200.19:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a67698bdd29af4af0d70a563c4a17d1c751faabe65d7d3661eb90783568ecda6</span><br></pre></td></tr></table></figure>

<p>最后两行需要保存下来, <code>kubeadm join ...</code>是其它worker节点加入所需要执行的命令.</p>
<p>接下来配置环境, 让当前用户可以执行kubectl命令:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p>查看节点，<code>kubectl get node</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME           STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8s-master-1   NotReady   master   3m25s   v1.18.0</span><br></pre></td></tr></table></figure>

<p>node节点为<code>NotReady</code>，因为 pod <code>coredns</code> 没有启动，缺少网络pod.</p>
<h2 id="安装-calico-网络"><a href="#安装-calico-网络" class="headerlink" title="安装 calico 网络"></a>安装 calico 网络</h2><p>官方文档地址：<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">Instructions</a></p>
<h3 id="下载-calico-的-k8s-文件"><a href="#下载-calico-的-k8s-文件" class="headerlink" title="下载 calico 的 k8s 文件"></a>下载 calico 的 k8s 文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># wget https://docs.projectcalico.org/v3.8/manifests/calico.yaml</span></span><br><span class="line">[root@k8s-master-1 ~]<span class="comment"># cat kubeadm-init.yaml | grep serviceSubnet:</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure>

<p>打开 <code>calico.yaml</code>, 将<code>192.168.0.0/16</code>修改为<code>10.96.0.0/12</code></p>
<blockquote>
<p>需要注意的是, calico.yaml中的IP和kubeadm-init.yaml需要保持一致, 要么初始化前修改kubeadm-init.yaml, 要么初始化后修改calico.yaml.</p>
</blockquote>
<p>执行<code>kubectl apply -f calico.yaml</code>初始化网络.</p>
<p>此时查看node信息, master的状态已经是<code>Ready</code>了.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 ~]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME           STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master-1   Ready    master   15m   v1.18.0</span><br></pre></td></tr></table></figure>

<h2 id="安装-dashboard"><a href="#安装-dashboard" class="headerlink" title="安装 dashboard"></a>安装 dashboard</h2><h3 id="部署-dashboard"><a href="#部署-dashboard" class="headerlink" title="部署 dashboard"></a>部署 dashboard</h3><p>官方文档：<a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/">网页界面 (Dashboard)</a></p>
<p>官方部署dashboard的服务没使用nodeport，将yaml文件下载到本地，在service里添加<code>NodePort</code></p>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>官方文档地址: <a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">Creating sample user</a></p>
<p>创建一个用于登录Dashboard的用户. 创建文件<code>dashboard-adminuser.yaml</code>内容如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>

<p>执行命令<code>kubectl apply -f dashboard-adminuser.yaml</code>.</p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>官方文档地址：<a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md">Bearer Token</a></p>
<p>使用token进行登录，执行下面命令获取token</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubectl describe secrets -n kubernetes-dashboard kubernetes-dashboard-token-t4hxz  | grep token | awk <span class="string">&#x27;NR==3&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>复制该Token到登录页, 点击登录即可, 效果如下:</p>
<p><img src="Kubenete%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/" alt="image">%</p>
<h2 id="添加其它-Worker-节点"><a href="#添加其它-Worker-节点" class="headerlink" title="添加其它 Worker 节点"></a>添加其它 Worker 节点</h2><p>在使用 <code>kubeadm</code> 初始化 master 节点后会有 <code>kubeadm join ...</code> 这样的返回信息，详见前文。</p>
<p>同时，默认你已经在其它的服务器中已经安装了 docker, kubernetes. </p>
<p>请注意在其它的服务器只需安装kubernetes，等初始化 master 节点后，执行如下命令将 Worker 加入集群:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.200.19:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:a67698bdd29af4af0d70a563c4a17d1c751faabe65d7d3661eb90783568ecda6</span><br></pre></td></tr></table></figure>

<p>添加完毕后, 在Master上查看节点状态:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@k8s-master-1 k8s-master]<span class="comment"># kubectl get node</span></span><br><span class="line">NAME                STATUS   ROLES    AGE   VERSION</span><br><span class="line">ip-192-168-154-14   Ready    &lt;none&gt;   14d   v1.18.0</span><br><span class="line">ip-192-168-154-15   Ready    &lt;none&gt;   14d   v1.18.0</span><br><span class="line">ip-192-168-154-16   Ready    &lt;none&gt;   14d   v1.18.0</span><br><span class="line">k8s-master-1        Ready    master   19d   v1.18.0</span><br></pre></td></tr></table></figure>

<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://www.kubernetes.org.cn/7189.html">使用kubeadm在Centos8上部署kubernetes1.18</a></p>
<p><a href="https://blog.piaoruiqing.com/2019/09/17/kubernetes-1-installation/">Kubernetes(一) 跟着官方文档从零搭建K8S</a></p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes数据持久化</title>
    <url>/2020/04/28/Kubernetes%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>PV</tag>
        <tag>PVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Kylin 入门</title>
    <url>/2020/09/22/Kylin%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>随着移动互联网、物联网等技术的发展，近些年人类所积累的数据正在呈爆炸式的增长，大数据时代已经来临。但是海量数据的收集只是大数据技术的第一步，如何让数据产生价值才是大数据领域的终极目标。Hadoop的出现解决了数据存储问题，但如何对海量数据进行OLAP查询，却一直令人十分头疼。</p>
<p>企业中的查询大致可分为即席查询和定制查询两种。之前出现的很多OLAP引擎，包括Hive、Presto、SparkSQL等，虽然在很大程度上降低了数据分析的难度，但它们都只适用于即席查询的场景。它们的优点是查询灵活，但是随着数据量和计算复杂度的增长，响应时间不能得到保证。而定制查询多数情况下是对用户的操作做出实时反应，Hive等查询引擎动辄数分钟甚至数十分钟的响应时间显然是不能满足需求的。在很长一段时间里，企业只能对数据仓库中的数据进行提前计算，再将算好后的结果存储在MySQL等关系型数据库中，再提供给用户进行查询。但是当业务复杂度和数据量逐渐升高后，使用这套方案的开发成本和维护成本都显著上升。因此，如何对已经固化下来的查询进行亚秒级返回一直是企业应用中的一个痛点。</p>
<p>在这种情况下，Apache Kylin应运而生。不同于“大规模并行处理”（Massive Parallel Processing，MPP）架构的Hive、Presto等，Apache Kylin采用“预计算”的模式，用户只需要提前定义好查询维度，Kylin将帮助我们进行计算，并将结果存储到HBase中，为海量数据的查询和分析提供亚秒级返回，是一种典型的“空间换时间”的解决方案。Apache Kylin的出现不仅很好地解决了海量数据快速查询的问题，也避免了手动开发和维护提前计算程序带来的一系列麻烦。</p>
<p>Apache Kylin™是一个开源的、分布式的分析型数据仓库，提供 Hadoop 之上的 SQL 查询接口及多维分析（OLAP）能力以支持超大规模数据，最初由eBay Inc.开发并贡献至开源社区。</p>
<h1 id="Kylin-架构"><a href="#Kylin-架构" class="headerlink" title="Kylin 架构"></a>Kylin 架构</h1><p>如果想要知道Kylin是如何实现超大数据集的秒级多维分析查询，那么就得了解Kylin的架构原理。<br>Kylin实现秒级查询的关键点是预计算，对于超大数据集的复杂查询，既然现场计算需要花费较长时间，那么根据空间换时间的原理，我们就可以提前将所有可能的计算结果计算并存储下来，把高复杂度的聚合运算、多表连接等操作转换成对预计算结果的查询，比如把本该进行的Join、Sum、CountDistinct等操作改写成Cube的查询操作。从而实现超大数据集的秒级多维分析查询。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200924112848747.png" alt="image-20200924112848747"></p>
<ul>
<li>REST Server:<br>REST Server是一套面向应用程序开发的入口点，旨在实现针对Kylin平台的应用开发工作。 此类应用程序可以提供查询、获取结果、触发cube构建任务、获取元数据以及获取用户权限等等。 另外可以通过Restful接口实现SQL查询。</li>
<li>查询引擎（Query Engine）:<br>当cube准备就绪后，查询引擎就能够获取并解析用户查询。它随后会与系统中的其它组件进行交互，从而向用户返回对应的结果。<br>在Kylin当中，我们使用一套名为Apache Calcite的开源动态数据管理框架对代码内的SQL以及其它插入内容进行解析。（Calcite最初被命名为Optiq，由Julian Hyde所编写，但如今已经成为Apache孵化器项目之一。）</li>
<li>Routing<br>负责将解析的SQL生成的执行计划转换成cube缓存的查询，cube是通过预计算缓存在hbase中，这部分查询可以在秒级设置毫秒级完成，而且还有一些操作使用过的查询原始数据（存储在Hadoop的hdfs中通过hive查询）。这部分查询延迟较高。</li>
<li>元数据管理工具（Metadata Manager）<br>Kylin是一款元数据驱动型应用程序。元数据管理工具是一大关键性组件，用于对保存在Kylin当中的所有元数据进行管理，其中包括最为重要的cube元数据。其它全部组件的正常运作都需以元数据管理工具为基础。 Kylin的元数据存储在hbase中。</li>
<li>任务引擎（Cube Build Engine）:<br>这套引擎的设计目的在于处理所有离线任务，其中包括shell脚本、Java API以及Map Reduce任务等等。任务引擎对Kylin当中的全部任务加以管理与协调，从而确保每一项任务都能得到切实执行并解决其间出现的故障。</li>
<li>存储引擎（Storage Engine）<br>这套引擎负责管理底层存储——特别是cuboid，其以键-值对的形式进行保存。存储引擎使用的是HBase——这是目前Hadoop生态系统当中最理想的键-值系统使用方案。Kylin还能够通过扩展实现对其它键-值系统的支持，例如Redis。</li>
</ul>
<p><strong>预计算大概流程</strong>就是：将数据源中的数据按照指定的维度和指标，由计算引擎MapReduce离线计算出所有可能的查询结果(即Cube)存储到HBase中。HBase中每行记录的Rowkey由维度组成，度量会保存在 column family中。为了减小存储代价，这里会对维度和度量进行编码。查询阶段，利用HBase列存储的特性就可以保证Kylin有良好的快速响应和高并发。</p>
<p>需要注意的是：Kylin的三大依赖模块分别是数据源、构建引擎和存储引擎。默认这三者分别是Hive、MapReduce和HBase。但随着推广和使用的深入，渐渐有用户发现它们均存在不足之处。比如，实时分析可能会希望从Kafka导入数据而不是从Hive；而Spark的迅速崛起，又使我们不得不考虑将MapReduce替换为Spark，以期大幅提高Cube的构建速度；至于HBase，它的读性能可能还不如Cassandra或Kudu等。因此Kylin1.5版本的系统架构进行了重构，将数据源、构建引擎、存储引擎三大依赖抽象为接口，而Hive、MapReduce、HBase只是默认实现。深度用户可以根据自己的需要做二次开发，将其中的一个或多个替换为更适合的技术。</p>
<h1 id="安装Kylin"><a href="#安装Kylin" class="headerlink" title="安装Kylin"></a>安装Kylin</h1><h2 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/apache-kylin-3.1.0-bin-hbase1x /usr/local/kylin</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KYLIN_HOME=/usr/<span class="built_in">local</span>/kylin</span><br><span class="line"><span class="built_in">export</span> KYLIN_HOME</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$KYLIN_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/proifle</span><br></pre></td></tr></table></figure>

<h3 id="macOS遇到的问题"><a href="#macOS遇到的问题" class="headerlink" title="macOS遇到的问题"></a>macOS遇到的问题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/check-env.sh</span><br></pre></td></tr></table></figure>

<p>此处mac有坑，因为检查脚本使用的是gnu的一些命令，和mac上的命令不同。所以需要安装gnu命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install gnu-sed</span><br><span class="line">brew install findutils</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查环境</span></span><br><span class="line">/usr/local/kylin/bin/check-env.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">/usr/local/kylin/bin/kylin.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 样例</span></span><br><span class="line">/usr/local/kylin/bin/sample.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启</span></span><br><span class="line">/usr/local/kylin/bin/kylin.sh restart</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200924103518462.png" alt="image-20200924103518462"></p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h2><h2 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h2><h2 id="维度和度量"><a href="#维度和度量" class="headerlink" title="维度和度量"></a>维度和度量</h2><h2 id="Cube和Cuboid"><a href="#Cube和Cuboid" class="headerlink" title="Cube和Cuboid"></a>Cube和Cuboid</h2><h2 id="事实表和维度表"><a href="#事实表和维度表" class="headerlink" title="事实表和维度表"></a>事实表和维度表</h2><h2 id="星形模型"><a href="#星形模型" class="headerlink" title="星形模型"></a>星形模型</h2>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kylin,大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash数据同步-介绍</title>
    <url>/2021/01/14/Logstash%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/logstash_1_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/logstash_1_1.png"></p>
<h1 id="1-Logstash"><a href="#1-Logstash" class="headerlink" title="1 Logstash"></a>1 Logstash</h1><p>Logstash是elastic技术栈中的一个技术。它是一个数据采集引擎，可以从数据库采集数据到es中。我们可以通过设置自增id主键或者时间来控制数据的自动同步，这个id或者时间就是用于给logstash进行识别的</p>
<ul>
<li>id：假设现在有1000条数据，Logstatsh识别后会进行一次同步，同步完会记录这个id为1000，以后数据库新增数据，那么id会一直累加，Logstatsh会有定时任务，发现有id大于1000了，则增量加入到es中</li>
<li>时间：同理，一开始同步1000条数据，每条数据都有一个字段，为time，初次同步完毕后，记录这个time，下次同步的时候进行时间比对，如果有超过这个时间的，那么就可以做同步，这里可以同步新增数据，或者修改元数据，因为同一条数据的时间更改会被识别，而id则不会。</li>
</ul>
<h1 id="2-安装Logstash"><a href="#2-安装Logstash" class="headerlink" title="2 安装Logstash"></a>2 安装Logstash</h1><p>官方链接：<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-6-4-3">https://www.elastic.co/cn/downloads/past-releases/logstash-6-4-3</a></p>
<ul>
<li>注：使用Logstatsh的版本号与elasticsearch版本号需要保持一致</li>
</ul>
<h1 id="3-插件-logstash-input-jdbc"><a href="#3-插件-logstash-input-jdbc" class="headerlink" title="3 插件 logstash-input-jdbc"></a>3 插件 logstash-input-jdbc</h1><p>本插件用于同步，es6.x起自带，这个是集成在了 logstash中的。所以直接配置同步数据库的配置文件即可</p>
<h1 id="4-创建索引"><a href="#4-创建索引" class="headerlink" title="4 创建索引"></a>4 创建索引</h1><p>同步数据到es中，前提得要有索引，这个需要手动先去创建，名字随意。比如：<code>foodie-items</code></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e01cbe1086da30502810316.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/5e01cbe1086da30502810316.jpg"></p>
<h1 id="5-JDK"><a href="#5-JDK" class="headerlink" title="5 JDK"></a>5 JDK</h1><p>记得安装JDK，java -version检查一下，如果没有安装，请安装一下。</p>
]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash数据同步 - 自定义模板配置中文分词</title>
    <url>/2021/01/14/Logstash%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E5%88%86%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>目前的数据同步，mappings映射会自动创建，但是分词不会，还是会使用默认的，而我们需要中文分词，这个时候就需要自定义模板功能来设置分词了。</p>
<h1 id="查看Logstash默认模板"><a href="#查看Logstash默认模板" class="headerlink" title="查看Logstash默认模板"></a>查看Logstash默认模板</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">GET /_template/logstash</span><br></pre></td></tr></table></figure>

<h1 id="修改模板如下"><a href="#修改模板如下" class="headerlink" title="修改模板如下"></a>修改模板如下</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;order&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;index_patterns&quot;</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;refresh_interval&quot;</span>: <span class="string">&quot;5s&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;_default_&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;dynamic_templates&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;message_field&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;path_match&quot;</span>: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;norms&quot;</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;string_fields&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;match&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;match_mapping_type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;mapping&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;norms&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                            <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">                                <span class="string">&quot;keyword&quot;</span>: &#123;</span><br><span class="line">                                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;ignore_above&quot;</span>: <span class="number">256</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;date&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;@version&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;geoip&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;dynamic&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;ip&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;location&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;latitude&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;half_float&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;longitude&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;half_float&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="新增如下配置，用于更新模板，设置中文分词"><a href="#新增如下配置，用于更新模板，设置中文分词" class="headerlink" title="新增如下配置，用于更新模板，设置中文分词"></a>新增如下配置，用于更新模板，设置中文分词</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 定义模板名称</span><br><span class="line">template_name =&gt; <span class="string">&quot;myik&quot;</span></span><br><span class="line"># 模板所在位置</span><br><span class="line">template =&gt; <span class="string">&quot;/usr/local/logstash-6.4.3/sync/logstash-ik.json&quot;</span></span><br><span class="line"># 重写模板</span><br><span class="line">template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line"># 默认为true，false关闭logstash自动管理模板功能，如果自定义模板，则设置为false</span><br><span class="line">manage_template =&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h1 id="重新运行Logstash进行同步"><a href="#重新运行Logstash进行同步" class="headerlink" title="重新运行Logstash进行同步"></a>重新运行Logstash进行同步</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">./logstash -f /usr/local/logstash/sync/logstash-db-sync.conf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash数据同步-配置</title>
    <url>/2021/01/14/Logstash%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="logstash同步数据库配置"><a href="#logstash同步数据库配置" class="headerlink" title="logstash同步数据库配置"></a>logstash同步数据库配置</h1><ol>
<li><p>上传并解压logstash，路径为 <code>/usr/local/logstash</code></p>
</li>
<li><p>创建文件名：logstash-db-sync.conf，后缀为<code>conf</code>，文件名随意，位置也随意，为方便起见，路径为<code>/usr/local/logstash/sync</code></p>
</li>
<li><p>把数据库驱动拷贝至<code>/usr/local/logstash/sync</code>下</p>
</li>
<li><p>配置内容如下：</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">    <span class="string">jdbc</span> &#123;</span><br><span class="line">        <span class="comment"># 设置 MySql/MariaDB 数据库url以及数据库名称</span></span><br><span class="line">        <span class="string">jdbc_connection_string</span> <span class="string">=&gt;</span> <span class="string">&quot;jdbc:mysql://192.168.1.6:3306/foodie-shop-dev?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&quot;</span></span><br><span class="line">        <span class="comment"># 用户名和密码</span></span><br><span class="line">        <span class="string">jdbc_user</span> <span class="string">=&gt;</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        <span class="string">jdbc_password</span> <span class="string">=&gt;</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">        <span class="comment"># 数据库驱动所在位置，可以是绝对路径或者相对路径</span></span><br><span class="line">        <span class="string">jdbc_driver_library</span> <span class="string">=&gt;</span> <span class="string">&quot;/usr/local/logstash-6.4.3/sync/mysql-connector-java-5.1.41.jar&quot;</span></span><br><span class="line">        <span class="comment"># 驱动类名</span></span><br><span class="line">        <span class="string">jdbc_driver_class</span> <span class="string">=&gt;</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">        <span class="comment"># 开启分页</span></span><br><span class="line">        <span class="string">jdbc_paging_enabled</span> <span class="string">=&gt;</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="comment"># 分页每页数量，可以自定义</span></span><br><span class="line">        <span class="string">jdbc_page_size</span> <span class="string">=&gt;</span> <span class="string">&quot;10000&quot;</span></span><br><span class="line">        <span class="comment"># 执行的sql文件路径</span></span><br><span class="line">        <span class="string">statement_filepath</span> <span class="string">=&gt;</span> <span class="string">&quot;/usr/local/logstash-6.4.3/sync/foodie-items.sql&quot;</span></span><br><span class="line">        <span class="comment"># 设置定时任务间隔  含义：分、时、天、月、年，全部为*默认含义为每分钟跑一次任务</span></span><br><span class="line">        <span class="string">schedule</span> <span class="string">=&gt;</span> <span class="string">&quot;* * * * *&quot;</span></span><br><span class="line">        <span class="comment"># 索引类型</span></span><br><span class="line">        <span class="string">type</span> <span class="string">=&gt;</span> <span class="string">&quot;_doc&quot;</span></span><br><span class="line">        <span class="comment"># 是否开启记录上次追踪的结果，也就是上次更新的时间，这个会记录到 last_run_metadata_path 的文件</span></span><br><span class="line">        <span class="string">use_column_value</span> <span class="string">=&gt;</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 记录上一次追踪的结果值</span></span><br><span class="line">        <span class="string">last_run_metadata_path</span> <span class="string">=&gt;</span> <span class="string">&quot;/usr/local/logstash-6.4.3/sync/track_time&quot;</span></span><br><span class="line">        <span class="comment"># 如果 use_column_value 为true， 配置本参数，追踪的 column 名，可以是自增id或者时间</span></span><br><span class="line">        <span class="string">tracking_column</span> <span class="string">=&gt;</span> <span class="string">&quot;updated_time&quot;</span></span><br><span class="line">        <span class="comment"># tracking_column 对应字段的类型</span></span><br><span class="line">        <span class="string">tracking_column_type</span> <span class="string">=&gt;</span> <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">        <span class="comment"># 是否清除 last_run_metadata_path 的记录，true则每次都从头开始查询所有的数据库记录</span></span><br><span class="line">        <span class="string">clean_run</span> <span class="string">=&gt;</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 数据库字段名称大写转小写</span></span><br><span class="line">        <span class="string">lowercase_column_names</span> <span class="string">=&gt;</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">    <span class="string">elasticsearch</span> &#123;</span><br><span class="line">        <span class="comment"># es地址</span></span><br><span class="line">        <span class="string">hosts</span> <span class="string">=&gt;</span> [<span class="string">&quot;192.168.1.187:9200&quot;</span>]</span><br><span class="line">        <span class="comment"># 同步的索引名</span></span><br><span class="line">        <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;foodie-items&quot;</span></span><br><span class="line">        <span class="comment"># 设置_docID和数据相同。itemId与sql同步脚本中的itemId保持一致</span></span><br><span class="line">        <span class="string">document_id</span> <span class="string">=&gt;</span> <span class="string">&quot;<span class="template-variable">%&#123;itemId&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment">#document_id =&gt; &quot;%&#123;id&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 日志输出</span></span><br><span class="line">    <span class="string">stdout</span> &#123;</span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">json_lines</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>sql同步脚本</p>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    i.id <span class="keyword">as</span> itemId,</span><br><span class="line">    i.item_name <span class="keyword">as</span> itemName,</span><br><span class="line">    i.sell_counts <span class="keyword">as</span> sellCounts,</span><br><span class="line">    ii.url <span class="keyword">as</span> imgUrl,</span><br><span class="line">    tempSpec.price_discount <span class="keyword">as</span> price,</span><br><span class="line">    i.updated_time <span class="keyword">as</span> updated_time</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    items i</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    items_img ii</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    i.id <span class="operator">=</span> ii.item_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> item_id,<span class="built_in">MIN</span>(price_discount) <span class="keyword">as</span> price_discount <span class="keyword">from</span> items_spec <span class="keyword">GROUP</span> <span class="keyword">BY</span> item_id) tempSpec</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">    i.id <span class="operator">=</span> tempSpec.item_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    ii.is_main <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    i.updated_time <span class="operator">&gt;=</span> :sql_last_value</span><br><span class="line"><span class="comment">--:sql_last_value是记录的最后的一个值</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="启动logstatsh"><a href="#启动logstatsh" class="headerlink" title="启动logstatsh"></a>启动logstatsh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./logstash -f /usr/<span class="built_in">local</span>/logstash/sync/logstash-db-sync.conf</span><br></pre></td></tr></table></figure>

<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://www.cnblogs.com/huhangfei/p/7605511.html">Logstash使用介绍</a></p>
]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis代码生成</title>
    <url>/2019/05/06/MyBatis%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p>要使用generator插件自动生成相关文件，需要引入mybatis-generator-core这个包，在 <code>&lt;dependencys&gt;</code> 中加入</p>
<span id="more"></span>

<h2 id="1-在pom-xml中做两处配置"><a href="#1-在pom-xml中做两处配置" class="headerlink" title="1. 在pom.xml中做两处配置"></a>1. 在pom.xml中做两处配置</h2><h3 id="1-1-配置dependency"><a href="#1-1-配置dependency" class="headerlink" title="1.1. 配置dependency"></a>1.1. 配置dependency</h3><p>要使用generator插件自动生成相关文件，需要引入mybatis-generator-core这个包，在 <code>&lt;dependencys&gt;</code> 中加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-配置plugin"><a href="#1-2-配置plugin" class="headerlink" title="1.2. 配置plugin"></a>1.2. 配置plugin</h3><p>在 <code>&lt;build&gt;</code> 这个节点的 <code>&lt;plugins&gt;</code> 节点内部加入一个 <code>&lt;plugin&gt;</code>，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-创建generatorConfig-xml"><a href="#2-创建generatorConfig-xml" class="headerlink" title="2. 创建generatorConfig.xml"></a>2. 创建generatorConfig.xml</h2><h3 id="2-1-配置文件路径名称以及内容"><a href="#2-1-配置文件路径名称以及内容" class="headerlink" title="2.1. 配置文件路径名称以及内容"></a>2.1. 配置文件路径名称以及内容</h3><p>在resource目录下创建generatorConfig.xml配置文件，当然了该文件起这个名字，并且放到resource根目录下是根据genereator的默认方案来的，如果要用别的名，放到别的目录也可以，只是要做其它配置，这里就按默认算了，该文件的配置内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;E:\develop\mavenRepository\mysql\mysql-connector-java\5.1.46\mysql-connector-java-5.1.46.jar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;mysqlTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；</span></span><br><span class="line"><span class="comment">             一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成的Java文件的编码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFileEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化java代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javaFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultJavaFormatter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 格式化XML代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;xmlFormatter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.generator.api.dom.DefaultXmlFormatter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数据库链接URL，用户名、密码 --&gt;</span></span><br><span class="line">        &lt;jdbcConnection</span><br><span class="line">            driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">            connectionURL=&quot;jdbc:mysql://localhost:3306/personal?characterEncoding=UTF-8&quot;</span><br><span class="line">            userId=&quot;root&quot;</span><br><span class="line">            password=&quot;123456&quot;&gt;<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- java类型处理器</span></span><br><span class="line"><span class="comment">             用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；</span></span><br><span class="line"><span class="comment">             注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型；</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型</span></span><br><span class="line"><span class="comment">             false：默认,</span></span><br><span class="line"><span class="comment">             scale&gt;0;length&gt;18：使用BigDecimal;</span></span><br><span class="line"><span class="comment">             scale=0;length[10,18]：使用Long；</span></span><br><span class="line"><span class="comment">             scale=0;length[5,9]：使用Integer；</span></span><br><span class="line"><span class="comment">             scale=0;length&lt;5：使用Short；</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成模型的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.littlefxc.personal.model&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成映射文件的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mybatis&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生成DAO的包名和位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.littlefxc.personal.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- generatedKey用于生成生成主键的方法，</span></span><br><span class="line"><span class="comment">             如果设置了该元素，MBG会在生成的&lt;insert&gt;元素中生成一条正确的&lt;selectKey&gt;元素，该元素可选</span></span><br><span class="line"><span class="comment">             column:主键的列名；</span></span><br><span class="line"><span class="comment">             sqlStatement：要生成的selectKey语句，有以下可选项：</span></span><br><span class="line"><span class="comment">             Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">             DB2 :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">             DB2_MF :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1</span></span><br><span class="line"><span class="comment">             Derby :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()</span></span><br><span class="line"><span class="comment">             HSQLDB :相当于selectKey的SQL为：CALL IDENTITY()</span></span><br><span class="line"><span class="comment">             Informix :相当于selectKey的SQL为：select dbinfo(&#x27;sqlca.sqlerrd1&#x27;) from systables where tabid=1</span></span><br><span class="line"><span class="comment">             MySql :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()</span></span><br><span class="line"><span class="comment">             SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()</span></span><br><span class="line"><span class="comment">             SYBASE :相当于selectKey的SQL为：SELECT @@IDENTITY</span></span><br><span class="line"><span class="comment">             JDBC :相当于在生成的insert元素上添加useGeneratedKeys=&quot;true&quot;和keyProperty属性</span></span><br><span class="line"><span class="comment">             &lt;generatedKey column=&quot;&quot; sqlStatement=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;article&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">domainObjectName</span>=<span class="string">&quot;ArticlePo&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;article_tag&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">domainObjectName</span>=<span class="string">&quot;ArticleTagPo&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">domainObjectName</span>=<span class="string">&quot;UserPo&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">sqlStatement</span>=<span class="string">&quot;MySql&quot;</span> <span class="attr">identity</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h2><h3 id="3-1-利用idea-执行"><a href="#3-1-利用idea-执行" class="headerlink" title="3.1. 利用idea 执行"></a>3.1. 利用idea 执行</h3><p><img src="https://img-blog.csdn.net/2018102310013619?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
<h3 id="3-2-也可以执行mvn-mybatis-generator-generate命令"><a href="#3-2-也可以执行mvn-mybatis-generator-generate命令" class="headerlink" title="3.2. 也可以执行mvn mybatis-generator:generate命令"></a>3.2. 也可以执行mvn mybatis-generator:generate命令</h3><p> 生成最终效果图结构<br><img src="https://img-blog.csdn.net/2018102310014491?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主从搭建</title>
    <url>/2021/06/20/MySQL%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><ul>
<li><p>主配置 log-bin，指定文件的名字</p>
</li>
<li><p>主配置 server-id，默认为1</p>
</li>
<li><p>从 server-id 与主不能重复</p>
</li>
<li><p>主数据库创建备份账户并授权 <code>REPLICATION SLAVE</code></p>
</li>
<li><p>主数据库锁表 <code>FLUSH TABLES WITH READ LOCK</code></p>
</li>
<li><p>主数据库找到 <code>log-bin</code> 的位置 <code>SHOW MASTER STATUS</code></p>
</li>
<li><p>备份主数据库数据 <code>mysqldump -all-datables --master-data &gt; dbduump.db</code></p>
</li>
<li><p>主数据库解锁 <code>unlock tables</code></p>
</li>
<li><p>从数据库导入 dump的数据</p>
</li>
<li><p>在从数据库上设置主数据库的配置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">	<span class="operator">-</span><span class="operator">&gt;</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;master_host_name&#x27;</span>, 	</span><br><span class="line">	<span class="operator">-</span><span class="operator">&gt;</span> MASTER_PORT<span class="operator">=</span>port_num </span><br><span class="line">	<span class="operator">-</span><span class="operator">&gt;</span> MASTER_USER<span class="operator">=</span><span class="string">&#x27;replication_user_name&#x27;</span>, </span><br><span class="line">	<span class="operator">-</span><span class="operator">&gt;</span> MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;replication_password&#x27;</span>, 			        </span><br><span class="line">	<span class="operator">-</span><span class="operator">&gt;</span> MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;recorded_log_file_name&#x27;</span>,			   </span><br><span class="line">  <span class="operator">-</span><span class="operator">&gt;</span> MASTER_LOG_POS<span class="operator">=</span>recorded_log_position;                                                       </span><br></pre></td></tr></table></figure>

<ul>
<li>master_host_name : MySQL主的地址</li>
<li>port_num : MySQL主的端口（数字型）</li>
<li>replication_user_name : 备份账户的用户名</li>
<li>replication_password : 备份账户的密码</li>
<li>recorded_log_file_name ：bin-log的文件名</li>
<li>recorded_log_position : bin-log的位置（数字型）</li>
<li>bin-log的文件名和位置 是 从 <code>show master status</code> 得到的。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="配置文件模版"><a href="#配置文件模版" class="headerlink" title="配置文件模版"></a>配置文件模版</h1><h2 id="主-mysql-的配置-master-cnf"><a href="#主-mysql-的配置-master-cnf" class="headerlink" title="主 mysql 的配置:master.cnf"></a>主 mysql 的配置:master.cnf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，一般设置为IP，注意要唯一</span><br><span class="line">server_id&#x3D;100</span><br><span class="line">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span><br><span class="line">log-bin&#x3D;replicas-mysql-bin</span><br><span class="line">## 为每个session分配的内存，在事务过程中用来存储二进制日志的缓存</span><br><span class="line">binlog_cache_size&#x3D;1M</span><br><span class="line">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors&#x3D;1062</span><br></pre></td></tr></table></figure>

<h2 id="从-mysql-的配置-slave-cnf"><a href="#从-mysql-的配置-slave-cnf" class="headerlink" title="从 mysql 的配置:slave.cnf"></a>从 mysql 的配置:slave.cnf</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，一般设置为IP，注意要唯一</span><br><span class="line">server_id&#x3D;101</span><br><span class="line">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span><br><span class="line">log-bin&#x3D;replicas-mysql-slave1-bin</span><br><span class="line">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span><br><span class="line">binlog_cache_size&#x3D;1M</span><br><span class="line">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span><br><span class="line">binlog_format&#x3D;mixed</span><br><span class="line">## 二进制日志自动删除&#x2F;过期的天数。默认值为0，表示不自动删除。</span><br><span class="line">expire_logs_days&#x3D;7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors&#x3D;1062</span><br><span class="line">## relay_log配置中继日志</span><br><span class="line">relay_log&#x3D;replicas-mysql-relay-bin</span><br><span class="line">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span><br><span class="line">log_slave_updates&#x3D;1</span><br><span class="line">## 防止改变数据(除了特殊的线程)</span><br><span class="line">read_only&#x3D;1</span><br></pre></td></tr></table></figure>

<h1 id="主数据库创建备份账户并授权-REPLICATION-SLAVE"><a href="#主数据库创建备份账户并授权-REPLICATION-SLAVE" class="headerlink" title="主数据库创建备份账户并授权 REPLICATION SLAVE"></a>主数据库创建备份账户并授权 <code>REPLICATION SLAVE</code></h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;Fengxuechao@13579&#x27;</span></span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>读写分离</tag>
      </tags>
  </entry>
  <entry>
    <title>MyCat概述与基本概念</title>
    <url>/2021/06/01/MyCat%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="什么是MyCat"><a href="#什么是MyCat" class="headerlink" title="什么是MyCat"></a>什么是MyCat</h2><p>MyCat 是什么？从定义和分类来看，它是一个开源的分布式数据库系统，前端的用户可以把它看成一个数据库代理，用MySql客户端和命令行工具都可以访问，而其后端则是用MySql原生的协议与多个MySql服务之间进行通信。MyCat的核心功能是分库分表，即将一个大表水平切分成N个小表，然后存放在后端的MySql数据当中。</p>
<p>MyCat发展到目前的版本，已经不是一个单纯的MySql代理了，它的后端支持MySql，Oracle，SqlServer，DB2等主流的数据库，也支持MongoDB这种NoSql数据库。而对于前端的用户来说，无论后端采用哪一种数据库，在MyCat里都是一个传统的数据库，支持标准的SQL语句，对于前端的开发人员来说，可以大大地降低开发难度，提升开发速度。</p>
<span id="more"></span>

<p>对于DBA来说，可以这样理解MyCat：</p>
<p><strong>MyCat就是MySql，而MyCat后面连接的MySql，可以理解为MySql中的存储引擎，比如：MyISAM、InnoDB等。所以，MyCat本身不存储数据，数据都是存储在MyCat后面连接的MySql上，数据的可靠性和事务都是MySql保证的。</strong></p>
<p>对于开发人员，可以这样理解MyCat：</p>
<p><strong>MyCat就是一个近似等于MySql的数据库库服务，你可以使用连接MySql的方式连接MyCat。绝大多数情况，你也可以使用常用的ORM框架连接MyCat，但是，对于分片的表，还是建议使用标准SQL语句，这样能够达到最佳的性能。</strong></p>
<p>对于架构师来说，可以这样理解MyCat：</p>
<p><strong>MyCat是一个强大的数据库中间件，不仅仅可以用作读写分离、分库分表，还可以用于容灾备份，云平台建设等，让你的架构具备很强的适应性和灵活性。</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df995a50931c1ff08150688.png" alt="图片描述"></p>
<h2 id="MyCat的应用场景"><a href="#MyCat的应用场景" class="headerlink" title="MyCat的应用场景"></a>MyCat的应用场景</h2><p>MyCat发展到现在，使用的场景很丰富，常见的典型的应用场景有：</p>
<ul>
<li>单纯的读写分离，此时配置最为简单，支持读写分离，主从切换；</li>
<li>分库分表，对于超过1000w的表进行分片，最大支持1000亿的数据；</li>
<li>多租户应用，每个应用一个数据库，应用只连接MyCat，程序本身不需要改造；</li>
<li>代替HBase，分析大数据</li>
</ul>
<p>读写分离和分库分表是MyCat应用最多，最基础的功能。</p>
<h2 id="MyCat中的基本概念"><a href="#MyCat中的基本概念" class="headerlink" title="MyCat中的基本概念"></a>MyCat中的基本概念</h2><p>MyCat是一个数据库的中间件，介于应用与数据库之间，是进行数据处理和交互的中间服务。正是由于它是一个数据库代理的中间件，它里边也有很多新的概念，这些概念先给大家介绍一下，大家有个印象，对后面的学习也很有帮助。</p>
<h3 id="逻辑库（Schema）"><a href="#逻辑库（Schema）" class="headerlink" title="逻辑库（Schema）"></a>逻辑库（Schema）</h3><p>在实际的开发中，开发人员不需要知道数据库中间件的存在，开发人员只需要有数据库的概念就可以了。所以数据库中间件可以被看做是一个或者多个数据库集群构成的逻辑库。例如：上图中的例子，我们可以理解为系统先做了垂直切分，被分为了3个库，用户库，订单库，商品库，而这3个库就被称为逻辑库。</p>
<h3 id="逻辑表（table）"><a href="#逻辑表（table）" class="headerlink" title="逻辑表（table）"></a>逻辑表（table）</h3><p>既然有逻辑库，那么就有逻辑表，对于应用系统来说，读写数据的表，就是逻辑表。而逻辑表中的数据，则是被水平切分后，分布在不同的分片库中。如上图所示：假设用户库中有一张用户表，这个用户表就被称为逻辑表，而用户表又被水平切分为3个表，每一个表中都存储一部分用户数据。业务系统在进行用户数据的读写时，只需要操作逻辑表就可以了，后面的分片细节则由MyCat进行操作，这些对于业务开发人员来说时完全透明的。当然，有些表的数据量没有那么大，完全不需要进行分片，只在一个物理的数据库表中即可。</p>
<p>凡是我们做的数据水平切分的表，我们把它叫做<strong>分片表</strong>。而数据量比较小，没有进行分片的表，我们叫它<strong>非分片表</strong>。</p>
<p>在真实的业务系统中，往往存在着大量的字典表，这些表的数据基本上很少变动，比如：订单状态。我们查询的时候，往往需要关联字典表去查询，比如：查询订单时，需要把订单状态关联查出，如果订单表做了分片，分布在不同的数据库中，而订单状态表由于数据量小，没有做分片，那么我们查询的时候就要跨库关联查询订单状态，增加了不必要的麻烦，不如我们干脆把订单状态表冗余到所有的订单分片库中，这样关联查询就不需要跨库了。我们把这种通过数据冗余方式复制到所有的分片库中的表，叫做<strong>全局表</strong>。</p>
<h3 id="分片节点（dataNode）"><a href="#分片节点（dataNode）" class="headerlink" title="分片节点（dataNode）"></a>分片节点（dataNode）</h3><p>数据被切分后，一张大表被分到不同的分片数据库上面，每个分片表所在的数据库就叫做<strong>分片节点</strong>。</p>
<h3 id="节点主机（dataHost）"><a href="#节点主机（dataHost）" class="headerlink" title="节点主机（dataHost）"></a>节点主机（dataHost）</h3><p>数据切分后，每一个分片节点不一定都会占用一个真正的物理主机，会存在多个分片节点在同一个物理主机上的情况，这些分片节点所在的主机就叫做<strong>节点主机</strong>。为了避免单节点并发数的限制，尽量将读写压力高的分片节点放在不同的节点主机上。</p>
<h3 id="分片规则（rule）"><a href="#分片规则（rule）" class="headerlink" title="分片规则（rule）"></a>分片规则（rule）</h3><p>一个大表被拆分成多个分片表，就需要一定的规则，按照某种业务逻辑，将数据分到一个确定的分片当中，这个规则就叫做<strong>分片规则</strong>。数据切分选择合适的分片规则非常重要，这将影响到后的数据处理难度，结合业务，选择合适的分片规则，是对架构师的一个重大考验。对于架构师来说，选择分片规则是一个艰难的，难以抉择的过程。</p>
<h3 id="全局序列号（sequence）"><a href="#全局序列号（sequence）" class="headerlink" title="全局序列号（sequence）"></a>全局序列号（sequence）</h3><p>大家有没有想过，数据切分以后，数据库表的中的id怎么办？原来在一张表的时候，我们采用id自增，但是数据分布到多个库怎么办？比如：</p>
<p>向用户表插入数据，第一条记录插入了用户库1，它的id为1；</p>
<p>第二条记录插入了用户库2，如果是自增，它的id也为1。这样id就混乱了，我们也无法确定一条数据的唯一标识了。</p>
<p>这时，我们需要借助外部的机制保证数据的唯一标识，这种保证数据唯一标识的机制，我们叫做<strong>全局序列号</strong>。</p>
]]></content>
      <categories>
        <category>分库分表</category>
      </categories>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Explain 详解</title>
    <url>/2021/05/10/MySQL-Explain-%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/tufujie/p/9413852.html">https://www.cnblogs.com/tufujie/p/9413852.html</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常工作中，我们会有时会开慢查询去记录一些执行时间比较久的SQL语句，找出这些SQL语句并不意味着完事了，些时我们常常用到explain这个命令来查看一个这些SQL语句的执行计划，查看该SQL语句有没有使用上了索引，有没有做全表扫描，这都可以通过explain命令来查看。所以我们深入了解MySQL的基于开销的优化器，还可以获得很多可能被优化器考虑到的访问策略的细节，以及当运行SQL语句时哪种策略预计会被优化器采用。</p>
<span id="more"></span>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 实际SQL，查找用户名为Jefabc的员工</span><br><span class="line">select * from emp where name &#x3D; &#39;Jefabc&#39;;</span><br><span class="line">-- 查看SQL是否使用索引，前面加上explain即可</span><br><span class="line">explain select * from emp where name &#x3D; &#39;Jefabc&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/512541-20180803142201303-545775900.png" alt="img"></p>
<p>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</p>
<h1 id="概要描述："><a href="#概要描述：" class="headerlink" title="概要描述："></a>概要描述：</h1><p>id:选择标识符<br>select_type:表示查询的类型。<br>table:输出结果集的表<br>partitions:匹配的分区<br>type:表示表的连接类型<br>possible_keys:表示查询时，可能使用的索引<br>key:表示实际使用的索引<br>key_len:索引字段的长度<br>ref:列与索引的比较<br>rows:扫描出的行数(估算的行数)<br>filtered:按表条件过滤的行百分比<br>Extra:执行情况的描述和说明</p>
<p><strong>下面对这些字段出现的可能进行解释：</strong></p>
<h2 id="一、-id"><a href="#一、-id" class="headerlink" title="一、 id"></a>一、 <strong>id</strong></h2><p>SELECT识别符。这是SELECT的查询序列号</p>
<p><strong>我的理解是SQL执行的顺序的标识，SQL从大到小的执行</strong></p>
<p>\1. id相同时，执行顺序由上至下</p>
<p>\2. 如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行</p>
<p>\3. id如果相同，可以认为是一组，从上往下顺序执行；在所有组中，id值越大，优先级越高，越先执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看在研发部并且名字以Jef开头的员工，经典查询</span><br><span class="line">explain select e.no, e.name from emp e left join dept d on e.dept_no &#x3D; d.no where e.name like &#39;Jef%&#39; and d.name &#x3D; &#39;研发部&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/512541-20180803143413064-173136748.png" alt="img"></p>
<h2 id="二、select-type"><a href="#二、select-type" class="headerlink" title="二、select_type"></a><strong>二、select_type</strong></h2><p>   <em><strong>*示查询中每个select子句的类型*</strong></em></p>
<p>(1) SIMPLE(简单SELECT，不使用UNION或子查询等)</p>
<p>(2) PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p>
<p>(3) UNION(UNION中的第二个或后面的SELECT语句)</p>
<p>(4) DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p>
<p>(5) UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p>
<p>(6) SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p>
<p>(7) DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p>
<p>(8) DERIVED(派生表的SELECT, FROM子句的子查询)</p>
<p>(9) UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p>
<h2 id="三、table"><a href="#三、table" class="headerlink" title="三、table"></a><strong>三、table</strong></h2><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p>
<h2 id="四、type"><a href="#四、type" class="headerlink" title="四、type"></a><strong>四、type</strong></h2><p>对表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。</p>
<p>常用的类型有： <strong>ALL、index、range、 ref、eq_ref、const、system、****NULL（从左到右，性能从差到好）</strong></p>
<p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p>
<p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p>
<p>range:只检索给定范围的行，使用一个索引来选择行</p>
<p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p>
<p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p>
<p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p>
<p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p>
<h2 id="五、possible-keys"><a href="#五、possible-keys" class="headerlink" title="五、possible_keys"></a><strong>五、possible_keys</strong></h2><p><strong>指出MySQL能使用哪个索引在表中找到记录，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）</strong></p>
<p>该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。<br>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p>
<h2 id="六、Key"><a href="#六、Key" class="headerlink" title="六、Key"></a><strong>六、Key</strong></h2><p><strong>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中</strong></p>
<p>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p>
<h2 id="七、key-len"><a href="#七、key-len" class="headerlink" title="七、key_len"></a><strong>七、key_len</strong></h2><p><strong>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）</strong></p>
<p>不损失精确性的情况下，长度越短越好 </p>
<h2 id="八、ref"><a href="#八、ref" class="headerlink" title="八、ref"></a><strong>八、ref</strong></h2><p><strong>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</strong></p>
<h2 id="九、rows"><a href="#九、rows" class="headerlink" title="九、rows"></a><strong>九、rows</strong></h2><p> <strong>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</strong></p>
<h2 id="十、Extra"><a href="#十、Extra" class="headerlink" title="十、Extra"></a><strong>十、Extra</strong></h2><p><strong>该列包含MySQL解决查询的详细信息,有以下几种情况：</strong></p>
<p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>
<p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p>
<p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 测试Extra的filesort</span><br><span class="line">explain select * from emp order by name;</span><br></pre></td></tr></table></figure>

<p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>
<p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p>
<p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>
<p>No tables used：Query语句中使用from dual 或不含任何from子句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- explain select now() from dual;</span><br></pre></td></tr></table></figure>

<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>• EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况<br>• EXPLAIN不考虑各种Cache<br>• EXPLAIN不能显示MySQL在执行查询时所作的优化工作<br>• 部分统计信息是估算的，并非精确值<br>• EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计划。**</p>
<p>通过收集统计信息不可能存在结果</p>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据类型</title>
    <url>/2019/06/20/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h1><ul>
<li>数字类型<ul>
<li>整数: tinyint、smallint、mediumint、int、bigint</li>
<li>浮点数: float、double、real、decimal</li>
</ul>
</li>
<li>日期和时间: date、time、datetime、timestamp、year</li>
<li>字符串类型<ul>
<li>字符串: char、varchar</li>
<li>文本: tinytext、text、mediumtext、longtext</li>
</ul>
</li>
<li>二进制(可用来存储图片、音乐等): tinyblob、blob、mediumblob、longblob</li>
</ul>
<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table>
<thead>
<tr>
<th>type</th>
<th>Storage(Bytes)</th>
<th>Signed Range</th>
<th>Unsigned Range</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1</td>
<td>-128-127</td>
<td>0-255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2</td>
<td>-32768-32767</td>
<td>0-65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3</td>
<td>-8388608-8388607</td>
<td>0-16777215</td>
</tr>
<tr>
<td>INT</td>
<td>4</td>
<td>-2147483648-2147483647</td>
<td>0-4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8</td>
<td>-9223372036854775808-9223372036854775807</td>
<td>0-18446744073709551615</td>
</tr>
</tbody></table>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><table>
<thead>
<tr>
<th>属性</th>
<th>存储空间</th>
<th>精度</th>
<th>精确性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>FLOAT(M, D)</td>
<td>4 bytes</td>
<td>单精度</td>
<td>非精确</td>
<td>单精度浮点型，m总个数，d小数位</td>
</tr>
<tr>
<td>DOUBLE(M, D)</td>
<td>8 bytes</td>
<td>双精度</td>
<td>比Float精度高</td>
<td>双精度浮点型，m总个数，d小数位</td>
</tr>
</tbody></table>
<ul>
<li>FLOAT容易造成精度丢失</li>
</ul>
<h3 id="定点数DECIMAL"><a href="#定点数DECIMAL" class="headerlink" title="定点数DECIMAL"></a>定点数DECIMAL</h3><ul>
<li>高精度的数据类型，常用来存储交易相关的数据</li>
<li>DECIMAL(M,N).M代表总精度，N代表小数点右侧的位数（标度）</li>
<li>1 &lt; M &lt; 254, 0 &lt; N &lt; 60;</li>
<li>存储空间变长</li>
</ul>
<h2 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>字节</th>
<th>例</th>
<th>精确性</th>
</tr>
</thead>
<tbody><tr>
<td>DATE</td>
<td>三字节</td>
<td>2015-05-01</td>
<td>精确到年月日</td>
</tr>
<tr>
<td>TIME</td>
<td>三字节</td>
<td>11:12:00</td>
<td>精确到时分秒</td>
</tr>
<tr>
<td>DATETIME</td>
<td>八字节</td>
<td>2015-05-01 11::12:00</td>
<td>精确到年月日时分秒</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td></td>
<td>2015-05-01 11::12:00</td>
<td>精确到年月日时分秒</td>
</tr>
</tbody></table>
<ul>
<li>MySQL在<code>5.6.4</code>版本之后，<code>TIMESTAMP</code>和<code>DATETIME</code>支持到微秒。</li>
<li><code>TIMESTAMP</code>会根据系统时区进行转换，<code>DATETIME</code>则不会</li>
<li>存储范围的区别  <ul>
<li><code>TIMESTAMP</code>存储范围：1970-01-01 00::00:01 to 2038-01-19 03:14:07</li>
<li><code>DATETIME</code>的存储范围：1000-01-01 00:00:00 to 9999-12-31 23:59:59</li>
</ul>
</li>
<li>一般使用<code>TIMESTAMP</code>国际化</li>
<li>如存时间戳使用数字类型<code>BIGINT</code></li>
</ul>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table>
<thead>
<tr>
<th>类型</th>
<th>单位</th>
<th>最大</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR</td>
<td>字符</td>
<td>最大为255字符</td>
<td>存储定长，容易造成空间的浪费</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>字符</td>
<td>可以超过255个字符</td>
<td>存储变长，节省存储空间</td>
</tr>
<tr>
<td>TEXT</td>
<td>字节</td>
<td>总大小为65535字节，约为64KB</td>
<td>-</td>
</tr>
</tbody></table>
<ul>
<li>TEXT在MySQL内部大多存储格式为溢出页，效率不如CHAR</li>
<li>Mysql默认为utf-8，那么在英文模式下1个字符=1个字节，在中文模式下1个字符=3个字节。</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><code>SERIAL</code> 是 <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code> 的别名。</p>
]]></content>
      <categories>
        <category>RDBMS</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分布式事务原理探究</title>
    <url>/2019/05/06/MySQL%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<p>分布式事务处理的XA规范(由 AP、RM、TM 组成):</p>
<ul>
<li>其中应用程序（Application Program ，简称 AP）：AP 定义事务边界（定义事务开始和结束）并访问事务边界内的资源。</li>
<li>资源管理器（Resource Manager，简称 RM）：RM 管理计算机共享的资源，许多软件都可以去访问这些资源，资源包含比如数据库、文件系统、打印机服务器等。</li>
<li>事务管理器（Transaction Manager ，简称TM）：负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</li>
</ul>
<span id="more"></span>

<h1 id="MySQL-中基于-XA-实现的分布式事务-学习记录"><a href="#MySQL-中基于-XA-实现的分布式事务-学习记录" class="headerlink" title="MySQL 中基于 XA 实现的分布式事务-学习记录"></a>MySQL 中基于 XA 实现的分布式事务-学习记录</h1><h2 id="XA-协议"><a href="#XA-协议" class="headerlink" title="XA 协议"></a>XA 协议</h2><p><img src="https://img-blog.csdnimg.cn/20190214135801720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>分布式事务处理的XA规范(由 AP、RM、TM 组成):</p>
<ul>
<li>其中应用程序（Application Program ，简称 AP）：AP 定义事务边界（定义事务开始和结束）并访问事务边界内的资源。</li>
<li>资源管理器（Resource Manager，简称 RM）：RM 管理计算机共享的资源，许多软件都可以去访问这些资源，资源包含比如数据库、文件系统、打印机服务器等。</li>
<li>事务管理器（Transaction Manager ，简称TM）：负责管理全局事务，分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚、失败恢复等。</li>
</ul>
<p>XA 主要规定了 RM 与 TM 之间的交互，下面来看下 XA 规范中定义的 RM 和 TM 交互的接口：</p>
<p><img src="https://img-blog.csdnimg.cn/2019021413581599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>xa_start 负责开启或者恢复一个事务分支，并且关联 XID 到调用线程</li>
<li>xa_end 负责取消当前线程与事务分支的关联</li>
<li>xa_prepare 负责询问 RM 是否准备好了提交事务分支</li>
<li>xa_commit 通知 RM 提交事务分支</li>
<li>xa_rollback 通知 RM 回滚事务分支</li>
</ul>
<p>XA 协议是使用了二阶段协议的，其中：</p>
<ul>
<li>第一阶段 TM 要求所有的 RM 准备提交对应的事务分支，询问 RM 是否有能力保证成功的提交事务分支，RM 根据自己的情况，如果判断自己进行的工作可以被提交，那就就对工作内容进行持久化，并给 TM 回执 OK；否者给 TM 的回执 NO。RM 在发送了否定答复并回滚了已经的工作后，就可以丢弃这个事务分支信息了。</li>
<li>第二阶段 TM 根据阶段 1 各个 RM prepare 的结果，决定是提交还是回滚事务。如果所有的 RM 都 prepare 成功，那么 TM 通知所有的 RM 进行提交；如果有 RM prepare 回执 NO 的话，则 TM 通知所有 RM 回滚自己的事务分支。</li>
</ul>
<p>也就是 TM 与 RM 之间是通过两阶段提交协议进行交互的。</p>
<h2 id="MySQL-实现-XA"><a href="#MySQL-实现-XA" class="headerlink" title="MySQL 实现 XA"></a>MySQL 实现 XA</h2><p>确认下 MySQL 是否启动了 XA 功能：<code>show variables like &#39;innodb_support_xa&#39;</code></p>
<h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h3><p>如下代码是对两个数据库进行转账操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.mysqlxa2pc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.MysqlXADataSource;</span><br><span class="line"><span class="keyword">import</span> com.mysql.cj.jdbc.MysqlXid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.XAConnection;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.XAException;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.XAResource;</span><br><span class="line"><span class="keyword">import</span> javax.transaction.xa.Xid;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XaExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, XAException </span>&#123;</span><br><span class="line">        String url1 = <span class="string">&quot;jdbc:mysql://192.168.120.63:3306/learn?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        String url2 = <span class="string">&quot;jdbc:mysql://192.168.120.63:3306/learn2?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line">        String url3 = <span class="string">&quot;jdbc:mysql://localhost:3306/learn?useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从不同的数据库获取数据库数据源</span></span><br><span class="line">        MysqlXADataSource ds1 = getDataSource(url1, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        MysqlXADataSource ds2 = getDataSource(url2, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据库1获取连接</span></span><br><span class="line">        XAConnection xAConn1 = ds1.getXAConnection();</span><br><span class="line">        Connection conn1 = xAConn1.getConnection();</span><br><span class="line">        XAResource xaResource1 = xAConn1.getXAResource();</span><br><span class="line">        Statement statement1 = conn1.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据库2获取连接</span></span><br><span class="line">        XAConnection xAConn2 = ds2.getXAConnection();</span><br><span class="line">        Connection conn2 = xAConn2.getConnection();</span><br><span class="line">        XAResource xaResource2 = xAConn2.getXAResource();</span><br><span class="line">        Statement statement2 = conn2.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其中 xid 是一个全局唯一的 id 标示一个分支事务，每个分支事务有自己的全局唯一的一个 id。</span></span><br><span class="line">        Xid xid1 = <span class="keyword">new</span> MysqlXid(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x01</span>&#125;, <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x02</span>&#125;, <span class="number">100</span>);</span><br><span class="line">        Xid xid2 = <span class="keyword">new</span> MysqlXid(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x011</span>&#125;, <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x012</span>&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 事务分支1关联事务sql语句</span></span><br><span class="line">            xaResource1.start(xid1, XAResource.TMNOFLAGS);</span><br><span class="line">            <span class="keyword">int</span> update1 = statement1.executeUpdate(<span class="string">&quot;update account_from set money = money - 0.5 where id = 1&quot;</span>);</span><br><span class="line">            xaResource1.end(xid1, XAResource.TMSUCCESS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 事务分支2关联事务sql语句</span></span><br><span class="line">            xaResource2.start(xid2, XAResource.TMNOFLAGS);</span><br><span class="line">            <span class="keyword">int</span> update2 = statement2.executeUpdate(<span class="string">&quot;update account_to set money = money + 0.5 where id = 1&quot;</span>);</span><br><span class="line">            xaResource2.end(xid2, XAResource.TMSUCCESS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 两阶段提交协议第一阶段</span></span><br><span class="line">            <span class="keyword">int</span> ret1 = xaResource1.prepare(xid1);</span><br><span class="line">            <span class="keyword">int</span> ret2 = xaResource2.prepare(xid2);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 两阶段提交协议第二阶段</span></span><br><span class="line">            <span class="keyword">if</span> (XAResource.XA_OK == ret1 &amp;&amp; XAResource.XA_OK == ret2) &#123;</span><br><span class="line">                xaResource1.commit(xid1, <span class="keyword">false</span>);</span><br><span class="line">                xaResource2.commit(xid2, <span class="keyword">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;result:&quot;</span> + update1 + <span class="string">&quot;, result2:&quot;</span> + update2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XAException e) &#123;</span><br><span class="line">            xaResource1.rollback(xid1);</span><br><span class="line">            xaResource2.rollback(xid2);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 MysqlXADataSource</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MysqlXADataSource <span class="title">getDataSource</span><span class="params">(String url, String username, String password)</span> </span>&#123;</span><br><span class="line">        MysqlXADataSource dataSource = <span class="keyword">new</span> MysqlXADataSource();</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><p>MySQL 8.x版本更新安全插件 <code>mysql_native_password</code> 变为 <code>caching_sha2_password</code></p>
<p>Unable to load authentication plugin ‘caching_sha2_password’.</p>
<p>解决办法：升级 <code>mysql-connector-java</code> 依赖的版本。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>分布式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL事务相关</title>
    <url>/2021/09/14/MySQL%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>本文重新梳理一些关于 MySQL 事务相关的概念，主要包括：事务隔离引发的问题和事务隔离的级别。</p>
<span id="more"></span>

<h1 id="2-什么是数据库事务？"><a href="#2-什么是数据库事务？" class="headerlink" title="2 什么是数据库事务？"></a>2 什么是数据库事务？</h1><p>我觉得首先在讨论事务隔离之前，首先复习一下事务的基本概念。</p>
<p>数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成。 ——<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/9744607">百度百科</a></p>
<p>简单来说，假如你有2条sql要执行，如果放到一个事务里，要么2个sql都执行成功，要么都失败。都执行成功了就提交事务，有一个失败了就回滚，（在一个事务里）不存在一个成功一个失败。</p>
<h1 id="3-事务的-ACID-原则-？"><a href="#3-事务的-ACID-原则-？" class="headerlink" title="3 事务的 ACID 原则 ？"></a>3 事务的 ACID 原则 ？</h1><ul>
<li>原子性：事务的所有操作要么全部成功，要么全部回滚。</li>
<li>一致性：总是从一个一致性的状态转换到另一个一致性的状态。</li>
<li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中。</li>
<li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li>
</ul>
<h1 id="4-事务隔离引发的问题？"><a href="#4-事务隔离引发的问题？" class="headerlink" title="4 事务隔离引发的问题？"></a>4 事务隔离引发的问题？</h1><ul>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ul>
<p>以上三个场景都是出现在多个事务同时执行时的场景。</p>
<h2 id="4-1-什么是脏读（Read-Uncommitted）？"><a href="#4-1-什么是脏读（Read-Uncommitted）？" class="headerlink" title="4.1 什么是脏读（Read Uncommitted）？"></a>4.1 什么是脏读（Read Uncommitted）？</h2><p>通俗的讲，<strong>一个事务在处理过程中读取了另外一个事务未提交的数据</strong>，万一你没提交数据就回滚了，我读到的这个数据你说脏不脏。</p>
<p>举例：</p>
<blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">事务1： A给B转账500，但是事务未提交。</span><br><span class="line">事务2： B查看了账户，发现A转过来500，本来只转300过来就好，发现多转了200，心里美滋滋。。。</span><br><span class="line">事务1： A及时发现多转了200，修改了转300，提交事务。</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="怎么解决？"><a href="#怎么解决？" class="headerlink" title="怎么解决？"></a><strong>怎么解决？</strong></h3><p>设置隔离级别为 <code>Read Committed</code></p>
<h2 id="4-2-什么是不可重复读（Non-repeatable-Read）"><a href="#4-2-什么是不可重复读（Non-repeatable-Read）" class="headerlink" title="4.2 什么是不可重复读（Non-repeatable Read）?"></a>4.2 什么是不可重复读（Non-repeatable Read）?</h2><p>通俗的讲，<strong>一个事务范围内，多次查询某个数据，却得到不同的结果</strong>。</p>
<p>举例：</p>
<blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">事务1：B去买东西，卡里有500块钱，消费100，还没提交事务。</span><br><span class="line">事务2：B的老婆把B的500块钱转出去了，已提交事务。</span><br><span class="line">事务1：B此时提交事务，支付不了。再次读取发现卡里没钱支付。</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="怎么解决？-1"><a href="#怎么解决？-1" class="headerlink" title="怎么解决？"></a><strong>怎么解决？</strong></h3><p>设置隔离级别为 <code>Repeatable read</code></p>
<h3 id="与脏读的区别？"><a href="#与脏读的区别？" class="headerlink" title="与脏读的区别？"></a><strong>与脏读的区别？</strong></h3><p>脏读是读到未提交的数据，而不可重复读读到的却是已经提交的数据，这实际上是违反了事务的一致性原则</p>
<h2 id="4-3-什么是幻读（Phantom-Read）？"><a href="#4-3-什么是幻读（Phantom-Read）？" class="headerlink" title="4.3 什么是幻读（Phantom Read）？"></a>4.3 什么是幻读（Phantom Read）？</h2><p>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为幻读。</p>
<p>在Repeatable Read隔离级别下，一个事务可能会遇到幻读(Phantom Read)的问题。<br>事务A读取与搜索条件相匹配的若干行。事务B以插入或删除行等方式来修改事务A的结果集，然后再提交。</p>
<p>举例：</p>
<blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">事务1：B的老婆查看B的卡消费记录，目前共消费了500元。</span><br><span class="line">事务2：B此时刚在外面请朋友吃完饭，付款了100，事务已提交。</span><br><span class="line">B的老婆决定把账单打印出来，晚上跟B对账，却发现打印出来的消费为600元。她刚才明明看到是500，怎么是600，难道是幻觉？</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="怎么解决？-2"><a href="#怎么解决？-2" class="headerlink" title="怎么解决？"></a>怎么解决？</h3><p>可以将隔离级别设置为最高级的<code>Serializable</code>，这时候事务都是按照顺序执行的，脏读、幻读、不可重复度都可以避免，但是性能很差。</p>
<h1 id="5-事务的隔离级别"><a href="#5-事务的隔离级别" class="headerlink" title="5 事务的隔离级别"></a>5 事务的隔离级别</h1><p>为了解决以上的问题，主流的关系型数据库都会提供四种事务的隔离级别。事务隔离级别从低到高分别是：<code>读未提交</code>、<code>读已提交</code>、<code>可重复读</code>、<code>串行化</code>。事务隔离级别等级越高，越能保证数据的一致性和完整性，但是执行效率也越低。</p>
<ul>
<li><p>**READ-UNCOMMITTED(读取未提交)**： </p>
<p>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>
</li>
<li><p>**READ-COMMITTED(读取已提交)**： </p>
<p>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</p>
</li>
<li><p>**REPEATABLE-READ(可重复读)**：</p>
<p>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</p>
</li>
<li><p>**SERIALIZABLE(可串行化)**： </p>
<p>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p>
</li>
</ul>
<p>所以在设置数据库的事务隔离级别时需要做一下权衡，<strong>MySQL默认是<code>REPEATABLE-READ</code>的级别，Oracle 默认采用的 <code>READ-COMMITTED</code>隔离级别</strong>。</p>
<h2 id="5-1-如何查看当前MySQL-的隔离级别？"><a href="#5-1-如何查看当前MySQL-的隔离级别？" class="headerlink" title="5.1 如何查看当前MySQL 的隔离级别？"></a>5.1 如何查看当前MySQL 的隔离级别？</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;transaction_isolation&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210914160820416.png" alt="image-20210914160820416"></p>
<h1 id="6-事务的隔离机制的实现？"><a href="#6-事务的隔离机制的实现？" class="headerlink" title="6 事务的隔离机制的实现？"></a>6 事务的隔离机制的实现？</h1><h2 id="6-1-MVCC-概念介绍"><a href="#6-1-MVCC-概念介绍" class="headerlink" title="6.1 MVCC 概念介绍"></a>6.1 MVCC 概念介绍</h2><p>前面讲了这么多的事务隔离相关的东西，但还是不懂事务隔离的原理？</p>
<p>直到我查看了《高性能 MySQL》的这一章节：</p>
<blockquote>
<p>1.4 多版本并发控制</p>
<p>MySQL 的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制（MVCC）。不仅是MySQL，包括 Oracle、PostgreSQL 等其它数据库系统也都实现了MVCC，但各自的实现机制不尽相同，因为 MVCC 没有一个统一的实现标准。</p>
<p>**<font color=red>可以认为 MVCC 是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行</font>**。</p>
<p>MVCC 的实现，是通过保存数据在某个时间得按的快照来实现的。也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p>
<p>InnoDB 的 MVCC，是通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。下面看一下在 <code>REPEATABLE READ</code> 隔离级别下，MVCC 具体是如何操作的。</p>
<p>SELECT </p>
<p>​         InnoDB 会根据以下两个条件检查版本号：</p>
<p>​                a. InnoDB 只查找版本早于当前事务版本的数据行（也就是说，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。</p>
<p>​                b. 行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。</p>
<p>​        只有符合上述两个条件的记录，才能返回作为查询结果。</p>
<p>​        INSERT</p>
<p>​                InnoDB 为新插入的每一行保存当前系统版本号作为行版本号。</p>
<p>​        DELETE</p>
<p>​                InnoDB 为删除的每一行保存当前系统版本号座位行删除标识</p>
<p>​        UPDATE</p>
<p>​                InnoDB 为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行到原来的行作为删除标识</p>
<p>保存这两个额外系统版本号，使大多数读操作都可以不用加锁。这样设计使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作。</p>
<p>MVCC 只在 REPEATABLE READ 和 READ COMMITTED 两个隔离级别下工作。其他两个隔离级别都和 MVCC 不兼容，因为 READ UNCOMMITTED 总是读取最新的数据行，而不是符合当前事务版本的数据行。而 SERIALIZABLE 则会对所有读取的行都加锁。 </p>
</blockquote>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql中日期比较大小的方法</title>
    <url>/2019/10/08/Mysql%E4%B8%AD%E6%97%A5%E6%9C%9F%E6%AF%94%E8%BE%83%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>假如有个表<code>commodity</code>有个字段add_time,它的数据类型为datetime,有人可能会这样写sql：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> add_time <span class="operator">=</span> <span class="string">&#x27;2013-01-12&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这种语句，如果你存储的格式是YY-mm-dd这样，那么OK，<br>如果你存储的格式是：2018-01-12 23:23:56 这种就悲剧了，此时你可以用 DATE() 函数用来返回日期的部分；sql如下处理：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="type">Date</span>(add_time) <span class="operator">=</span> <span class="string">&#x27;2018-01-12&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>如果你要查询2017年1月份加入的产品呢？</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="type">date</span>(add_time) <span class="keyword">between</span> <span class="string">&#x27;2013-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2013-01-31&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  或者： 还可以这样写：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">Year</span>(add_time) <span class="operator">=</span> <span class="number">2013</span> <span class="keyword">and</span> <span class="keyword">Month</span>(add_time) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>其date_col的值是在最后30天以内：</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> commodity  <span class="keyword">WHERE</span> TO_DAYS( NOW() ) <span class="operator">-</span> TO_DAYS( date_col )  <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>DAYOFWEEK(date) ： 返回日期date的星期索引(1=星期天, 7=星期六) 这些索引值对应于ODBC标准。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DAYOFWEEK(<span class="string">&#x27;1998-02-03&#x27;</span>);                     <span class="operator">-</span><span class="operator">&gt;</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>WEEKDAY(date)  ： 返回date的星期索引 (0=星期一, 6= 星期天)</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> WEEKDAY(<span class="string">&#x27;1997-10-04 22:23:00&#x27;</span>);             <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">5</span></span><br><span class="line"><span class="keyword">select</span> WEEKDAY(<span class="string">&#x27;2018-07-07&#x27;</span>);                      <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>DAYOFMONTH(date) ：  返回date的月份中日期，在1到31范围内。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DAYOFMONTH(<span class="string">&#x27;1998-02-03&#x27;</span>);                    <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>DAYOFYEAR(date) ：  返回date在一年中的日数, 在1到366范围内。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DAYOFYEAR(<span class="string">&#x27;1998-02-03&#x27;</span>);                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">34</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>MONTH(date) ：   返回date的月份，范围1到12。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">MONTH</span>(<span class="string">&#x27;1998-02-03&#x27;</span>);                         <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>DAYNAME(date) ： 返回date的星期名字。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DAYNAME(&quot;1998-02-05&quot;);                       <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;Thursday&#x27;</span></span><br><span class="line"><span class="keyword">select</span> DAYNAME(&quot;20180707&quot;);                         <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;Saturday&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>MONTHNAME(date) ： 返回date的月份名字。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> MONTHNAME(&quot;1998-02-05&quot;);                     <span class="operator">-</span><span class="operator">&gt;</span> <span class="string">&#x27;February&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>QUARTER(date)  ： 返回date一年中的季度，范围1到4。</li>
</ol>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> QUARTER(<span class="string">&#x27;98-04-01&#x27;</span>);                          <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">select</span> QUARTER(<span class="string">&#x27;20180707&#x27;</span>);                          <span class="operator">-</span><span class="operator">&gt;</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>这是做统计数据时候用了的sql.</p>
<p>查询今天、昨天、一周内、8周、12周等数据 直接在sql写时间查询。 避免时区转化。数据库我们使用的UTC时间。</p>
<ul>
<li><p>Today</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> todayBegin;</span><br><span class="line"><span class="keyword">SELECT</span> date_add(date_add(str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>) <span class="keyword">as</span> todayEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>昨天</p>
<p>``sql<br>SELECT str_to_date(date_sub(curdate(), interval 1 day),’%Y-%m-%d %H:%i:%s’) as yestodayBegin;<br>SELECT date_add(date_add(str_to_date(date_sub(curdate(), interval 1 day),’%Y-%m-%d %H:%i:%s’),interval 1 DAY),INTERVAL -1 SECOND) as yestodayEnd;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 最近7天 Last Seven days</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sql</span><br><span class="line">  SELECT str_to_date(date_sub(curdate(), interval 6 day),&#39;%Y-%m-%d %H:%i:%s&#39;) as lastSevenDaysBegin;</span><br><span class="line">  SELECT date_add(date_add(str_to_date(curdate(),&#39;%Y-%m-%d %H:%i:%s&#39;),interval 1 DAY),INTERVAL -1 SECOND) as todayEnd;</span><br></pre></td></tr></table></figure>
</li>
<li><p>最近14天 Last Fourteen days</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(date_sub(curdate(), <span class="type">interval</span> <span class="number">13</span> <span class="keyword">day</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> lastFourteenDaysBegin;</span><br><span class="line"><span class="keyword">SELECT</span> date_add(date_add(str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>) <span class="keyword">as</span> todayEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>最近30天 Last Thirty days</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(date_sub(curdate(), <span class="type">interval</span> <span class="number">29</span> <span class="keyword">day</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> lastThirtyDaysBegin;</span><br><span class="line"><span class="keyword">SELECT</span> date_add(date_add(str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>) <span class="keyword">as</span> todayEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>最近8周 Last eight weeks</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(date_sub(curdate(), <span class="type">interval</span> <span class="number">8</span> week),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> lastEightWeeksBegin;</span><br><span class="line"><span class="keyword">SELECT</span> date_add(date_add(str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>) <span class="keyword">as</span> todayEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>12 最近12周 Last twelve weeks</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(date_sub(curdate(), <span class="type">interval</span> <span class="number">12</span> week),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> lastTwelveWeeksBegin;</span><br><span class="line"><span class="keyword">SELECT</span> date_add(date_add(str_to_date(curdate(),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>) <span class="keyword">as</span> todayEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>最近3月 Last three month</p>
<p>``sql<br>SELECT str_to_date(date_sub(curdate(), interval 3 month),’%Y-%m-%d %H:%i:%s’) as lastThreeMonthBegin;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 未来3天 Three day later</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sql</span><br><span class="line">  SELECT str_to_date(date_sub(curdate(), interval -3 day),&#39;%Y-%m-%d %H:%i:%s&#39;) as threeDaysLaterEnd;</span><br></pre></td></tr></table></figure></li>
<li><p>未来3月 Three months later</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(date_sub(curdate(), <span class="type">interval</span> <span class="number">-3</span> <span class="keyword">month</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>) <span class="keyword">as</span> threeMonthsLaterEnd; </span><br></pre></td></tr></table></figure></li>
<li><p>取一天的开始时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> str_to_date(DATE_FORMAT(<span class="string">&#x27;2018-03-03&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>取第二天的开始时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DATE_ADD(str_to_date(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">select</span> DATE_ADD(str_to_date(DATE_FORMAT(<span class="string">&#x27;2018-03-03&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>取一天的结束时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DATE_ADD(DATE_ADD(str_to_date(DATE_FORMAT(NOW(),<span class="string">&#x27;%Y-%m-%d&#x27;</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>);</span><br><span class="line"><span class="keyword">select</span> DATE_ADD(DATE_ADD(str_to_date(DATE_FORMAT(<span class="string">&#x27;2018-03-03&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>),<span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>),<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">SECOND</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>RDBMS</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty之ChannelOption</title>
    <url>/2021/05/26/Netty%E4%B9%8BChannelOption/</url>
    <content><![CDATA[<p>在用netty作为底层网络通信的时候关于ChannelOption的参数让我一直模糊不清楚，于是去看一下linux网络编程，发现ChannelOption的各种属性在套接字选项中都有对应</p>
<p>下面简单的总结一下ChannelOption的含义已及使用的场景</p>
<span id="more"></span>

<h2 id="ChannelOption-SO-BACKLOG"><a href="#ChannelOption-SO-BACKLOG" class="headerlink" title="ChannelOption.SO_BACKLOG"></a>ChannelOption.SO_BACKLOG</h2><p>ChannelOption.SO_BACKLOG对应的是tcp/ip协议listen函数中的backlog参数，函数listen(int socketfd,int backlog)用来初始化服务端可连接队列，服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接，多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</p>
<h2 id="ChannelOption-SO-REUSEADDR"><a href="#ChannelOption-SO-REUSEADDR" class="headerlink" title="ChannelOption.SO_REUSEADDR"></a>ChannelOption.SO_REUSEADDR</h2><p>ChanneOption.SO_REUSEADDR对应于套接字选项中的SO_REUSEADDR，这个参数表示允许重复使用本地地址和端口，比如，某个服务器进程占用了TCP的80端口进行监听，此时再次监听该端口就会返回错误，使用该参数就可以解决问题，该参数允许共用该端口，这个在服务器程序中比较常使用，比如某个进程非正常退出，该程序占用的端口可能要被占用一段时间才能允许其他进程使用，而且程序死掉以后，内核一需要一定的时间才能够释放此端口，不设置SO_REUSEADDR就无法正常使用该端口。</p>
<h2 id="ChannelOption-SO-KEEPALIVE"><a href="#ChannelOption-SO-KEEPALIVE" class="headerlink" title="ChannelOption.SO_KEEPALIVE"></a>ChannelOption.SO_KEEPALIVE</h2><p>Channeloption.SO_KEEPALIVE参数对应于套接字选项中的SO_KEEPALIVE，该参数用于设置TCP连接，当设置该选项以后，连接会测试链接的状态，这个选项用于可能长时间没有数据交流的连接。当设置该选项以后，如果在两小时内没有数据的通信时，TCP会自动发送一个活动探测数据报文。</p>
<h2 id="ChannelOption-SO-SNDBUF和ChannelOption-SO-RCVBUF"><a href="#ChannelOption-SO-SNDBUF和ChannelOption-SO-RCVBUF" class="headerlink" title="ChannelOption.SO_SNDBUF和ChannelOption.SO_RCVBUF"></a>ChannelOption.SO_SNDBUF和ChannelOption.SO_RCVBUF</h2><p>ChannelOption.SO_SNDBUF参数对应于套接字选项中的SO_SNDBUF，ChannelOption.SO_RCVBUF参数对应于套接字选项中的SO_RCVBUF这两个参数用于操作接收缓冲区和发送缓冲区的大小，接收缓冲区用于保存网络协议站内收到的数据，直到应用程序读取成功，发送缓冲区用于保存发送数据，直到发送成功。</p>
<h2 id="ChannelOption-SO-LINGER"><a href="#ChannelOption-SO-LINGER" class="headerlink" title="ChannelOption.SO_LINGER"></a>ChannelOption.SO_LINGER</h2><p>ChannelOption.SO_LINGER参数对应于套接字选项中的SO_LINGER,Linux内核默认的处理方式是当用户调用close（）方法的时候，函数返回，在可能的情况下，尽量发送数据，不一定保证会发生剩余的数据，造成了数据的不确定性，使用SO_LINGER可以阻塞close()的调用时间，直到数据完全发送</p>
<h2 id="ChannelOption-TCP-NODELAY"><a href="#ChannelOption-TCP-NODELAY" class="headerlink" title="ChannelOption.TCP_NODELAY"></a>ChannelOption.TCP_NODELAY</h2><p>ChannelOption.TCP_NODELAY参数对应于套接字选项中的TCP_NODELAY,该参数的使用与Nagle算法有关Nagle算法是将小的数据包组装为更大的帧然后进行发送，而不是输入一次发送一次,因此在数据包不足的时候会等待其他数据的到了，组装成大的数据包进行发送，虽然该方式有效提高网络的有效负载，但是却造成了延时，而该参数的作用就是禁止使用Nagle算法，使用于小数据即时传输，于TCP_NODELAY相对应的是TCP_CORK，该选项是需要等到发送的数据量最大的时候，一次性发送数据，适用于文件传输。</p>
]]></content>
      <categories>
        <category>netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
        <tag>ChannelOption</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引底层:B+数详解</title>
    <url>/2021/05/12/MySQL%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82-B-%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="https://mp.weixin.qq.com/s/JqaN_1GPiqRQzXt2AizmdA">https://mp.weixin.qq.com/s/JqaN_1GPiqRQzXt2AizmdA</a></p>
</blockquote>
<p>当我们发现SQL执行很慢的时候，自然而然想到的就是加索引。对于范围查询，索引的底层结构就是B+树。今天我们一起来学习一下B+树哈~</p>
<span id="more"></span>


<ul>
<li>树简介、树种类</li>
<li>B-树、B+树简介</li>
<li>B+树插入</li>
<li>B+树查找</li>
<li>B+树删除</li>
<li>B+树经典面试题</li>
</ul>
<h3 id="树的简介"><a href="#树的简介" class="headerlink" title="树的简介"></a>树的简介</h3><h4 id="树的简介-1"><a href="#树的简介-1" class="headerlink" title="树的简介"></a>树的简介</h4><p>树跟数组、链表、堆栈一样，是一种数据结构。它由有限个节点，组成具有层次关系的集合。因为它看起来像一棵树，所以得其名。一颗普通的树如下:</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141128650.png" alt="图片"></p>
<p>树是包含n（n为整数，大于0）个结点， n-1条边的有穷集，它有以下特点：</p>
<blockquote>
<p>❝</p>
<ul>
<li>每个结点或者无子结点或者只有有限个子结点；</li>
<li>有一个特殊的结点,它没有父结点，称为根结点；</li>
<li>每一个非根节点有且只有一个父节点；</li>
<li>树里面没有环路</li>
</ul>
<p>❞</p>
</blockquote>
<p>一些有关于树的概念：</p>
<blockquote>
<p>❝</p>
<ul>
<li>结点的度：一个结点含有的子结点个数称为该结点的度；</li>
<li>树的度：一棵树中，最大结点的度称为树的度；</li>
<li>父结点：若一个结点含有子结点，则这个结点称为其子结点的父结点；</li>
<li>深度：对于任意结点n,n的深度为从根到n的唯一路径长，根结点的深度为0；</li>
<li>高度：对于任意结点n,n的高度为从n到一片树叶的最长路径长，所有树叶的高度为0；</li>
</ul>
<p>❞</p>
</blockquote>
<h4 id="树的种类"><a href="#树的种类" class="headerlink" title="树的种类"></a>树的种类</h4><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039205.png" alt="图片"></p>
<p>按照有序性，可以分为有序树和无序树：</p>
<blockquote>
<p>❝</p>
<ul>
<li>无序树：树中任意节点的子结点之间没有顺序关系</li>
<li>有序树：树中任意节点的子结点之间有顺序关系</li>
</ul>
<p>❞</p>
</blockquote>
<p>按照节点包含子树个数，可以分为B树和二叉树，二叉树可以分为以下几种：</p>
<blockquote>
<p>❝</p>
<ul>
<li>二叉树：每个节点最多含有两个子树的树称为二叉树；</li>
<li>二叉查找树：首先它是一颗二叉树，若左子树不空，则左子树上所有结点的值均小于它的根结点的值；若右子树不空，则右子树上所有结点的值均大于它的根结点的值；左、右子树也分别为二叉排序树；</li>
<li>满二叉树：叶节点除外的所有节点均含有两个子树的树被称为满二叉树；</li>
<li>完全二叉树：如果一颗二叉树除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布</li>
<li>霍夫曼树：带权路径最短的二叉树。</li>
<li>红黑树：红黑树是一颗特殊的二叉查找树，每个节点都是黑色或者红色，根节点、叶子节点是黑色。如果一个节点是红色的，则它的子节点必须是黑色的。</li>
<li>平衡二叉树（AVL）：一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树</li>
</ul>
<p>❞</p>
</blockquote>
<h3 id="B-树、B-树简介"><a href="#B-树、B-树简介" class="headerlink" title="B-树、B+树简介"></a>B-树、B+树简介</h3><h4 id="B-树-简介"><a href="#B-树-简介" class="headerlink" title="B-树 简介"></a>B-树 简介</h4><p>B-树，也称为B树，是一种平衡的多叉树（可以对比一下平衡二叉查找树），它比较适用于对外查找。看下这几个概念哈：</p>
<blockquote>
<p>❝</p>
<ul>
<li>阶数：一个节点最多有多少个孩子节点。（一般用字母m表示）</li>
<li>关键字：节点上的数值就是关键字</li>
<li>度：一个节点拥有的子节点的数量。</li>
</ul>
<p>❞</p>
</blockquote>
<p>一颗m阶的B-树，有以下特征：</p>
<blockquote>
<p>❝</p>
<ul>
<li>根结点至少有两个子女；</li>
<li>每个非根节点所包含的关键字个数 j 满足：⌈m/2⌉ - 1 &lt;= j &lt;= m - 1.(⌈⌉表示向上取整)</li>
<li>有k个关键字(关键字按递增次序排列)的非叶结点恰好有k+1个孩子。</li>
<li>所有的叶子结点都位于同一层。</li>
</ul>
<p>❞</p>
</blockquote>
<p>一棵简单的B-树如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039307.png" alt="图片"></p>
<h4 id="B-树简介"><a href="#B-树简介" class="headerlink" title="B+ 树简介"></a>B+ 树简介</h4><p>B+树是B-树的变体，也是一颗多路搜索树。一棵m阶的B+树主要有这些特点：</p>
<blockquote>
<p>❝</p>
<ul>
<li>每个结点至多有m个子女;</li>
<li>非根节点关键值个数范围：<a href="%E6%B3%A8%E6%84%8F%E6%98%AF%E8%BF%99%E4%B8%AA%E5%93%88%EF%BC%8C%E5%90%8E%E9%9D%A2%E5%9B%BE%E4%BE%8B%E5%86%99%E9%94%99%E4%BA%86">m/2</a> &lt;= k &lt;= m-1</li>
<li>相邻叶子节点是通过指针连起来的，并且是关键字大小排序的。</li>
</ul>
<p>❞</p>
</blockquote>
<p>一颗3阶的B+树如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039396.png" alt="图片"></p>
<p>B+树和B-树的主要区别如下：</p>
<ul>
<li>B-树内部节点是保存数据的;而B+树内部节点是不保存数据的，只作索引作用，它的叶子节点才保存数据。</li>
<li>B+树相邻的叶子节点之间是通过链表指针连起来的，B-树却不是。</li>
<li>查找过程中，B-树在找到具体的数值以后就结束，而B+树则需要通过索引找到叶子结点中的数据才结束</li>
<li>B-树中任何一个关键字出现且只出现在一个结点中，而B+树可以出现多次。</li>
</ul>
<h3 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B+树的插入"></a>B+树的插入</h3><p>B+树插入要记住这几个步骤：</p>
<ul>
<li>1.B+树插入都是在叶子结点进行的，就是插入前，需要先找到要插入的叶子结点。</li>
<li>2.如果被插入关键字的叶子节点，当前含有的关键字数量是小于阶数m，则直接插入。</li>
<li>3.如果插入关键字后，叶子节点当前含有的关键字数目等于阶数m，则插，该节点开始<strong>「分裂」</strong>为两个新的节点，一个节点包含⌊m/2⌋ 个关键字，另外一个关键字包含⌈m/2⌉个关键值。（⌊m/2⌋表示向下取整，⌈m/2⌉表示向上取整，如⌈3/2⌉=2）。</li>
<li>4.分裂后，需要将第⌈m/2⌉的关键字上移到父结点。如果这时候父结点中包含的关键字个数小于m，则插入操作完成。</li>
<li>5.分裂后，需要将⌈m/2⌉的关键字上移到父结点。如果父结点中包含的关键字个数等于m，则继续分裂父结点。</li>
</ul>
<p>以一颗4阶的B+树为例子吧，4阶的话，关键值最多3（m-1）个。假设插入以下数据43，48，36，32,37,49,28.</p>
<ol>
<li>在空树中插入43</li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039451.png" alt="图片"></p>
<p>这时候根结点就一个关键值，此时它是根结点也是叶子结点。</p>
<ol>
<li>依次插入48，36</li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039479.png" alt="图片"></p>
<p>这时候跟节点拥有3个关键字，已经满了</p>
<ol>
<li>继续插入 32，发现当前节点关键字已经不小于阶数4了，于是分裂 第⌈4/2⌉=2（下标0,1,2）个，也即43上移到父节点。</li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039528.png" alt="图片"></p>
<ol>
<li>继续插入37，49，前节点关键字都是还没满的，直接插入，如下：</li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039570.png" alt="图片"></p>
<ol>
<li><p>最后插入28，发现当前节点关键字也是不小于阶数4了，于是分裂，于是分裂， 第 ⌈4/2⌉=2个，也就是36上移到父节点，因父子节点只有2个关键值，还是小于4的，所以不用继续分裂，插入完成</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039628.png" alt="图片"></p>
</li>
</ol>
<h3 id="B-树的查找"><a href="#B-树的查找" class="headerlink" title="B+树的查找"></a>B+树的查找</h3><p>因为B+树的数据都是在叶子节点上的，内部节点只是指针索引的作用，因此，查找过程需要搜索到叶子节点上。还是以这颗B+树为例吧：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039695.png" alt="图片"></p>
<h4 id="B-树单值查询"><a href="#B-树单值查询" class="headerlink" title="B+ 树单值查询"></a>B+ 树单值查询</h4><p>假设我们要查的值为32.</p>
<p>第一次磁盘 I/O，查找磁盘块1，即根节点（36,43）,因为32小于36，因此访问根节点的左边第一个孩子节点</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039753.png" alt="图片"></p>
<p>第二次磁盘 I/O, 查找磁盘块2，即根节点的第一个孩子节点，获得区间(28,32),遍历即可得32.</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039811.png" alt="图片"></p>
<p>动态图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640.gif" alt="图片"></p>
<h4 id="B-树范围查询"><a href="#B-树范围查询" class="headerlink" title="B+ 树范围查询"></a>B+ 树范围查询</h4><p>假设我们要查找区间 [32,40]区间的值.</p>
<p>第一步先访问根节点，发现区间的左端点32小于36,则访问根节点的第一个左子树(28,32);</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141039753.png" alt="图片"></p>
<p>第二步访问节点（28,32），找到32，于是开始遍历链表，把[32,40]区间值找出来，这也是B+树比B-树高效的地方。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040015.png" alt="图片"></p>
<h3 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B+树的删除"></a>B+树的删除</h3><p>B+树删除关键字，分这几种情况</p>
<ul>
<li>找到包含关键值的结点，如果关键字个数大于⌈m/2⌉-1，直接删除即可；</li>
<li>找到包含关键值的结点,如果关键字个数大于⌈m/2⌉-1，并且关键值是当前节点的最大（小）值，并且该关键值存在父子节点中，那么删除该关键字，同时需要相应调整父节点的值。</li>
<li>找到包含关键值的结点，如果删除该关键字后，关键字个数小于⌈m/2⌉，并且其兄弟结点有多余的关键字，则从其兄弟结点借用关键字</li>
<li>找到包含关键值的结点，如果删除该关键字后，关键字个数小于⌈m/2⌉，并且其兄弟结点没有多余的关键字，则与兄弟结点合并。</li>
</ul>
<h4 id="如果关键字个数大于⌈m-2⌉，直接删除即可；"><a href="#如果关键字个数大于⌈m-2⌉，直接删除即可；" class="headerlink" title="如果关键字个数大于⌈m/2⌉，直接删除即可；"></a>如果关键字个数大于⌈m/2⌉，直接删除即可；</h4><p>假设当前有这么一颗5阶的B+树</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040073.png" alt="图片"></p>
<p>如果删除22，因为关键字个数为3 &gt; ⌈5/2⌉-1=2， 直接删除（⌈⌉表示向上取整的意思）</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040297.gif" alt="图片"></p>
<h4 id="如果关键字个数大于⌈m-2⌉-1，并且删除的关键字存在于父子节点中，那么需要相应调整父子节点的值"><a href="#如果关键字个数大于⌈m-2⌉-1，并且删除的关键字存在于父子节点中，那么需要相应调整父子节点的值" class="headerlink" title="如果关键字个数大于⌈m/2⌉-1，并且删除的关键字存在于父子节点中，那么需要相应调整父子节点的值"></a>如果关键字个数大于⌈m/2⌉-1，并且删除的关键字存在于父子节点中，那么需要相应调整父子节点的值</h4><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040356.png" alt="图片"></p>
<p>如果删除20，因为关键字个数为3 &gt; ⌈5/2⌉-1=2，并且20是当前节点的边界值，且存在父子节点中，所以删除后，其父子节点也要响应调整。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040470.gif" alt="图片"></p>
<h4 id="如果删除该关键字后，关键字个数小于⌈m-2⌉-1，兄弟节点可以借用"><a href="#如果删除该关键字后，关键字个数小于⌈m-2⌉-1，兄弟节点可以借用" class="headerlink" title="如果删除该关键字后，关键字个数小于⌈m/2⌉-1，兄弟节点可以借用"></a>如果删除该关键字后，关键字个数小于⌈m/2⌉-1，兄弟节点可以借用</h4><p>以下这颗5阶的B+树，</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040508.png" alt="图片"></p>
<p>如果删除15,删除关键字的结点只剩1个关键字，小于⌈5/2⌉-1=2，不满足B+树特点，但是其兄弟节点拥有3个元素（7,8,9），可以借用9过来，如图：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141040618.gif" alt="图片"></p>
<h4 id="在删除关键字后，如果导致其结点中关键字个数不足，并且兄弟结点没有得借用的话，需要合并兄弟结点"><a href="#在删除关键字后，如果导致其结点中关键字个数不足，并且兄弟结点没有得借用的话，需要合并兄弟结点" class="headerlink" title="在删除关键字后，如果导致其结点中关键字个数不足，并且兄弟结点没有得借用的话，需要合并兄弟结点"></a>在删除关键字后，如果导致其结点中关键字个数不足，并且兄弟结点没有得借用的话，需要合并兄弟结点</h4><p>以下这颗5阶的B+树：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141041062.png" alt="图片"></p>
<p>如果删除关键字7，删除关键字的结点只剩1个关键字，小于⌈5/2⌉-1=2，不满足B+树特点，并且兄弟结点没法借用，因此发生合并，如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141041325.gif" alt="图片"></p>
<p>主要流程酱紫：</p>
<ul>
<li>因为7被删掉后，只剩一个8的关键字，不满足B+树特点（⌈m/2⌉-1&lt;=关键字&lt;=m-1）。</li>
<li>并且没有兄弟结点关键字借用，因此8与前面的兄弟结点结合。</li>
<li>被删关键字结点的父节点，7索引也被删掉了，只剩一个9，并且其右兄弟结点（18,20）只有两个关键字，也是没得借，因此在此合并。</li>
<li>被删关键字结点的父子节点，也和其兄弟结点合并后，只剩一个子树分支，因此根节点（16）也下移了。</li>
</ul>
<p>所以删除关键字7后的结果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141041459.png" alt="图片"></p>
<h3 id="B-树经典面试题"><a href="#B-树经典面试题" class="headerlink" title="B+树经典面试题"></a>B+树经典面试题</h3><ul>
<li>InnoDB一棵B+树可以存放多少行数据？</li>
<li>为什么索引结构默认使用B+树，而不是hash，二叉树，红黑树，B-树？</li>
<li>B-树和B+树的区别</li>
</ul>
<h4 id="InnoDB一棵B-树可以存放多少行数据？"><a href="#InnoDB一棵B-树可以存放多少行数据？" class="headerlink" title="InnoDB一棵B+树可以存放多少行数据？"></a>InnoDB一棵B+树可以存放多少行数据？</h4><p>这个问题的简单回答是：约2千万行。</p>
<ul>
<li>在计算机中，磁盘存储数据最小单元是扇区，一个扇区的大小是512字节。</li>
<li>文件系统中，最小单位是块，一个块大小就是4k；</li>
<li>InnoDB存储引擎最小储存单元是页，一页大小就是16k。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210512141041528.png" alt="图片"></p>
<p>因为B+树叶子存的是数据，内部节点存的是键值+指针。索引组织表通过非叶子节点的二分查找法以及指针确定数据在哪个页中，进而再去数据页中找到需要的数据；</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640.jpg" alt="图片"></p>
<p>假设B+树的高度为2的话，即有一个根结点和若干个叶子结点。这棵B+树的存放总记录数为=根结点指针数*单个叶子节点记录行数。</p>
<ul>
<li>如果一行记录的数据大小为1k，那么单个叶子节点可以存的记录数 =16k/1k =16.</li>
<li>非叶子节点内存放多少指针呢？我们假设主键ID为bigint类型，长度为8字节，而指针大小在InnoDB源码中设置为6字节，所以就是8+6=14字节，16k/14B =16*1024B/14B = 1170</li>
</ul>
<p>因此，一棵高度为2的B+树，能存放1170 * 16=18720条这样的数据记录。同理一棵高度为3的B+树，能存放1170 *1170 *16 =21902400，也就是说，可以存放两千万左右的记录。B+树高度一般为1-3层，已经满足千万级别的数据存储。</p>
<h4 id="为什么索引结构默认使用B-树，而不是B-Tree，Hash哈希，二叉树，红黑树？"><a href="#为什么索引结构默认使用B-树，而不是B-Tree，Hash哈希，二叉树，红黑树？" class="headerlink" title="为什么索引结构默认使用B+树，而不是B-Tree，Hash哈希，二叉树，红黑树？"></a>为什么索引结构默认使用B+树，而不是B-Tree，Hash哈希，二叉树，红黑树？</h4><p>简单版回答如下：</p>
<ul>
<li>Hash哈希，只适合等值查询，不适合范围查询。</li>
<li>一般二叉树，可能会特殊化为一个链表，相当于全表扫描。</li>
<li>红黑树，是一种特化的平衡二叉树，MySQL 数据量很大的时候，索引的体积也会很大，内存放不下的而从磁盘读取，树的层次太高的话，读取磁盘的次数就多了。</li>
<li>B-Tree，叶子节点和非叶子节点都保存数据，相同的数据量，B+树更矮壮，也是就说，相同的数据量，B+树数据结构，查询磁盘的次数会更少。</li>
</ul>
<h4 id="B-树和B-树的区别"><a href="#B-树和B-树的区别" class="headerlink" title="B-树和B+树的区别"></a>B-树和B+树的区别</h4><ul>
<li>B-树内部节点是保存数据的;而B+树内部节点是不保存数据的，只作索引作用，它的叶子节点才保存数据。</li>
<li>B+树相邻的叶子节点之间是通过链表指针连起来的，B-树却不是。</li>
<li>查找过程中，B-树在找到具体的数值以后就结束，而B+树则需要通过索引找到叶子结点中的数据才结束</li>
<li>B-树中任何一个关键字出现且只出现在一个结点中，而B+树可以出现多次。</li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的upstream指令参数解析</title>
    <url>/2020/09/09/Nginx%E7%9A%84upstream%E6%8C%87%E4%BB%A4%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="upstream-指令参数-max-conns"><a href="#upstream-指令参数-max-conns" class="headerlink" title="upstream 指令参数 max_conns"></a><strong>upstream 指令参数 max_conns</strong></h1><p>限制每台server的连接数，用于保护避免过载，可起到限流作用。测试参考配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># worker进程设置1个，便于测试观察成功的连接数</span><br><span class="line">worker_processes 1;</span><br><span class="line">upstream tomcats &#123; </span><br><span class="line">    server 192.168.1.173:8080 max_conns&#x3D;2; </span><br><span class="line">    server 192.168.1.174:8080 max_conns&#x3D;2; </span><br><span class="line">    server 192.168.1.175:8080 max_conns&#x3D;2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="upstream-指令参数-slow-start"><a href="#upstream-指令参数-slow-start" class="headerlink" title="upstream 指令参数 slow_start"></a><strong>upstream 指令参数 slow_start</strong></h1><p>配置了这个参数，他会覆盖权重，慢慢从0开始到正常值。</p>
<p>*<strong>商业版，需要付费*</strong></p>
<p>配置参考如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">    server 192.168.1.173:8080 weight&#x3D;6 slow_start&#x3D;60s;</span><br><span class="line">    # server 192.168.1.190:8080; </span><br><span class="line">    server 192.168.1.174:8080 weight&#x3D;2; </span><br><span class="line">    server 192.168.1.175:8080 weight&#x3D;2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>该参数不能使用在<code>hash</code> 和 <code>random load balancing</code> 中。</li>
<li>如果在 upstream 中只有一台 server，则该参数失效。</li>
</ul>
<h1 id="upstream-指令参数-down、backup"><a href="#upstream-指令参数-down、backup" class="headerlink" title="upstream 指令参数 down、backup"></a><strong>upstream 指令参数 down、backup</strong></h1><p><strong><code>down</code></strong> 用于标记服务节点不可用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">	server 192.168.1.173:8080 down;</span><br><span class="line">	# server 192.168.1.190:8080; </span><br><span class="line">	server 192.168.1.174:8080 weight&#x3D;1; </span><br><span class="line">	server 192.168.1.175:8080 weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>**<code>backup</code>**表示当前服务器节点是备用机，只有在其他的服务器都宕机以后，自己才会加入到集群中，被用户访问到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream tomcats &#123; </span><br><span class="line">		server 192.168.1.173:8080 backup;</span><br><span class="line">		# server 192.168.1.190:8080; </span><br><span class="line">		server 192.168.1.174:8080 weight&#x3D;1; </span><br><span class="line">		server 192.168.1.175:8080 weight&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>backup</code>参数不能使用在<code>hash</code> 和 <code>random load balancing</code> 中。</li>
</ul>
<h1 id="upstream-指令参数-max-fails、fail-timeout"><a href="#upstream-指令参数-max-fails、fail-timeout" class="headerlink" title="upstream 指令参数 max_fails、fail_timeout"></a><strong>upstream 指令参数 max_fails、fail_timeout</strong></h1><p>**<code>max_fails</code>**：表示失败几次，则标记server已宕机，剔出上游服务。</p>
<p>**<code>fail_timeout</code>**：表示失败的重试时间。假设目前设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">max_fails&#x3D;2 fail_timeout&#x3D;15s</span><br></pre></td></tr></table></figure>

<p>则代表在15秒内请求某一server失败达到2次后，则认为该server已经挂了或者宕机了，随后再过15秒，这15秒内不会有新的请求到达刚刚挂掉的节点上，而是会请求到正常运作的server，15秒后会再有新请求尝试连接挂掉的server，如果还是失败，重复上一过程，直到恢复。</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>upstream</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中==和is的区别</title>
    <url>/2020/06/18/Python%E4%B8%AD-%E5%92%8Cis%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要内容是 Python 中运算符 <code>==</code> 和 <code>is</code> 的区别。</p>
<p>进入正文前，首先简单介绍一下 Python 中对象的 3 个基本要素，id(身份标识)、type(数据类型)和value(值)。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><code>==</code> 是python标准操作符中的比较操作符，用来比较判断两个对象的value(值)是否相等，例如下面两个字符串间的比较：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;cheesezh&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&#x27;cheesezh&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><code>is</code> 也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是id是否相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = y = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == y</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x == z</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> y</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x <span class="keyword">is</span> z</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(x)</span><br><span class="line"><span class="number">3075326572</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(y)</span><br><span class="line"><span class="number">3075326572</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> <span class="built_in">id</span>(z)</span><br><span class="line"><span class="number">3075328140</span></span><br></pre></td></tr></table></figure>

<p>可以明显的看到前 3 个比较都是 True， 最后一个是 False。</p>
<p>使用 <code>id()</code> 方法查看 x, y, z 的对象ID就明白了。</p>
<p>我在这里使用的是数组，其实，当它们是 tuple, list, dict 或者 set 时也一样。</p>
<p>不过，当类型是 int 或者 string 时，它们的对象ID都会一样,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;asd&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="string">&quot;asd&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Netty的核心组件</title>
    <url>/2021/06/09/Netty%E7%9A%84%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="1-Channel-接口"><a href="#1-Channel-接口" class="headerlink" title="1 Channel 接口"></a>1 Channel 接口</h1><p>基本的 I/O 操作(bind()、connect()、read()和 write())依赖于底层网络传输所提 供的原语。在基于 Java 的网络编程中，其基本的构造是 class Socket。Netty 的 Channel 接 口所提供的 API，大大地降低了直接使用 Socket 类的复杂性。此外，Channel 也是拥有许多 预定义的、专门化实现的广泛类层次结构的根，下面是一个简短的部分清单:</p>
<span id="more"></span>

<ul>
<li>EmbeddedChannel; </li>
<li>LocalServerChannel; </li>
<li>NioDatagramChannel; </li>
<li>NioSctpChannel; </li>
<li>NioSocketChannel。</li>
</ul>
<h1 id="2-EventLoop-接口"><a href="#2-EventLoop-接口" class="headerlink" title="2 EventLoop 接口"></a>2 EventLoop 接口</h1><p>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件。下图在高层次上说明了 Channel、EventLoop、Thread 以及 EventLoopGroup 之间的关系。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210621191716357.png" alt="image-20210621191716357"></p>
<p>这些关系是：</p>
<ul>
<li><p>一个 EventLoopGroup 包含一个或者多个 EventLoop;</p>
</li>
<li><p>一个 EventLoop 在它的生命周期内只和一个 Thread 绑定;</p>
</li>
<li><p>所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理;</p>
</li>
<li><p>一个 Channel 在它的生命周期内只注册于一个 EventLoop;</p>
</li>
<li><p>一个 EventLoop 可能会被分配给一个或多个 Channel。 </p>
</li>
</ul>
<p>**<font color=red>注意</font>**，在这种设计中，一个给定 Channel 的 I/O 操作都是由相同的 Thread 执行的，实际上消除了对于同步的需要。</p>
<h1 id="3-ChannelFuture-接口"><a href="#3-ChannelFuture-接口" class="headerlink" title="3 ChannelFuture 接口"></a>3 ChannelFuture 接口</h1><p><strong>Netty 中所有的 I/O 操作都是异步的</strong>。因为一个操作可能不会 立即返回，所以我们需要一种用于在之后的某个时间点确定其结果的方法。为此，Netty 提供了 <code>ChannelFuture</code>接口，其<code>addListener()</code>方法注册了一个<code>ChannelFutureListener</code>，以 便在某个操作完成时(无论是否成功)得到通知。</p>
<h1 id="4-ChannelHandler-接口"><a href="#4-ChannelHandler-接口" class="headerlink" title="4 ChannelHandler 接口"></a>4 ChannelHandler 接口</h1><p>从应用程序开发人员的角度来看，Netty 的主要组件是 <code>ChannelHandler</code>，它充当了所有 处理入站和出站数据的应用程序逻辑的容器。这是可行的，因为<code> ChannelHandler</code> 的方法是由网络事件触发的。事实上, <code>ChannelHandler</code> 可专 门用于几乎任何类型的动作，例如将数据从一种格式转换为另外一种格式，或者处理转换过程 中所抛出的异常。</p>
<p>举例来说，<code>ChannelInboundHandler</code> 是一个你将会经常实现的子接口。这种类型的 <code>ChannelHandler</code> 接收入站事件和数据，这些数据随后将会被你的应用程序的业务逻辑所处理。当你要给连接的客户端发送响应时，也可以从 <code>ChannelInboundHandler</code> 冲刷数据。你 的应用程序的业务逻辑通常驻留在一个或者多个 <code>ChannelInboundHandler</code> 中。</p>
<h1 id="5-ChannelPipeline-接口"><a href="#5-ChannelPipeline-接口" class="headerlink" title="5 ChannelPipeline 接口"></a>5 ChannelPipeline 接口</h1><p><code>ChannelPipeline</code> 提供了 <code>ChannelHandler</code> 链的容器，并定义了用于在该链上传播入站 和出站事件流的 API。当 <code>Channel</code> 被创建时，它会被自动地分配到它专属的 <code>ChannelPipeline</code>。</p>
<p><code>ChannelHandler</code> 安装到 <code>ChannelPipeline</code> 中的过程如下所示: </p>
<ul>
<li><p>一个<code>ChannelInitializer</code>的实现被注册到了<code>ServerBootstrap</code>中;</p>
</li>
<li><p>当<code> ChannelInitializer.initChannel()</code>方法被调用时，<code>ChannelInitializer</code>将在 <code>ChannelPipeline</code> 中安装一组自定义的<code>ChannelHandler</code>; </p>
</li>
<li><p><code>ChannelInitializer</code> 将它自己从 <code>ChannelPipeline</code> 中移除。</p>
</li>
</ul>
<p>ChannelHandler 是专为支持广泛的用途而设计的，可以将它看作是处理往来 Channel-</p>
<p>Pipeline 事件(包括数据)的任何代码的通用容器。下图说明了这一点，其展示了从 ChannelHandler 派生的 ChannelInboundHandler 和 ChannelOutboundHandler 接口。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210621192959857.png" alt="image-20210621192959857"></p>
<p>使得事件流经 ChannelPipeline 是 ChannelHandler 的工作，它们是在应用程序的初始化或者引导阶段被安装的。这些对象接收事件、执行它们所实现的处理逻辑，并将数据传递给 链中的下一个 ChannelHandler。它们的执行顺序是由它们被添加的顺序所决定的。实际上， 被我们称为 ChannelPipeline 的是这些 ChannelHandler 的编排顺序。</p>
<p>下图说明了一个 Netty 应用程序中入站和出站数据流之间的区别。从一个客户端应用程序 的角度来看，如果事件的运动方向是从客户端到服务器端，那么我们称这些事件为<strong>出站</strong>的，反之则称为<strong>入站</strong>的。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210621193108690.png" alt="image-20210621193108690"></p>
]]></content>
      <categories>
        <category>netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ基础组件封装(24)</title>
    <url>/2021/01/27/RabbitMQ%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85-24/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="1-整体功能概述"><a href="#1-整体功能概述" class="headerlink" title="1. 整体功能概述"></a>1. 整体功能概述</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_24_1.png" alt="rabbitmq_24_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_24_2.png" alt="rabbitmq_24_2"></p>
<h1 id="2-基础组件模块划分"><a href="#2-基础组件模块划分" class="headerlink" title="2. 基础组件模块划分"></a>2. 基础组件模块划分</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rabbit-parent</span><br><span class="line">- rabbit-api           对外提供统一的API接口</span><br><span class="line">- rabbit-commmon       公共包</span><br><span class="line">- rabbit-core-producer 核心包</span><br><span class="line">- rabbit-task          es-job</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/littlefxc/foodie.git">Github 地址</a></p>
<h1 id="3-可靠性消息投递"><a href="#3-可靠性消息投递" class="headerlink" title="3. 可靠性消息投递"></a>3. 可靠性消息投递</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_13.png" alt="rabbitmq_19_13"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_24_4.png" alt="rabbitmq_24_4"></p>
<h1 id="4-思维导图"><a href="#4-思维导图" class="headerlink" title="4. 思维导图"></a>4. 思维导图</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_xmind.png" alt="rabbitmq_xmind.png"></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ极速入门(14)</title>
    <url>/2021/01/25/RabbitMQ%E6%9E%81%E9%80%9F%E5%85%A5%E9%97%A8-14/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_2.png"></p>
<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//	1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//	2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//	3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//	4 声明</span></span><br><span class="line">		String queueName = <span class="string">&quot;test001&quot;</span>;  </span><br><span class="line">        <span class="comment">//	参数: queue名字,是否持久化,独占的queue（仅供此连接）,不使用时是否自动删除, 其他参数</span></span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		</span><br><span class="line">		Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		</span><br><span class="line">		AMQP.BasicProperties props = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">		.deliveryMode(<span class="number">2</span>)</span><br><span class="line">		.contentEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">		.headers(headers).build();</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">			String msg = <span class="string">&quot;Hello World RabbitMQ &quot;</span> + i;</span><br><span class="line">			channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName , props , msg.getBytes()); 			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">        </span><br><span class="line">        String queueName = <span class="string">&quot;test001&quot;</span>;  </span><br><span class="line">        <span class="comment">//	durable 是否持久化消息</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);  </span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//	参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);  </span><br><span class="line">        <span class="comment">//	循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//	获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ实战-初识RabbitMQ核心概念(12)</title>
    <url>/2021/01/25/RabbitMQ%E5%AE%9E%E6%88%98-%E5%88%9D%E8%AF%86RabbitMQ%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5-12/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p><a href="https://www.cnblogs.com/sgh1023/p/11217017.html">RabbitMQ（一）：RabbitMQ快速入门</a></p>
<p><a href="https://www.cnblogs.com/williamjie/p/9481774.html">RabbitMQ基础概念详细介绍</a></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_3.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_4.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_4.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_5.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_5.png"></p>
<h1 id="2-AMQP协议中间的几个重要概念："><a href="#2-AMQP协议中间的几个重要概念：" class="headerlink" title="2 AMQP协议中间的几个重要概念："></a>2 AMQP协议中间的几个重要概念：</h1><p>下图是AMQP的协议模型：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_6.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_6.png"></p>
<p>正如图中所看到的，AMQP协议模型有三部分组成：生产者、消费者和服务端。</p>
<p>生产者是投递消息的一方，首先连接到Server，建立一个连接，开启一个信道；然后生产者声明交换器和队列，设置相关属性，并通过路由键将交换器和队列进行绑定。同理，消费者也需要进行建立连接，开启信道等操作，便于接收消息。</p>
<p>接着生产者就可以发送消息，发送到服务端中的虚拟主机，虚拟主机中的交换器根据路由键选择路由规则，然后发送到不同的消息队列中，这样订阅了消息队列的消费者就可以获取到消息，进行消费。</p>
<p>最后还要关闭信道和连接。</p>
<ul>
<li>Server：又称Broker。接收客户端的连接，实现AMQP实体服务。</li>
<li>Connection：连接，应用程序与Server的网络连接，TCP连接。</li>
<li>Channel：信道，消息读写（几乎所有操作）等操作在信道中进行。客户端可以建立多个信道，每个信道代表一个会话任务。</li>
<li>Message：消息，应用程序和服务器之间传送的数据，消息可以非常简单，也可以很复杂。有Properties和Body组成。Properties为外包装，可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body就是消息体内容。</li>
<li>Virtual Host：虚拟主机，用于逻辑隔离。一个虚拟主机里面可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名称的Exchange或Queue。</li>
<li>Exchange：交换器，接收消息，按照路由规则将消息路由到一个或者多个队列。如果路由不到，或者返回给生产者，或者直接丢弃。RabbitMQ常用的交换器常用类型有direct、topic、fanout、headers四种，后面详细介绍。</li>
<li>Binding：绑定，交换器和消息队列之间的虚拟连接，绑定中可以包含一个或者多个RoutingKey。</li>
<li>RoutingKey：路由键，生产者将消息发送给交换器的时候，会发送一个RoutingKey，用来指定<strong>路由规则</strong>，这样交换器就知道把消息发送到哪个队列。路由键通常为一个“.”分割的字符串，例如“com.rabbitmq”。</li>
<li>Queue：消息队列，用来保存消息，供消费者消费。</li>
</ul>
<blockquote>
<p>我们完全可以直接使用 Connection 就能完成信道的工作，为什么还要引入信道呢?</p>
</blockquote>
<blockquote>
<p>试想这样一个场景， 一个应用程序中有很多个线程需要从 RabbitMQ 中消费消息，或者生产消息，那么必然需要建立很多个 Connection，也就是许多个 TCP 连接。然而对于操作系统而言，建立和销毁 TCP 连接是非常昂贵的开销，如果遇到使用高峰，性能瓶颈也随之显现。 RabbitMQ 采用 TCP 连接复用的方式，不仅可以减少性能开销，同时也便于管理 。</p>
</blockquote>
<p>RabbitMQ是基于AMQP协议实现的，其结构如下图所示，和AMQP协议简直就是一模一样。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_7.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_7.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_11.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_11.png"></p>
<h1 id="3-常用交换器"><a href="#3-常用交换器" class="headerlink" title="3 常用交换器"></a>3 <strong>常用交换器</strong></h1><p>RabbitMQ常用的交换器类型有direct、topic、fanout、headers四种。</p>
<h2 id="3-1-Direct-Exchange"><a href="#3-1-Direct-Exchange" class="headerlink" title="3.1 Direct Exchange"></a>3.1 Direct Exchange</h2><p>该类型的交换器将所有发送到该交换器的消息被转发到RoutingKey指定的队列中，也就是说路由到BindingKey和RoutingKey完全匹配的队列中。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_8.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_8.png"></p>
<h2 id="3-2-Topic-Exchange"><a href="#3-2-Topic-Exchange" class="headerlink" title="3.2 Topic Exchange"></a>3.2 Topic Exchange</h2><p>该类型的交换器将所有发送到Topic Exchange的消息被转发到所有RoutingKey中指定的Topic的队列上面。</p>
<p>Exchange将RoutingKey和某Topic进行模糊匹配，其中“<em>”用来匹配一个词，“#”用于匹配一个或者多个词。例如“com.#”能匹配到“com.rabbitmq.oa”和“com.rabbitmq”；而”login.</em>“只能匹配到“com.rabbitmq”。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_9.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_9.png"></p>
<h2 id="3-3-Fanout-Exchange"><a href="#3-3-Fanout-Exchange" class="headerlink" title="3.3 Fanout Exchange"></a>3.3 Fanout Exchange</h2><p>该类型不处理路由键，会把所有发送到交换器的消息路由到所有绑定的队列中。优点是转发消息最快，性能最好。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_10.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_11_10.png"></p>
<h2 id="3-4-Headers-Exchange"><a href="#3-4-Headers-Exchange" class="headerlink" title="3.4 Headers Exchange"></a>3.4 Headers Exchange</h2><p>该类型的交换器不依赖路由规则来路由消息，而是根据消息内容中的headers属性进行匹配。headers类型交换器性能差，在实际中并不常用。</p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ核心API Exchange之Topic(16)</title>
    <url>/2021/01/25/RabbitMQ%E6%A0%B8%E5%BF%83API-Exchange%E4%B9%8BTopic-16/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_16_3.png"></p>
<h2 id="Sender4TopicExchange"><a href="#Sender4TopicExchange" class="headerlink" title="Sender4TopicExchange"></a>Sender4TopicExchange</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4TopicExchange</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_topic_exchange&quot;</span>;</span><br><span class="line">		String routingKey1 = <span class="string">&quot;user.save&quot;</span>;</span><br><span class="line">		String routingKey2 = <span class="string">&quot;user.update&quot;</span>;</span><br><span class="line">		String routingKey3 = <span class="string">&quot;user.delete.abc&quot;</span>;</span><br><span class="line">		<span class="comment">//5 发送</span></span><br><span class="line">		</span><br><span class="line">		String msg = <span class="string">&quot;Hello World RabbitMQ 4 Topic Exchange Message ...&quot;</span>;</span><br><span class="line">		channel.basicPublish(exchangeName, routingKey1 , <span class="keyword">null</span> , msg.getBytes()); </span><br><span class="line">		channel.basicPublish(exchangeName, routingKey2 , <span class="keyword">null</span> , msg.getBytes()); 	</span><br><span class="line">		channel.basicPublish(exchangeName, routingKey3 , <span class="keyword">null</span> , msg.getBytes()); </span><br><span class="line">		channel.close();  </span><br><span class="line">        connection.close();  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4TopicExchange1"><a href="#Receiver4TopicExchange1" class="headerlink" title="Receiver4TopicExchange1"></a>Receiver4TopicExchange1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4TopicExchange1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_topic_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_topic_queue&quot;</span>;</span><br><span class="line">		<span class="comment">//String routingKey = &quot;user.*&quot;;</span></span><br><span class="line">		String routingKey = <span class="string">&quot;user.#&quot;</span>;</span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//	参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</span><br><span class="line">        System.err.println(<span class="string">&quot;consumer1 start.. &quot;</span>);</span><br><span class="line">        <span class="comment">//	循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//	获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg + <span class="string">&quot;, RoutingKey: &quot;</span> + delivery.getEnvelope().getRoutingKey());  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4TopicExchange2"><a href="#Receiver4TopicExchange2" class="headerlink" title="Receiver4TopicExchange2"></a>Receiver4TopicExchange2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4TopicExchange2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_topic_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_topic_queue&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;user.*&quot;</span>;</span><br><span class="line"><span class="comment">//		String routingKey = &quot;user.#&quot;;</span></span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer); </span><br><span class="line">        System.err.println(<span class="string">&quot;consumer2 start .. &quot;</span>);</span><br><span class="line">        <span class="comment">//	循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg + <span class="string">&quot;, RoutingKey: &quot;</span> + delivery.getEnvelope().getRoutingKey());  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ环境搭建与控制台详解(13)</title>
    <url>/2021/01/25/RabbitMQ%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AF%A6%E8%A7%A3-13/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_13_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_13_1.png"></p>
<h1 id="RabbitMQ急速入门"><a href="#RabbitMQ急速入门" class="headerlink" title="RabbitMQ急速入门"></a>RabbitMQ急速入门</h1><p>急速入门，在这里我们使用RabbitMQ 3.6.5 版本进行操作：</p>
<ul>
<li>环境搭建：</li>
<li>官网地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></li>
<li>环境描述：Linux（centos7 Redhat7）</li>
</ul>
<h2 id="1-首先在Linux上进行一些软件的准备工作，yum下来一些基础的软件包"><a href="#1-首先在Linux上进行一些软件的准备工作，yum下来一些基础的软件包" class="headerlink" title="1. 首先在Linux上进行一些软件的准备工作，yum下来一些基础的软件包"></a>1. 首先在Linux上进行一些软件的准备工作，yum下来一些基础的软件包</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li>配置好主机名称**：<code>/etc/hosts /etc/hostname</code></li>
</ul>
</li>
</ul>
<h2 id="2-下载RabbitMQ所需软件包（我在在这里使用的是-RabbitMQ3-6-5-稳定版本）"><a href="#2-下载RabbitMQ所需软件包（我在在这里使用的是-RabbitMQ3-6-5-稳定版本）" class="headerlink" title="2. 下载RabbitMQ所需软件包（我在在这里使用的是 RabbitMQ3.6.5 稳定版本）"></a>2. 下载RabbitMQ所需软件包（我在在这里使用的是 RabbitMQ3.6.5 稳定版本）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget www.rabbitmq.com&#x2F;releases&#x2F;erlang&#x2F;erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class="line">wget &lt;http:&#x2F;&#x2F;repo.iotti.biz&#x2F;CentOS&#x2F;7&#x2F;x86_64&#x2F;socat-1.7.3.2-1.1.el7.lux.x86_64.rpm&gt;</span><br><span class="line">wget www.rabbitmq.com&#x2F;releases&#x2F;rabbitmq-server&#x2F;v3.6.5&#x2F;rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="3-安装服务命令"><a href="#3-安装服务命令" class="headerlink" title="3. 安装服务命令"></a>3. 安装服务命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm </span><br><span class="line">rpm -ivh socat-1.7.3.2-1.1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="4-修改用户登录与连接心跳检测，注意修改"><a href="#4-修改用户登录与连接心跳检测，注意修改" class="headerlink" title="4. 修改用户登录与连接心跳检测，注意修改"></a>4. 修改用户登录与连接心跳检测，注意修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;lib&#x2F;rabbitmq_server-3.6.5&#x2F;ebin&#x2F;rabbit.app</span><br></pre></td></tr></table></figure>

<p>修改点1：loopback_users 中的 &lt;&lt;”guest”&gt;&gt;,只保留guest （用于用户登录） 修改点2：heartbeat 为10（用于心跳连接）</p>
<h2 id="5-安装管理插件"><a href="#5-安装管理插件" class="headerlink" title="5. 安装管理插件"></a>5. 安装管理插件</h2><h2 id="5-1-首先启动服务-后面-包含了停止、查看状态以及重启的命令"><a href="#5-1-首先启动服务-后面-包含了停止、查看状态以及重启的命令" class="headerlink" title="5.1 首先启动服务(后面 | 包含了停止、查看状态以及重启的命令)"></a>5.1 首先启动服务(后面 | 包含了停止、查看状态以及重启的命令)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;rabbitmq-server start | stop | status | restart</span><br></pre></td></tr></table></figure>

<h2 id="5-2-查看服务有没有启动：-lsof-i-5672-（5672是Rabbit的默认端口）"><a href="#5-2-查看服务有没有启动：-lsof-i-5672-（5672是Rabbit的默认端口）" class="headerlink" title="5.2 查看服务有没有启动： lsof -i:5672 （5672是Rabbit的默认端口）"></a>5.2 查看服务有没有启动： lsof -i:5672 （5672是Rabbit的默认端口）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<h2 id="5-3-可查看管理端口有没有启动："><a href="#5-3-可查看管理端口有没有启动：" class="headerlink" title="5.3 可查看管理端口有没有启动："></a>5.3 可查看管理端口有没有启动：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:15672 或者 netstat -tnlp | grep 15672</span><br></pre></td></tr></table></figure>

<h2 id="6-一切OK-我们访问地址，输入用户名密码均为-guest-："><a href="#6-一切OK-我们访问地址，输入用户名密码均为-guest-：" class="headerlink" title="6. 一切OK 我们访问地址，输入用户名密码均为 guest ："></a>6. 一切OK 我们访问地址，输入用户名密码均为 guest ：</h2><p><a href="http://你的ip地址:15672/">http://你的ip地址:15672/</a></p>
<h2 id="7-如果一切顺利，那么到此为止，我们的环境已经安装完啦"><a href="#7-如果一切顺利，那么到此为止，我们的环境已经安装完啦" class="headerlink" title="7. 如果一切顺利，那么到此为止，我们的环境已经安装完啦"></a>7. 如果一切顺利，那么到此为止，我们的环境已经安装完啦</h2>]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ集群架构模型与原理解析(5)</title>
    <url>/2021/01/25/RabbitMQ%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-5/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_4_5.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_4_5.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_3.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_4.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_4.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_11.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_11.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_10.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_10.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_5.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_5.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_6.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_6.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_7.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_7.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_8.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_8.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_9.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_9.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_12.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_12.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_13.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_13.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_14.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_14.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_15.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_15.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_16.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_16.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_17.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_17.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_18.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_18.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_18.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_5_18.png"></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ Exchange之Direct(15)</title>
    <url>/2021/01/25/RabbitMQ%E6%A0%B8%E5%BF%83API-Exchange%E4%B9%8BDirect-15/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_3.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_5.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_5.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_6.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_6.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_7.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_7.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_8.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_14_8.png"></p>
<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4DirectExchange</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_direct_exchange&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;test_direct_routingKey&quot;</span>;</span><br><span class="line">		<span class="comment">//5 发送</span></span><br><span class="line">		</span><br><span class="line">		String msg = <span class="string">&quot;Hello World RabbitMQ 4  Direct Exchange Message ... &quot;</span>;</span><br><span class="line">		channel.basicPublish(exchangeName, routingKey , <span class="keyword">null</span> , msg.getBytes()); 		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4DirectExchange</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_direct_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;direct&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_direct_queue&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;test_direct_routingKey&quot;</span>;</span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);  </span><br><span class="line">        <span class="comment">//循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq核心API-Exchange之Fanout(17)</title>
    <url>/2021/01/25/Rabbitmq%E6%A0%B8%E5%BF%83API-Exchange%E4%B9%8BFanout-17/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_17_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_17_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_17_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_17_2.png"></p>
<h2 id="Sender4FanoutExchange"><a href="#Sender4FanoutExchange" class="headerlink" title="Sender4FanoutExchange"></a>Sender4FanoutExchange</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4FanoutExchange</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_fanout_exchange&quot;</span>;</span><br><span class="line">		<span class="comment">//5 发送</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">			String msg = <span class="string">&quot;Hello World RabbitMQ 4 FANOUT Exchange Message ...&quot;</span>;</span><br><span class="line">			channel.basicPublish(exchangeName, <span class="string">&quot;11&quot;</span> , <span class="keyword">null</span> , msg.getBytes()); 			</span><br><span class="line">		&#125;</span><br><span class="line">		channel.close();  </span><br><span class="line">        connection.close();  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4FanoutExchange1"><a href="#Receiver4FanoutExchange1" class="headerlink" title="Receiver4FanoutExchange1"></a>Receiver4FanoutExchange1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4FanoutExchange1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_fanout_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_fanout_queue&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;&quot;</span>;	<span class="comment">//	不设置路由键</span></span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer); </span><br><span class="line">        System.err.println(<span class="string">&quot;--------------- consumer 1 --------------&quot;</span>);</span><br><span class="line">        <span class="comment">//循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4FanoutExchange2"><a href="#Receiver4FanoutExchange2" class="headerlink" title="Receiver4FanoutExchange2"></a>Receiver4FanoutExchange2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4FanoutExchange2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_fanout_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;fanout&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_fanout_queue&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;&quot;</span>;	<span class="comment">//	不设置路由键</span></span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);  </span><br><span class="line">        System.err.println(<span class="string">&quot;--------------- consumer 2 --------------&quot;</span>);</span><br><span class="line">        <span class="comment">//循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq核心API-其他关键概念讲解(18)</title>
    <url>/2021/01/25/Rabbitmq%E6%A0%B8%E5%BF%83API-%E5%85%B6%E4%BB%96%E5%85%B3%E9%94%AE%E6%A6%82%E5%BF%B5%E8%AE%B2%E8%A7%A3-18/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_3.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_5.png" alt="rabbitmq_18_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_18_6.png" alt="rabbitmq_18_6"></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq集群搭建-镜像队列集群环境搭建实操(23)</title>
    <url>/2021/01/26/Rabbitmq%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA-%E9%95%9C%E5%83%8F%E9%98%9F%E5%88%97%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%93%8D-23/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_1.png" alt="rabbitmq_23_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_2.png" alt="rabbitmq_23_2"></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq高级特性-消费端特性讲解_流控服务和ACK重回队列(21)</title>
    <url>/2021/01/26/Rabbitmq%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-%E6%B6%88%E8%B4%B9%E7%AB%AF%E7%89%B9%E6%80%A7%E8%AE%B2%E8%A7%A3-%E6%B5%81%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%92%8CACK%E9%87%8D%E5%9B%9E%E9%98%9F%E5%88%97-21/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_1.png" alt="rabbitmq_21_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_2.png" alt="rabbitmq_21_2"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_3.png" alt="rabbitmq_21_3"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_4.png" alt="rabbitmq_21_4"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_5.png" alt="rabbitmq_21_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_6.png" alt="rabbitmq_21_6"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_21_7.png" alt="rabbitmq_21_7"></p>
<h2 id="Sender"><a href="#Sender" class="headerlink" title="Sender"></a>Sender</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"><span class="comment">//		connectionFactory.setHost(&quot;192.168.11.71&quot;);</span></span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String queueName = <span class="string">&quot;test001&quot;</span>;  </span><br><span class="line">        <span class="comment">//参数: queue名字,是否持久化,独占的queue（仅供此连接）,不使用时是否自动删除, 其他参数</span></span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line">			String msg = <span class="string">&quot;Hello World RabbitMQ &quot;</span> + i;</span><br><span class="line">			Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">			headers.put(<span class="string">&quot;flag&quot;</span>, i);</span><br><span class="line">			AMQP.BasicProperties props = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">			.deliveryMode(<span class="number">2</span>)</span><br><span class="line">			.contentEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">			.headers(headers).build();</span><br><span class="line">			channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName , props , msg.getBytes()); 			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line"><span class="comment">//        connectionFactory.setHost(&quot;192.168.11.71&quot;);</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">        </span><br><span class="line">        String queueName = <span class="string">&quot;test001&quot;</span>;  </span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        channel.queueDeclare(queueName, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);  </span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//	参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);  </span><br><span class="line">        <span class="comment">//	循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//	获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>((Integer)delivery.getProperties().getHeaders().get(<span class="string">&quot;flag&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            	<span class="comment">//throw new RuntimeException(&quot;异常&quot;);</span></span><br><span class="line">            	channel.basicNack(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            	channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq高级特性-TTL消息与死信队列详解(22)</title>
    <url>/2021/01/26/Rabbitmq%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-TTL%E6%B6%88%E6%81%AF%E4%B8%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E8%AF%A6%E8%A7%A3-22/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_1.png" alt="rabbitmq_22_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_2.png" alt="rabbitmq_22_2"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_3.png" alt="rabbitmq_22_3"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_4.png" alt="rabbitmq_22_4"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_5.png" alt="rabbitmq_22_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_22_7.png" alt="rabbitmq_22_7"></p>
<h2 id="Sender4DLXExchange"><a href="#Sender4DLXExchange" class="headerlink" title="Sender4DLXExchange"></a>Sender4DLXExchange</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4DLXExchange</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_dlx_exchange&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;group.bfxy&quot;</span>;</span><br><span class="line">		<span class="comment">//5 发送</span></span><br><span class="line">		</span><br><span class="line">		Map&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		</span><br><span class="line">		AMQP.BasicProperties props = <span class="keyword">new</span> AMQP.BasicProperties.Builder()</span><br><span class="line">		.deliveryMode(<span class="number">2</span>)</span><br><span class="line">		.contentEncoding(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">		<span class="comment">//	TTL</span></span><br><span class="line">		.expiration(<span class="string">&quot;6000&quot;</span>)</span><br><span class="line">		.headers(headers).build();</span><br><span class="line">		</span><br><span class="line">		String msg = <span class="string">&quot;Hello World RabbitMQ 4 DLX Exchange Message ... &quot;</span>;</span><br><span class="line">		channel.basicPublish(exchangeName, routingKey , props , msg.getBytes()); 		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4DLXtExchange"><a href="#Receiver4DLXtExchange" class="headerlink" title="Receiver4DLXtExchange"></a>Receiver4DLXtExchange</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4DLXtExchange</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明正常的 exchange queue 路由规则</span></span><br><span class="line">		String queueName = <span class="string">&quot;test_dlx_queue&quot;</span>;</span><br><span class="line">		String exchangeName = <span class="string">&quot;test_dlx_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">		String routingKey = <span class="string">&quot;group.*&quot;</span>;</span><br><span class="line">		<span class="comment">//	声明 exchange</span></span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//	注意在这里要加一个特殊的属性arguments: x-dead-letter-exchange</span></span><br><span class="line">		Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">		arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;dlx.exchange&quot;</span>);</span><br><span class="line">		<span class="comment">//arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;dlx.*&quot;);</span></span><br><span class="line">		<span class="comment">//arguments.put(&quot;x-message-ttl&quot;, 6000);</span></span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//dlx declare:</span></span><br><span class="line">		channel.exchangeDeclare(<span class="string">&quot;dlx.exchange&quot;</span>, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(<span class="string">&quot;dlx.queue&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(<span class="string">&quot;dlx.queue&quot;</span>, <span class="string">&quot;dlx.exchange&quot;</span>, <span class="string">&quot;#&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//	durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//	参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);  </span><br><span class="line">        <span class="comment">//	循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//	获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq高级特性-生产端可靠性投递与消费端幂等性(19)</title>
    <url>/2021/01/25/Rabbitmq%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-%E7%94%9F%E4%BA%A7%E7%AB%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E6%8A%95%E9%80%92%E4%B8%8E%E6%B6%88%E8%B4%B9%E7%AB%AF%E5%B9%82%E7%AD%89%E6%80%A7-19/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_1.png" alt="rabbitmq_19_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_2.png" alt="rabbitmq_19_2"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_4.png" alt="rabbitmq_19_4"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_5.png" alt="rabbitmq_19_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_6.png" alt="rabbitmq_19_6"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_7.png" alt="rabbitmq_19_7"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_8.png" alt="rabbitmq_19_8"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_9.png" alt="rabbitmq_19_9"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_19_12.png" alt="rabbitmq_19_12"></p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Rabbitmq高级特性-生产端特性讲解_确认机制和返回机制(20)</title>
    <url>/2021/01/26/Rabbitmq%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-%E7%94%9F%E4%BA%A7%E7%AB%AF%E7%89%B9%E6%80%A7%E8%AE%B2%E8%A7%A3-%E7%A1%AE%E8%AE%A4%E6%9C%BA%E5%88%B6%E5%92%8C%E8%BF%94%E5%9B%9E%E6%9C%BA%E5%88%B6-20/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_1.png" alt="rabbitmq_20_1"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_2.png" alt="rabbitmq_20_2"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_3.png" alt="rabbitmq_20_3"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_4.png" alt="rabbitmq_20_4"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_5.png" alt="rabbitmq_20_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_6.png" alt="rabbitmq_20_6"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_20_7.png" alt="rabbitmq_20_7"></p>
<h2 id="Sender4ConfirmListener"><a href="#Sender4ConfirmListener" class="headerlink" title="Sender4ConfirmListener"></a>Sender4ConfirmListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4ConfirmListener</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_confirmlistener_exchange&quot;</span>;</span><br><span class="line">		String routingKey1 = <span class="string">&quot;confirm.save&quot;</span>;</span><br><span class="line">		</span><br><span class="line">    	<span class="comment">//5 发送</span></span><br><span class="line">		String msg = <span class="string">&quot;Hello World RabbitMQ 4 Confirm Listener Message ...&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		channel.confirmSelect();</span><br><span class="line">        channel.addConfirmListener(<span class="keyword">new</span> ConfirmListener() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleNack</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">				System.err.println(<span class="string">&quot;------- error ---------&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleAck</span><span class="params">(<span class="keyword">long</span> deliveryTag, <span class="keyword">boolean</span> multiple)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">				System.err.println(<span class="string">&quot;------- ok ---------&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">        </span><br><span class="line">		channel.basicPublish(exchangeName, routingKey1 , <span class="keyword">null</span> , msg.getBytes()); </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Receiver4ConfirmListener"><a href="#Receiver4ConfirmListener" class="headerlink" title="Receiver4ConfirmListener"></a>Receiver4ConfirmListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4ConfirmListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_confirmlistener_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_confirmlistener_queue&quot;</span>;</span><br><span class="line">		<span class="comment">//String routingKey = &quot;user.*&quot;;</span></span><br><span class="line">		String routingKey = <span class="string">&quot;confirm.#&quot;</span>;</span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">false</span>, consumer);  </span><br><span class="line">        <span class="comment">//循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">            <span class="comment">//手工签收消息</span></span><br><span class="line">            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Sender4ReturnListener"><a href="#Sender4ReturnListener" class="headerlink" title="Sender4ReturnListener"></a>Sender4ReturnListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender4ReturnListener</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1 创建ConnectionFactory</span></span><br><span class="line">		ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">		connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">		connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2 创建Connection</span></span><br><span class="line">		Connection connection = connectionFactory.newConnection();</span><br><span class="line">		<span class="comment">//3 创建Channel</span></span><br><span class="line">		Channel channel = connection.createChannel();  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_returnlistener_exchange&quot;</span>;</span><br><span class="line">		String routingKey1 = <span class="string">&quot;abcd.save&quot;</span>;</span><br><span class="line">		String routingKey2 = <span class="string">&quot;return.save&quot;</span>;</span><br><span class="line">		String routingKey3 = <span class="string">&quot;return.delete.abc&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//5 监听</span></span><br><span class="line">    	channel.addReturnListener(<span class="keyword">new</span> ReturnListener() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturn</span><span class="params">(<span class="keyword">int</span> replyCode,</span></span></span><br><span class="line"><span class="function"><span class="params">						            String replyText,</span></span></span><br><span class="line"><span class="function"><span class="params">						            String exchange,</span></span></span><br><span class="line"><span class="function"><span class="params">						            String routingKey,</span></span></span><br><span class="line"><span class="function"><span class="params">						            AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">						            <span class="keyword">byte</span>[] body)</span></span></span><br><span class="line"><span class="function">					<span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;**************handleReturn**********&quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;replyCode: &quot;</span> + replyCode);</span><br><span class="line">				System.out.println(<span class="string">&quot;replyText: &quot;</span> + replyText);</span><br><span class="line">				System.out.println(<span class="string">&quot;exchange: &quot;</span> + exchange);</span><br><span class="line">				System.out.println(<span class="string">&quot;routingKey: &quot;</span> + routingKey);</span><br><span class="line">				System.out.println(<span class="string">&quot;body: &quot;</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">			&#125;</span><br><span class="line">    	&#125;);</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">//6 发送</span></span><br><span class="line">		String msg = <span class="string">&quot;Hello World RabbitMQ 4 Return Listener Message ...&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">boolean</span> mandatory = <span class="keyword">true</span>;</span><br><span class="line">		channel.basicPublish(exchangeName, routingKey1 , mandatory, <span class="keyword">null</span> , msg.getBytes()); </span><br><span class="line"><span class="comment">//		channel.basicPublish(exchangeName, routingKey2 , null , msg.getBytes()); 	</span></span><br><span class="line"><span class="comment">///		channel.basicPublish(exchangeName, routingKey3 , null , msg.getBytes()); </span></span><br><span class="line">		</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Receiver4ReturnListener"><a href="#Receiver4ReturnListener" class="headerlink" title="Receiver4ReturnListener"></a>Receiver4ReturnListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver4ReturnListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory() ;  </span><br><span class="line">        </span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;192.168.11.71&quot;</span>);</span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">		connectionFactory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        connectionFactory.setAutomaticRecoveryEnabled(<span class="keyword">true</span>);</span><br><span class="line">        connectionFactory.setNetworkRecoveryInterval(<span class="number">3000</span>);</span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        </span><br><span class="line">        Channel channel = connection.createChannel();  </span><br><span class="line">		<span class="comment">//4 声明</span></span><br><span class="line">		String exchangeName = <span class="string">&quot;test_returnlistener_exchange&quot;</span>;</span><br><span class="line">		String exchangeType = <span class="string">&quot;topic&quot;</span>;</span><br><span class="line">		String queueName = <span class="string">&quot;test_returnlistener_queue&quot;</span>;</span><br><span class="line">		<span class="comment">//String routingKey = &quot;user.*&quot;;</span></span><br><span class="line">		String routingKey = <span class="string">&quot;return.#&quot;</span>;</span><br><span class="line">		channel.exchangeDeclare(exchangeName, exchangeType, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueDeclare(queueName, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">		channel.queueBind(queueName, exchangeName, routingKey);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//durable 是否持久化消息</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//参数：队列名称、是否自动ACK、Consumer</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);  </span><br><span class="line">        <span class="comment">//循环获取消息  </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;  </span><br><span class="line">            <span class="comment">//获取消息，如果没有消息，这一步将会一直阻塞  </span></span><br><span class="line">            Delivery delivery = consumer.nextDelivery();  </span><br><span class="line">            String msg = <span class="keyword">new</span> String(delivery.getBody());    </span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息：&quot;</span> + msg);  </span><br><span class="line">        &#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 持久化机制</title>
    <url>/2021/01/26/Redis-%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="1-Redis的持久化机制-RDB"><a href="#1-Redis的持久化机制-RDB" class="headerlink" title="1. Redis的持久化机制 - RDB"></a>1. Redis的持久化机制 - RDB</h1><h2 id="1-1-什么是RDB"><a href="#1-1-什么是RDB" class="headerlink" title="1.1 什么是RDB"></a>1.1 什么是RDB</h2><p>RDB：每隔一段时间，把内存中的数据写入磁盘的临时文件，作为快照，恢复的时候把快照文件读进内存。如果宕机重启，那么内存里的数据肯定会没有的，那么再次启动redis后，则会恢复。</p>
<h2 id="1-2-备份与恢复"><a href="#1-2-备份与恢复" class="headerlink" title="1.2 备份与恢复"></a>1.2 备份与恢复</h2><p>内存备份 –&gt; 磁盘临时文件临时文件 –&gt; 恢复到内存</p>
<h2 id="1-3-RDB优劣势"><a href="#1-3-RDB优劣势" class="headerlink" title="1.3 RDB优劣势"></a>1.3 RDB优劣势</h2><ul>
<li>优势<ol>
<li>每隔一段时间备份，全量备份</li>
<li>灾备简单，可以远程传输</li>
<li>子进程备份的时候，主进程不会有任何io操作（不会有写入修改或删除），保证备份数据的的完整性</li>
<li>相对AOF来说，当有更大文件的时候可以快速重启恢复</li>
</ol>
</li>
<li>劣势<ol>
<li>发生故障是，有可能会丢失最后一次的备份数据</li>
<li>子进程所占用的内存比会和父进程一模一样，如会造成CPU负担</li>
<li>由于定时全量备份是重量级操作，所以对于实时备份，就无法处理了。</li>
</ol>
</li>
</ul>
<h2 id="1-4-RDB的配置"><a href="#1-4-RDB的配置" class="headerlink" title="1.4 RDB的配置"></a>1.4 RDB的配置</h2><ol>
<li><p>保存位置，可以在redis.conf自定义：/user/local/redis/working/dump.rdb</p>
</li>
<li><p>保存机制：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">save 10 3</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果1个缓存更新，则15分钟后备份</span><br><span class="line">* 如果10个缓存更新，则5分钟后备份</span><br><span class="line">* 如果10000个缓存更新，则1分钟后备份</span><br><span class="line">* 演示：更新3个缓存，10秒后备份</span><br><span class="line">* 演示：备份dump.rdb，删除重启</span><br></pre></td></tr></table></figure></li>
<li><p>stop-writes-on-bgsave-error<br> ◦ yes：如果save过程出错，则停止写操作<br> ◦ no：可能造成数据不一致</p>
</li>
<li><p>rdbcompression<br> ◦ yes：开启rdb压缩模式<br> ◦ no：关闭，会节约cpu损耗，但是文件会大，道理同nginx</p>
</li>
<li><p>rdbchecksum<br> ◦ yes：使用CRC64算法校验对rdb进行数据校验，有10%性能损耗<br> ◦ no：不校验</p>
</li>
</ol>
<h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h2><p>RDB适合大量数据的恢复，但是数据的完整性和一致性可能会不足。</p>
<h1 id="2-Redis的持久化机制-AOF"><a href="#2-Redis的持久化机制-AOF" class="headerlink" title="2 Redis的持久化机制 - AOF"></a>2 Redis的持久化机制 - AOF</h1><p>RDB会丢失最后一次备份的rdb文件，但是其实也无所谓，其实也可以忽略不计，毕竟是缓存，丢了就丢了，但是如果追求数据的完整性，那就的考虑使用AOF了。</p>
<h2 id="2-1-AOF特点"><a href="#2-1-AOF特点" class="headerlink" title="2.1 AOF特点"></a>2.1 AOF特点</h2><ol>
<li>以日志的形式来记录用户请求的写操作。读操作不会记录，因为写操作才会存存储。</li>
<li>文件以追加的形式而不是修改的形式。</li>
<li>redis的aof恢复其实就是把追加的文件从开始到结尾读取执行写操作。</li>
</ol>
<h2 id="2-2-优势"><a href="#2-2-优势" class="headerlink" title="2.2 优势"></a>2.2 优势</h2><ol>
<li>AOF更加耐用，可以以秒级别为单位备份，如果发生问题，也只会丢失最后一秒的数据，大大增加了可靠性和数据完整性。所以AOF可以每秒备份一次，使用fsync操作。</li>
<li>以log日志形式追加，如果磁盘满了，会执行 redis-check-aof 工具</li>
<li>当数据太大的时候，redis可以在后台自动重写aof。当redis继续把日志追加到老的文件中去时，重写也是非常安全的，不会影响客户端的读写操作。</li>
<li>AOF 日志包含的所有写操作，会更加便于redis的解析恢复。</li>
</ol>
<h2 id="2-3-劣势"><a href="#2-3-劣势" class="headerlink" title="2.3 劣势"></a>2.3 劣势</h2><ol>
<li>相同的数据，同一份数据，AOF比RDB大</li>
<li>针对不同的同步机制，AOF会比RDB慢，因为AOF每秒都会备份做写操作，这样相对与RDB来说就略低。 每秒备份fsync没毛病，但是如果客户端的每次写入就做一次备份fsync的话，那么redis的性能就会下降。</li>
<li>AOF发生过bug，就是数据恢复的时候数据不完整，这样显得AOF会比较脆弱，容易出现bug，因为AOF没有RDB那么简单，但是呢为了防止bug的产生，AOF就不会根据旧的指令去重构，而是根据当时缓存中存在的数据指令去做重构，这样就更加健壮和可靠了。</li>
</ol>
<h2 id="2-4-AOF的配置"><a href="#2-4-AOF的配置" class="headerlink" title="2.4 AOF的配置"></a>2.4 AOF的配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># AOF 默认关闭，yes可以开启</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># AOF 的文件名</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># no：不同步</span><br><span class="line"># everysec：每秒备份，推荐使用</span><br><span class="line"># always：每次操作都会备份，安全并且数据完整，但是慢性能差</span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"># 重写的时候是否要同步，no可以保证数据安全</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 重写机制：避免文件越来越大，自动优化压缩指令，会fork一个新的进程去完成重写动作，新进程里的内存数据会被重写，此时旧的aof文件不会被读取使用，类似rdb</span><br><span class="line"># 当前AOF文件的大小是上次AOF大小的100% 并且文件体积达到64m，满足两者则触发重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<h2 id="2-5-到底采用RDB还是AOF呢？"><a href="#2-5-到底采用RDB还是AOF呢？" class="headerlink" title="2.5 到底采用RDB还是AOF呢？"></a>2.5 到底采用RDB还是AOF呢？</h2><ol>
<li>如果你能接受一段时间的缓存丢失，那么可以使用RDB</li>
<li>如果你对实时性的数据比较care，那么就用AOF</li>
<li>使用RDB和AOF结合一起做持久化，RDB做冷备，可以在不同时期对不同版本做恢复，AOF做热备，保证数据仅仅只有1秒的损失。当AOF破损不可用了，那么再用RDB恢复，这样就做到了两者的相互结合，也就是说Redis恢复会先加载AOF，如果AOF有问题会再加载RDB，这样就达到冷热备份的目的了。</li>
</ol>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redission 介绍</title>
    <url>/2021/04/28/Redission-introduction/</url>
    <content><![CDATA[<h1 id="Redisson概述"><a href="#Redisson概述" class="headerlink" title="Redisson概述"></a>Redisson概述</h1><p>在前面的章节中，我们已经接触了Redis，也知道了如何在Java中调用Redis。Redis有很多Java客户端，我们比较常用有Jedis，spring-data-redis，lettuce等。今天我们给大家介绍另外一个非常好用的Redis的Java客户端——Redisson。我们先看一下Redis官网中介绍的Java客户端列表：<br><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df98c910958344319200842.png" alt="图片描述">在这个列表中，我们可以看到Redisson的后面有笑脸，有星，说明还是比较受欢迎的。再看看后面的简介，Redisson是一个在Redis服务之上的，分布式、可扩展的Java数据结构。我们进入到Redisson的官网，看看官网是怎么介绍的。</p>
<blockquote>
<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。充分的利用了Redis键值数据库提供的一系列优势，基于Java实用工具包中常用接口，为使用者提供了一系列具有分布式特性的常用工具类。使得原本作为协调单机多线程并发程序的工具包获得了协调分布式多机多线程并发系统的能力，大大降低了设计和研发大规模分布式系统的难度。同时结合各富特色的分布式服务，更进一步简化了分布式环境中程序相互之间的协作。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p>
</blockquote>
<p>上面一段话看起来有点晦涩难懂，总结起来可以归结为一下几点：</p>
<ul>
<li>Redisson提供了使用Redis的最简单和最便捷的方法；</li>
<li>开发人员不需过分关注Redis，集中精力关注业务即可；</li>
<li>基于Redis，提供了在Java中具有分布式特性的工具类；</li>
<li>使Java中的并发工具包获得了协调多机多线程并发的能力；</li>
</ul>
<h2 id="Redisson特性"><a href="#Redisson特性" class="headerlink" title="Redisson特性"></a>Redisson特性</h2><p>上面我们对Redisson有了一个整体的印象，接下来我们看看它都有哪些特点。</p>
<h4 id="支持的Redis的配置"><a href="#支持的Redis的配置" class="headerlink" title="支持的Redis的配置"></a>支持的Redis的配置</h4><p>Redisson支持多种Redis配置，无论你的Redis是单点、集群、主从还是哨兵模式，它都是支持的。只需要在Redisson的配置文件中，增加相应的配置就可以了。</p>
<h4 id="支持的Java实体"><a href="#支持的Java实体" class="headerlink" title="支持的Java实体"></a>支持的Java实体</h4><p>Redisson支持多种Java实体，使其具有分布式的特性。我们比较常用的有：AtomicLong（原子Long）、AtomicDouble（原子Double）、PublishSubscribe（发布订阅）等。</p>
<h4 id="Java分布式锁与同步器"><a href="#Java分布式锁与同步器" class="headerlink" title="Java分布式锁与同步器"></a>Java分布式锁与同步器</h4><p>Redisson支持Java并发包中的多种锁，比如：Lock（可重入锁）、FairLock（公平锁）、MultiLock（联锁）、RedLock（红锁）、ReadWriteLock（读写锁）、Semaphore（信号量）、CountDownLatch（闭锁）等。我们注意到这些都是Java并发包中的类，Redisson借助于Redis又重新实现了一套，使其具有了分布式的特性。以后我们在使用Redisson中的这些类的时候，可以跨进程跨JVM去使用。</p>
<h4 id="分布式Java集合"><a href="#分布式Java集合" class="headerlink" title="分布式Java集合"></a>分布式Java集合</h4><p>Redisson对Java的集合类也进行了封装，使其具有分布式的特性。如：Map、Set、List、Queue、Deque、BlockingQueue等。以后我们就可以在分布式的环境中使用这些集合了。</p>
<h4 id="与Spring框架的整合"><a href="#与Spring框架的整合" class="headerlink" title="与Spring框架的整合"></a>与Spring框架的整合</h4><p>Redisson可以与Spring大家族中的很多框架进行整合，其中包括：Spring基础框架、Spring Cache、Spring Session、Spring Data Redis、Spring Boot等。在项目中我们可以轻松的与这些框架整合，通过简单的配置就可以实现项目的需求。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的介绍，我相信大家对Redisson有了比较初步的了解，大部分人可能对Redisson有了浓厚的兴趣，迫不及待的想在自己的项目使用Redisson。Redisson的使用方法以及Redisson的分布式锁，我们会在后面的视频教程中给大家做详细的介绍。</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>redission</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的线程模型</title>
    <url>/2021/01/26/Redis%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_thread_model1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_thread_model1.png"></p>
<h2 id="Redis线程模型的组成"><a href="#Redis线程模型的组成" class="headerlink" title="Redis线程模型的组成"></a><strong>Redis线程模型的组成</strong></h2><hr>
<ol>
<li><em>多个socket</em></li>
<li><em>IO多路复用程序</em></li>
<li><em>scocket队列</em></li>
<li><em>文件事件分配器</em></li>
<li><em>事件处理器（连接应答处理器，命令请求处理器，命令回复处理器）</em></li>
</ol>
<p>多个 socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 socket，会将 socket 产生的事件放入队列中排队，事件分派器每次从队列中取出一个事件，把该事件交给对应的事件处理器进行处理。</p>
<h1 id="流程及原理"><a href="#流程及原理" class="headerlink" title="流程及原理"></a>流程及原理</h1><hr>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_thread_model.png" alt="redis_thread_model"></p>
<ol>
<li><p>客户端socket01请求redis的server scoket建立连接，此时server socket生成<code>AE_READABLE</code>事件，<a href="https://www.notion.so/IO-3896961f1af045ba8a7d2f184f87748d">IO多路复用程序</a>监听到server socket产生的事件，并将该事件压入队列。</p>
<p>文件事件分派器从队列中拉取事件交给连接应答处理器，处理器同时生成一个与客户端通信的socket01,并将该scoket01的AE_READABLE事件与命令请求处理器关联</p>
</li>
<li><p>此时客户端scoket01发送一个”set key value“的请求，redis的scoket01接收到AE_READABLE事件，IO多路复用程序监听到事件，将事件压入队列，文件分派器取到事件，由于scoket01已经</p>
<p>和命令请求处理器关联，所以命令请求处理器开始”set key value”,完毕后会将redis的scoket01的<code>AE_WRITABLE</code>事件关联到命令回复处理器</p>
</li>
<li><p>如果此时客户端准备好接收返回结果了，向redis中的socket01发起询问请求，那么 redis 中的 socket01 会产生一个 <code>AE_WRITABLE</code> 事件，同样压入队列中，事件分派器找到相关联的命令回复处理器，由命令回复处理器对 socket01 输入本次操作的一个结果，比如 <code>ok</code>，之后解除 socket01 的 <code>AE_WRITABLE</code> 事件与命令回复处理器的关联。</p>
</li>
</ol>
<p>这样便完成了redis的一次通信。</p>
<h1 id="文件事件分配器"><a href="#文件事件分配器" class="headerlink" title="文件事件分配器"></a>文件事件分配器</h1><hr>
<ol>
<li>Redis 基于 Reactor 模式开发了自己的网络事件处理器： 这个处理器被称为文件事件处理器（file event handler）</li>
<li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字， 并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li>
<li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作时， 与操作相对应的文件事件就会产生， 这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li>
<li>文件事件处理器以单线程方式运行， 但通过使用 I/O 多路复用程序来监听多个套接字， 文件事件处理器既实现了高性能的网络通信模型， 又可以很好地与 redis 服务器中其他同样以单线程方式运行的模块进行对接， 这保持了 Redis 内部单线程设计的简单性</li>
</ol>
<h1 id="为什么redis使用单线程模型还能保证高性能？"><a href="#为什么redis使用单线程模型还能保证高性能？" class="headerlink" title="为什么redis使用单线程模型还能保证高性能？"></a>为什么redis使用单线程模型还能保证高性能？</h1><hr>
<h2 id="纯内存访问"><a href="#纯内存访问" class="headerlink" title="纯内存访问"></a>纯内存访问</h2><p>redis 将所有数据放在内存中，内存的响应时长大约为 100 纳秒，这是 redis 的 QPS 过万的重要基础。</p>
<h2 id="非阻塞式IO"><a href="#非阻塞式IO" class="headerlink" title="非阻塞式IO"></a>非阻塞式IO</h2><ul>
<li><p>什么是阻塞式 IO</p>
<p>当我们调用 Scoket 的读写方法，默认它们是阻塞的。</p>
<p>read() 方法要传递进去一个参数 n，表示读取这么多字节后再返回，如果没有读够 n 字节线程就会阻塞，直到新的数据到来或者连接关闭了， read 方法才可以返回，线程才能继续处理。</p>
<p>write() 方法会首先把数据写到系统内核为 Scoket 分配的写缓冲区中，当写缓存区满溢，即写缓存区中的数据还没有写入到磁盘，就有新的数据要写道写缓存区时，write() 方法就会阻塞，直到写缓存区中有空闲空间。</p>
</li>
<li><p>什么是非阻塞式 IO</p>
<p>非阻塞 IO 在 Scoket 对象上提供了一个选项<code>Non_Blocking</code> ，当这个选项打开时，读写方法不会阻塞，而是能读多少读多少，能写多少写多少。</p>
<p>能读多少取决于内核为 Scoket 分配的读缓冲区的大小，能写多少取决于内核为 Scoket 分配的写缓冲区的剩余空间大小。读方法和写方法都会通过返回值来告知程序实际读写了多少字节数据。</p>
<p>有了非阻塞 IO 意味着线程在读写 IO 时可以不必再阻塞了，读写可以瞬间完成然后线程可以继续干别的事了。</p>
</li>
</ul>
<h2 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h2><p><a href="https://www.notion.so/IO-3896961f1af045ba8a7d2f184f87748d">IO多路复用技术</a></p>
<ul>
<li><p>白话举例:模拟一个tcp服务器处理30个客户socket</p>
<p>假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择：</p>
<ol>
<li>第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡主，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。</li>
<li>第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种类似于为每一个用户创建一个进程或者线程处理连接。</li>
<li>第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。。。 这种就是IO复用模型（Linux下的select、poll和epoll就是干这个的。将用户socket对应的fd注册进epoll，然后epoll帮你监听哪些socket上有消息到达，这样就避免了大量的无用操作。此时的socket应该采用非阻塞模式。这样，整个过程只在调用select、poll、epoll这些调用的时候才会阻塞，收发客户消息是不会阻塞的，整个进程或者线程就被充分利用起来，这就是事件驱动，所谓的reactor模式。）</li>
</ol>
</li>
</ul>
<h2 id="单线程避免了线程切换和竞态产生的消耗"><a href="#单线程避免了线程切换和竞态产生的消耗" class="headerlink" title="单线程避免了线程切换和竞态产生的消耗"></a>单线程避免了线程切换和竞态产生的消耗</h2><p>单线程能带来几个好处：</p>
<ul>
<li>第一，单线程可以简化数据结构和算法的实现。并发数据结构实现不但困难而且开发测试比较麻烦</li>
<li>第二，单线程避免了线程切换和竞态产生的消耗，对于服务端开发来说，锁和线程切换通常是性能杀手。</li>
</ul>
<p><strong>单线程的问题</strong>：对于每个命令的执行时间是有要求的。如果某个命令执行过长，会造成其他命令的阻塞，所以 redis 适用于那些需要快速执行的场景。</p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><hr>
<p><a href="https://www.cnblogs.com/volare/p/12283355.html">Redis线程模型</a></p>
<p><a href="https://www.jianshu.com/p/8f2fb61097b8">Redis线程模型</a></p>
<p><a href="https://blog.csdn.net/m0_37524661/article/details/87086267">Redis 线程模型_好记性不如烂笔头-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1403767">Redis 单线程模型介绍</a></p>
<p><a href="https://www.cnblogs.com/lm970585581/p/13220299.html">了解redis的单线程模型工作原理？一篇文章就够了</a></p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的数据类型</title>
    <url>/2021/01/26/Redis%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><a href="http://redisdoc.com/">Redis 命令参考 - Redis 命令参考</a></p>
<h1 id="Redis的数据类型-string"><a href="#Redis的数据类型-string" class="headerlink" title="Redis的数据类型 - string"></a><strong>Redis的数据类型 - string</strong></h1><p><strong>string 字符串</strong></p>
<p>string: 最简单的字符串类型键值对缓存，也是最基本的</p>
<p><strong>key相关</strong></p>
<p>keys *：查看所有的key (不建议在生产上使用，有性能影响)</p>
<p>type key：key的类型</p>
<p><strong>string类型</strong></p>
<p>get/set/del：查询/设置/删除set rekey data：设置已经存在的key，会覆盖setnx rekey data：设置已经存在的key，不会覆盖</p>
<p>set key value ex time：设置带过期时间的数据expire key：设置过期时间ttl：查看剩余时间，-1永不过期，-2过期</p>
<p>append key：合并字符串strlen key：字符串长度</p>
<p>incr key：累加1decr key：类减1incrby key num：累加给定数值decrby key num：累减给定数值</p>
<p>getrange key start end：截取数据，end=-1 代表到最后setrange key start newdata：从start位置开始替换数据</p>
<p>mset：连续设值mget：连续取值msetnx：连续设置，如果存在则不设置</p>
<p><strong>其他</strong></p>
<p>select index：切换数据库，总共默认16个flushdb：删除当前下边db中的数据flushall：删除所有db中的数据</p>
<h1 id="Redis的数据类型-hash"><a href="#Redis的数据类型-hash" class="headerlink" title="Redis的数据类型 - hash"></a><strong>Redis的数据类型 - hash</strong></h1><p><strong>hash</strong></p>
<p>hash：类似map，存储结构化数据结构，比如存储一个对象（不能有嵌套对象）</p>
<p><strong>使用</strong></p>
<p>hset key property value：&gt; hset user name imooc&gt; 创建一个user对象，这个对象中包含name属性，name值为imooc</p>
<p>hget user name：获得用户对象中name的值</p>
<p>hmset：设置对象中的多个键值对&gt; hset user age 18 phone 139123123hmsetnx：设置对象中的多个键值对，存在则不添加&gt; hset user age 18 phone 139123123</p>
<p>hmget：获得对象中的多个属性&gt; hmget user age phone</p>
<p>hgetall user：获得整个对象的内容</p>
<p>hincrby user age 2：累加属性hincrbyfloat user age 2.2：累加属性</p>
<p>hlen user：有多少个属性</p>
<p>hexists user age：判断属性是否存在</p>
<p>hkeys user：获得所有属性hvals user：获得所有值</p>
<p>hdel user：删除对象</p>
<h1 id="Redis的数据类型-list"><a href="#Redis的数据类型-list" class="headerlink" title="Redis的数据类型 - list"></a><strong>Redis的数据类型 - list</strong></h1><p><strong>list</strong></p>
<p>list：列表，[a, b, c, d, …]</p>
<p><strong>使用</strong></p>
<p>lpush userList 1 2 3 4 5：构建一个list，从左边开始存入数据rpush userList 1 2 3 4 5：构建一个list，从右边开始存入数据lrange list start end：获得数据</p>
<p>lpop：从左侧开始拿出一个数据rpop：从右侧开始拿出一个数据</p>
<p>pig cow sheep chicken duck</p>
<p>llen list：list长度lindex list index：获取list下标的值</p>
<p>lset list index value：把某个下标的值替换</p>
<p>linsert list before/after value：插入一个新的值</p>
<p>lrem list num value：删除几个相同数据</p>
<p>ltrim list start end：截取值，替换原来的list</p>
<h1 id="Redis的数据类型-zset"><a href="#Redis的数据类型-zset" class="headerlink" title="Redis的数据类型 - zset"></a><strong>Redis的数据类型 - zset</strong></h1><p><strong>sorted set：</strong></p>
<p>sorted set：排序的set，可以去重可以排序，比如可以根据用户积分做排名，积分作为set的一个数值，根据数值可以做排序。set中的每一个memeber都带有一个分数</p>
<p><strong>使用</strong></p>
<p>zadd zset 10 value1 20 value2 30 value3：设置member和对应的分数</p>
<p>zrange zset 0 -1：查看所有zset中的内容zrange zset 0 -1 withscores：带有分数</p>
<p>zrank zset value：获得对应的下标zscore zset value：获得对应的分数</p>
<p>zcard zset：统计个数zcount zset 分数1 分数2：统计个数</p>
<p>zrangebyscore zset 分数1 分数2：查询分数之间的member(包含分数1 分数2)zrangebyscore zset (分数1 (分数2：查询分数之间的member（不包含分数1 和 分数2）zrangebyscore zset 分数1 分数2 limit start end：查询分数之间的member(包含分数1 分数2)，获得的结果集再次根据下标区间做查询</p>
<p>zrem zset value：删除member</p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群搭建</title>
    <url>/2021/01/11/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="redis-conf-配置"><a href="#redis-conf-配置" class="headerlink" title="redis.conf 配置"></a>redis.conf 配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启集群模式</span><br><span class="line">cluster-enabled yes</span><br><span class="line"># 每一个节点需要有一个配置文件，需要6份。每个节点处于集群的角色都需要告知其他所有节点，彼此知道，这个文件用于存储集群模式下的集群状态等信息，这个文件是由redis自己维护，我们不用管。如果你要重新创建集群，那么把这个文件删了就行</span><br><span class="line">cluster-config-file nodes-201.conf</span><br><span class="line"># 超时时间，超时则认为master宕机，随后主备切换</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"># 开启AOF</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<h2 id="启动6个redis实例"><a href="#启动6个redis实例" class="headerlink" title="启动6个redis实例"></a>启动6个redis实例</h2><ol>
<li>启动6台</li>
<li>如果启动过程出错，把rdb等文件删除清空</li>
</ol>
<h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####</span></span><br><span class="line"><span class="comment"># 注意1：如果你使用的是redis3.x版本，需要使用redis-trib.rb来构建集群，最新版使用C语言来构建了，这个要注意</span></span><br><span class="line"><span class="comment"># 注意2：以下为新版的redis构建方式</span></span><br><span class="line"><span class="comment">#####</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群，主节点和从节点比例为1，1-3为主，4-6为从，1和4，2和5，3和6分别对应为主从关系，这也是最经典用的最多的集群模式</span></span><br><span class="line">redis-cli -a 密码 --cluster create ip1:port1 ip2:port2 ip3:port3 ip4:port4 ip5:port5 ip6:port6 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p><code>slots</code>：槽，用于装数据，主节点有，从节点没有</p>
<h2 id="检查集群信息"><a href="#检查集群信息" class="headerlink" title="检查集群信息"></a>检查集群信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.25.64:6380</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RestTemplateAndOkHttp3</title>
    <url>/2021/04/07/RestTemplateAndOkHttp3/</url>
    <content><![CDATA[<h1 id="RestTemplate-集成-OKHttp3"><a href="#RestTemplate-集成-OKHttp3" class="headerlink" title="RestTemplate 集成 OKHttp3"></a>RestTemplate 集成 OKHttp3</h1><h2 id="核心依赖"><a href="#核心依赖" class="headerlink" title="核心依赖"></a>核心依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="属性配置类-OkHttpProperties"><a href="#属性配置类-OkHttpProperties" class="headerlink" title="属性配置类 OkHttpProperties"></a>属性配置类 OkHttpProperties</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;okhttp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接超时，默认 10 秒，0 表示没有超时限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer connectTimeout = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应超时，默认 10 秒，0 表示没有超时限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer readTimeout = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写超时，默认 10 秒，0 表示没有超时限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer writeTimeout = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池中整体的空闲连接的最大数量，默认 5 个连接数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxIdleConnections = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接空闲时间最大时间，单位秒，默认 300 秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long keepAliveDuration = <span class="number">300L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置类-OkHttpConfig"><a href="#配置类-OkHttpConfig" class="headerlink" title="配置类 OkHttpConfig"></a>配置类 OkHttpConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> okhttp3.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(OkHttpProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OkHttpProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">                .sslSocketFactory(sslSocketFactory(), x509TrustManager())</span><br><span class="line">                <span class="comment">// 是否开启缓存</span></span><br><span class="line">                .retryOnConnectionFailure(<span class="keyword">false</span>)</span><br><span class="line">                .connectionPool(pool())</span><br><span class="line">                .connectTimeout(properties.getConnectTimeout(), TimeUnit.SECONDS)</span><br><span class="line">                .readTimeout(properties.getReadTimeout(), TimeUnit.SECONDS)</span><br><span class="line">                .writeTimeout(properties.getWriteTimeout(), TimeUnit.SECONDS)</span><br><span class="line">                .hostnameVerifier((hostname, session) -&gt; <span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 设置代理</span></span><br><span class="line"><span class="comment">//            	.proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&quot;127.0.0.1&quot;, 8888)))</span></span><br><span class="line">                <span class="comment">// 拦截器</span></span><br><span class="line"><span class="comment">//                .addInterceptor()</span></span><br><span class="line">                .addNetworkInterceptor(<span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        Request request = chain.request().newBuilder().addHeader(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;close&quot;</span>).build();</span><br><span class="line">                        <span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> X509TrustManager <span class="title">x509TrustManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SSLSocketFactory <span class="title">sslSocketFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 信任任何链接</span></span><br><span class="line">            SSLContext sslContext = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">            sslContext.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;x509TrustManager()&#125;, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">            <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | KeyManagementException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionPool <span class="title">pool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConnectionPool(</span><br><span class="line">                properties.getMaxIdleConnections(),</span><br><span class="line">                properties.getKeepAliveDuration(),</span><br><span class="line">                TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="OKHttp3-工具类"><a href="#OKHttp3-工具类" class="headerlink" title="OKHttp3 工具类"></a>OKHttp3 工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType JSON = MediaType.parse(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MediaType XML = MediaType.parse(<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OkHttpClient okHttpClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params    请求参数 map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, params, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers   请求头字段 &#123;k1, v1 k2, v2, ...&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(String url, String[] headers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, <span class="keyword">null</span>, headers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params    请求参数 map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers   请求头字段 &#123;k1, v1 k2, v2, ...&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGet</span><span class="params">(String url, Map&lt;String, String&gt; params, String[] headers)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(url);</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.keySet().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> firstFlag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (String key : params.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (firstFlag) &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;?&quot;</span>).append(key).append(<span class="string">&quot;=&quot;</span>).append(params.get(key));</span><br><span class="line">                    firstFlag = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sb.append(<span class="string">&quot;&amp;&quot;</span>).append(key).append(<span class="string">&quot;=&quot;</span>).append(params.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Request.Builder builder = <span class="keyword">new</span> Request.Builder();</span><br><span class="line">        <span class="keyword">if</span> (headers != <span class="keyword">null</span> &amp;&amp; headers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (headers.length % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headers.length; i = i + <span class="number">2</span>) &#123;</span><br><span class="line">                    builder.addHeader(headers[i], headers[i + <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;headers&#x27;s length[&#123;&#125;] is error.&quot;</span>, headers.length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Request request = builder.url(sb.toString()).build();</span><br><span class="line">        log.info(<span class="string">&quot;do get request and url[&#123;&#125;]&quot;</span>, sb.toString());</span><br><span class="line">        <span class="keyword">return</span> execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params    请求参数 map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPost</span><span class="params">(String url, Map&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">        FormBody.Builder builder = <span class="keyword">new</span> FormBody.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.keySet().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String key : params.keySet()) &#123;</span><br><span class="line">                builder.add(key, params.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).post(builder.build()).build();</span><br><span class="line">        log.info(<span class="string">&quot;do post request and url[&#123;&#125;]&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post 请求, 请求数据为 json 的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json      请求数据, json 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPostJson</span><span class="params">(String url, String json)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;do post request and url[&#123;&#125;]&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> exectePost(url, json, JSON);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post 请求, 请求数据为 xml 的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url       请求url地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> xml       请求数据, xml 字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doPostXml</span><span class="params">(String url, String xml)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;do post request and url[&#123;&#125;]&quot;</span>, url);</span><br><span class="line">        <span class="keyword">return</span> exectePost(url, xml, XML);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">exectePost</span><span class="params">(String url, String data, MediaType contentType)</span> </span>&#123;</span><br><span class="line">        RequestBody requestBody = RequestBody.create(contentType, data);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder().url(url).post(requestBody).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> execute(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">execute</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        Response response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = okHttpClient.newCall(request).execute();</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="keyword">return</span> response.body().string();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;OkHttp 调用失败&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>okhttp</tag>
        <tag>RestTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis缓存过期机制和内存淘汰管理机制</title>
    <url>/2021/01/11/Redis%E7%BC%93%E5%AD%98%E8%BF%87%E6%9C%9F%E6%9C%BA%E5%88%B6%E5%92%8C%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>转载自 <a href="https://blog.csdn.net/qq_36986015/article/details/106802555">https://blog.csdn.net/qq_36986015/article/details/106802555</a></p>
<h1 id="1-缓存过期机制"><a href="#1-缓存过期机制" class="headerlink" title="1. 缓存过期机制"></a><strong>1. 缓存过期机制</strong></h1><p>Redis可以通过设置一个过期时间expire来处理缓存，其中处理方式有两种：</p>
<ol>
<li><p>（主动）定期删除，Redis会抽查随机的key，默认1秒十次，一旦抽查的key过期了，就会给删除，配置的属性在redis.conf中，hz等于10，表示1秒抽查10次</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hz 10</span><br></pre></td></tr></table></figure></li>
<li><p>（被动）惰性删除，key到期后不去主动检测，而是请求访问到这个key之后，会检查下是否过期，这样就不会太消耗CPU资源，缺点是一直占用着内存</p>
</li>
</ol>
<h1 id="2-内存淘汰管理机制"><a href="#2-内存淘汰管理机制" class="headerlink" title="2. 内存淘汰管理机制"></a><strong>2. 内存淘汰管理机制</strong></h1><p>因为计算机的内存是有限的，在部署Redis的同时，也可能部署其他的中间件如RabbitMQ、Kafka等等，为了给其他中间件预留内存空间，Redis服务启动可以设置一个最大内存<code>maxmemory</code>，到达阈值后，Redis会清理在内存里永久存在的没有过期时间的key，处理机制如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maxmemory ：当内存已使用率到达，则开始清理缓存</span><br><span class="line">maxmemory-policy : 清理缓存的策略</span><br></pre></td></tr></table></figure>

<p>清理缓存的策略如下所示：</p>
<ul>
<li>noeviction：旧缓存永不过期，新缓存设置不了，返回错误</li>
<li>allkeys-lru：清除最少用的旧缓存，然后保存新的缓存（推荐使用）</li>
<li>allkeys-random：在所有的缓存中随机删除（不推荐）</li>
<li>volatile-lru：在那些设置了expire过期时间的缓存中，清除最少用的旧缓存，然后保存新的缓存</li>
<li>volatile-random：在那些设置了expire过期时间的缓存中，随机删除缓存</li>
<li>volatile-ttl：在那些设置了expire过期时间的缓存中，删除即将过期的</li>
</ul>
<p>注意：</p>
<p>LRU 和 LFU 的含义：</p>
<pre><code>    # LRU means Least Recently Used
    # LFU means Least Frequently Used
</code></pre>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ</title>
    <url>/2020/02/28/RocketMQ/</url>
    <content><![CDATA[<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://www.cnblogs.com/qdhxhz/p/11096682.html">RocketMQ(2)—Docker部署RocketMQ集群</a></p>
<p><a href="https://www.cnblogs.com/fx-blog/p/11738419.html">Spring Cloud Alibaba学习笔记（11） - RocketMQ事务消息</a></p>
]]></content>
  </entry>
  <entry>
    <title>&lt;SQL反模式&gt;</title>
    <url>/2019/06/20/SQL%E5%8F%8D%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="《SQL反模式》-阅读笔记"><a href="#《SQL反模式》-阅读笔记" class="headerlink" title="《SQL反模式》 阅读笔记"></a>《SQL反模式》 阅读笔记</h2><h3 id="反模式分类"><a href="#反模式分类" class="headerlink" title="反模式分类"></a>反模式分类</h3><ul>
<li>逻辑数据库设计反模式</li>
<li>物理书库设计反模式</li>
<li>查询反模式</li>
<li>应用程序开发反模式</li>
</ul>
<h3 id="反模式分解"><a href="#反模式分解" class="headerlink" title="反模式分解"></a>反模式分解</h3><ul>
<li>目的</li>
<li>反模式</li>
<li>如何识别反模式</li>
<li>合理使用反模式</li>
<li>解决方案</li>
</ul>
<h3 id="ER-图示例"><a href="#ER-图示例" class="headerlink" title="ER 图示例"></a>ER 图示例</h3><p><img src="" alt="ER 图示例"></p>
<h3 id="范例数据库"><a href="#范例数据库" class="headerlink" title="范例数据库"></a>范例数据库</h3><p><code>SERIAL</code> 是 MySQL 中 <code>BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE</code> 的别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Accounts (</span><br><span class="line">    account_id         SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    account_name       <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    first_name         <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    last_name          <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    email              <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    password_hash      <span class="type">CHAR</span>(<span class="number">64</span>),</span><br><span class="line">    portrait_image     <span class="type">BLOB</span>,</span><br><span class="line">    hourly_rate        <span class="type">NUMERIC</span>(<span class="number">9</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> BugStatus (</span><br><span class="line">    `status` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Bugs (</span><br><span class="line">    bug_id             SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    date_reported      <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    summary            <span class="type">VARCHAR</span>(<span class="number">80</span>),</span><br><span class="line">    description        <span class="type">VARCHAR</span>(<span class="number">1000</span>),</span><br><span class="line">    resolition         <span class="type">VARCHAR</span>(<span class="number">1000</span>),</span><br><span class="line">    reported_by        <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    assigned_to        <span class="type">BIGINT</span> UNSIGNED,</span><br><span class="line">    verified_by        <span class="type">BIGINT</span> UNSIGNED,</span><br><span class="line">    `status`           <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;NEW&#x27;</span>,</span><br><span class="line">    priority           <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">    hours              <span class="type">NUMERIC</span>(<span class="number">9</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (reported_by) <span class="keyword">REFERENCES</span> Accounts(account_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (assigned_to) <span class="keyword">REFERENCES</span> Accounts(account_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (verified_by) <span class="keyword">REFERENCES</span> Accounts(account_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (`status`) <span class="keyword">REFERENCES</span> BugStatus(`status`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Comments (</span><br><span class="line">    comment_id         SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    bug_id             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    author             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    comment_date       DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    comment            TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (bug_id) <span class="keyword">REFERENCES</span> Bugs(bug_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (author) <span class="keyword">REFERENCES</span> Accounts(account_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Screenhots (</span><br><span class="line">    bug_id             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    image_id           <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    screenshot_image   <span class="type">BLOB</span>,</span><br><span class="line">    caption            <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY        (bug_id,image_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (bug_id) <span class="keyword">REFERENCES</span> Bugs(bug_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Tags (</span><br><span class="line">    bug_id             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    tag                <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY        (bug_id,tag),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (bug_id) <span class="keyword">REFERENCES</span> Bugs(bug_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Products (</span><br><span class="line">    product_id         SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    product_name       <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> BugsProducts (</span><br><span class="line">    bug_id             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    product_id         <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY        (bug_id,product_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (bug_id) <span class="keyword">REFERENCES</span> Bugs(bug_id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (product_id) <span class="keyword">REFERENCES</span> Products(product_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>阅读笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ集群架构与原理解析(6)</title>
    <url>/2021/01/20/RocketMQ%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-6/</url>
    <content><![CDATA[<h1 id="初识-RocketMQ"><a href="#初识-RocketMQ" class="headerlink" title="初识 RocketMQ"></a>初识 RocketMQ</h1><p>RocketMQ是一款分布式、队列模型的消息中间件，由阿里巴巴自主研发的一款适用于高并发、高可靠性、海量数据场景的消息中间件。早期开源2.x版本名为MetaQ；15年迭代3.x版本，更名为RocketMQ，16年开始贡献到Apache，经过1年多的孵化，最终成为Apache顶级的开源项目，更新非常频繁，社区活跃度也非常高；目前最新版本为4.5.1-release版本（2019-7-20日前）。RocketMQ参考借鉴了优秀的开源消息中间件Apache Kafka（这也是我们后面课程中重点要讲解的内容哦），其消息的路由、存储、集群划分都借鉴了Kafka优秀的设计思路，并结合自身的 “双十一” 场景进行了合理的扩展和API丰富。</p>
<h1 id="优秀的能力与支持"><a href="#优秀的能力与支持" class="headerlink" title="优秀的能力与支持"></a>优秀的能力与支持</h1><p>接下来我们一起来看一下RocketMQ优秀的能力吧 ~</p>
<ul>
<li>支持集群模型、负载均衡、水平扩展能力</li>
<li>亿级别的消息堆积能力</li>
<li>采用零拷贝的原理、顺序写盘、随机读（索引文件）</li>
<li>丰富的API使用</li>
<li>代码优秀，底层通信框架采用Netty NIO框架</li>
<li>NameServer 代替 Zookeeper</li>
<li>强调集群无单点，可扩展，任意一点高可用，水平可扩展</li>
<li>消息失败重试机制、消息可查询</li>
<li>开源社区活跃度、是否足够成熟（经过双十一考验）</li>
</ul>
<h1 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h1><p>任何一种技术框架，都有 “她” 的专有名词，在你刚开始接触 “她” 的时候，一定要了解 “她” 的专业术语，这样能够更快速、更高效的和 “她” 愉快的玩耍…</p>
<ul>
<li>Producer：消息生产者，负责产生消息，一般由业务系统负责产生消息。</li>
<li>Consumer：消息消费者，负责消费消息，一般是后台系统负责异步消费。</li>
<li>Push Consumer：Consumer的一种，需要向Consumer对象注册监听。</li>
<li>Pull Consumer：Consumer的一种，需要主动请求Broker拉取消息。</li>
<li>Producer Group：生产者集合，一般用于发送一类消息。</li>
<li>Consumer Group：消费者集合，一般用于接受一类消息进行消费。</li>
<li>Broker ： MQ消息服务（中转角色，用于消息存储与生产消费转发）。</li>
</ul>
<h1 id="RocketMQ核心源码包及功能说明"><a href="#RocketMQ核心源码包及功能说明" class="headerlink" title="RocketMQ核心源码包及功能说明"></a>RocketMQ核心源码包及功能说明</h1><p>如下图所示，我们要带小伙伴们一起来看看RocketMQ源码包的组成，这样更方便我们日后对他有一个深入的学习。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df8401d0919472f03410264.png" alt="https://climg.mukewang.com/5df8401d0919472f03410264.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df8404409bd481303400274.png" alt="https://climg.mukewang.com/5df8404409bd481303400274.png"></p>
<ul>
<li>rocketmq-broker 主要的业务逻辑，消息收发，主从同步, pagecache</li>
<li>rocketmq-client 客户端接口，比如生产者和消费者</li>
<li>rocketmq-common 公用数据结构等等</li>
<li>rocketmq-distribution 编译模块，编译输出等</li>
<li>rocketmq-example 示例，比如生产者和消费者</li>
<li>rocketmq-fliter 进行Broker过滤的不感兴趣的消息传输，减小带宽压力</li>
<li>rocketmq-logappender、rocketmq-logging日志相关</li>
<li>rocketmq-namesrv Namesrv服务，用于服务协调</li>
<li>rocketmq-openmessaging 对外提供服务</li>
<li>rocketmq-remoting 远程调用接口，封装Netty底层通信</li>
<li>rocketmq-srvutil 提供一些公用的工具方法，比如解析命令行参数</li>
<li>rocketmq-store 消息存储核心包</li>
<li>rocketmq-test 提供一些测试代码包</li>
<li>rocketmq-tools 管理工具，比如有名的mqadmin工具</li>
</ul>
<h1 id="集群架构模型"><a href="#集群架构模型" class="headerlink" title="集群架构模型"></a>集群架构模型</h1><p>RocketMQ为我们提供了丰富的集群架构模型，包括单点模式、主从模式、双主模式、以及生产上使用最多的双主双从模式（或者说多主多从模式），在这里我们仅介绍一下经典的双主双从集群模型，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df8407b0950a18b08540381.png" alt="https://climg.mukewang.com/5df8407b0950a18b08540381.png"></p>
<ul>
<li>Producer集群就是生产者集群（他们在同一个生产者组 Producer Group）</li>
<li>Consumer集群就是消费者集群（他们在同一个消费者组 Consumer Group）</li>
<li>NameServer集群作为超轻量级的配置中心，只做集群元数据存储和心跳工作，不必保障节点间数据强一致性，也就是说NameServer集群是一个多机热备的概念。</li>
<li>对于Broker而言，通常Master与Slave为一组服务，他们互为主从节点，通过NameServer与外部的Client端暴露统一的集群入口。Broker就是消息存储的核心MQ服务了。</li>
</ul>
<h1 id="集群架构思考"><a href="#集群架构思考" class="headerlink" title="集群架构思考"></a>集群架构思考</h1><p>RocketMQ作为国内顶级的消息中间件，其性能主要依赖于天然的分布式Topic/Queue，并且其内存与磁盘都会存储消息数据，借鉴了Kafka的 “空中接力” 概念（这个我们后面学习Kafka的时候会详细的说明），所谓 “空中接力” 就是指数据不一定要落地，RocketMQ提供了同步/异步双写、同步/异步复制的特性。在真正的生产环境中应该选择符合自己业务的配置。下面针对于RocketMQ的高性能及其瓶颈在这里加以说明：</p>
<ul>
<li>架构思考：<ul>
<li>RocketMQ目前本人在公司内部实际生产环境采用8M-8S的集群架构（8主8从）硬件单点Master为32C，96G内存，500G的SSD</li>
<li>其主要瓶颈最终会落在IOPS上面，当高峰期来临的时候，磁盘读写能力是主要的性能瓶颈，每秒收发消息IOPS达到10W+ 消息，这也是公司内部主要的可靠性消息中间件</li>
<li>在很多时候，我们的业务会有一些非核心的消息投递，后续会进行消息中间件的业务拆分，把不重要的消息（可以允许消息丢失、非可靠性投递的消息）采用Kafka的异步发送机制，借助Kafka强大的吞吐量和消息堆积能力来做业务的分流（当然RocketMQ的性能也足够好）。</li>
<li>为什么瓶颈在IOPS? 根本原因还是因为云环境导致的问题，云环境的SSD物理存储显然和自建机房SSD会有不小的差距，这一点我们无论是从数据库的磁盘性能、还是搜索服务（ElasticSearch）的磁盘性能，都能给出准确的瓶颈点，单机IOPS达到1万左右就是云存储SSD的性能瓶颈，这个也解释了 “木桶短板原理” 的效应，在真正的生产中，CPU的工作主要在等待IO操作，高并发下 CPU资源接近极限，但是IOPS还是达不到我们想要的效果。</li>
</ul>
</li>
</ul>
<h1 id="本节知识点回顾"><a href="#本节知识点回顾" class="headerlink" title="本节知识点回顾"></a>本节知识点回顾</h1><p>Hi，小伙伴们，本节课我们通过简要的图文学习，带大家快速的过了一下RocketMQ，那么小伙伴们记住一定要在脑海里建立知识的结构体系，并串联起来！无论是现在，还是说未来，本神都希望小伙伴要按照下面的步骤进行回忆和复习：</p>
<ol>
<li>RocketMQ的前世今生 ？</li>
<li>RocketMQ的专业术语？</li>
<li>RocketMQ源码包的组成？</li>
<li>RocketMQ的集群架构模型</li>
<li>RocketMQ在真正生产环境中面临的瓶颈点以及解决方案</li>
</ol>
<h1 id="补充课外资料"><a href="#补充课外资料" class="headerlink" title="补充课外资料"></a>补充课外资料</h1><p>为了方便爱学习的小伙伴们，本神特意加餐一波，提供RocketMQ的官方文档和相关软件包，以及对应的代码示例，辅助小伙伴们更好掌握RocketMQ。另外本神还在慕课网上的一门课程详细的讲解了RocketMQ的各个知识点以及实战应用，有想深入学习的小伙伴可以学习共勉。</p>
<ol>
<li>官方文档</li>
<li>RocketMQ4.3.0版本（Linux平台）</li>
<li>RocketMQ代码示例</li>
<li>慕课网实战课程《RocketMQ核心技术精讲与高并发抗压实战》传送门：<a href="https://coding.imooc.com/class/292.html">https://coding.imooc.com/class/292.html</a></li>
</ol>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Consul应用下线后，健康检查自动删除无效服务</title>
    <url>/2019/08/22/Spring-Cloud-Consul%E5%BA%94%E7%94%A8%E4%B8%8B%E7%BA%BF%E5%90%8E%EF%BC%8C%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E6%97%A0%E6%95%88%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 健康检查失败多长时间后，取消注册</span></span><br><span class="line">        <span class="attr">health-check-critical-timeout:</span> <span class="string">30s</span></span><br></pre></td></tr></table></figure>

<p>在配置文件中如上配置后可以使得服务下线后自动删除无效服务，而不必像很多的博客中写的那样专门写一个删除失效服务。</p>
<p>其它的配置属性解析：</p>
<ul>
<li>spring.cloud.consul.host：配置consul地址</li>
<li>spring.cloud.consul.port：配置consul端口</li>
<li>spring.cloud.consul.discovery.enabled：启用服务发现</li>
<li>spring.cloud.consul.discovery.register：启用服务注册</li>
<li>spring.cloud.consul.discovery.deregister：服务停止时取消注册</li>
<li>spring.cloud.consul.discovery.prefer-ip-address：表示注册时使用IP而不是hostname</li>
<li>spring.cloud.consul.discovery.health-check-interval：健康检查频率</li>
<li>spring.cloud.consul.discovery.health-check-path：健康检查路径</li>
<li>spring.cloud.consul.discovery.health-check-critical-timeout：健康检查失败多长时间后，取消注册</li>
<li>spring.cloud.consul.discovery.instance-id：服务注册标识</li>
</ul>
]]></content>
      <categories>
        <category>spring-cloud</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 中如何统一 API 接口响应格式？</title>
    <url>/2021/03/22/Spring-Boot-%E4%B8%AD%E5%A6%82%E4%BD%95%E7%BB%9F%E4%B8%80-API-%E6%8E%A5%E5%8F%A3%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://mp.weixin.qq.com/s/8aMz07rOF5LuclnBaI_p5g">https://mp.weixin.qq.com/s/8aMz07rOF5LuclnBaI_p5g</a></p>
</blockquote>
<hr>
<p>今天又要给大家介绍一个 Spring Boot 中的组件–HandlerMethodReturnValueHandler。</p>
<p>在前面的文章中（<a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247492446&idx=1&sn=d75472fed90752c609a918aefd2796d4&scene=21#wechat_redirect">如何优雅的实现 Spring Boot 接口参数加密解密？</a>），松哥已经和大家介绍过如何对请求/响应数据进行预处理/二次处理，当时我们使用了 ResponseBodyAdvice 和 RequestBodyAdvice。其中 ResponseBodyAdvice 可以实现对响应数据的二次处理，可以在这里对响应数据进行加密/包装等等操作。不过这不是唯一的方案，今天松哥要和大家介绍一种更加灵活的方案–HandlerMethodReturnValueHandler，我们一起来看看下。</p>
<span id="more"></span>

<h2 id="1-HandlerMethodReturnValueHandler"><a href="#1-HandlerMethodReturnValueHandler" class="headerlink" title="1.HandlerMethodReturnValueHandler"></a><strong>1.HandlerMethodReturnValueHandler</strong></h2><p>HandlerMethodReturnValueHandler 的作用是对处理器的处理结果再进行一次二次加工，这个接口里边有两个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface HandlerMethodReturnValueHandler &#123;</span><br><span class="line"> boolean supportsReturnType(MethodParameter returnType);</span><br><span class="line"> void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,</span><br><span class="line">   ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>supportsReturnType：这个处理器是否支持相应的返回值类型。</li>
<li>handleReturnValue：对方法返回值进行处理。</li>
</ul>
<p>HandlerMethodReturnValueHandler 有很多默认的实现类，我们来看下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640.png" alt="img"></p>
<p>接下来我们来把这些实现类的作用捋一捋：</p>
<p><strong>ViewNameMethodReturnValueHandler</strong></p>
<p>这个处理器用来处理返回值为 void 和 String 的情况。如果返回值为 void，则不做任何处理。如果返回值为 String，则将 String 设置给 mavContainer 的 viewName 属性，同时判断这个 String 是不是重定向的 String，如果是，则设置 mavContainer 的 redirectModelScenario 属性为 true，这是处理器返回重定向视图的标志。</p>
<p><strong>ViewMethodReturnValueHandler</strong></p>
<p>这个处理器用来处理返回值为 View 的情况。如果返回值为 View，则将 View 设置给 mavContainer 的 view 属性，同时判断这个 View 是不是重定向的 View，如果是，则设置 mavContainer 的 redirectModelScenario 属性为 true，这是处理器返回重定向视图的标志。</p>
<p><strong>MapMethodProcessor</strong></p>
<p>这个处理器用来处理返回值类型为 Map 的情况，具体的处理方案就是将 map 添加到 mavContainer 的 model 属性中。</p>
<p><strong>StreamingResponseBodyReturnValueHandler</strong></p>
<p>这个用来处理 StreamingResponseBody 或者 <code>ResponseEntity&lt;StreamingResponseBody&gt;</code> 类型的返回值。</p>
<p><strong>DeferredResultMethodReturnValueHandler</strong></p>
<p>这个用来处理 DeferredResult、ListenableFuture 以及 CompletionStage 类型的返回值，用于异步请求。</p>
<p><strong>CallableMethodReturnValueHandler</strong></p>
<p>处理 Callable 类型的返回值，也是用于异步请求。</p>
<p><strong>HttpHeadersReturnValueHandler</strong></p>
<p>这个用来处理 HttpHeaders 类型的返回值，具体处理方式就是将 mavContainer 中的 requestHandled 属性设置为 true，该属性是请求是否已经处理完成的标志（如果处理完了，就到此为止，后面不会再去找视图了），然后将 HttpHeaders 添加到响应头中。</p>
<p><strong>ModelMethodProcessor</strong></p>
<p>这个用来处理返回值类型为 Model 的情况，具体的处理方式就是将 Model 添加到 mavContainer 的 model 上。</p>
<p><strong>ModelAttributeMethodProcessor</strong></p>
<p>这个用来处理添加了 <code>@ModelAttribute</code> 注解的返回值类型，如果 annotaionNotRequired 属性为 true，也可以用来处理其他非通用类型的返回值。</p>
<p><strong>ServletModelAttributeMethodProcessor</strong></p>
<p>同上，该类只是修改了参数解析方式。</p>
<p><strong>ResponseBodyEmitterReturnValueHandler</strong></p>
<p>这个用来处理返回值类型为 <code>ResponseBodyEmitter</code> 的情况。</p>
<p><strong>ModelAndViewMethodReturnValueHandler</strong></p>
<p>这个用来处理返回值类型为 <code>ModelAndView</code> 的情况，将返回值中的 Model 和 View 分别设置到 mavContainer 的相应属性上去。</p>
<p><strong>ModelAndViewResolverMethodReturnValueHandler</strong></p>
<p>这个的 supportsReturnType 方法返回 true，即可以处理所有类型的返回值，这个一般放在最后兜底。</p>
<p><strong>AbstractMessageConverterMethodProcessor</strong></p>
<p>这是一个抽象类，当返回值需要通过 HttpMessageConverter 进行转化的时候会用到它的子类。这个抽象类主要是定义了一些工具方法。</p>
<p><strong>RequestResponseBodyMethodProcessor</strong></p>
<p>这个用来处理添加了 <code>@ResponseBody</code> 注解的返回值类型。</p>
<p><strong>HttpEntityMethodProcessor</strong></p>
<p>这个用来处理返回值类型是 HttpEntity 并且不是 RequestEntity 的情况。</p>
<p><strong>AsyncHandlerMethodReturnValueHandler</strong></p>
<p>这是一个空接口，暂未发现典型使用场景。</p>
<p><strong>AsyncTaskMethodReturnValueHandler</strong></p>
<p>这个用来处理返回值类型为 WebAsyncTask 的情况。</p>
<p><strong>HandlerMethodReturnValueHandlerComposite</strong></p>
<p>看 Composite 就知道，这是一个组合处理器，没啥好说的。</p>
<p>这个就是系统默认定义的 HandlerMethodReturnValueHandler。</p>
<p>那么在上面的介绍中，大家看到反复涉及到一个组件 mavContainer，这个我也要和大家介绍一下。</p>
<h2 id="2-ModelAndViewContainer"><a href="#2-ModelAndViewContainer" class="headerlink" title="2.ModelAndViewContainer"></a><strong>2.ModelAndViewContainer</strong></h2><p>ModelAndViewContainer 就是一个数据穿梭巴士，在整个请求的过程中承担着数据传送的工作，从它的名字上我们可以看出来它里边保存着 Model 和 View 两种类型的数据，但是实际上可不止两种，我们来看下 ModelAndViewContainer 的定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ModelAndViewContainer &#123;</span><br><span class="line"> private boolean ignoreDefaultModelOnRedirect &#x3D; false;</span><br><span class="line"> @Nullable</span><br><span class="line"> private Object view;</span><br><span class="line"> private final ModelMap defaultModel &#x3D; new BindingAwareModelMap();</span><br><span class="line"> @Nullable</span><br><span class="line"> private ModelMap redirectModel;</span><br><span class="line"> private boolean redirectModelScenario &#x3D; false;</span><br><span class="line"> @Nullable</span><br><span class="line"> private HttpStatus status;</span><br><span class="line"> private final Set&lt;String&gt; noBinding &#x3D; new HashSet&lt;&gt;(4);</span><br><span class="line"> private final Set&lt;String&gt; bindingDisabled &#x3D; new HashSet&lt;&gt;(4);</span><br><span class="line"> private final SessionStatus sessionStatus &#x3D; new SimpleSessionStatus();</span><br><span class="line"> private boolean requestHandled &#x3D; false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把这几个属性理解了，基本上也就整明白 ModelAndViewContainer 的作用了：</p>
<ul>
<li>defaultModel：默认使用的 Model。当我们在接口参数重使用 Model、ModelMap 或者 Map 时，最终使用的实现类都是 BindingAwareModelMap，对应的也都是 defaultModel。</li>
<li>redirectModel：重定向时候的 Model，如果我们在接口参数中使用了 RedirectAttributes 类型的参数，那么最终会传入 redirectModel。</li>
</ul>
<p>可以看到，一共有两个 Model，两个 Model 到底用哪个呢？这个在 getModel 方法中根据条件返回合适的 Model：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ModelMap getModel() &#123;</span><br><span class="line"> if (useDefaultModel()) &#123;</span><br><span class="line">  return this.defaultModel;</span><br><span class="line"> &#125;</span><br><span class="line"> else &#123;</span><br><span class="line">  if (this.redirectModel &#x3D;&#x3D; null) &#123;</span><br><span class="line">   this.redirectModel &#x3D; new ModelMap();</span><br><span class="line">  &#125;</span><br><span class="line">  return this.redirectModel;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">private boolean useDefaultModel() &#123;</span><br><span class="line"> return (!this.redirectModelScenario || (this.redirectModel &#x3D;&#x3D; null &amp;&amp; !this.ignoreDefaultModelOnRedirect));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里 redirectModelScenario 表示处理器是否返回 redirect 视图；ignoreDefaultModelOnRedirect 表示是否在重定向时忽略 defaultModel，所以这块的逻辑是这样：</p>
<ol>
<li>如果 redirectModelScenario 为 true，即处理器返回的是一个重定向视图，那么使用 redirectModel。如果 redirectModelScenario 为 false，即处理器返回的不是一个重定向视图，那么使用 defaultModel。</li>
<li>如果 redirectModel 为 null，并且 ignoreDefaultModelOnRedirect 为 false，则使用 redirectModel，否则使用 defaultModel。</li>
</ol>
<p>接下来还剩下如下一些参数：</p>
<ul>
<li>view：返回的视图。</li>
<li>status：HTTP 状态码。</li>
<li>noBinding：是否对 @ModelAttribute(binding=true/false) 声明的数据模型的相应属性进行绑定。</li>
<li>bindingDisabled：不需要进行数据绑定的属性。</li>
<li>sessionStatus：SessionAttribute 使用完成的标识。</li>
<li>requestHandled：请求处理完成的标识（例如添加了 <code>@ResponseBody</code> 注解的接口，这个属性为 true，请求就不会再去找视图了）。</li>
</ul>
<blockquote>
<p>❝这个 ModelAndViewContainer 小伙伴们权且做一个了解，松哥在后面的源码分析中，还会和大家再次聊到这个组件。</p>
</blockquote>
<p>接下来我们也来自定义一个 HandlerMethodReturnValueHandler，来感受一下 HandlerMethodReturnValueHandler 的基本用法。</p>
<h2 id="3-API-接口数据包装"><a href="#3-API-接口数据包装" class="headerlink" title="3.API 接口数据包装"></a><strong>3.API 接口数据包装</strong></h2><p>假设我有这样一个需求：我想在原始的返回数据外面再包裹一层，举个简单例子，本来接口是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public User getUserByUsername(String username) &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setAddress(&quot;www.javaboy.org&quot;);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回的数据格式是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;javaboy&quot;,&quot;address&quot;:&quot;www.javaboy.org&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>现在我希望返回的数据格式变成下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;status&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;username&quot;:&quot;javaboy&quot;,&quot;address&quot;:&quot;www.javaboy.org&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>就这样一个简单需求，我们一起来看下怎么实现。</p>
<h3 id="3-1-RequestResponseBodyMethodProcessor"><a href="#3-1-RequestResponseBodyMethodProcessor" class="headerlink" title="3.1 RequestResponseBodyMethodProcessor"></a><strong>3.1 RequestResponseBodyMethodProcessor</strong></h3><p>在开始定义之前，先给大家介绍一下 RequestResponseBodyMethodProcessor，这是 HandlerMethodReturnValueHandler 的实现类之一，这个主要用来处理返回 JSON 的情况。</p>
<p>我们来稍微看下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean supportsReturnType(MethodParameter returnType) &#123;</span><br><span class="line"> return (AnnotatedElementUtils.hasAnnotation(returnType.getContainingClass(), ResponseBody.class) ||</span><br><span class="line">   returnType.hasMethodAnnotation(ResponseBody.class));</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,</span><br><span class="line">  ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span><br><span class="line">  throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class="line"> mavContainer.setRequestHandled(true);</span><br><span class="line"> ServletServerHttpRequest inputMessage &#x3D; createInputMessage(webRequest);</span><br><span class="line"> ServletServerHttpResponse outputMessage &#x3D; createOutputMessage(webRequest);</span><br><span class="line"> writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>supportsReturnType：从这个方法中可以看到，这里支持有 <code>@ResponseBody</code> 注解的接口。</li>
<li>handleReturnValue：这是具体的处理逻辑，首先 mavContainer 中设置 requestHandled 属性为 true，表示这里处理完成后就完了，以后不用再去找视图了，然后分别获取 inputMessage 和 outputMessage，调用 writeWithMessageConverters 方法进行输出，writeWithMessageConverters 方法是在父类中定义的方法，这个方法比较长，核心逻辑就是调用确定输出数据、确定 MediaType，然后通过 HttpMessageConverter 将 JSON 数据写出去即可。</li>
</ul>
<p>有了上面的知识储备之后，接下来我们就可以自己实现了。</p>
<h3 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a><strong>3.2 具体实现</strong></h3><p>首先自定义一个 HandlerMethodReturnValueHandler：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HandlerMethodReturnValueHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandlerMethodReturnValueHandler</span><span class="params">(HandlerMethodReturnValueHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler.supportsReturnType(returnType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>, returnValue);</span><br><span class="line">        handler.handleReturnValue(map, returnType, mavContainer, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我们要做的功能其实是在 RequestResponseBodyMethodProcessor 基础之上实现的，因为支持 <code>@ResponseBody</code>，输出 JSON 那些东西都不变，我们只是在输出之前修改一下数据而已。所以我这里直接定义了一个属性 HandlerMethodReturnValueHandler，这个属性的实例就是 RequestResponseBodyMethodProcessor，supportsReturnType 方法就按照 RequestResponseBodyMethodProcessor 的要求来，在 handleReturnValue 方法中，我们先对返回值进行一个预处理，然后调用 RequestResponseBodyMethodProcessor#handleReturnValue 方法继续输出 JSON 即可。</p>
<p>接下来就是配置 MyHandlerMethodReturnValueHandler 使之生效了。由于 SpringMVC 中 HandlerAdapter 在加载的时候已经配置了 HandlerMethodReturnValueHandler（这块松哥以后会和大家分析相关源码），所以我们可以通过如下方式对已经配置好的 RequestMappingHandlerAdapter 进行修改，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ReturnValueConfig implements InitializingBean &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    RequestMappingHandlerAdapter requestMappingHandlerAdapter;</span><br><span class="line">    @Override</span><br><span class="line">    public void afterPropertiesSet() throws Exception &#123;</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; originHandlers &#x3D; requestMappingHandlerAdapter.getReturnValueHandlers();</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; newHandlers &#x3D; new ArrayList&lt;&gt;(originHandlers.size());</span><br><span class="line">        for (HandlerMethodReturnValueHandler originHandler : originHandlers) &#123;</span><br><span class="line">            if (originHandler instanceof RequestResponseBodyMethodProcessor) &#123;</span><br><span class="line">                newHandlers.add(new MyHandlerMethodReturnValueHandler(originHandler));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                newHandlers.add(originHandler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        requestMappingHandlerAdapter.setReturnValueHandlers(newHandlers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义 ReturnValueConfig 实现 InitializingBean 接口，afterPropertiesSet 方法会被自动调用，在该方法中，我们将 RequestMappingHandlerAdapter 中已经配置好的 HandlerMethodReturnValueHandler 拎出来挨个检查，如果类型是 RequestResponseBodyMethodProcessor，则重新构建，用我们自定义的 MyHandlerMethodReturnValueHandler 代替它，最后给 requestMappingHandlerAdapter 重新设置 HandlerMethodReturnValueHandler 即可。</p>
<p>最后再提供一个测试接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @GetMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">    public User getUserByUsername(String username) &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setAddress(&quot;www.javaboy.org&quot;);</span><br><span class="line">        return user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class User &#123;</span><br><span class="line">    private String username;</span><br><span class="line">    private String address;</span><br><span class="line">&#x2F;&#x2F;省略其他</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后，就可以启动项目啦。</p>
<p>项目启动成功后，访问 <code>/user</code> 接口，如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/640-20210322193325348.png" alt="img"></p>
<p>完美。</p>
<h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a><strong>4.小结</strong></h2><p>其实统一 API 接口响应格式办法很多，可以参考松哥之前分享的 <a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247492446&idx=1&sn=d75472fed90752c609a918aefd2796d4&scene=21#wechat_redirect">如何优雅的实现 Spring Boot 接口参数加密解密？</a>，也可以使用本文中的方案，甚至也可以自定义过滤器实现。</p>
<p>本文的内容稍微有点多，不知道大家有没有发现松哥最近发了很多 SpringMVC 源码相关的东西，没错，本文其实是松哥 SpringMVC 源码解析的一部分，为了源码解析不那么枯燥，所以强行加了一个案例进来，祝小伙伴们学习愉快～</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Integration(1)</title>
    <url>/2021/03/24/Spring-Integration-1/</url>
    <content><![CDATA[<p><em>Spring Integration 对 Spring 编程模型进行了扩展，使得后者能够支持著名的“<a href="https://www.oschina.net/action/GoToLink?url=http://www.eaipatterns.com/">企业集成模式</a>”。通过SI（Spring Integration）可以在基于Spring的应用中引入轻量级的“消息驱动模式”，并且支持“通过声明式的适配器”与外部系统进行集成。这些“适配器”相较于Spring对于“remoting（远程调用）”、“messaging（事件消息）”、“scheduling（任务调度）”方面的支持，提供了更高层次的一种抽象。SI的首要目标是：为“构建企业集成方案、维护系统间通信”提供一种<strong>简单模型</strong>，应用该模型所产出的代码是<strong>可维护、可测试的</strong>。</em></p>
<span id="more"></span>

<h1 id="2-Spring-Integration-概览"><a href="#2-Spring-Integration-概览" class="headerlink" title="2. Spring Integration 概览"></a><strong>2. Spring Integration 概览</strong></h1><h1 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2.1 背景"></a><strong>2.1 背景</strong></h1><p>IoC——“控制反转”，是Spring Framework的一个关键特性。这种IoC，从广义上来说，意味着Spring Framework将负责代表被其上下文所管理的各种组件，而组件本身却由于被减轻了部分职责而简单化了。例如：“依赖注入”使得组件摆脱了定位与创建自身依赖的职责。再比如：“面向切面编程”则通过可复用切面的透明织入，使得业务与横切交叉点解耦，使得业务组件避免了被普遍的耦合横切，做到了更好的模块化。在上述各种情况下，最终结果都是：系统更容易被测试、理解、维护和扩展。</p>
<p>此外，Spring Framework及相关工具包为构建企业应用提供了一个无所不包的编程模型。开发者受益于这个模型的一致性。尤其是该模型以公认的最佳实践为基础，使得开发者受益匪浅，比如“面向接口编程”，“尽量使用聚合而不是继承”等等。来自Spring的简化抽象与强大类库，不仅增强了系统的可测试性和可移植性，同时也大大提高了开发者的生产力。</p>
<p>Spring Integration秉承了与前文所述相同的目标和原则。它将Spring的编程模型拓展到了消息领域，在Spring现有的企业集成支持基础上构建了更高次的抽象。在它所支持的消息驱动架构中，“控制反转”被应用于运行期的关键连接处，例如：在何时特定的业务逻辑应该执行，以及响应结果应该被发送到何处。它提供了消息路由和消息转换方面的支持，所以不同的传输协议和不同的数据格式都能在不影响易测试性的前提下被集成。换句话说，消息和集成点都被框架所处理，所以业务组件能很好地与基础设施隔离，从而使得开发者能够从复杂的集成工作中解脱出来。</p>
<p>作为Spring编程模型的扩展，Spring Integration提供了多种配置方式可供选择，包括注解、基于命名空间的XML、通用Bean元素的XML，当然也可以直接使用底层API。底层的API都均是基于“精心定义的策略接口”与“保证了非侵入性的代理适配器”。Spring Integration的设计启发于“Spring中的普遍模式”与“企业集成模式”间强烈的共鸣。“企业集成模式”是由Gregor Hohpe和Bobby Woolf在《企业集成模式》一书中提出的，该书由Addison Wesley出版社于2004年出版。读过此书的开发者应该能更快地适应Spring Integration的概念和术语。</p>
<h1 id="2-2-目标与原则"><a href="#2-2-目标与原则" class="headerlink" title="2.2 目标与原则"></a><strong>2.2 目标与原则</strong></h1><p>Spring Integration 面向如下目标：</p>
<ul>
<li>提供一个简单的模型来实现复杂的企业集成解决方案</li>
<li>为基于Spring的应用提供异步、消息驱动方面的基础支持</li>
<li>让现有的Spring用户可以更容易、直观的掌握，并让更多的用户去使用</li>
</ul>
<p>Spring Integration 遵循以下原则：</p>
<ul>
<li>组件间应该是模块化、松耦合的，且可测试的</li>
<li>框架应该保证分离“业务逻辑”和“集成逻辑”</li>
<li>扩展点本质上应该是抽象的，而且限定在一个清晰的边界内，进而提升可复用性和可移植性</li>
</ul>
<h1 id="2-3-主要组件"><a href="#2-3-主要组件" class="headerlink" title="2.3 主要组件"></a><strong>2.3 主要组件</strong></h1><p>从垂直的视角来看，“分层架构”会更有利于关键点的剥离，各层间通过基于接口的契约来确保松耦合。基于Spring的应用就是如此设计的典型。Spring Framework与相关工具包从全栈范围为企业应用提供了一个遵从最佳实践强大基础。“消息驱动架构”则为我们带来了一个“横向的视角”。正如“分层架构”是一种极通用、极抽象的范式一样，消息系统非常符合同样抽象的“管道-过滤器”模型。“过滤器”代表任何能够产出和（或）消费消息的组件。“管道”则负责在过滤器间传输消息。所以在管道的作用下，各“过滤器”组件间保持松耦合。有必要指出的是，这两个高级范式（分层架构与消息驱动架构）并非互斥。支持“管道”的消息基础设施应当被封装在相应的垂直“层”中，且该层对外的契约被定义为接口。同样地，“过滤器”往往被安排于“应用服务层”之上的（业务）层中进行管理，并且与底层服务的交互方式与它类无异。</p>
<h3 id="2-3-1-消息"><a href="#2-3-1-消息" class="headerlink" title="2.3.1 消息"></a><strong>2.3.1 消息</strong></h3><p>在Spring Integration中，“消息”是对任何Java对象的一种通用包装，这种包装将会给Java对象附着一些元信息以供消息框架处理。一条“消息”由“消息体”（payload）和“消息头”（header）组成。消息体可以是任何类型，消息头一般用于保存一些必要信息，比如id、时间戳、过期时间和返回地址等。消息头也可以用来在不同的传输协议之间传递参数。比如，当需要包装一个文件来创建一个消息时，可以将文件名保存于消息头中，以供下游的消息组件读取使用。再比如，如果一个消息的内容会最终被Mail适配器发出，那么各种属性值（to、from、cc、subject等）可被上游的消息组件保存在消息头中。开发者可以利用消息头来保存任意的键值对。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0322/223850_R9Qy_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0322/223850_R9Qy_2321188.jpg"></p>
<h3 id="2-3-2-消息通道"><a href="#2-3-2-消息通道" class="headerlink" title="2.3.2 消息通道"></a><strong>2.3.2 消息通道</strong></h3><p>“消息通道”对应着“管道-过滤器”架构中的“管道角色”。消息生产者发送消息到通道，消息消费者从通道接收消息。从而，消息通道解耦了消息组件，同时也为消息拦截和监控提供了便利的切入点。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0322/223916_9OKQ_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0322/223916_9OKQ_2321188.jpg"></p>
<p>一个消息通道可以是“点对点”意义的，或者也可以是“发布-订阅”意义的。</p>
<ul>
<li>如果是点对点模式的通道，发布到通道中的每个消息，最多只有一个消费者可以接收。</li>
<li>如果是发布-订阅模式的通道，则会尝试广播消息给其所有的订阅者。</li>
</ul>
<p>Spring Integration对这两种模式均提供支持。</p>
<p>鉴于“点对点模式”和“发布订阅模式”提供了两种关于“最终有多少消息消费者接收消息”的选择，此处还有另外一项重要考虑：通道是否应该缓存消息？在Spring Integration中，轮询通道（Pollable Channels）具备缓存消息能力。缓存的优势在于它能够调节接入消息流量，从而避免消息消费者负荷过载。然而，正如其名称所示，这也会引入了一些复杂性，只有配置了轮询器后，消息消费者才能从这个通道中接收消息。而另一方面，订阅通道（Subscribable Channel）要求连接它的消费者依从简单的消息驱动模式。Spring Integration中还有多种通道的可用实现，将在第3.2章节“消息通道实现”中详细讨论。</p>
<h3 id="2-3-2-消息终端"><a href="#2-3-2-消息终端" class="headerlink" title="2.3.2 消息终端"></a><strong>2.3.2 消息终端</strong></h3><p>Spring Integration的主要目标之一是通过“控制反转”来简化企业集成解决方案的开发。这意味着你应该不需要直接实现消息消费者和生产者，更不需要构建消息或者在消息通道上调用发送与接收操作。相反地，你只需要关注于你基于普通对象（POJO）实现的特定领域模型。然后，通过声明式配置，你可以“连接”业务领域代码到Spring Integration提供的消息基础设施。而负责这些连接的组件就是“消息终端”。这并不是说你必须直接性地连接现有应用。任何真实的企业集成解决方案，都需要一些用于集成相关的逻辑代码，例如路由选择和协议转换。其中暗含的要点就是：实现集成逻辑和业务逻辑的分离。类比来说，作为Web应用中的MVC模式，其目标应该是提供一个简单而专用的层，转换接入的请求到服务层调用，然后再转换服务层响应到请求端。下一节将概述处理这些响应的各种消息终端类型，且在以后的章节中，将为你展示如何使用Spring Integration的声明式配置来保证非侵入性的效果。</p>
<h1 id="2-4-各种消息终端简介"><a href="#2-4-各种消息终端简介" class="headerlink" title="2.4 各种消息终端简介"></a><strong>2.4 各种消息终端简介</strong></h1><p>“消息终端”对应着“管道-过滤器”架构中的“过滤器”角色。就像前文提到的，消息终端的的主要作用在于“连接”业务领域代码到Spring Integration提供的消息基础设施，当然前提是使用非侵入的方式。换句话说，应用代码应该完全不会知晓消息对象或者消息通道的存在。这类似于MVC模式中控制器角色的处理范式，例如：</p>
<ul>
<li>“消息端点处理消息”就像“控制器处理HTTP请求”。</li>
<li>“消息终端被映射到消息通道”就像“控制器被映射到URL Pattern”</li>
</ul>
<p>上述两个例子中存在相同的目标：隔离“业务应用代码”与“基础设置”。《企业应用集成》一书中详细地讨论了这其中涉及的各种概念与模式。本文只概括地描述Spring Integration支持的主要消息终端类型和作用。本章节内的详细描述将提供代码与配置样例。</p>
<h3 id="2-4-1-转换器（Transformer）"><a href="#2-4-1-转换器（Transformer）" class="headerlink" title="2.4.1 转换器（Transformer）"></a><strong>2.4.1 转换器（Transformer）</strong></h3><p>“消息转换器”的作用在于“转换消息的内容或结构，返回翻转换后的消息”。可能最为常见的转换器应用方式就是将消息体（Message Payload）从一种格式转换为另一种格式（例如从XML文档转换成java.lang.String字符串）。同样地，转换器也可以被用于添加、删除和修改消息头（Message Header）中的值。</p>
<h3 id="2-4-2-过滤器（Filter）"><a href="#2-4-2-过滤器（Filter）" class="headerlink" title="2.4.2 过滤器（Filter）"></a><strong>2.4.2 过滤器（Filter）</strong></h3><p>“消息过滤器”可用来限定消息能否被传送到输出通道上。这里仅需要依据一个布尔测试来做判定。该布尔测试检查的范围诸如：“消息是否包含特定类型的消息体”，“检查消息中的某个属性值”，“消息是否包含某个消息头”，等等。如果消息通过检查就会被发送到输出通道，否则，消息将被丢弃（或者更加严格地说，应当抛出异常）。消息过滤器通常结合“发布-订阅通道”一起使用，“发布-订阅通道”会使得多个消费者接收到同样的消息，而基于一定的过滤条件设置过滤器则可以减少所需处理的消息数量。</p>
<blockquote>
<p>注意：前段提到的“消息过滤器”与“管道-过滤器”架构中的‘过滤器’并非一致的概念。“消息过滤器”是指限制消息通过的消息处理装置，而“管道-过滤器”中的‘过滤器’是泛指所有处理消息的消息处理装置。</p>
</blockquote>
<h3 id="2-4-3-路由器（Router）"><a href="#2-4-3-路由器（Router）" class="headerlink" title="2.4.3 路由器（Router）"></a><strong>2.4.3 路由器（Router）</strong></h3><p>“消息路由器”负责确定消息的下一步传送将由哪些通道接收。通常，路由决策都是基于消息内容和（或）消息头中可用的元数据来完成的。消息路由常常代替静态的配置，作为一种动态地、运行时确定输出通道的装置，接入到“服务激活器”或者其他能够响应消息的装置。另外，针对前文所述的消息多播的场景，相对于被动的“消息过滤器”，“消息路由器”提供了一种主动的控制方式，来确定多个消息订阅者中的消息接收范围。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0323/172825_iYGd_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0323/172825_iYGd_2321188.jpg"></p>
<h3 id="2-4-4-消息分解器（Splitter）"><a href="#2-4-4-消息分解器（Splitter）" class="headerlink" title="2.4.4 消息分解器（Splitter）"></a><strong>2.4.4 消息分解器（Splitter）</strong></h3><p>“消息分解器”是另外一种类型的消息终端，它从对应输入通道中接收消息，然后把接收到的一个消息分解成多个消息，最终把它们发送到对应输出通道上。典型应用场景就是把一个“复合消息”分解成包含原消息各子部分的一组“子消息”。</p>
<h3 id="2-4-5-消息聚合器（Aggregator）"><a href="#2-4-5-消息聚合器（Aggregator）" class="headerlink" title="2.4.5 消息聚合器（Aggregator）"></a><strong>2.4.5 消息聚合器（Aggregator）</strong></h3><p>“消息聚合器”基本上就是“消息分解器”的反模式。它也是一种消息终端类型，接收多条消息，然后把他们合并成一条消息。事实上，聚合器通常出现在消息管道线路中的下游位置，且相对该组件的上游位置往往会存在“消息分解器”。从技术上来说，聚合器往往比分解器更复杂，因为它需要维护状态（也就是维护正被聚合的消息），确定被聚合的整组消息何时可用，以及必要地话，还要处理超时的状况。更进一步地，在超时的情况下，聚合器还要明确是仍然发送残缺消息，或是丢弃它们。对此，Spring Integration提供了可配置的超时处理策略。</p>
<h3 id="2-4-6-服务激活器（Service-Activitor）"><a href="#2-4-6-服务激活器（Service-Activitor）" class="headerlink" title="2.4.6 服务激活器（Service Activitor）"></a><strong>2.4.6 服务激活器（Service Activitor）</strong></h3><p>“服务激活器”是一种将“服务实例”连接到“消息系统”的通用终端。对于该类型的终端，配置输入通道是必须的。而且，若被调用的服务方法具有返回值，那么此情况下或需要配置输出通道。</p>
<blockquote>
<p>注意：输出通道的配置是可选的。因为每则消息在消息头中可能会提供它自身的“返回地址”(Return Address)信息。这个规则同样适用于其他的消费终端。</p>
</blockquote>
<p>服务激活器会调用指定服务对象上的操作，来处理请求消息。该过程中会抽取请求消息的消息体并作必要的转换（若方法参数非消息类型参数）。每当服务方法产生返回值，这个返回值同样地会作出必要的转换，而成为一条响应消息（若方法返回值非消息类型）。响应消息将会被发送到输出通道上；若没有配置输出通道，且消息的“返回地址”可用，那么该响应将会被发送到返回地址指定的通道上。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0323/173009_YRjT_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0323/173009_YRjT_2321188.jpg"></p>
<h3 id="2-4-7-通道适配器（Channel-Adapter）"><a href="#2-4-7-通道适配器（Channel-Adapter）" class="headerlink" title="2.4.7 通道适配器（Channel Adapter）"></a><strong>2.4.7 通道适配器（Channel Adapter）</strong></h3><p>“通道适配器”是一种连接消息通道到“其他系统”或是“传输端口”的消息终端。通道适配器分为“接入”或者“接出”两种。通常通道适配器被用来映射消息到其他任何发送/接收系统所需的对象或资源上（比如：文件、HTTP请求，JMS消息等等）。依赖于传输端口的情况下，通道适配器也可以填充或是抽取消息头中的值。Spring Integration提供了一些通道适配器，以后的章节中会讲述它们。</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0323/173045_17jf_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0323/173045_17jf_2321188.jpg"></p>
<p><em>接入型通道适配器连接源系统到消息系统中</em></p>
<p><img src="http://static.oschina.net/uploads/space/2015/0323/173125_WtFa_2321188.jpg" alt="http://static.oschina.net/uploads/space/2015/0323/173125_WtFa_2321188.jpg"></p>
<p><em>接出型通道适配器连接消息系统到目标系统中</em></p>
<h1 id="2-5-关于配置"><a href="#2-5-关于配置" class="headerlink" title="2.5 关于配置"></a><strong>2.5 关于配置</strong></h1><p>贯穿本篇文档，都利用了XML命名空间的支持，来声明Spring Integration消息流中的各种元素。这背后由一系列命名空间解析器给予支撑，这些解析器自动生成了实现了特定组件功能的Bean定义。</p>
<p>当Spring Integration的名字空间元素被第一次解析时，框架将会自动声明若干bean，这些bean会被用来支撑运行时环境（比如：任务调度器、隐式通道构造器，等等）。</p>
<p>从4.0版本开始，当使用注解类，添加@EnableIntegration注解时，以上这些支撑bean也同样被创建。这样会利于使用纯Java配置来声明一个简单的Spring Integration消息流。另外，当存一个“父上下文”和多个“子上下文”时@EnableIntegration注解可以使得Spring Integration组件仅需声明一次。</p>
<h1 id="2-6-编程实践"><a href="#2-6-编程实践" class="headerlink" title="2.6 编程实践"></a><strong>2.6 编程实践</strong></h1><p>通常的建议是：务必使用POJOs（plain old java objects），不到万不得已之时不要在自己的代码中引入框架依赖。</p>
<p>如果你确实已经在自己的类中引用了框架，那么下面的建议可供参考：</p>
<ul>
<li>如果实现了“ApplicationContextAware”接口，那么不要在setApplicationContext()方法中使用ApplicationContext对象；在这个方法里仅保存该引用，延迟对该对象的使用。</li>
<li>如果实现了“InitializingBean”接口或者使用@PostConstruct注解了方法，那么不要从这种初始化方法中发送任何消息出去，因为这些方法执行时应用上下文尚没有完成初始化，此时发送消息很可能会失败。如果需要在启动时刻发送消息，那么实现“ApplicationListener”接口，等待“ContextRefreshedEvent”事件发生时即可。或者，另外一种方式是，实现“SmartLifecycle”接口，将bean置于晚期阶段，然后在send()方法中发送消息。</li>
</ul>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>spring integration</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring+MyBatis+MySQL主从分离</title>
    <url>/2019/05/07/Spring-MyBatis-MySQL%E4%B8%BB%E4%BB%8E%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h1 id="Spring-MyBatis-MySQL主从分离"><a href="#Spring-MyBatis-MySQL主从分离" class="headerlink" title="Spring + MyBatis + MySQL主从分离"></a>Spring + MyBatis + MySQL主从分离</h1><h2 id="基于-Docker-的-MySQL-主从复制搭建"><a href="#基于-Docker-的-MySQL-主从复制搭建" class="headerlink" title="基于 Docker 的 MySQL 主从复制搭建"></a>基于 Docker 的 MySQL 主从复制搭建</h2><p><a href="https://blog.csdn.net/Little_fxc/article/details/89477284">基于 Docker 的 MySQL 主从复制搭建</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在大型应用程序中，配置主从数据库并使用读写分离是常见的设计模式。而要对现有的代码在不多改变源码的情况下，<br>可以使用 Spring 的 <code>AbstractRoutingDataSource</code> 和 Mybatis 的 <code>Interceptor</code> 为核心做到感知mysql读写分离</p>
<span id="more"></span>

<h2 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h2><p>使用了 druid 数据库连接池，配置 master datasource 为写数据库，配置 slave datasource 为读数据库。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.datasource.druid.filter.slf4j.enabled=true</span></span><br><span class="line"><span class="string">spring.datasource.druid.filter.slf4j.statement-create-after-log-enabled=false</span></span><br><span class="line"><span class="string">spring.datasource.druid.filter.slf4j.statement-close-after-log-enabled=false</span></span><br><span class="line"><span class="string">spring.datasource.druid.filter.slf4j.result-set-open-after-log-enabled=false</span></span><br><span class="line"><span class="string">spring.datasource.druid.filter.slf4j.result-set-close-after-log-enabled=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># master datasource</span></span><br><span class="line"><span class="string">spring.datasource.druid.master.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.druid.master.url=jdbc:mysql://localhost:3306/learn?useSSl=false</span></span><br><span class="line"><span class="string">spring.datasource.druid.master.password=root</span></span><br><span class="line"><span class="string">spring.datasource.druid.master.username=root</span></span><br><span class="line"><span class="comment"># slave datasource</span></span><br><span class="line"><span class="string">spring.datasource.druid.slave.driver-class-name=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="string">spring.datasource.druid.slave.url=jdbc:mysql://localhost:3307/learn?useSSl=false</span></span><br><span class="line"><span class="string">spring.datasource.druid.slave.password=root</span></span><br><span class="line"><span class="string">spring.datasource.druid.slave.username=root</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.jackson.date-format=yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="string">spring.jackson.time-zone=GMT+8</span></span><br><span class="line"><span class="string">spring.jackson.default-property-inclusion=always</span></span><br><span class="line"><span class="string">spring.jackson.property-naming-strategy=SNAKE_CASE</span></span><br><span class="line"></span><br><span class="line"><span class="string">mybatis.type-aliases-package=com.fengxuechao.examples.rwdb.entity</span></span><br><span class="line"><span class="string">mybatis.configuration.use-generated-keys=true</span></span><br><span class="line"><span class="string">mybatis.configuration.map-underscore-to-camel-case=true</span></span><br><span class="line"><span class="string">mybatis.configuration.default-fetch-size=100</span></span><br><span class="line"><span class="string">mybatis.configuration.default-statement-timeout=30</span></span><br><span class="line"><span class="string">mybatis.configuration.cache-enabled=true</span></span><br><span class="line"></span><br><span class="line"><span class="string">logging.level.root=info</span></span><br><span class="line"><span class="string">logging.level.com.fengxuechao.examples.rwdb=debug</span></span><br><span class="line"><span class="string">logging.level.druid.sql.Statement=error</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-Spring-的-AbstractRoutingDataSource-动态切换数据源"><a href="#使用-Spring-的-AbstractRoutingDataSource-动态切换数据源" class="headerlink" title="使用 Spring 的 AbstractRoutingDataSource 动态切换数据源"></a>使用 Spring 的 AbstractRoutingDataSource 动态切换数据源</h2><h3 id="用枚举标记读写数据源"><a href="#用枚举标记读写数据源" class="headerlink" title="用枚举标记读写数据源"></a>用枚举标记读写数据源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RoutingType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代表写数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MASTER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代表读数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SLAVE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用-ThreadLocal-记录当前线程数据源"><a href="#用-ThreadLocal-记录当前线程数据源" class="headerlink" title="用 ThreadLocal 记录当前线程数据源"></a>用 ThreadLocal 记录当前线程数据源</h3><p>在Servlet的线程模型中，使用ThreadLocal存储key最合适，因此，编写一个RoutingDataSourceContext，来设置并动态存储key：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingDataSourceContext</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;RoutingType&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RoutingDataSourceContext</span><span class="params">(RoutingType routingType)</span> </span>&#123;</span><br><span class="line">      contextHolder.set(routingType);</span><br><span class="line">   &#125;</span><br><span class="line">	</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRoutingType</span><span class="params">(RoutingType routingType)</span> </span>&#123;</span><br><span class="line">      Assert.notNull(routingType, <span class="string">&quot;routingType cannot be null&quot;</span>);</span><br><span class="line">      contextHolder.set(routingType);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RoutingType <span class="title">getRoutingType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> contextHolder.get();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      contextHolder.remove();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      clear();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义路由数据源实现"><a href="#自定义路由数据源实现" class="headerlink" title="自定义路由数据源实现"></a>自定义路由数据源实现</h3><p>用Spring内置的RoutingDataSource，把两个真实的数据源代理为一个动态数据源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RoutingDataSourceContext.getRoutingType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置路由数据源"><a href="#配置路由数据源" class="headerlink" title="配置路由数据源"></a>配置路由数据源</h3><p>对于 <code>RoutingDataSource</code> 需要在SpringBoot中配置好并设置为主数据源：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.master&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid.slave&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">slaveDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由数据源</span></span><br><span class="line"><span class="comment">     * 一定要加 <span class="doctag">@Primary</span> 使得 &#123;<span class="doctag">@link</span> MybatisInterceptor&#125; 插件生效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;create routing datasource...&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(RoutingType.MASTER, masterDataSource());</span><br><span class="line">        map.put(RoutingType.SLAVE, slaveDataSource());</span><br><span class="line">        RoutingDataSource routing = <span class="keyword">new</span> RoutingDataSource();</span><br><span class="line">        routing.setTargetDataSources(map);</span><br><span class="line">        routing.setDefaultTargetDataSource(masterDataSource());</span><br><span class="line">        <span class="keyword">return</span> routing;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加 MybatisInterceptor 拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sfb.setDataSource(dataSource);</span><br><span class="line">        sfb.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> MybatisInterceptor()&#125;);</span><br><span class="line">        <span class="keyword">return</span> sfb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-MyBatis-的-Interceptor-拦截器对update使用写库，对query使用读库"><a href="#使用-MyBatis-的-Interceptor-拦截器对update使用写库，对query使用读库" class="headerlink" title="使用 MyBatis 的 Interceptor 拦截器对update使用写库，对query使用读库"></a>使用 MyBatis 的 Interceptor 拦截器对update使用写库，对query使用读库</h2><p>原理：</p>
<p>查看 <code>org.apache.ibatis.executor.Executor</code> 可以发现 MyBatis 执行 sql 的语句都在这里边了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行sql 的 update, delete, insert</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行sql 的 select</span></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行sql 的 select</span></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要拦截这三个方法，是的 update() 方法使用写数据库，query() 方法使用读数据库就可以做到在不改写原业务代码的情况下使用多数据源，同时让Spring事务也正常运行。 </p>
<p>拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器，对update使用写库，对query使用读库</span></span><br><span class="line"><span class="comment"> * 优势：源代码不变（通过mybatis拦截器），易扩展</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-03-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = Executor.class,</span></span><br><span class="line"><span class="meta">                method = &quot;update&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;MappedStatement.class, Object.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(</span></span><br><span class="line"><span class="meta">                type = Executor.class,</span></span><br><span class="line"><span class="meta">                method = &quot;query&quot;,</span></span><br><span class="line"><span class="meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用map对象缓存数据，数据量大的话，此处需要优化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, RoutingType&gt; cacheMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过正则表达式，拦截sql语句匹配类型设置数据源。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">&quot;.*insert\\u0020.*|.*delete\\u0020.*|.*update\\u0020.*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> synchronizationActive = TransactionSynchronizationManager.isSynchronizationActive();</span><br><span class="line">        <span class="keyword">if</span> (!synchronizationActive) &#123;</span><br><span class="line">            Object[] objects = invocation.getArgs();</span><br><span class="line">            MappedStatement ms = (MappedStatement) objects[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            RoutingType routingType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((routingType = cacheMap.get(ms.getId())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//读方法</span></span><br><span class="line">                <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class="line">                    <span class="comment">//!selectKey 为自增id查询主键(SELECT LAST_INSERT_ID() )方法，使用主库</span></span><br><span class="line">                    <span class="keyword">if</span> (ms.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) &#123;</span><br><span class="line">                        routingType = RoutingType.MASTER;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        BoundSql boundSql = ms.getSqlSource().getBoundSql(objects[<span class="number">1</span>]);</span><br><span class="line">                        String sql = boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(<span class="string">&quot;[\\t\\n\\r]&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (sql.matches(REGEX)) &#123;</span><br><span class="line">                            routingType = RoutingType.MASTER;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            routingType = RoutingType.SLAVE;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    routingType = RoutingType.MASTER;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled())&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;设置方法[&#123;&#125;] use [&#123;&#125;] Strategy, SqlCommandType [&#123;&#125;]..&quot;</span>, ms.getId(), routingType.name(), ms.getSqlCommandType().name());</span><br><span class="line">                &#125;</span><br><span class="line">                cacheMap.put(ms.getId(), routingType);</span><br><span class="line">            &#125;</span><br><span class="line">            RoutingDataSourceContext.setRoutingType(routingType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</span><br><span class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：需要在 Mybatis 的 SqlSessionFactory 中将此拦截器放入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加 MybatisInterceptor 拦截器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    SqlSessionFactoryBean sfb = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">    sfb.setDataSource(dataSource);</span><br><span class="line">    sfb.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> MybatisInterceptor()&#125;);</span><br><span class="line">    <span class="keyword">return</span> sfb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT id,name,city_code as cityCode,post_code as postCode FROM city WHERE id = #&#123;id&#125; limit 1&quot;)</span></span><br><span class="line">    <span class="function">City <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO city(name, city_code, post_code) VALUES(#&#123;name&#125;, #&#123;cityCode&#125;, #&#123;postCode&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(City city)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM city WHERE id = #&#123;id&#125; limit 100&quot;)</span></span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Update(&quot;UPDATE city SET name=#&#123;name&#125;,city_code=#&#123;cityCode&#125;,post_code=#&#123;postCode&#125; WHERE id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(City city)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/city&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CityMapper cityMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @RoutingWith(value = RoutingType.SLAVE)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cityMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;City&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cityMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> City <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> City city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (city.getId() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cityMapper.update(city);</span><br><span class="line">            cityMapper.findById(city.getId());</span><br><span class="line">            <span class="keyword">return</span> city;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<p><img src="https://img-blog.csdnimg.cn/20190426091910423.png" alt="在这里插入图片描述"></p>
<p>参考：</p>
<p><a href="https://www.liaoxuefeng.com/article/00151054582348974482c20f7d8431ead5bc32b30354705000">https://www.liaoxuefeng.com/article/00151054582348974482c20f7d8431ead5bc32b30354705000</a></p>
<p><a href="https://www.cnblogs.com/fangjian0423/p/mybatis-interceptor.html">https://www.cnblogs.com/fangjian0423/p/mybatis-interceptor.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mybatis</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security-Oauth2如何增加自定义授权模式</title>
    <url>/2019/06/26/Spring-Security-Oauth2%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在 oauth2 的授权模式中有4种：</p>
<ul>
<li>授权码模式</li>
<li>隐式授权模式</li>
<li>密码模式</li>
<li>客户端模式</li>
</ul>
<p>但如果我们想要增加一个自定义的授权模式，又该怎么做呢？</p>
<p>相关的源码是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeTokenGranter</span> <span class="keyword">implements</span> <span class="title">TokenGranter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;TokenGranter&gt; tokenGranters;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CompositeTokenGranter</span><span class="params">(List&lt;TokenGranter&gt; tokenGranters)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tokenGranters = <span class="keyword">new</span> ArrayList&lt;TokenGranter&gt;(tokenGranters);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//四种授权模式+刷新令牌的模式根据grant_type判断</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">grant</span><span class="params">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (TokenGranter granter : tokenGranters) &#123;</span><br><span class="line">			OAuth2AccessToken grant = granter.grant(grantType, tokenRequest);</span><br><span class="line">			<span class="keyword">if</span> (grant!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> grant;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTokenGranter</span><span class="params">(TokenGranter tokenGranter)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tokenGranter == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Token granter is null&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		tokenGranters.add(tokenGranter);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>oauth2 端点配置类部分源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerEndpointsConfigurer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TokenGranter tokenGranter;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationServerEndpointsConfigurer <span class="title">tokenGranter</span><span class="params">(TokenGranter tokenGranter)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.tokenGranter = tokenGranter;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认的四种授权模式+刷新令牌的模式的配置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TokenGranter <span class="title">tokenGranter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (tokenGranter == <span class="keyword">null</span>) &#123;</span><br><span class="line">    		tokenGranter = <span class="keyword">new</span> TokenGranter() &#123;</span><br><span class="line">    			<span class="keyword">private</span> CompositeTokenGranter delegate;</span><br><span class="line">    </span><br><span class="line">    			<span class="meta">@Override</span></span><br><span class="line">    			<span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">grant</span><span class="params">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line">    				<span class="keyword">if</span> (delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">    					delegate = <span class="keyword">new</span> CompositeTokenGranter(getDefaultTokenGranters());</span><br><span class="line">    				&#125;</span><br><span class="line">    				<span class="keyword">return</span> delegate.grant(grantType, tokenRequest);</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> tokenGranter;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认的四种授权模式+刷新令牌的模式的配置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TokenGranter&gt; <span class="title">getDefaultTokenGranters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	ClientDetailsService clientDetails = clientDetailsService();</span><br><span class="line">    	AuthorizationServerTokenServices tokenServices = tokenServices();</span><br><span class="line">    	AuthorizationCodeServices authorizationCodeServices = authorizationCodeServices();</span><br><span class="line">    	OAuth2RequestFactory requestFactory = requestFactory();</span><br><span class="line">    	</span><br><span class="line">    	List&lt;TokenGranter&gt; tokenGranters = <span class="keyword">new</span> ArrayList&lt;TokenGranter&gt;();</span><br><span class="line">    	<span class="comment">// 添加授权码模式</span></span><br><span class="line">    	tokenGranters.add(<span class="keyword">new</span> AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetails,</span><br><span class="line">    			requestFactory));</span><br><span class="line">    	<span class="comment">// 添加刷新令牌的模式</span></span><br><span class="line">    	tokenGranters.add(<span class="keyword">new</span> RefreshTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line">    	<span class="comment">// 添加隐式授权模式</span></span><br><span class="line">    	ImplicitTokenGranter implicit = <span class="keyword">new</span> ImplicitTokenGranter(tokenServices, clientDetails, requestFactory);</span><br><span class="line">    	tokenGranters.add(implicit);</span><br><span class="line">    	<span class="comment">// 添加客户端模式</span></span><br><span class="line">    	tokenGranters.add(<span class="keyword">new</span> ClientCredentialsTokenGranter(tokenServices, clientDetails, requestFactory));</span><br><span class="line">    	<span class="keyword">if</span> (authenticationManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">    	    <span class="comment">// 添加密码模式</span></span><br><span class="line">    		tokenGranters.add(<span class="keyword">new</span> ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices,</span><br><span class="line">    				clientDetails, requestFactory));</span><br><span class="line">    	&#125;</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 可以复制相关代码，然后这里添加自定义的授权模式</span></span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">return</span> tokenGranters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里就可以发现 spring 已经把默认的四种授权模式+刷新令牌的模式的配置在代码中写死了!</p>
<p>那又如何添加自定义的授权模式呢？</p>
<p>我的思路是这样的：</p>
<p>直接把这部分的代码复制，在其中添加自定义的授权模式。</p>
<p>我直接把密码模式复制，将其中的 <code>GRANT_TYPE</code> 的值改为 <code>sms_code</code>,然后使用 <code>/oauth/token?grant_type=sms_code&amp;scope=read&amp;username=user&amp;password=123456</code> 来验证结果。</p>
<h2 id="自定义授权模式：SmsCodeTokenGranter"><a href="#自定义授权模式：SmsCodeTokenGranter" class="headerlink" title="自定义授权模式：SmsCodeTokenGranter"></a>自定义授权模式：SmsCodeTokenGranter</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeTokenGranter</span> <span class="keyword">extends</span> <span class="title">AbstractTokenGranter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅仅复制了 ResourceOwnerPasswordTokenGranter，只是改变了 GRANT_TYPE 的值，来验证自定义授权模式的可行性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GRANT_TYPE = <span class="string">&quot;sms_code&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCodeTokenGranter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthenticationManager authenticationManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthorizationServerTokenServices tokenServices,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClientDetailsService clientDetailsService,</span></span></span><br><span class="line"><span class="function"><span class="params">            OAuth2RequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(authenticationManager, tokenServices, clientDetailsService, requestFactory, GRANT_TYPE);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SmsCodeTokenGranter</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthenticationManager authenticationManager,</span></span></span><br><span class="line"><span class="function"><span class="params">            AuthorizationServerTokenServices tokenServices,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClientDetailsService clientDetailsService,</span></span></span><br><span class="line"><span class="function"><span class="params">            OAuth2RequestFactory requestFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String grantType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tokenServices, clientDetailsService, requestFactory, grantType);</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> OAuth2Authentication <span class="title">getOAuth2Authentication</span><span class="params">(ClientDetails client, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; parameters = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;(tokenRequest.getRequestParameters());</span><br><span class="line">        String username = parameters.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = parameters.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="comment">// Protect from downstream leaks of password</span></span><br><span class="line">        parameters.remove(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Authentication userAuth = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">        ((AbstractAuthenticationToken) userAuth).setDetails(parameters);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userAuth = authenticationManager.authenticate(userAuth);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AccountStatusException ase) &#123;</span><br><span class="line">            <span class="comment">//covers expired, locked, disabled cases (mentioned in section 5.2, draft 31)</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(ase.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadCredentialsException e) &#123;</span><br><span class="line">            <span class="comment">// If the username/password are wrong the spec says we should send 400/invalid grant</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userAuth == <span class="keyword">null</span> || !userAuth.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidGrantException(<span class="string">&quot;Could not authenticate user: &quot;</span> + username);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OAuth2Request storedOAuth2Request = getRequestFactory().createOAuth2Request(client, tokenRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OAuth2Authentication(storedOAuth2Request, userAuth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="授权模式配置类：TokenGranterConfig"><a href="#授权模式配置类：TokenGranterConfig" class="headerlink" title="授权模式配置类：TokenGranterConfig"></a>授权模式配置类：TokenGranterConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;inMemory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenGranterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClientDetailsService clientDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenEnhancer tokenEnhancer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthorizationCodeServices authorizationCodeServices;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> reuseRefreshToken = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthorizationServerTokenServices tokenServices;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenGranter tokenGranter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权模式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenGranter <span class="title">tokenGranter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tokenGranter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            tokenGranter = <span class="keyword">new</span> TokenGranter() &#123;</span><br><span class="line">                <span class="keyword">private</span> CompositeTokenGranter delegate;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">grant</span><span class="params">(String grantType, TokenRequest tokenRequest)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (delegate == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        delegate = <span class="keyword">new</span> CompositeTokenGranter(getDefaultTokenGranters());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> delegate.grant(grantType, tokenRequest);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokenGranter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 程序支持的授权类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TokenGranter&gt; <span class="title">getDefaultTokenGranters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationServerTokenServices tokenServices = tokenServices();</span><br><span class="line">        AuthorizationCodeServices authorizationCodeServices = authorizationCodeServices();</span><br><span class="line">        OAuth2RequestFactory requestFactory = requestFactory();</span><br><span class="line"></span><br><span class="line">        List&lt;TokenGranter&gt; tokenGranters = <span class="keyword">new</span> ArrayList&lt;TokenGranter&gt;();</span><br><span class="line">        <span class="comment">// 添加授权码模式</span></span><br><span class="line">        tokenGranters.add(<span class="keyword">new</span> AuthorizationCodeTokenGranter(tokenServices, authorizationCodeServices, clientDetailsService, requestFactory));</span><br><span class="line">        <span class="comment">// 添加刷新令牌的模式</span></span><br><span class="line">        tokenGranters.add(<span class="keyword">new</span> RefreshTokenGranter(tokenServices, clientDetailsService, requestFactory));</span><br><span class="line">        <span class="comment">// 添加隐士授权模式</span></span><br><span class="line">        tokenGranters.add(<span class="keyword">new</span> ImplicitTokenGranter(tokenServices, clientDetailsService, requestFactory));</span><br><span class="line">        <span class="comment">// 添加客户端模式</span></span><br><span class="line">        tokenGranters.add(<span class="keyword">new</span> ClientCredentialsTokenGranter(tokenServices, clientDetailsService, requestFactory));</span><br><span class="line">        <span class="keyword">if</span> (authenticationManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 添加密码模式</span></span><br><span class="line">            tokenGranters.add(<span class="keyword">new</span> ResourceOwnerPasswordTokenGranter(authenticationManager, tokenServices, clientDetailsService, requestFactory));</span><br><span class="line">            <span class="comment">// 添加自定义授权模式（实际是密码模式的复制）</span></span><br><span class="line">            tokenGranters.add(<span class="keyword">new</span> SmsCodeTokenGranter(authenticationManager, tokenServices, clientDetailsService, requestFactory));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tokenGranters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TokenServices</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tokenServices != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> tokenServices;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.tokenServices = createDefaultTokenServices();</span><br><span class="line">        <span class="keyword">return</span> tokenServices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权码API</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> AuthorizationCodeServices <span class="title">authorizationCodeServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authorizationCodeServices == <span class="keyword">null</span>) &#123;</span><br><span class="line">            authorizationCodeServices = <span class="keyword">new</span> InMemoryAuthorizationCodeServices();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorizationCodeServices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * OAuth2RequestFactory的默认实现，它初始化参数映射中的字段，</span></span><br><span class="line"><span class="comment">     * 验证授权类型(grant_type)和范围(scope)，并使用客户端的默认值填充范围(scope)（如果缺少这些值）。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> OAuth2RequestFactory <span class="title">requestFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultOAuth2RequestFactory(clientDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认 TokenService</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> DefaultTokenServices <span class="title">createDefaultTokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices tokenServices = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">        tokenServices.setTokenStore(tokenStore);</span><br><span class="line">        tokenServices.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        tokenServices.setReuseRefreshToken(reuseRefreshToken);</span><br><span class="line">        tokenServices.setClientDetailsService(clientDetailsService);</span><br><span class="line">        tokenServices.setTokenEnhancer(tokenEnhancer);</span><br><span class="line">        addUserDetailsService(tokenServices, <span class="keyword">this</span>.userDetailsService);</span><br><span class="line">        <span class="keyword">return</span> tokenServices;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加预身份验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tokenServices</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetailsService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addUserDetailsService</span><span class="params">(DefaultTokenServices tokenServices, UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (userDetailsService != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PreAuthenticatedAuthenticationProvider provider = <span class="keyword">new</span> PreAuthenticatedAuthenticationProvider();</span><br><span class="line">            provider.setPreAuthenticatedUserDetailsService(<span class="keyword">new</span> UserDetailsByNameServiceWrapper&lt;PreAuthenticatedAuthenticationToken&gt;(userDetailsService));</span><br><span class="line">            tokenServices.setAuthenticationManager(<span class="keyword">new</span> ProviderManager(Arrays.&lt;AuthenticationProvider&gt;asList(provider)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="授权认证服务端点配置"><a href="#授权认证服务端点配置" class="headerlink" title="授权认证服务端点配置"></a>授权认证服务端点配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.config.inmemory;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;inMemory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigInMemory</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenGranter tokenGranter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证服务器节点配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">                .tokenGranter(tokenGranter) <span class="comment">// 四种授权模式+刷新令牌的模式+自定义授权模式</span></span><br><span class="line">                .tokenStore(tokenStore)</span><br><span class="line">                .approvalStore(approvalStore)</span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .setClientDetailsService(clientDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p><img src="https://img-blog.csdnimg.cn/20190618152045144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">POST http://localhost:8080/oauth/token?grant_type=sms_code&amp;scope=read&amp;username=user&amp;password=123456</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">X-Application-Context</span><span class="punctuation">: </span>application:inMemory</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1; mode=block</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>DENY</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 18 Jun 2019 07:13:12 GMT</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;access_token&quot;: &quot;19f2e44a-6c9a-45c4-be7e-0aada6a0a9e6&quot;,</span><br><span class="line">  &quot;token_type&quot;: &quot;bearer&quot;,</span><br><span class="line">  &quot;refresh_token&quot;: &quot;f59336a8-03c4-4c85-bc31-16c6d80f1381&quot;,</span><br><span class="line">  &quot;expires_in&quot;: 359,</span><br><span class="line">  &quot;scope&quot;: &quot;read&quot;,</span><br><span class="line">  &quot;organization&quot;: &quot;userWqTI&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 200; Time: 335ms; Content length: 190 bytes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security-Oauth2令牌增加额外信息</title>
    <url>/2019/06/26/Spring-Security-Oauth2%E4%BB%A4%E7%89%8C%E5%A2%9E%E5%8A%A0%E9%A2%9D%E5%A4%96%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>在实现了 Oauth2 后，我想要在令牌增加中额外信息，那么该怎么做？</p>
<p>下面是我的做法，首先实现 <code>org.springframework.security.oauth2.provider.token.TokenEnhancer</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.OAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token 额外信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken accessToken, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; additionalInfo = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        additionalInfo.put(<span class="string">&quot;organization&quot;</span>, authentication.getName() + randomAlphabetic(<span class="number">4</span>));</span><br><span class="line">        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在 <code>AuthorizationServerConfigurerAdapter</code> 认证服务代码中配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigInJwt</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// token 携带额外信息</span></span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(Arrays.asList(tokenEnhancer(), jwtTokenEnhancer()));</span><br><span class="line">        endpoints</span><br><span class="line">                .tokenStore(tokenStore())</span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain)</span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .setClientDetailsService(clientDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Token 额外信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenEnhancer <span class="title">tokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomTokenEnhancer();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt token：使用了非对称密钥对来签署令牌:</span></span><br><span class="line"><span class="comment">     * 1.生成 JKS Java KeyStore 文件：keytool -genkeypair -alias jwt_rsa -keyalg RSA -keypass 123456 -keystore jwt_rsa.jks -storepass 123456</span></span><br><span class="line"><span class="comment">     * 2.导出公钥：keytool -list -rfc --keystore jwt_rsa.jks | openssl x509 -inform pem -pubkey</span></span><br><span class="line"><span class="comment">     * 3.将 PUBLIC KEY 保存至 public.txt</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtTokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter converter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        converter.setKeyPair(<span class="keyword">new</span> KeyStoreKeyFactory(resource, keyStorePass.toCharArray()).getKeyPair(keyPairAlias));</span><br><span class="line">        <span class="comment">// 使用对称密钥来签署令牌</span></span><br><span class="line">        <span class="comment">// converter.setSigningKey(&quot;fengxuechao.littlefxc&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者 <code>tokenServices.setTokenEnhancer(tokenEnhancer);</code></p>
<p>最后演示一下最终效果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;4aae3856-bc33-4e4d-86bc-eb475fc45569&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;fe2ed35d-5c53-4610-abb7-c1053cba6803&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">119</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;read&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;organization&quot;</span>: <span class="string">&quot;userAKqz&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>jwt </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyIiwic2NvcGUiOlsicmVhZCJdLCJvcmdhbml6YXRpb24iOiJ1c2VyZWx2ayIsImV4cCI6MTU2MDQ4NDI0OCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIl0sImp0aSI6IjliNTU2ZTBiLTZlZmQtNDkwZC05OGMwLWIzYzYwNjM2ZDczMCIsImNsaWVudF9pZCI6ImNsaWVudCJ9.oaqlviXcQPCLAZP8cV7v-WA75AoiodiG6d2WR9yqJhOFCg7LDsnCjk63J59sq434CZHRIOkCgMi2hVJHOc4MTIFce61Kk046G3-yK313CtMy5LWeVXdKbAHH0gcuoDO3OCJ7u7GzngPtA6bVfxjJFNJ6MmFxEnFPjB5dos9Bb8zYduE2ELMH2aTCS-67R_aQ0BCZaYo5NMH1_jqz9d1hI_kpBx3auR_d2Vh1eJiC_f9Z-rTmRvXdwQefhwgXZ1UCWjV0NuoCqFO3KicEhjGOkqXZ5eh0vGR5zKwKJfCys1lNgXjXVVntHYkXt96ymQ9477pCAWCONZsbkM7244500Q&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyIiwic2NvcGUiOlsicmVhZCJdLCJvcmdhbml6YXRpb24iOiJ1c2VyZWx2ayIsImF0aSI6IjliNTU2ZTBiLTZlZmQtNDkwZC05OGMwLWIzYzYwNjM2ZDczMCIsImV4cCI6MTU2MDQ4NzcyOCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9VU0VSIl0sImp0aSI6IjJhNTUxOWJjLWUzYTAtNGJjOC1hNTRkLTlmMDNiMjYwNjZkNCIsImNsaWVudF9pZCI6ImNsaWVudCJ9.BgY6N0kzxVApFD-C7UVMDmczSoMY9tglnKzTkybfneoeAAs8ljftIwA5sPWua28Xhl-MNAQ9HL6Q6ou-EbgFlcHC2uPPbJ5silnPLPdTnvVko9l-8w-3WLPk96YbODdQemqFZHSrR1lPmXHB5sR7QjncxGxvuSYZEtPXxZz39lJbyQLSflXADqlk4ZV3BxS-M7d8FcTJEM1uTgwUBSns2N6AZnTkd2FnGskadaV2qhky5TznJjQqRETVS8xCiZCFYwCq5sAMHOj-_BrwlmCeoPfcy38ofbql-qVWfQJiAeU7yWLlAu_hd-zRIIbv-dqRmSF9T9rCxVPv84ptddO1Hw&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">119</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;read&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;organization&quot;</span>: <span class="string">&quot;userelvk&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;9b556e0b-6efd-490d-98c0-b3c60636d730&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终返回的 Token 信息中多了一个属性 <code>organization</code>，结果符合期望结果。</p>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security-Oauth2第一篇之授权认证</title>
    <url>/2019/05/07/Spring-Security-Oauth2%E7%AC%AC%E4%B8%80%E7%AF%87%E4%B9%8B%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h1 id="Spring-Security-Oauth2第一篇"><a href="#Spring-Security-Oauth2第一篇" class="headerlink" title="Spring-Security-Oauth2第一篇"></a>Spring-Security-Oauth2第一篇</h1><p>@[toc]</p>
<h2 id="1-Oauth-介绍"><a href="#1-Oauth-介绍" class="headerlink" title="1. Oauth 介绍"></a>1. Oauth 介绍</h2><p>OAuth 是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。</p>
<p>OAuth 是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），<br>而不需要将用户名和密码提供给第三方应用。OAuth允许用户提供一个令牌，而不是用户名和密码来访问他们存放在特定服务提供者的数据。<br>每一个令牌授权一个特定的网站在特定的时段内访问特定的资源。这样，OAuth让用户可以授权第三方网站访问他们存储在另外服务提供者的某些特定信息。<br>更多OAuth2请参考理解<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">OAuth 2.0</a></p>
<h2 id="2-Spring-Security-Oauth2-的使用"><a href="#2-Spring-Security-Oauth2-的使用" class="headerlink" title="2. Spring Security Oauth2 的使用"></a>2. Spring Security Oauth2 的使用</h2><h3 id="2-1-使用MySQL存储-access-token-和-client-信息"><a href="#2-1-使用MySQL存储-access-token-和-client-信息" class="headerlink" title="2.1. 使用MySQL存储 access_token 和 client 信息"></a>2.1. 使用MySQL存储 access_token 和 client 信息</h3><p>在学习过程中，很多示例中，所有的token信息都是保存在内存中的，这显然无法在生产环境中使用(进程结束后所有token丢失, 用户需要重新授权)，<br>也不利于我们的学习，因此需要将这些信息进行持久化操作。</p>
<p>授权服务器中的数据存储到数据库中并不难 <code>spring-security-oauth2</code> 已经为我们设计好了一套Schema和对应的DAO对象。<br>但在使用之前，我们需要先对相关的类有一定的了解。</p>
<h3 id="2-2-数据结构脚本"><a href="#2-2-数据结构脚本" class="headerlink" title="2.2. 数据结构脚本"></a>2.2. 数据结构脚本</h3><p><code>spring-security-oauth2</code> 为我们提供了 Schema：</p>
<p><a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql">https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql</a></p>
<blockquote>
<p>注意: 框架所提供的数据脚本适用于 HSQL，语句中会有某些字段为 <code>LONGVARBINARY</code> 类型，它对应 MYSQL 的 <code>BLOB</code> 类型。</p>
</blockquote>
<h3 id="2-3-相关的接口"><a href="#2-3-相关的接口" class="headerlink" title="2.3. 相关的接口"></a>2.3. 相关的接口</h3><p><code>spring-security-oauth2</code> 通过 <code>DefaultTokenServices</code> 类来完成 token 生成、过期等 OAuth2 标准规定的业务逻辑，<br>而 <code>DefaultTokenServices</code> 又是通过 <code>TokenStore</code> 接口完成对生成数据的持久化。</p>
<p>对于 Token 信息，本篇文章使用 <code>JdbcTokenStore</code>，在生产环境中更喜爱使用 <code>RedisTokenStore</code>。</p>
<p>对于 Client 信息，本篇文章使用 <code>JdbcClientDetailsService</code>。</p>
<h3 id="2-4-服务类型"><a href="#2-4-服务类型" class="headerlink" title="2.4. 服务类型"></a>2.4. 服务类型</h3><p>OAuth2 在服务提供者上可分为两类：</p>
<ul>
<li><p>授权认证服务：AuthenticationServer</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>资源获取服务：ResourceServer</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfiguration</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意：这两者有时候可能存在同一个应用程序中（即SOA架构）。在Spring OAuth中可以简便的将其分配到两个应用中（即微服务），而且可多个资源获取服务共享一个授权认证服务。</p>
</blockquote>
<h3 id="2-5-项目结构和-maven-依赖"><a href="#2-5-项目结构和-maven-依赖" class="headerlink" title="2.5. 项目结构和 maven 依赖"></a>2.5. 项目结构和 maven 依赖</h3><p>前面浅尝辄止的讲述了一些原理，下面的内容是示例展示。</p>
<p><img src="https://img-blog.csdnimg.cn/20190327141003513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- oauth2 核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将token存储在redis中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-5-1-配置授权认证服务"><a href="#2-5-1-配置授权认证服务" class="headerlink" title="2.5.1. 配置授权认证服务"></a>2.5.1. 配置授权认证服务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.server.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEMO_RESOURCE_ID = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明TokenStore实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTokenStore(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明 ClientDetails实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第三方用户客户端详情</span></span><br><span class="line"><span class="comment">     * Grant Type代表当前授权的类型：</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     authorization_code：传统的授权码模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     implicit：隐式授权模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     password：资源所有者（即用户）密码模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     client_credentials：客户端凭据（客户端ID以及Key）模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     refresh_token：获取access token时附带的用于刷新新的token模式</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.jdbc(dataSource)</span><br><span class="line">                .withClient(<span class="string">&quot;client_1&quot;</span>)</span><br><span class="line">                .secret(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .resourceIds(DEMO_RESOURCE_ID)</span><br><span class="line">                .redirectUris(<span class="string">&quot;https://www.baidu.com&quot;</span>, <span class="string">&quot;http://localhost:8081/product/1&quot;</span>)</span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">1200</span>)</span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">50000</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;client_credentials&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;client&quot;</span>).and().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// redis保存token</span></span><br><span class="line">        <span class="comment">// endpoints.tokenStore(new RedisTokenStore(redisConnectionFactory))</span></span><br><span class="line">        <span class="comment">// JDBC 保存 token</span></span><br><span class="line">        endpoints.tokenStore(<span class="keyword">new</span> JdbcTokenStore(dataSource));</span><br><span class="line">        endpoints.setClientDetailsService(clientDetailsService());</span><br><span class="line">        endpoints.authenticationManager(authenticationManager);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer oauthServer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 允许表单认证</span></span><br><span class="line">        oauthServer.allowFormAuthenticationForClients();</span><br><span class="line">        <span class="comment">// 授权认证服务需要把 /oauth/check_toke 暴露出来，并且附带上权限访问。</span></span><br><span class="line">        oauthServer.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-2-配置用户权限-拦截保护的请求"><a href="#2-5-2-配置用户权限-拦截保护的请求" class="headerlink" title="2.5.2. 配置用户权限|拦截保护的请求"></a>2.5.2. 配置用户权限|拦截保护的请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.server.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的用户权限控制实现类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;user_1&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).authorities(<span class="string">&quot;USER&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;user_2&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).authorities(<span class="string">&quot;USER&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来配置拦截保护的请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .requestMatchers().antMatchers(<span class="string">&quot;/oauth/**&quot;</span>, <span class="string">&quot;/login/**&quot;</span>, <span class="string">&quot;/logout/**&quot;</span>)</span><br><span class="line">                .and().authorizeRequests().antMatchers(<span class="string">&quot;/oauth/*&quot;</span>).authenticated()</span><br><span class="line">                .and().formLogin().permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-3-配置资源获取服务"><a href="#2-5-3-配置资源获取服务" class="headerlink" title="2.5.3. 配置资源获取服务"></a>2.5.3. 配置资源获取服务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.server.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(6)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfiguration</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEMO_RESOURCE_ID = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</span><br><span class="line">         resources.resourceId(DEMO_RESOURCE_ID).stateless(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class="line">                .and().requestMatchers().anyRequest()</span><br><span class="line">                .and().anonymous()</span><br><span class="line">                .and().authorizeRequests()</span><br><span class="line"><span class="comment">//                    .antMatchers(&quot;/product/**&quot;).access(&quot;#oauth2.hasScope(&#x27;select&#x27;) and hasRole(&#x27;ROLE_USER&#x27;)&quot;)</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/**&quot;</span>).authenticated();  <span class="comment">//配置访问权限控制，必须认证过后才可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：ResourceServerConfiguration 和 SecurityConfiguration上配置的顺序<br>SecurityConfiguration 一定要在 ResourceServerConfiguration 之前，因为 spring 实现安全是通过添加过滤器(Filter)来实现的，<br>基本的安全过滤应该在oauth过滤之前, 所以在 SecurityConfiguration 设置 @Order(2) , 在 ResourceServerConfiguration 上设置 @Order(6)</p>
</blockquote>
<h4 id="2-5-4-受保护的资源"><a href="#2-5-4-受保护的资源" class="headerlink" title="2.5.4. 受保护的资源"></a>2.5.4. 受保护的资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.server.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthEndpoints</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProduct</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product id : &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;order id : &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/me&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">user</span><span class="params">(Principal principal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> principal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-5-测试"><a href="#2-5-5-测试" class="headerlink" title="2.5.5. 测试"></a>2.5.5. 测试</h4><ol>
<li><p>客户端凭据（客户端ID以及Key）模式</p>
<p> 发送 POST 请求获取 access_token</p>
 <figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">POST http://localhost:8081/oauth/token?grant_type=client_credentials&amp;scope=all&amp;client_id=client_1&amp;client_secret=123456</span><br></pre></td></tr></table></figure>
<p> 请求结果：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;d3025813-fd1f-4ccb-9faa-495cad16deff&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">1199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 将请求结果中的 access_token 取出并作为请求受保护资源 api 的请求参数</p>
 <figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8081/order/1?access_token=d3025813-fd1f-4ccb-9faa-495cad16deff</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权码模式</p>
<p> 授权链接</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8081&#x2F;oauth&#x2F;authorize?response_type&#x3D;code&amp;client_id&#x3D;client_1&amp;scope&#x3D;all&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;product&#x2F;1</span><br></pre></td></tr></table></figure>
<p> <img src="https://img-blog.csdnimg.cn/20190327141038943.png" alt="在这里插入图片描述"></p>
<p> 登陆后，同意授权</p>
<p> <img src="https://img-blog.csdnimg.cn/20190327141100319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> <img src="https://img-blog.csdnimg.cn/20190327141113939.png" alt="在这里插入图片描述"></p>
<p> 将请求连接中的 <code>code</code> 作为请求令牌的请求参数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST http:&#x2F;&#x2F;localhost:8081&#x2F;oauth&#x2F;token?client_id&#x3D;client_1&amp;grant_type&#x3D;authorization_code&amp;redirect_uri&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;product&#x2F;1&amp;client_secret&#x3D;123456&amp;code&#x3D;7fTmqZ</span><br></pre></td></tr></table></figure>
<p> 请求结果：</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;b485ed7c-3c92-43b0-97f2-0dc54da61d80&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;02b204ea-31f5-45c0-809e-ef2693117d31&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">1199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 取出 access_token 作为受保护的请求资源的令牌</p>
 <figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8081/product/1?access_token=b485ed7c-3c92-43b0-97f2-0dc54da61d80</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-5-6-如何分离授权服务和资源服务"><a href="#2-5-6-如何分离授权服务和资源服务" class="headerlink" title="2.5.6. 如何分离授权服务和资源服务"></a>2.5.6. 如何分离授权服务和资源服务</h4><p>在上文 <code>2.4. 服务类型</code> 章节中，提过 <code>在Spring OAuth中可以简便的将其分配到两个应用中（即微服务），而且可多个资源获取服务共享一个授权认证服务</code>。</p>
<p><code>ResourceServerTokenServices</code> 是组成授权服务的另一半。</p>
<ol>
<li>若是资源服务器和授权服务在同一个应用，可以使用 <code>DefaultTokenServices</code></li>
<li>若是分离的。<code>ResourceServerTokenServices</code> 必须知道令牌的如何解码。</li>
</ol>
<p><code>ResourceServerTokenServices</code> 解析令牌的方法：</p>
<ul>
<li>使用 <code>RemoteTokenServices</code>，资源服务器通过HTTP请求来解码令牌。每次都请求授权服务器的端点 <code>/oauth/check_toke</code>，以此来解码令牌</li>
<li>若是访问量大，则通过http获取之后，换成令牌的结果</li>
<li>若是 jwt 令牌，需请求授权服务的 <code>/oauth/token_key</code>，来获取 key 进行解码</li>
</ul>
<blockquote>
<p>注意：授权认证服务需要把/oauth/check_toke暴露出来，并且附带上权限访问。</p>
</blockquote>
<ol>
<li><p>项目结构</p>
<p> <img src="https://img-blog.csdnimg.cn/20190327155308981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>独立资源服务器配置</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.res.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEMO_RESOURCE_ID = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</span><br><span class="line">        resources.resourceId(DEMO_RESOURCE_ID).stateless(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)</span><br><span class="line">                .and().requestMatchers().anyRequest()</span><br><span class="line">                .and().anonymous()</span><br><span class="line">                .and().authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).authenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Primary</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public RemoteTokenServices tokenServices() &#123;</span></span><br><span class="line"><span class="comment">        RemoteTokenServices tokenServices = new RemoteTokenServices();</span></span><br><span class="line"><span class="comment">        tokenServices.setCheckTokenEndpointUrl(&quot;http://localhost:8081/oauth/check_token&quot;);</span></span><br><span class="line"><span class="comment">        tokenServices.setClientId(&quot;client_1&quot;);</span></span><br><span class="line"><span class="comment">        tokenServices.setClientSecret(&quot;123456&quot;);</span></span><br><span class="line"><span class="comment">        return tokenServices;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件</p>
<p> application.properties</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server.port=8082</span></span><br><span class="line"><span class="string">security.oauth2.client.client-id=client_1</span></span><br><span class="line"><span class="string">security.oauth2.client.client-secret=123456</span></span><br><span class="line"><span class="comment"># userInfoUri用户端点的URI，用于获取当前用户详细信息</span></span><br><span class="line"><span class="string">security.oauth2.resource.user-info-uri=http://localhost:8081/user/me</span></span><br><span class="line"><span class="comment"># 解析令牌的地址</span></span><br><span class="line"><span class="string">security.oauth2.authorization.check-token-access=http://localhost:8001/oauth/check_token</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>受保护资源</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.sso.res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源API</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/api/userinfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Map&gt; <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String user = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">        String email = user + <span class="string">&quot;@test.com&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, user);</span><br><span class="line">        map.put(<span class="string">&quot;email&quot;</span>, email);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul>
<li><a href="https://projects.spring.io/spring-security-oauth/docs/oauth2.html">https://projects.spring.io/spring-security-oauth/docs/oauth2.html</a></li>
<li><a href="https://juejin.im/post/5a3cbce05188252582279467#heading-6">https://juejin.im/post/5a3cbce05188252582279467#heading-6</a></li>
<li><a href="http://www.spring4all.com/article/582">http://www.spring4all.com/article/582</a></li>
</ul>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security-Oauth2第二篇之配置客户端</title>
    <url>/2019/05/07/Spring-Security-Oauth2%E7%AC%AC%E4%BA%8C%E7%AF%87%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="Spring-Security-Oauth2第二篇之配置客户端"><a href="#Spring-Security-Oauth2第二篇之配置客户端" class="headerlink" title="Spring-Security-Oauth2第二篇之配置客户端"></a>Spring-Security-Oauth2第二篇之配置客户端</h1><p>@[toc]<br>在<a href="https://blog.csdn.net/Little_fxc/article/details/88843408">第一篇</a>中，描述的都是授权服务器和资源服务器。本篇要描述的是关于如何配置客户端的示例。</p>
<p>首先，需要考虑在OAuth2中有四种不同的角色：</p>
<ul>
<li>资源所有者  - 能够授予对其受保护资源的访问权限的实体</li>
<li>授权服务器  -在成功验证资源所有者  并获得其授权后， 向客户端授予访问令牌 </li>
<li>资源服务器  - 需要访问令牌以允许或至少考虑访问其资源的组件</li>
<li>客户端  - 能够从授权服务器获取访问令牌的实体</li>
</ul>
<p>使用 <code>@EnableResourceServer</code> 表示资源服务器</p>
<p>使用 <code>@EnableOAuth2Sso</code> 表示授权码类型的客户端</p>
<p>使用 <code>@EnableOAuth2Client</code> 表示客户端凭据类型的客户端</p>
<h2 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a>1. 项目结构</h2><p>实在抱歉，之前的关于客户端的项目结构图片贴错了（是第一篇的项目结构图）,下面换上正确的图片<br><img src="https://img-blog.csdnimg.cn/20190401150856136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-maven-依赖"><a href="#2-maven-依赖" class="headerlink" title="2. maven 依赖"></a>2. maven 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.19.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-使用-EnableOAuth2Sso-注解安全配置"><a href="#3-使用-EnableOAuth2Sso-注解安全配置" class="headerlink" title="3. 使用 @EnableOAuth2Sso 注解安全配置"></a>3. 使用 @EnableOAuth2Sso 注解安全配置</h2><h3 id="3-1-客户端安全配置"><a href="#3-1-客户端安全配置" class="headerlink" title="3.1. 客户端安全配置"></a>3.1. 客户端安全配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置最核心的部分是用于启动单点登陆 <span class="doctag">@EnableOAuth</span>2Sso 注解。</span></span><br><span class="line"><span class="comment"> * 这里要注意，我们需要重写WebSecurityConfigurerAdapter 否则所有的路径都会受到SSO的保护，</span></span><br><span class="line"><span class="comment"> * 这样无论用户访问哪个页面都会被重定向到登录页面，在这个例子里，index和login页面是唯一不需要被防护的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableOAuth2Sso</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.antMatcher(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login**&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时必须在授权服务器中的授权类型中添加授权码类型，同时添加回调链接(核心代码见 <code>3.2. 授权服务器核心代码</code>)。</p>
<h3 id="3-2-授权服务器核心代码"><a href="#3-2-授权服务器核心代码" class="headerlink" title="3.2. 授权服务器核心代码"></a>3.2. 授权服务器核心代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第三方用户客户端详情</span></span><br><span class="line"><span class="comment">     * Grant Type代表当前授权的类型：</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     authorization_code：传统的授权码模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     implicit：隐式授权模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     password：资源所有者（即用户）密码模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     client_credentials：客户端凭据（客户端ID以及Key）模式&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *     refresh_token：获取access token时附带的用于刷新新的token模式</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.jdbc(dataSource)</span><br><span class="line">                .withClient(<span class="string">&quot;client_1&quot;</span>)</span><br><span class="line">                .secret(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">                .resourceIds(DEMO_RESOURCE_ID)</span><br><span class="line">                .redirectUris(<span class="string">&quot;https://www.baidu.com&quot;</span>, <span class="string">&quot;http://localhost:8081/product/1&quot;</span>, <span class="string">&quot;http://localhost:8083/login&quot;</span>)</span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">1200</span>)</span><br><span class="line">                .refreshTokenValiditySeconds(<span class="number">50000</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;client_credentials&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                .authorities(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                .autoApprove(<span class="keyword">true</span>)</span><br><span class="line">                .and().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>redirectUris()</code> 中的链接表示回调接口，其中 <code>http://localhost:8083/login</code> 是本次需要添加的</p>
<p><code>authorizedGrantTypes()</code> 表示授权服务器支持的授权类型，本次添加了 <code>authorization_code</code>。</p>
<p><code>autoApprove(true)</code> 表示自动授权</p>
<h3 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3. 配置文件"></a>3.3. 配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;8083</span><br><span class="line">server.session.cookie.name&#x3D;CLIENTSESSION</span><br><span class="line">security.oauth2.client.client-id&#x3D;client_1</span><br><span class="line">security.oauth2.client.client-secret&#x3D;123456</span><br><span class="line">security.oauth2.client.access-token-uri&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;oauth&#x2F;token</span><br><span class="line">security.oauth2.client.user-authorization-uri&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;oauth&#x2F;authorize</span><br><span class="line">security.oauth2.client.scope&#x3D;all</span><br><span class="line"># userInfoUri用户端点的URI，用于获取当前用户详细信息</span><br><span class="line">security.oauth2.resource.user-info-uri&#x3D;http:&#x2F;&#x2F;localhost:8081&#x2F;user&#x2F;me</span><br><span class="line"># 解析令牌的地址</span><br><span class="line">security.oauth2.authorization.check-token-access&#x3D;http:&#x2F;&#x2F;localhost:8001&#x2F;oauth&#x2F;check_token</span><br><span class="line"></span><br><span class="line">security.basic.enabled&#x3D;false</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在配置文件中要注意 <code>server.session.cookie.name</code> 的配置，<br>因为 cookie 不会保存端口，所以要注意客户端的 cookie 名和授权服务器的 cookie 名的不同。</p>
</blockquote>
<h2 id="4-MVC-配置"><a href="#4-MVC-配置" class="headerlink" title="4. MVC 配置"></a>4. MVC 配置</h2><h3 id="4-1-客户端-API"><a href="#4-1-客户端-API" class="headerlink" title="4.1. 客户端 API"></a>4.1. 客户端 API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApp.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OAuth2RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/securedPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">securedPage</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;securedPage&quot;</span>).addObject(<span class="string">&quot;authentication&quot;</span>, authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/remoteCall&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">remoteCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;Map&gt; responseEntity = restTemplate.getForEntity(<span class="string">&quot;http://127.0.0.1:8082/api/userinfo&quot;</span>, Map.class);</span><br><span class="line">        <span class="keyword">return</span> responseEntity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2RestTemplate <span class="title">oauth2RestTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            OAuth2ClientContext oAuth2ClientContext, OAuth2ProtectedResourceDetails details)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OAuth2RestTemplate(details, oAuth2ClientContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-客户端-MVC-映射"><a href="#4-2-客户端-MVC-映射" class="headerlink" title="4.2. 客户端 MVC 映射"></a>4.2. 客户端 MVC 映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestContextListener <span class="title">requestContextListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestContextListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;forward:/index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-前端"><a href="#4-3-前端" class="headerlink" title="4.3. 前端"></a>4.3. 前端</h3><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security SSO Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring Security SSO Client<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;securedPage&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="securedPage-html"><a href="#securedPage-html" class="headerlink" title="securedPage.html"></a>securedPage.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security SSO Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-12&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Secured Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        Welcome, <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;authentication.name&#125;&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        Your authorities are <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;authentication.authorities&#125;&quot;</span>&gt;</span>authorities<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>启动授权服务器，资源服务器和客户端，进入客户端首页：</p>
<p><img src="https://img-blog.csdnimg.cn/20190328183526937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>点击登陆，重定向到授权服务器的登陆页面,输入授权服务器信任的用户名(user_1)和密码(123456):</p>
<p><img src="https://img-blog.csdnimg.cn/20190328183551147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>点击登陆，重定向到安全页面：</p>
<p><img src="https://img-blog.csdnimg.cn/2019032818360535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>调用资源服务器资源：</p>
<p><img src="https://img-blog.csdnimg.cn/20190328183629188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="6-使用-EnableOAuth2Client-注解安全配置"><a href="#6-使用-EnableOAuth2Client-注解安全配置" class="headerlink" title="6. 使用 @EnableOAuth2Client 注解安全配置"></a>6. 使用 @EnableOAuth2Client 注解安全配置</h2><p>如果使用客户端凭据模式就足够的话，那么对上文中的代码只需很少的配置即可完成客户端凭据模式的客户端。</p>
<h3 id="6-1-客户端安全配置"><a href="#6-1-客户端安全配置" class="headerlink" title="6.1. 客户端安全配置"></a>6.1. 客户端安全配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 <span class="doctag">@EnableOAuth</span>2Client 注解来开启 client_credentials。</span></span><br><span class="line"><span class="comment"> * 这里要注意的是要明确在配置文件中配置 security.oauth2.client.grant-type=client_credentials 。</span></span><br><span class="line"><span class="comment"> * 同时允许要调用的接口，注意对比与 WebSecurityConfig 类的不同点。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/3/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableOAuth2Client</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig2</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.antMatcher(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login**&quot;</span>, <span class="string">&quot;/remoteCall&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，因为客户端凭据模式信任持有客户端凭证的客户端发出的任何请求，将远程调用资源服务器的请求 “/remoteCall” 允许访问。</p>
<p>配置文件 application.properties 中添加 <code>security.oauth2.client.grant-type=client_credentials</code></p>
<h3 id="6-2-测试"><a href="#6-2-测试" class="headerlink" title="6.2. 测试"></a>6.2. 测试</h3><p><img src="https://img-blog.csdnimg.cn/20190328183722668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="7-参考资源"><a href="#7-参考资源" class="headerlink" title="7. 参考资源"></a>7. 参考资源</h2><p><a href="https://www.baeldung.com/sso-spring-security-oauth2">Simple Single Sign-On with Spring Security OAuth2</a></p>
<p><a href="https://spring.io/guides/tutorials/spring-boot-oauth2/">https://spring.io/guides/tutorials/spring-boot-oauth2/</a></p>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring boot 中 @Scheduled 不起作用的一个解决办法</title>
    <url>/2019/11/27/Spring-boot-%E4%B8%AD-Scheduled-%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Spring-boot-中-Scheduled-不起作用的一个解决办法"><a href="#Spring-boot-中-Scheduled-不起作用的一个解决办法" class="headerlink" title="Spring boot 中 @Scheduled 不起作用的一个解决办法"></a>Spring boot 中 @Scheduled 不起作用的一个解决办法</h1><p>在 spring boot 应用中添加定时任务，按照网上的资料却怎么都不能启动，都说是缺少了 <code>@EnableScheduling</code>,我在加上了后却任然启动不了。</p>
<p>最后是这样解决的：主要是新增一个 <code>org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler</code>  的 bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sched</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StatisticProperties statisticProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskScheduler <span class="title">poolScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler scheduler = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        scheduler.setThreadNamePrefix(<span class="string">&quot;poolScheduler&quot;</span>);</span><br><span class="line">        scheduler.setPoolSize(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> scheduler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async(value = &quot;asyncPoolTaskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;*/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearRealtimeCacheData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;每5秒执行一次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security-Oauth2添加自定义过滤器和oauth2认证后API权限控制</title>
    <url>/2019/06/26/Spring-Security-Oauth2%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8%E5%92%8Coauth2%E8%AE%A4%E8%AF%81%E5%90%8EAPI%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>在搭建完 spring-security-oauth2 整个微服务框架后，来了一个需求：</p>
<blockquote>
<p>每个微服务都需要对访问进行鉴权，每个微服务应用都需要明确当前访问用户和他的权限。</p>
</blockquote>
<p>auth 系统的主要功能是授权认证和鉴权。</p>
<p>授权认证已经完成，那么如何对用户的访问进行鉴权呢？</p>
<p>首先需要明确什么时候发生鉴权？</p>
<p>鉴权发生在用户已经认证后携带了 access_token 信息但还没用访问到目标资源的时候。</p>
<p>知道了鉴权发生的时间，需要明白怎么鉴权？</p>
<p>我的想法是添加一个用于鉴权的过滤器，Spring Security 默认的过滤器链(<a href="https://docs.spring.io/spring-security/site/docs/5.0.0.M1/reference/htmlsingle/#ns-custom-filters">官网</a>)：</p>
<table>
<thead>
<tr>
<th>别名</th>
<th>类名称</th>
<th>Namespace Element or Attribute</th>
</tr>
</thead>
<tbody><tr>
<td>CHANNEL_FILTER</td>
<td>ChannelProcessingFilter</td>
<td>http/intercept-url@requires-channel</td>
</tr>
<tr>
<td>SECURITY_CONTEXT_FILTER</td>
<td>SecurityContextPersistenceFilter</td>
<td>http</td>
</tr>
<tr>
<td>CONCURRENT_SESSION_FILTER</td>
<td>ConcurrentSessionFilter</td>
<td>session-management/concurrency-control</td>
</tr>
<tr>
<td>HEADERS_FILTER</td>
<td>HeaderWriterFilter</td>
<td>http/headers</td>
</tr>
<tr>
<td>CSRF_FILTER</td>
<td>CsrfFilter</td>
<td>http/csrf</td>
</tr>
<tr>
<td>LOGOUT_FILTER</td>
<td>LogoutFilter</td>
<td>http/logout</td>
</tr>
<tr>
<td>X509_FILTER</td>
<td>X509AuthenticationFilter</td>
<td>http/x509</td>
</tr>
<tr>
<td>PRE_AUTH_FILTER</td>
<td>AbstractPreAuthenticatedProcessingFilter( Subclasses)</td>
<td>N/A</td>
</tr>
<tr>
<td>CAS_FILTER</td>
<td>CasAuthenticationFilter    N/A</td>
<td></td>
</tr>
<tr>
<td>FORM_LOGIN_FILTER</td>
<td>UsernamePasswordAuthenticationFilter</td>
<td>http/form-login</td>
</tr>
<tr>
<td>BASIC_AUTH_FILTER</td>
<td>BasicAuthenticationFilter</td>
<td>http/http-basic</td>
</tr>
<tr>
<td>SERVLET_API_SUPPORT_FILTER</td>
<td>SecurityContextHolderAwareRequestFilter</td>
<td>http/@servlet-api-provision</td>
</tr>
<tr>
<td>JAAS_API_SUPPORT_FILTER</td>
<td>JaasApiIntegrationFilter</td>
<td>http/@jaas-api-provision</td>
</tr>
<tr>
<td>REMEMBER_ME_FILTER</td>
<td>RememberMeAuthenticationFilter</td>
<td>http/remember-me</td>
</tr>
<tr>
<td>ANONYMOUS_FILTER</td>
<td>AnonymousAuthenticationFilter</td>
<td>http/anonymous</td>
</tr>
<tr>
<td>SESSION_MANAGEMENT_FILTER</td>
<td>SessionManagementFilter</td>
<td>session-management</td>
</tr>
<tr>
<td>EXCEPTION_TRANSLATION_FILTER</td>
<td>ExceptionTranslationFilter</td>
<td>http</td>
</tr>
<tr>
<td>FILTER_SECURITY_INTERCEPTOR</td>
<td>FilterSecurityInterceptor</td>
<td>http</td>
</tr>
<tr>
<td>SWITCH_USER_FILTER</td>
<td>SwitchUserFilter</td>
<td>N/A</td>
</tr>
</tbody></table>
<blockquote>
<p>过滤器顺序从上到下</p>
</blockquote>
<p><code>FilterSecurityInterceptor</code> 是 filterchain 中比较复杂，也是比较核心的过滤器，主要负责web应用安全授权的工作。</p>
<p>我想添加的过滤器是添加在 <code>FilterSecurityInterceptor</code> 之后。</p>
<p><code>Oauth2FilterSecurityInterceptor</code> 是模仿 FilterSecurityInterceptor 实现，继承 AbstractSecurityInterceptor 和实现 Filter 接口。</p>
<p>整个过程需要依赖 AuthenticationManager、AccessDecisionManager 和 FilterInvocationSecurityMetadataSource。</p>
<ul>
<li>AuthenticationManager是认证管理器，实现用户认证的入口；</li>
<li>AccessDecisionManager是访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源；</li>
<li>FilterInvocationSecurityMetadataSource是资源源数据定义，即定义某一资源可以被哪些角色访问。</li>
</ul>
<h2 id="自定义鉴权过滤器-Oauth2FilterSecurityInterceptor-的实现"><a href="#自定义鉴权过滤器-Oauth2FilterSecurityInterceptor-的实现" class="headerlink" title="自定义鉴权过滤器 Oauth2FilterSecurityInterceptor 的实现"></a>自定义鉴权过滤器 <code>Oauth2FilterSecurityInterceptor</code> 的实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.SecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.intercept.AbstractSecurityInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.intercept.InterceptorStatusToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.FilterInvocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较核心的过滤器: 主要负责web应用鉴权的工作。</span></span><br><span class="line"><span class="comment"> * 需要依赖:</span></span><br><span class="line"><span class="comment"> * - AuthenticationManager:认证管理器，实现用户认证的入口;</span></span><br><span class="line"><span class="comment"> * - AccessDecisionManager:访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源;</span></span><br><span class="line"><span class="comment"> * - FilterInvocationSecurityMetadataSource:资源源数据定义，即定义某一资源可以被哪些角色访问.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oauth2FilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Oauth2FilterInvocationSecurityMetadataSource securityMetadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Oauth2FilterSecurityInterceptor init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Oauth2FilterSecurityInterceptor doFilter&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        FilterInvocation filterInvocation = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">        invoke(filterInvocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation filterInvocation)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// filterInvocation里面有一个被拦截的url</span></span><br><span class="line">        <span class="comment">// 里面调用 Oauth2AccessDecisionManager 的 getAttributes(Object object) 这个方法获取 filterInvocation 对应的所有权限</span></span><br><span class="line">        <span class="comment">// 再调用 Oauth2AccessDecisionManager 的 decide方法来校验用户的权限是否足够</span></span><br><span class="line">        InterceptorStatusToken interceptorStatusToken = <span class="keyword">super</span>.beforeInvocation(filterInvocation);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行下一个拦截器</span></span><br><span class="line">            filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterInvocation(interceptorStatusToken, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getSecureObjectClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源源数据定义，设置为自定义的 SecureResourceFilterInvocationDefinitionSource</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityMetadataSource <span class="title">obtainSecurityMetadataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> securityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOauth2AccessDecisionManager</span><span class="params">(Oauth2AccessDecisionManager accessDecisionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAccessDecisionManager(accessDecisionManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationManager</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecurityMetadataSource</span><span class="params">(Oauth2FilterInvocationSecurityMetadataSource securityMetadataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.securityMetadataSource = securityMetadataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看下父类的 <code>beforeInvocation</code> 方法，其中省略了一些不重要的代码片段:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> InterceptorStatusToken <span class="title">beforeInvocation</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 代码省略</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据 SecurityMetadataSource 获取配置的权限属性</span></span><br><span class="line">		Collection&lt;ConfigAttribute&gt; attributes = <span class="keyword">this</span>.obtainSecurityMetadataSource()</span><br><span class="line">				.getAttributes(object);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 代码省略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否需要对认证实体重新认证，默认为否</span></span><br><span class="line">		Authentication authenticated = authenticateIfRequired();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Attempt authorization</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 决策管理器开始决定是否授权，如果授权失败，直接抛出 AccessDeniedException</span></span><br><span class="line">	        <span class="keyword">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (AccessDeniedException accessDeniedException) &#123;</span><br><span class="line">			publishEvent(<span class="keyword">new</span> AuthorizationFailureEvent(object, attributes, authenticated,</span><br><span class="line">					accessDeniedException));</span><br><span class="line"></span><br><span class="line">			<span class="keyword">throw</span> accessDeniedException;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 代码省略</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义资源源数据定义-Oauth2FilterInvocationSecurityMetadataSource"><a href="#自定义资源源数据定义-Oauth2FilterInvocationSecurityMetadataSource" class="headerlink" title="自定义资源源数据定义 Oauth2FilterInvocationSecurityMetadataSource"></a>自定义资源源数据定义 Oauth2FilterInvocationSecurityMetadataSource</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fengxuechao.examples.auth.service.UserRolePermissionService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.ConfigAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.SecurityConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.FilterInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源源数据定义，即定义某一资源可以被哪些角色访问</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oauth2FilterInvocationSecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserRolePermissionService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Oauth2FilterInvocationSecurityMetadataSource</span><span class="params">(UserRolePermissionService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;/user/profile&quot;</span>.equals(((FilterInvocation) object).getRequestUrl())) &#123;</span><br><span class="line">            <span class="comment">// [/user/profile] 不需要鉴权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*if (object instanceof FilterInvocation) &#123;</span></span><br><span class="line"><span class="comment">            FilterInvocation fi = (FilterInvocation) object;</span></span><br><span class="line"><span class="comment">            String requestUrl = fi.getRequestUrl();</span></span><br><span class="line"><span class="comment">            // 返回请求所需的权限</span></span><br><span class="line"><span class="comment">            List&lt;Role&gt; roleList = service.findRoleListByPermissionUrl(requestUrl);</span></span><br><span class="line"><span class="comment">            String[] roleArray = new String[roleList.size()];</span></span><br><span class="line"><span class="comment">            roleArray = roleList.toArray(roleArray);</span></span><br><span class="line"><span class="comment">            return SecurityConfig.createList(roleArray);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return Collections.EMPTY_LIST;*/</span></span><br><span class="line">        <span class="keyword">return</span> SecurityConfig.createList(<span class="string">&quot;ROLE_ADMIN&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了调试的方便，直接定死任何访问请求都需要管理员权限(/user/profile 除外)，调试通过后，再往里面添加业务逻辑代码。</p>
<h2 id="自定义决策管理器-Oauth2AccessDecisionManager"><a href="#自定义决策管理器-Oauth2AccessDecisionManager" class="headerlink" title="自定义决策管理器 Oauth2AccessDecisionManager"></a>自定义决策管理器 Oauth2AccessDecisionManager</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDecisionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.ConfigAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.InsufficientAuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.FilterInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Oauth2AccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication   用户凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource         资源 URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configAttributes 资源 URL 所需要的权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AccessDeniedException               资源拒绝访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InsufficientAuthenticationException 用户凭证不符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object resource, Collection&lt;ConfigAttribute&gt; configAttributes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;[决策管理器]:开始判断请求 &#123;&#125; 需要的权限&quot;</span>, ((FilterInvocation) resource).getRequestUrl());</span><br><span class="line">        <span class="keyword">if</span> (configAttributes == <span class="keyword">null</span> || configAttributes.isEmpty()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[决策管理器]:请求 &#123;&#125; 无需权限&quot;</span>, ((FilterInvocation) resource).getRequestUrl());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[决策管理器]:请求 &#123;&#125; 需要的权限 - &#123;&#125;&quot;</span>, ((FilterInvocation) resource).getRequestUrl(), configAttributes);</span><br><span class="line">        <span class="comment">// 判断用户所拥有的权限，是否符合对应的Url权限，用户权限是实现 UserDetailsService#loadUserByUsername 返回用户所对应的权限</span></span><br><span class="line">        Iterator&lt;ConfigAttribute&gt; ite = configAttributes.iterator();</span><br><span class="line">        log.info(<span class="string">&quot;[决策管理器]:用户 &#123;&#125; 拥有的权限 - &#123;&#125;&quot;</span>, authentication.getName(), authentication.getAuthorities());</span><br><span class="line">        <span class="keyword">while</span> (ite.hasNext()) &#123;</span><br><span class="line">            ConfigAttribute neededAuthority = ite.next();</span><br><span class="line">            String neededAuthorityStr = neededAuthority.getAttribute();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority existingAuthority : authentication.getAuthorities()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (neededAuthorityStr.equals(existingAuthority.getAuthority())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[决策管理器]:用户 &#123;&#125; 没有访问资源 &#123;&#125; 的权限!&quot;</span>, authentication.getName(), ((FilterInvocation) resource).getRequestUrl());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;权限不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否支持 FilterInvocationSecurityMetadataSource 需要将这里的false改为true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置自定义鉴权过滤器-Oauth2FilterSecurityInterceptor-在-Spring-Security-过滤器链中的位置"><a href="#配置自定义鉴权过滤器-Oauth2FilterSecurityInterceptor-在-Spring-Security-过滤器链中的位置" class="headerlink" title="配置自定义鉴权过滤器 Oauth2FilterSecurityInterceptor 在 Spring Security 过滤器链中的位置"></a>配置自定义鉴权过滤器 <code>Oauth2FilterSecurityInterceptor</code> 在 Spring Security 过滤器链中的位置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fengxuechao.examples.auth.authorization.Oauth2AccessDecisionManager;</span><br><span class="line"><span class="keyword">import</span> com.fengxuechao.examples.auth.authorization.Oauth2FilterInvocationSecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> com.fengxuechao.examples.auth.authorization.Oauth2FilterSecurityInterceptor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager manager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Oauth2AccessDecisionManager accessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Oauth2FilterInvocationSecurityMetadataSource securityMetadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated();</span><br><span class="line">        http.addFilterAfter(createApiAuthenticationFilter(), FilterSecurityInterceptor.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API权限控制</span></span><br><span class="line"><span class="comment">     * 过滤器优先度在 FilterSecurityInterceptor 之后</span></span><br><span class="line"><span class="comment">     * spring-security 的默认过滤器列表见 https://docs.spring.io/spring-security/site/docs/5.0.0.M1/reference/htmlsingle/#ns-custom-filters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Oauth2FilterSecurityInterceptor <span class="title">createApiAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Oauth2FilterSecurityInterceptor interceptor = <span class="keyword">new</span> Oauth2FilterSecurityInterceptor();</span><br><span class="line">        interceptor.setAuthenticationManager(manager);</span><br><span class="line">        interceptor.setAccessDecisionManager(accessDecisionManager);</span><br><span class="line">        interceptor.setSecurityMetadataSource(securityMetadataSource);</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置用户权限"><a href="#配置用户权限" class="headerlink" title="配置用户权限"></a>配置用户权限</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.userdetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/5/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username, <span class="string">&quot;123456&quot;</span>, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;ROLE_USER&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="演示结果"><a href="#演示结果" class="headerlink" title="演示结果"></a>演示结果</h2><h3 id="用户拥有资源所需权限"><a href="#用户拥有资源所需权限" class="headerlink" title="用户拥有资源所需权限"></a>用户拥有资源所需权限</h3><p>请求：</p>
<figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8080/order/1</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">X-Application-Context</span><span class="punctuation">: </span>application:inMemory</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1; mode=block</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Expires</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>DENY</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>12</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 18 Jun 2019 01:50:48 GMT</span><br><span class="line"></span><br><span class="line">order id : 1</span><br><span class="line"></span><br><span class="line">Response code: 200; Time: 57ms; Content length: 12 bytes</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-06-18 09:50:48.955  INFO 5288 --- [nio-8080-exec-3] .f.e.a.a.Oauth2FilterSecurityInterceptor : Oauth2FilterSecurityInterceptor doFilter</span><br><span class="line">2019-06-18 09:50:48.955 DEBUG 5288 --- [nio-8080-exec-3] .f.e.a.a.Oauth2FilterSecurityInterceptor : Secure object: FilterInvocation: URL: &#x2F;order&#x2F;1; Attributes: [ROLE_USER]</span><br><span class="line">2019-06-18 09:50:48.956 DEBUG 5288 --- [nio-8080-exec-3] .f.e.a.a.Oauth2FilterSecurityInterceptor : Previously Authenticated: org.springframework.security.oauth2.provider.OAuth2Authentication@f5aeefea: Principal: org.springframework.security.core.userdetails.User@36ebcb: Username: user; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: remoteAddress&#x3D;127.0.0.1, tokenType&#x3D;bearertokenValue&#x3D;&lt;TOKEN&gt;; Granted Authorities: ROLE_USER</span><br><span class="line">2019-06-18 09:50:48.956  INFO 5288 --- [nio-8080-exec-3] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:开始判断请求 &#x2F;order&#x2F;1 需要的权限</span><br><span class="line">2019-06-18 09:50:48.956  INFO 5288 --- [nio-8080-exec-3] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:请求 &#x2F;order&#x2F;1 需要的权限 - [ROLE_USER]</span><br><span class="line">2019-06-18 09:50:48.956  INFO 5288 --- [nio-8080-exec-3] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:用户 user 拥有的权限 - [ROLE_USER]</span><br><span class="line">2019-06-18 09:50:48.956 DEBUG 5288 --- [nio-8080-exec-3] .f.e.a.a.Oauth2FilterSecurityInterceptor : Authorization successful</span><br><span class="line">2019-06-18 09:50:48.957 DEBUG 5288 --- [nio-8080-exec-3] .f.e.a.a.Oauth2FilterSecurityInterceptor : RunAsManager did not change Authentication object</span><br></pre></td></tr></table></figure>

<h3 id="用户没有资源所需权限"><a href="#用户没有资源所需权限" class="headerlink" title="用户没有资源所需权限"></a>用户没有资源所需权限</h3><p>请求：</p>
<figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8080/order/1</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">403</span> </span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">X-XSS-Protection</span><span class="punctuation">: </span>1; mode=block</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>DENY</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 18 Jun 2019 01:44:49 GMT</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;error&quot;: &quot;access_denied&quot;,</span><br><span class="line">  &quot;error_description&quot;: &quot;权限不足!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 403; Time: 35ms; Content length: 53 bytes</span><br></pre></td></tr></table></figure>

<p>日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-06-18 09:44:44.684  INFO 10624 --- [nio-8080-exec-2] .f.e.a.a.Oauth2FilterSecurityInterceptor : Oauth2FilterSecurityInterceptor doFilter</span><br><span class="line">2019-06-18 09:44:44.685 DEBUG 10624 --- [nio-8080-exec-2] .f.e.a.a.Oauth2FilterSecurityInterceptor : Public object - authentication not attempted</span><br><span class="line">2019-06-18 09:44:49.448  INFO 10624 --- [nio-8080-exec-6] .f.e.a.a.Oauth2FilterSecurityInterceptor : Oauth2FilterSecurityInterceptor doFilter</span><br><span class="line">2019-06-18 09:44:49.449 DEBUG 10624 --- [nio-8080-exec-6] .f.e.a.a.Oauth2FilterSecurityInterceptor : Secure object: FilterInvocation: URL: &#x2F;order&#x2F;1; Attributes: [ROLE_ADMIN]</span><br><span class="line">2019-06-18 09:44:49.449 DEBUG 10624 --- [nio-8080-exec-6] .f.e.a.a.Oauth2FilterSecurityInterceptor : Previously Authenticated: org.springframework.security.oauth2.provider.OAuth2Authentication@22d262ad: Principal: org.springframework.security.core.userdetails.User@36ebcb: Username: user; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_USER; Credentials: [PROTECTED]; Authenticated: true; Details: remoteAddress&#x3D;127.0.0.1, tokenType&#x3D;bearertokenValue&#x3D;&lt;TOKEN&gt;; Granted Authorities: ROLE_USER</span><br><span class="line">2019-06-18 09:44:49.450  INFO 10624 --- [nio-8080-exec-6] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:开始判断请求 &#x2F;order&#x2F;1 需要的权限</span><br><span class="line">2019-06-18 09:44:49.450  INFO 10624 --- [nio-8080-exec-6] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:请求 &#x2F;order&#x2F;1 需要的权限 - [ROLE_ADMIN]</span><br><span class="line">2019-06-18 09:44:49.450  INFO 10624 --- [nio-8080-exec-6] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:用户 user 拥有的权限 - [ROLE_USER]</span><br><span class="line">2019-06-18 09:44:49.451  INFO 10624 --- [nio-8080-exec-6] c.f.e.a.a.Oauth2AccessDecisionManager    : [决策管理器]:用户 user 没有访问资源 &#x2F;order&#x2F;1 的权限!</span><br></pre></td></tr></table></figure>

<p>返回结果和日志符合期望结果</p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="http://www.spring4all.com/article/422">http://www.spring4all.com/article/422</a></p>
]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合ES的JavaRestClient</title>
    <url>/2019/07/24/SpringBoot%E6%95%B4%E5%90%88ES%E7%9A%84JavaRestClient/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>首先明确一点，SpringBoot自带的ES模板，不建议使用，建议使用Rest Client。如果业务简单，且无特殊要求，可以使用SpringBoot的模板ElasticsearchRepository来搞定。这个非常简单，这里不作介绍</p>
<blockquote>
<p>ElasticsearchRepository</p>
<ul>
<li>优点： 简单，SpringBoot无缝对接，配置简单</li>
<li>缺点： 基于即将废弃的TransportClient， 不能支持复杂的业务</li>
</ul>
</blockquote>
<h2 id="2-使用-Spring-的-IOC-管理-ES-的连接客户端"><a href="#2-使用-Spring-的-IOC-管理-ES-的连接客户端" class="headerlink" title="2. 使用 Spring 的 IOC 管理 ES 的连接客户端"></a>2. 使用 Spring 的 IOC 管理 ES 的连接客户端</h2><p>步骤：</p>
<ol>
<li>配置ES节点</li>
<li>配置Rest Client</li>
<li>配置Rest High Level Client</li>
<li>使用IOC注入</li>
</ol>
<p>根据我从其他网站上查询的资料，Rest Client是长连接，而且内部有默认的线程池管理，因此一般无需自定义线程池管理连接。如果不对请指正。</p>
<p>基于以上结论。模仿 <code>spring-boot-autoconfigure</code> 先把连接点全部配置到配置文件中.</p>
<h3 id="2-1-配置-maven-依赖"><a href="#2-1-配置-maven-依赖" class="headerlink" title="2.1. 配置 maven 依赖"></a>2.1. 配置 maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.1.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-编写配置类"><a href="#2-2-编写配置类" class="headerlink" title="2.2. 编写配置类"></a>2.2. 编写配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.awifi.capacity.admin.statistic.elasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration properties for Elasticsearch.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hostAndPortList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.awifi.capacity.admin.statistic.elasticsearch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.AuthScope;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.auth.UsernamePasswordCredentials;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.CredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.BasicCredentialsProvider;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.nio.client.HttpAsyncClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.Client;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Client.class, RestHighLevelClient.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ElasticsearchProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchConfiguration</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(ElasticsearchConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Closeable closeable;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchProperties properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Elasticsearch RestHighLevelClient</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;restHighLevelClient&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">        List&lt;HttpHost&gt; list = createHttpHost();</span><br><span class="line">        HttpHost[] array = list.toArray(<span class="keyword">new</span> HttpHost[list.size()]);</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(array);</span><br><span class="line">        <span class="comment">//es账号密码设置</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getUsername())) &#123;</span><br><span class="line">            String username = properties.getUsername();</span><br><span class="line">            String password = properties.getPassword();</span><br><span class="line">            UsernamePasswordCredentials usernamePasswordCredentials = <span class="keyword">new</span> UsernamePasswordCredentials(username, password);</span><br><span class="line">            credentialsProvider.setCredentials(AuthScope.ANY, usernamePasswordCredentials);</span><br><span class="line">            builder.setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 这里可以设置一些参数，比如cookie存储、代理等等</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> httpClientBuilder</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;</span><br><span class="line">                    httpClientBuilder.disableAuthCaching();</span><br><span class="line">                    <span class="keyword">return</span> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// RestHighLevelClient实例需要Rest low-level client builder构建</span></span><br><span class="line">        RestHighLevelClient restHighLevelClient = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">        closeable = restHighLevelClient;</span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件es信息构建 HttpHost 列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HttpHost&gt; <span class="title">createHttpHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; hostAndPortList = properties.getHostAndPortList();</span><br><span class="line">        <span class="keyword">if</span> (hostAndPortList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;必须配置elasticsearch节点信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;HttpHost&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(hostAndPortList.size());</span><br><span class="line">        <span class="keyword">for</span> (String s : hostAndPortList) &#123;</span><br><span class="line">            String[] hostAndPortArray = s.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            String hostname = hostAndPortArray[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> port = Integer.parseInt(hostAndPortArray[<span class="number">1</span>]);</span><br><span class="line">            list.add(<span class="keyword">new</span> HttpHost(hostname, port));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当不再需要时，需要关闭高级客户端实例，以便它所使用的所有资源以及底层的http客户端实例及其线程得到正确释放。</span></span><br><span class="line"><span class="comment">     * 通过close方法来完成，该方法将关闭内部的RestClient实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.closeable != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Closing Elasticsearch client&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.closeable.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodError ex) &#123;</span><br><span class="line">                    <span class="comment">// Earlier versions of Elasticsearch had a different method name</span></span><br><span class="line">                    ReflectionUtils.invokeMethod(</span><br><span class="line">                            ReflectionUtils.findMethod(Closeable.class, <span class="string">&quot;close&quot;</span>),</span><br><span class="line">                            <span class="keyword">this</span>.closeable);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">                    logger.error(<span class="string">&quot;Error closing Elasticsearch client: &quot;</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-在-application-properties-文件中配置-es-集群信息"><a href="#2-3-在-application-properties-文件中配置-es-集群信息" class="headerlink" title="2.3. 在 application.properties 文件中配置 es 集群信息"></a>2.3. 在 application.properties 文件中配置 es 集群信息</h3><p>application.properties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ES 配置</span></span><br><span class="line"><span class="string">elasticsearch.hostAndPortList[0]=192.168.200.19:9200</span></span><br><span class="line"><span class="string">elasticsearch.username=</span></span><br><span class="line"><span class="string">elasticsearch.password=</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-单元测试"><a href="#2-4-单元测试" class="headerlink" title="2.4. 单元测试"></a>2.4. 单元测试</h3>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot校验框架</title>
    <url>/2021/06/08/SpringBoot%E6%A0%A1%E9%AA%8C%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="http://www.imooc.com/article/316995">http://www.imooc.com/article/316995</a></p>
</blockquote>
<p>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。</p>
<p>最普通的做法就像下面这样。我们通过 <code>if/else</code> 语句对请求的每一个参数一一校验。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;PersonRequest&gt; <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> PersonRequest personRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (personRequest.getClassId() == <span class="keyword">null</span></span><br><span class="line">                || personRequest.getName() == <span class="keyword">null</span></span><br><span class="line">                || !Pattern.matches(<span class="string">&quot;(^Man$|^Woman$|^UGM$)&quot;</span>, personRequest.getSex())) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(personRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的代码，小伙伴们在日常开发中一定不少见，很多开源项目都是这样对请求入参做校验的。</p>
<p>但是，不太建议这样来写，这样的代码明显违背了 <strong>单一职责原则</strong>。大量的非业务代码混杂在业务代码中，非常难以维护，还会导致业务层代码冗杂！</p>
<p>实际上，我们是可以通过一些简单的手段对上面的代码进行改进的！这也是本文主要要介绍的内容！</p>
<p>废话不多说！下面我会结合自己在项目中的实际使用经验，通过实例程序演示如何在 SpringBoot 程序中优雅地的进行参数验证(普通的 Java 程序同样适用)。</p>
<p>不了解的朋友一定要好好看一下，学完马上就可以实践到项目上去。</p>
<p>并且，本文示例项目使用的是目前最新的 Spring Boot 版本 2.4.5!（截止到 2021-04-21）</p>
<p>示例项目源代码地址：github.com/CodingDocs/springboot-guide/tree/master/source-code/bean-validation-demo</p>
<h2 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h2><p>如果开发普通 Java 程序的的话，你需要可能需要像下面这样依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.9.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.glassfish.web<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不过，相信大家都是使用的 Spring Boot 框架来做开发。</p>
<p>基于 Spring Boot 的话，就比较简单了，只需要给项目添加上 <code>spring-boot-starter-web</code> 依赖就够了，它的子依赖包含了我们所需要的东西。另外，我们的示例项目中还使用到了 Lombok。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/608807950001a11805540409-20210608162556698.jpg" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是！！！ Spring Boot 2.3 1 之后，<code>spring-boot-starter-validation</code> 已经不包括在了 <code>spring-boot-starter-web</code> 中，需要我们手动加上！</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/608807970001718b19801193-20210608162556753.jpg" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="验证-Controller-的输入"><a href="#验证-Controller-的输入" class="headerlink" title="验证 Controller 的输入"></a>验证 Controller 的输入</h2><h3 id="验证请求体"><a href="#验证请求体" class="headerlink" title="验证请求体"></a>验证请求体</h3><p>验证请求体即使验证被 <code>@RequestBody</code> 注解标记的方法参数。</p>
<p><strong><code>PersonController</code></strong></p>
<p>我们在需要验证的参数上加上了<code>@Valid</code>注解，如果验证失败，它将抛出<code>MethodArgumentNotValidException</code>。默认情况下，Spring 会将此异常转换为 HTTP Status 400（错误请求）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;PersonRequest&gt; <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> PersonRequest personRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(personRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>PersonRequest</code></strong></p>
<p>我们使用校验注解对请求的参数进行校验！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;classId 不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String classId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size(max = 33)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;name 不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;(^Man$|^Woman$|^UGM$)&quot;, message = &quot;sex 值不在可选范围&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;sex 不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正则表达式说明：</p>
<ul>
<li><code>^string</code> : 匹配以 string 开头的字符串</li>
<li><code>string$</code> ：匹配以 string 结尾的字符串</li>
<li><code>^string$</code> ：精确匹配 string 字符串</li>
<li><code>(^Man$|^Woman$|^UGM$)</code> : 值只能在 Man,Woman,UGM 这三个值中选择</li>
</ul>
<p><strong><code>GlobalExceptionHandler</code></strong></p>
<p>自定义异常处理器可以帮助我们捕获异常，并进行一些简单的处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(assignableTypes = &#123;PersonController.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, String&gt;&gt; handleValidationExceptions(</span><br><span class="line">            MethodArgumentNotValidException ex) &#123;</span><br><span class="line">        Map&lt;String, String&gt; errors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ex.getBindingResult().getAllErrors().forEach((error) -&gt; &#123;</span><br><span class="line">            String fieldName = ((FieldError) error).getField();</span><br><span class="line">            String errorMessage = error.getDefaultMessage();</span><br><span class="line">            errors.put(fieldName, errorMessage);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试验证</strong></p>
<p>下面我通过 <code>MockMvc</code> 模拟请求 <code>Controller</code> 的方式来验证是否生效。当然了，你也可以通过 <code>Postman</code> 这种工具来验证。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证出现参数不合法的情况抛出异常并且可以正确被捕获</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_check_person_value</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PersonRequest personRequest = PersonRequest.builder().sex(<span class="string">&quot;Man22&quot;</span>)</span><br><span class="line">                .classId(<span class="string">&quot;82938390&quot;</span>).build();</span><br><span class="line">        mockMvc.perform(post(<span class="string">&quot;/api/personRequest&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(personRequest)))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;sex&quot;</span>).value(<span class="string">&quot;sex 值不在可选范围&quot;</span>))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;name&quot;</span>).value(<span class="string">&quot;name 不能为空&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用 <code>Postman</code> 验证</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/608807980001efe108610589-20210608162556897.jpg" alt="img"></p>
<h3 id="验证请求参数"><a href="#验证请求参数" class="headerlink" title="验证请求参数"></a>验证请求参数</h3><p>验证请求参数（Path Variables 和 Request Parameters）即是验证被 <code>@PathVariable</code> 以及 <code>@RequestParam</code> 标记的方法参数。</p>
<p><strong><code>PersonController</code></strong></p>
<p><strong>一定一定不要忘记在类上加上 <code>Validated</code> 注解了，这个参数可以告诉 Spring 去校验方法参数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/persons&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Integer&gt; <span class="title">getPersonByID</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="meta">@Max(value = 5, message = &quot;超过 id 的范围了&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">getPersonByName</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestParam(&quot;name&quot;)</span> <span class="meta">@Size(max = 6, message = &quot;超过 name 的范围了&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok().body(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>ExceptionHandler</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line"><span class="function">ResponseEntity&lt;String&gt; <span class="title">handleConstraintViolationException</span><span class="params">(ConstraintViolationException e)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_check_path_variable</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(get(<span class="string">&quot;/api/person/6&quot;</span>)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">      .andExpect(status().isBadRequest())</span><br><span class="line">      .andExpect(content().string(<span class="string">&quot;getPersonByID.id: 超过 id 的范围了&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_check_request_param_value2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(put(<span class="string">&quot;/api/person&quot;</span>)</span><br><span class="line">                    .param(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;snailclimbsnailclimb&quot;</span>)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON))</span><br><span class="line">      .andExpect(status().isBadRequest())</span><br><span class="line">      .andExpect(content().string(<span class="string">&quot;getPersonByName.name: 超过 name 的范围了&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用 <code>Postman</code> 验证</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/6088079800014eab08330472-20210608162556919.jpg" alt="img"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/608807990001847608740443-20210608162557043.jpg" alt="img"></p>
<h2 id="验证-Service-中的方法"><a href="#验证-Service-中的方法" class="headerlink" title="验证 Service 中的方法"></a>验证 Service 中的方法</h2><p>我们还可以验证任何 Spring Bean 的输入，而不仅仅是 <code>Controller</code> 级别的输入。通过使用<code>@Validated</code>和<code>@Valid</code>注释的组合即可实现这一需求！</p>
<p>一般情况下，我们在项目中也更倾向于使用这种方案。</p>
<p><strong>一定一定不要忘记在类上加上 <code>Validated</code> 注解了，这个参数可以告诉 Spring 去校验方法参数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validatePersonRequest</span><span class="params">(<span class="meta">@Valid</span> PersonRequest personRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试验证：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_throw_exception_when_person_request_is_not_valid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PersonRequest personRequest = PersonRequest.builder().sex(<span class="string">&quot;Man22&quot;</span>)</span><br><span class="line">                    .classId(<span class="string">&quot;82938390&quot;</span>).build();</span><br><span class="line">            service.validatePersonRequest(personRequest);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConstraintViolationException e) &#123;</span><br><span class="line">           <span class="comment">// 输出异常信息</span></span><br><span class="line">            e.getConstraintViolations().forEach(constraintViolation -&gt; System.out.println(constraintViolation.getMessage()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name 不能为空</span><br><span class="line">sex 值不在可选范围</span><br></pre></td></tr></table></figure>

<h2 id="Validator-编程方式手动进行参数验证"><a href="#Validator-编程方式手动进行参数验证" class="headerlink" title="Validator 编程方式手动进行参数验证"></a>Validator 编程方式手动进行参数验证</h2><p>某些场景下可能会需要我们手动校验并获得校验结果。</p>
<p>我们通过 <code>Validator</code> 工厂类获得的 <code>Validator</code> 示例。另外，如果是在 Spring Bean 中的话，还可以通过 <code>@Autowired</code> 直接注入的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Validator validate</span><br></pre></td></tr></table></figure>

<p>具体使用情况如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br><span class="line">Validator validator = factory.getValidator()</span><br><span class="line">PersonRequest personRequest = PersonRequest.builder().sex(<span class="string">&quot;Man22&quot;</span>)</span><br><span class="line">  .classId(<span class="string">&quot;82938390&quot;</span>).build();</span><br><span class="line">Set&lt;ConstraintViolation&lt;PersonRequest&gt;&gt; violations = validator.validate(personRequest);</span><br><span class="line"><span class="comment">// 输出异常信息</span></span><br><span class="line">violations.forEach(constraintViolation -&gt; System.out.println(constraintViolation.getMessage()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex 值不在可选范围</span><br><span class="line">name 不能为空</span><br></pre></td></tr></table></figure>

<h2 id="自定以-Validator-实用"><a href="#自定以-Validator-实用" class="headerlink" title="自定以 Validator(实用)"></a>自定以 Validator(实用)</h2><p>如果自带的校验注解无法满足你的需求的话，你还可以自定义实现注解。</p>
<h3 id="案例一-校验特定字段的值是否在可选范围"><a href="#案例一-校验特定字段的值是否在可选范围" class="headerlink" title="案例一:校验特定字段的值是否在可选范围"></a>案例一:校验特定字段的值是否在可选范围</h3><p>比如我们现在多了这样一个需求：<code>PersonRequest</code> 类多了一个 <code>Region</code> 字段，<code>Region</code> 字段只能是<code>China</code>、<code>China-Taiwan</code>、<code>China-HongKong</code>这三个中的一个。</p>
<p><strong>第一步，你需要创建一个注解 <code>Region</code>。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = RegionValidator.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Region &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;Region 值不在可选范围内&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二步，你需要实现 <code>ConstraintValidator</code>接口，并重写<code>isValid</code> 方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">Region</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Object&gt; regions = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        regions.add(<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        regions.add(<span class="string">&quot;China-Taiwan&quot;</span>);</span><br><span class="line">        regions.add(<span class="string">&quot;China-HongKong&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> regions.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在你就可以使用这个注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Region</span></span><br><span class="line"><span class="keyword">private</span> String region;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonRequest personRequest = PersonRequest.builder()</span><br><span class="line"> 	 .region(<span class="string">&quot;Shanghai&quot;</span>).build();</span><br><span class="line">mockMvc.perform(post(<span class="string">&quot;/api/person&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(personRequest)))</span><br><span class="line">  .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;region&quot;</span>).value(<span class="string">&quot;Region 值不在可选范围内&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><strong>使用 <code>Postman</code> 验证</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/6088079a0001ae5808670574-20210608162557178.jpg" alt="img"></p>
<h3 id="案例二-校验电话号码"><a href="#案例二-校验电话号码" class="headerlink" title="案例二:校验电话号码"></a>案例二:校验电话号码</h3><p>校验我们的电话号码是否合法，这个可以通过正则表达式来做，相关的正则表达式都可以在网上搜到，你甚至可以搜索到针对特定运营商电话号码段的正则表达式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PhoneNumber.java</span><br><span class="line">@Documented</span><br><span class="line">@Constraint(validatedBy &#x3D; PhoneNumberValidator.class)</span><br><span class="line">@Target(&#123;FIELD, PARAMETER&#125;)</span><br><span class="line">@Retention(RUNTIME)</span><br><span class="line">public @interface PhoneNumber &#123;</span><br><span class="line">    String message() default &quot;Invalid phone number&quot;;</span><br><span class="line">    Class[] groups() default &#123;&#125;;</span><br><span class="line">    Class[] payload() default &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PhoneNumberValidator.java</span><br><span class="line">public class PhoneNumberValidator implements ConstraintValidator&lt;PhoneNumber, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isValid(String phoneField, ConstraintValidatorContext context) &#123;</span><br><span class="line">        if (phoneField &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F; can be null</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;  大陆手机号码11位数，匹配格式：前三位固定格式+后8位任意数</span><br><span class="line">        &#x2F;&#x2F; ^ 匹配输入字符串开始的位置</span><br><span class="line">        &#x2F;&#x2F; \d 匹配一个或多个数字，其中 \ 要转义，所以是 \\d</span><br><span class="line">        &#x2F;&#x2F; $ 匹配输入字符串结尾的位置</span><br><span class="line">        String regExp &#x3D; &quot;^[1]((3[0-9])|(4[5-9])|(5[0-3,5-9])|([6][5,6])|(7[0-9])|(8[0-9])|(9[1,8,9]))\\d&#123;8&#125;$&quot;;</span><br><span class="line">        return phoneField.matches(regExp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搞定，我们现在就可以使用这个注解了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PhoneNumber(message = &quot;phoneNumber 格式不正确&quot;)</span></span><br><span class="line"><span class="meta">@NotNull(message = &quot;phoneNumber 不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String phoneNumber;</span><br></pre></td></tr></table></figure>

<p><strong>通过测试验证</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonRequest personRequest = PersonRequest.builder()</span><br><span class="line">  	.phoneNumber(<span class="string">&quot;1816313815&quot;</span>).build();</span><br><span class="line">mockMvc.perform(post(<span class="string">&quot;/api/person&quot;</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .content(objectMapper.writeValueAsString(personRequest)))</span><br><span class="line">  .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">&quot;phoneNumber&quot;</span>).value(<span class="string">&quot;phoneNumber 格式不正确&quot;</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/6088079a00019ccb08820559-20210608162557277.jpg" alt="img"></p>
<h2 id="使用验证组"><a href="#使用验证组" class="headerlink" title="使用验证组"></a>使用验证组</h2><p>验证组我们基本是不会用到的，也不太建议在项目中使用，理解起来比较麻烦，写起来也比较麻烦。简单了解即可！</p>
<p>当我们对对象操作的不同方法有不同的验证规则的时候才会用到验证组。</p>
<p>我写一个简单的例子，你们就能看明白了！</p>
<p><strong>1.先创建两个接口，代表不同的验证组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AddPersonGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeletePersonGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.使用验证组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当验证组为 DeletePersonGroup 的时候 group 字段不能为空</span></span><br><span class="line">    <span class="meta">@NotNull(groups = DeletePersonGroup.class)</span></span><br><span class="line">    <span class="comment">// 当验证组为 AddPersonGroup 的时候 group 字段需要为空</span></span><br><span class="line">    <span class="meta">@Null(groups = AddPersonGroup.class)</span></span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Validated(AddPersonGroup.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validatePersonGroupForAdd</span><span class="params">(<span class="meta">@Valid</span> Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Validated(DeletePersonGroup.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validatePersonGroupForDelete</span><span class="params">(<span class="meta">@Valid</span> Person person)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过测试验证：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = ConstraintViolationException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_check_person_with_groups</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setGroup(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">    service.validatePersonGroupForAdd(person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test(expected = ConstraintViolationException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">should_check_person_with_groups2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    service.validatePersonGroupForDelete(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证组使用下来的体验就是有点反模式的感觉，让代码的可维护性变差了！尽量不要使用！</p>
<h2 id="常用校验注解总结"><a href="#常用校验注解总结" class="headerlink" title="常用校验注解总结"></a>常用校验注解总结</h2><p><code>JSR303</code> 定义了 <code>Bean Validation</code>（校验）的标准 <code>validation-api</code>，并没有提供实现。<code>Hibernate Validation</code>是对这个规范/规范的实现 <code>hibernate-validator</code>，并且增加了 <code>@Email</code>、<code>@Length</code>、<code>@Range</code> 等注解。<code>Spring Validation</code> 底层依赖的就是<code>Hibernate Validation</code>。</p>
<p><strong>JSR 提供的校验注解</strong>:</p>
<ul>
<li><code>@Null</code> 被注释的元素必须为 null</li>
<li><code>@NotNull</code> 被注释的元素必须不为 null</li>
<li><code>@AssertTrue</code> 被注释的元素必须为 true</li>
<li><code>@AssertFalse</code> 被注释的元素必须为 false</li>
<li><code>@Min(value)</code> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@Max(value)</code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@DecimalMin(value)</code> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</li>
<li><code>@DecimalMax(value)</code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</li>
<li><code>@Size(max=, min=)</code> 被注释的元素的大小必须在指定的范围内</li>
<li><code>@Digits (integer, fraction)</code> 被注释的元素必须是一个数字，其值必须在可接受的范围内</li>
<li><code>@Past</code> 被注释的元素必须是一个过去的日期</li>
<li><code>@Future</code> 被注释的元素必须是一个将来的日期</li>
<li><code>@Pattern(regex=,flag=)</code> 被注释的元素必须符合指定的正则表达式</li>
</ul>
<p><strong>Hibernate Validator 提供的校验注解</strong>：</p>
<ul>
<li><code>@NotBlank(message =)</code> 验证字符串非 null，且长度必须大于 0</li>
<li><code>@Email</code> 被注释的元素必须是电子邮箱地址</li>
<li><code>@Length(min=,max=)</code> 被注释的字符串的大小必须在指定的范围内</li>
<li><code>@NotEmpty</code> 被注释的字符串的必须非空</li>
<li><code>@Range(min=,max=,message=)</code> 被注释的元素必须在合适的范围内</li>
</ul>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>经常有小伙伴问到：“<code>@NotNull</code> 和 <code>@Column(nullable = false)</code> 两者有什么区别？”</p>
<p>我这里简单回答一下：</p>
<ul>
<li><code>@NotNull</code>是 JSR 303 Bean 验证批注,它与数据库约束本身无关。</li>
<li><code>@Column(nullable = false)</code> : 是 JPA 声明列为非空的方法。</li>
</ul>
<p>总结来说就是即前者用于验证，而后者则用于指示数据库创建表的时候对表的约束。</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring boot</tag>
        <tag>spring</tag>
        <tag>validation</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成jasypt实现配置加密</title>
    <url>/2021/06/02/SpringBoot%E9%9B%86%E6%88%90jasypt%E5%AE%9E%E7%8E%B0%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="https://blog.lqdev.cn/2019/05/08/springboot/chapter-thirty-seven/">https://blog.lqdev.cn/2019/05/08/springboot/chapter-thirty-seven/</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>近期在进行项目安全方面评审时，质量管理部门有提出需要对配置文件中的敏高文件进行加密处理，避免了信息泄露问题。想想前段时间某公司上传github时，把相应的生产数据库明文密码也一并上传了，导致了相应的数据泄露问题。也确实，大部分项目无论开发、测试还是生产环境，相关的敏高信息都是明文存储的，也是一大安全隐患呀。所以今天来说说，如何对配置文件进行加密操作。</p>
</blockquote>
<h2 id="一点知识"><a href="#一点知识" class="headerlink" title="一点知识"></a>一点知识</h2><h3 id="何为Jasypt"><a href="#何为Jasypt" class="headerlink" title="何为Jasypt"></a>何为Jasypt</h3><blockquote>
<p><a href="http://jasypt.org/">Jasypt</a>是一个Java库，允许开发人员以很简单的方式添加基本加密功能，而无需深入研究加密原理。利用它可以实现高安全性的，基于标准的加密技术，无论是单向和双向加密。加密密码，文本，数字，二进制文件。</p>
</blockquote>
<ol>
<li>高安全性的，基于标准的加密技术，无论是单向和双向加密。加密密码，文本，数字，二进制文件…</li>
<li>集成Hibernate的。</li>
<li>可集成到Spring应用程序中，与Spring Security集成。</li>
<li>集成的能力，用于加密的应用程序（即数据源）的配置。</li>
<li>特定功能的高性能加密的multi-processor/multi-core系统。</li>
<li>与任何JCE提供者使用开放的API</li>
</ol>
<p>官网：<a href="http://www.jasypt.org/">http://www.jasypt.org/</a></p>
<h2 id="SpringBoot集成Jasypt"><a href="#SpringBoot集成Jasypt" class="headerlink" title="SpringBoot集成Jasypt"></a>SpringBoot集成Jasypt</h2><blockquote>
<p><code>SpringBoot</code>中集成<code>Jasypt</code>，可直接使用开源的<code>jasypt-spring-boot</code>直接集成，使用简单方便。</p>
</blockquote>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/WTvOjzNR7Xt5.png" alt="mark"></p>
<h3 id="常规集成示例"><a href="#常规集成示例" class="headerlink" title="常规集成示例"></a>常规集成示例</h3><ol>
<li>引入pom依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置盐值和修改相应需要加密的配置参数</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 需要解密的地方，使用ENC()进行包裹处理</span><br><span class="line">okong.name&#x3D;ENC(Xj7Ykn2O0Hni&#x2F;tN4oojPfw&#x3D;&#x3D;)</span><br><span class="line"></span><br><span class="line"># 设置盐值，生产环境中，切记不要直接进行设置，可通过环境变量、命令行等形式进行设置。</span><br><span class="line">jasypt.encryptor.password&#x3D;lqdev</span><br></pre></td></tr></table></figure>

<p>简单来说，就是在需要加密的值使用<code>ENC(</code>和<code>)</code>进行包裹，即：<code>ENC(密文)</code>。若想避免参数冲突，可修改前缀和后缀，可以直接使用<code>jasypt.encryptor.property.prefix</code>和<code>jasypt.encryptor.property.suffix</code>进行修改即可。</p>
<p><strong>之后想往常一样使用<code>@Value(&quot;$&#123;&#125;&quot;)</code>即可。</strong></p>
<h3 id="包含xml引入时"><a href="#包含xml引入时" class="headerlink" title="包含xml引入时"></a>包含xml引入时</h3><blockquote>
<p>在一些使用<code>javaBean</code>配置和<code>xml</code>两种混合模式时，使用第一种配置时，<code>xml</code>参数并未替换。此时看了官方文档，可以使用另一方式进行配置即可。</p>
</blockquote>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/bPoPUpE8uk4A.png" alt="官方说明"></p>
<ol>
<li><p>引入pom依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.ulisesbocchio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasypt-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 其实就是不进行自动配置而已。</p>
</li>
<li><p>启动类启动方式修改。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JasyptApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SpringApplication.run(JasyptApplication.class, args);</span></span><br><span class="line">    <span class="comment">// 使用自定义环境变量 实现一些特殊场景下的加密字符解密操作</span></span><br><span class="line">    <span class="comment">// 若无额外的xml引入文件需要解密时，可直接使用SpringApplication.run(JasyptApplication.class, args);即可</span></span><br><span class="line">    <span class="comment">// 若想在引入的xml中使用，需要加入环境变量，如以下模式</span></span><br><span class="line">    <span class="keyword">new</span> SpringApplicationBuilder().environment(<span class="keyword">new</span> StandardEncryptableEnvironment())</span><br><span class="line">    .sources(JasyptApplication.class).run(args);</span><br><span class="line">    log.info(<span class="string">&quot;spring-boot-jasypt-chapter37服务启动!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="其他配置项"><a href="#其他配置项" class="headerlink" title="其他配置项"></a>其他配置项</h3><table>
<thead>
<tr>
<th>Key</th>
<th>Required</th>
<th>Default Value</th>
</tr>
</thead>
<tbody><tr>
<td>jasypt.encryptor.password</td>
<td><strong>True</strong></td>
<td>盐值，根密码</td>
</tr>
<tr>
<td>jasypt.encryptor.algorithm</td>
<td>False</td>
<td>PBEWithMD5AndDES</td>
</tr>
<tr>
<td>jasypt.encryptor.keyObtentionIterations</td>
<td>False</td>
<td>1000</td>
</tr>
<tr>
<td>jasypt.encryptor.poolSize</td>
<td>False</td>
<td>1</td>
</tr>
<tr>
<td>jasypt.encryptor.providerName</td>
<td>False</td>
<td>SunJCE</td>
</tr>
<tr>
<td>jasypt.encryptor.providerClassName</td>
<td>False</td>
<td>null</td>
</tr>
<tr>
<td>jasypt.encryptor.saltGeneratorClassname</td>
<td>False</td>
<td>org.jasypt.salt.RandomSaltGenerator</td>
</tr>
<tr>
<td>jasypt.encryptor.ivGeneratorClassname</td>
<td>False</td>
<td>org.jasypt.salt.NoOpIVGenerator</td>
</tr>
<tr>
<td>jasypt.encryptor.stringOutputType</td>
<td>False</td>
<td>base64</td>
</tr>
<tr>
<td>jasypt.encryptor.proxyPropertySources</td>
<td>False</td>
<td>false</td>
</tr>
</tbody></table>
<h2 id="运维说明"><a href="#运维说明" class="headerlink" title="运维说明"></a>运维说明</h2><p>为了方便运维人员对各类敏感密钥进行加密操作，提供了自动化脚本，方便生成相应的加密串。</p>
<h3 id="密钥（盐值）存储说明"><a href="#密钥（盐值）存储说明" class="headerlink" title="密钥（盐值）存储说明"></a>密钥（盐值）存储说明</h3><p>本身加解密过程都是通过<code>盐值</code>进行处理的，所以正常情况下<code>盐值</code>和<code>加密串</code>是分开存储的。**<code>盐值</code>应该放在<code>系统属性</code>、<code>命令行</code>或是<code>环境变量</code>来使用，而不是放在配置文件。**</p>
<h4 id="命令行示例"><a href="#命令行示例" class="headerlink" title="命令行示例"></a>命令行示例</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar --jasypt.encryptor.password=xxx &amp;</span><br></pre></td></tr></table></figure>

<h4 id="环境变量示例"><a href="#环境变量示例" class="headerlink" title="环境变量示例"></a>环境变量示例</h4><p>设置环境变量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profileexport JASYPT_PASSWORD = xxxx</span><br></pre></td></tr></table></figure>

<p>启动命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar --jasypt.encryptor.password=<span class="variable">$&#123;JASYPT_PASSWORD&#125;</span> &amp;</span><br></pre></td></tr></table></figure>

<h3 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h3><p>为了方便，简单编写了一个bat脚本方便使用。</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span>/p input=待加密的明文字符串：</span><br><span class="line"><span class="built_in">set</span>/p password=加密密钥(盐值)：</span><br><span class="line"><span class="built_in">echo</span> 加密中......</span><br><span class="line">java -cp jasypt-<span class="number">1</span>.<span class="number">9</span>.<span class="number">2</span>.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI  input=<span class="variable">%input%</span> password=<span class="variable">%password%</span> algorithm=PBEWithMD5AndDES</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：<code>jasypt-1.9.2.jar</code> 文件需要和bat脚本放在相同目录下。此包可直接在示例项目中直接下载。</strong></p>
<p>使用示例：</p>
<p><strong>注意：相应加密串，每次加密的结果是不同的。</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/568wfkAWA5Tl.png" alt="使用示例"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节主要简单介绍了如何使用<code>jasypt</code>对配置文件进行加密操作。一些其他高级应用，可以查看官方文档进行相关集成即可。集成起来相对来说比较简单，注意是要对<code>密码(盐值)</code>的管理，需要进行安全把控下，建议运维人员针对每个项目进行不一样的盐值操作，避免一个项目泄露了，造成其他关联项的信息泄露。安全无大小呀，还是谨慎为妙！</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://github.com/ulisesbocchio/jasypt-spring-boot">https://github.com/ulisesbocchio/jasypt-spring-boot</a></li>
<li><a href="http://www.jasypt.org/">http://www.jasypt.org/</a></li>
</ol>
]]></content>
      <categories>
        <category>java/spring</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>jasypt</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloudGateway</title>
    <url>/2021/04/07/SpringCloudGateway/</url>
    <content><![CDATA[<p>[TOC]</p>
<blockquote>
<p>转载于<a href="https://www.cnblogs.com/crazymakercircle/p/11704077.html">https://www.cnblogs.com/crazymakercircle/p/11704077.html</a></p>
</blockquote>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><h2 id="1-1-SpringCloud-Gateway-简介"><a href="#1-1-SpringCloud-Gateway-简介" class="headerlink" title="1.1 SpringCloud Gateway 简介"></a><strong>1.1</strong> SpringCloud Gateway 简介</h2><p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<p>SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p>
<p>Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p>
<p>提前声明：<strong>Spring Cloud Gateway 底层使用了高性能的通信框架Netty</strong>。</p>
<h2 id="1-2-SpringCloud-Gateway-特征"><a href="#1-2-SpringCloud-Gateway-特征" class="headerlink" title="1.2 SpringCloud Gateway 特征"></a><strong>1.2</strong> SpringCloud Gateway 特征</h2><p>SpringCloud官方，对SpringCloud Gateway 特征介绍如下：</p>
<p>（1）基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</p>
<p>（2）集成 Hystrix 断路器</p>
<p>（3）集成 Spring Cloud DiscoveryClient</p>
<p>（4）Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</p>
<p>（5）具备一些网关的高级功能：动态路由、限流、路径重写</p>
<p>从以上的特征来说，和Zuul的特征差别不大。SpringCloud Gateway和Zuul主要的区别，还是在底层的通信框架上。</p>
<p>简单说明一下上文中的三个术语：</p>
<p><strong>（</strong>1<strong>）</strong>Filter<strong>（过滤器）</strong>：</p>
<p>和Zuul的过滤器在概念上类似，可以使用它拦截和修改请求，并且对上游的响应，进行二次处理。过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。</p>
<p>（2）<strong>Route</strong>（路由）：</p>
<p>网关配置的基本组成模块，和Zuul的路由配置模块类似。一个<strong>Route模块</strong>由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。</p>
<p><strong>（</strong>3<strong>）</strong>Predicate<strong>（断言）</strong>：</p>
<p>这是一个 Java 8 的 Predicate，可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。<strong>断言的</strong>输入类型是一个 ServerWebExchange。</p>
<h2 id="1-3-SpringCloud-Gateway和架构"><a href="#1-3-SpringCloud-Gateway和架构" class="headerlink" title="1.3 SpringCloud Gateway和架构"></a><strong>1.3</strong> SpringCloud Gateway和架构</h2><p>Spring在2017年下半年迎来了Webflux，Webflux的出现填补了Spring在响应式编程上的空白，Webflux的响应式编程不仅仅是编程风格的改变，而且对于一系列的著名框架，都提供了响应式访问的开发包，比如Netty、Redis等等。</p>
<p>SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。<br><a href="https://upload-images.jianshu.io/upload_images/19816137-8758f092be21e6f7.gif?imageMogr2/auto-orient/strip"><img src="https://gitee.com/littlefxc/oss/raw/master/images/strip-20210407151947510.gif" alt="在这里插入图片描述"></a></p>
<h2 id="1-3-1-SpringCloud-Zuul的IO模型"><a href="#1-3-1-SpringCloud-Zuul的IO模型" class="headerlink" title="1.3.1 SpringCloud Zuul的IO模型"></a><strong>1.3.1</strong> SpringCloud Zuul的IO模型</h2><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。</p>
<p>大家知道，servlet由servlet container进行生命周期管理。container启动时构造servlet对象并调用servlet init()进行初始化；container关闭时调用servlet destory()销毁servlet；container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</p>
<p>弊端：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。<br><a href="https://upload-images.jianshu.io/upload_images/19816137-bb466f6b0135bb71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="https://gitee.com/littlefxc/oss/raw/master/images/1240-20210407151947526.jpeg" alt="在这里插入图片描述"></a></p>
<p>所以Springcloud Zuul 是基于servlet之上的一个阻塞式处理模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet阻塞式处理处理。所以Springcloud Zuul无法摆脱servlet模型的弊端。虽然Zuul 2.0开始，使用了Netty，并且已经有了大规模Zuul 2.0集群部署的成熟案例，但是，Springcloud官方已经没有集成改版本的计划了。</p>
<h2 id="1-3-2-Webflux-服务器"><a href="#1-3-2-Webflux-服务器" class="headerlink" title="1.3.2 Webflux 服务器"></a><strong>1.3.2</strong> Webflux 服务器</h2><p>Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。官方结构图：</p>
<p><a href="https://upload-images.jianshu.io/upload_images/19816137-dad0e43fc31f4536?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="https://gitee.com/littlefxc/oss/raw/master/images/1240-20210407151947542.jpeg" alt="在这里插入图片描述"></a></p>
<p>Webflux虽然可以兼容多个底层的通信框架，但是一般情况下，底层使用的还是Netty，毕竟，Netty是目前业界认可的最高性能的通信框架。而Webflux的Loop线程，正好就是著名的Reactor 模式IO处理模型的Reactor线程，如果使用的是高性能的通信框架Netty，这就是Netty的EventLoop线程。</p>
<p>关于Reactor线程模型，和Netty通信框架的知识，是Java程序员的重要、必备的内功，个中的原理，具体请参见尼恩编著的《Netty、Zookeeper、Redis高并发实战》一书，这里不做过多的赘述。</p>
<h2 id="1-3-3-Spring-Cloud-Gateway的处理流程"><a href="#1-3-3-Spring-Cloud-Gateway的处理流程" class="headerlink" title="1.3.3 Spring Cloud Gateway的处理流程"></a><strong>1.3.3</strong> Spring Cloud Gateway的处理流程</h2><p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。<br><a href="https://upload-images.jianshu.io/upload_images/19816137-eeedbd49be096c05?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="https://gitee.com/littlefxc/oss/raw/master/images/1240-20210407151947561.jpeg" alt="在这里插入图片描述"></a></p>
<h1 id="2-路由配置方式"><a href="#2-路由配置方式" class="headerlink" title="2 路由配置方式"></a>2 路由配置方式</h1><h2 id="2-1-基础URI路由配置方式"><a href="#2-1-基础URI路由配置方式" class="headerlink" title="2.1 基础URI路由配置方式"></a>2.1 基础URI路由配置方式</h2><p>如果请求的目标地址，是单个的URI资源路径，配置文件示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="string">-id:</span> <span class="string">url-proxy-1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://blog.csdn.net</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="string">-Path=/csdn</span></span><br></pre></td></tr></table></figure>

<p>各字段含义如下：</p>
<ul>
<li><p>id：我们自定义的路由 ID，保持唯一</p>
</li>
<li><p>uri：目标服务地址</p>
</li>
<li><p>predicates：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</p>
</li>
</ul>
<p>上面这段配置的意思是，配置了一个 id 为 url-proxy-1的URI代理规则，路由的规则为：</p>
<p>当访问地址<a href="http://localhost:8080/csdn/1.jsp%E6%97%B6%EF%BC%8C">http://localhost:8080/csdn/1.jsp时，</a></p>
<p>会路由到上游地址<a href="https://blog.csdn.net/1.jsp%E3%80%82">https://blog.csdn.net/1.jsp。</a></p>
<h2 id="2-2-基于代码的路由配置方式"><a href="#2-2-基于代码的路由配置方式" class="headerlink" title="2.2 基于代码的路由配置方式"></a>2.2 基于代码的路由配置方式</h2><p>转发功能同样可以通过代码来实现，我们可以在启动类 GateWayApplication 中添加方法 customRouteLocator() 来定制转发规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springcloud.gateway;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/csdn&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://blog.csdn.net&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在yaml配置文件中注销掉相关路由的配置，重启服务，访问链接：<a href="http://localhost:8080/">http://localhost:8080/</a> csdn， 可以看到和上面一样的页面，证明我们测试成功。</p>
<p>上面两个示例中 uri 都是指向了我的CSDN博客，在实际项目使用中可以将 uri 指向对外提供服务的项目地址，统一对外输出接口。</p>
<h2 id="2-3-和注册中心相结合的路由配置方式"><a href="#2-3-和注册中心相结合的路由配置方式" class="headerlink" title="2.3 和注册中心相结合的路由配置方式"></a>2.3 和注册中心相结合的路由配置方式</h2><p>在uri的schema协议部分为自定义的lb:类型，表示从微服务注册中心（如Eureka）订阅服务，并且进行服务的路由。</p>
<p>一个典型的示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="string">-id:</span> <span class="string">seckill-provider-route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://seckill-provider</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/seckill-provider/**</span></span><br><span class="line"></span><br><span class="line">      <span class="string">-id:</span> <span class="string">message-provider-route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://message-provider</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="string">-Path=/message-provider/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8888/eureka/</span></span><br></pre></td></tr></table></figure>

<p>注册中心相结合的路由配置方式，与单个URI的路由配置，区别其实很小，仅仅在于URI的schema协议不同。单个URI的地址的schema协议，一般为http或者https协议。</p>
<h1 id="3-路由匹配规则"><a href="#3-路由匹配规则" class="headerlink" title="3 路由匹配规则"></a>3 路由匹配规则</h1><p>Spring Cloud Gateway 的功能很强大，我们仅仅通过 Predicates 的设计就可以看出来，前面我们只是使用了 predicates 进行了简单的条件匹配，其实 Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。</p>
<p>Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层支持来匹配到转发路由，Spring Cloud Gateway 内置了很多 Predicates 工厂，这些 Predicates 工厂通过不同的 HTTP 请求参数来匹配，多个 Predicates 工厂可以组合使用。</p>
<p><a href="https://img-blog.csdnimg.cn/20200527213652534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzIyNDc1,size_16,color_FFFFFF,t_70"><img src="https://gitee.com/littlefxc/oss/raw/master/images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NzIyNDc1,size_16,color_FFFFFF,t_70-20210407151947718.png" alt="在这里插入图片描述"></a></p>
<p>gateWay的主要功能之一是转发请求，转发规则的定义主要包含三个部分</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Route（路由）</td>
<td align="left">路由是网关的基本单元，由ID、URI、一组Predicate、一组Filter组成，根据Predicate进行匹配转发。</td>
</tr>
<tr>
<td align="left">Predicate（谓语、断言）</td>
<td align="left">路由转发的判断条件，目前SpringCloud Gateway支持多种方式，常见如：Path、Query、Method、Header等，写法必须遵循 key=vlue的形式</td>
</tr>
<tr>
<td align="left">Filter（过滤器）</td>
<td align="left">过滤器是路由转发请求时所经过的过滤逻辑，可用于修改请求、响应内容</td>
</tr>
</tbody></table>
<blockquote>
<p>其中Route和Predicate必须同时申明</p>
</blockquote>
<p>例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//通过配置文件配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gate_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:9023</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment">## 当请求的路径为gate、rule开头的时，转发到http://localhost:9023服务器上</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/gate/**,/rule/**</span></span><br><span class="line">        <span class="comment">### 请求路径前加上/app</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">PrefixPath=/app</span></span><br></pre></td></tr></table></figure>

<h2 id="3-1-Predicate-断言条件-转发规则-介绍"><a href="#3-1-Predicate-断言条件-转发规则-介绍" class="headerlink" title="3.1 Predicate 断言条件(转发规则)介绍"></a>3.1 Predicate 断言条件(转发规则)介绍</h2><p>Predicate 来源于 Java 8，是 Java 8 中引入的一个函数，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。</p>
<p>在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。网上有一张图总结了 Spring Cloud 内置的几种 Predicate 的实现。<br><a href="https://upload-images.jianshu.io/upload_images/19816137-bb046dbf19bee1b4.gif?imageMogr2/auto-orient/strip"><img src="https://gitee.com/littlefxc/oss/raw/master/images/strip-20210407151947740.gif" alt="在这里插入图片描述"></a><br>[<br>说白了 Predicate 就是为了实现一组匹配规则，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。</p>
<ul>
<li>转发规则（predicates），假设 转发uri都设定为***<a href="http://localhost:9023/">http://localhost:9023</a>***</li>
</ul>
<table>
<thead>
<tr>
<th align="left">规则</th>
<th align="left">实例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Path</td>
<td align="left">- Path=/gate/<strong>,/rule/</strong></td>
<td align="left">## 当请求的路径为gate、rule开头的时，转发到<a href="http://localhost:9023服务器上">http://localhost:9023服务器上</a></td>
</tr>
<tr>
<td align="left">Before</td>
<td align="left">- Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td>
<td align="left">在某个时间之前的请求才会被转发到 <a href="http://localhost:9023服务器上">http://localhost:9023服务器上</a></td>
</tr>
<tr>
<td align="left">After</td>
<td align="left">- After=2017-01-20T17:42:47.789-07:00[America/Denver]</td>
<td align="left">在某个时间之后的请求才会被转发</td>
</tr>
<tr>
<td align="left">Between</td>
<td align="left">- Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]</td>
<td align="left">在某个时间段之间的才会被转发</td>
</tr>
<tr>
<td align="left">Cookie</td>
<td align="left">- Cookie=chocolate, ch.p</td>
<td align="left">名为chocolate的表单或者满足正则ch.p的表单才会被匹配到进行请求转发</td>
</tr>
<tr>
<td align="left">Header</td>
<td align="left">- Header=X-Request-Id, \d+</td>
<td align="left">携带参数X-Request-Id或者满足\d+的请求头才会匹配</td>
</tr>
<tr>
<td align="left">Host</td>
<td align="left">- Host=<a href="http://www.hd123.com/">www.hd123.com</a></td>
<td align="left">当主机名为<a href="http://www.hd123.com的时候直接转发到http//localhost:9023%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">www.hd123.com的时候直接转发到http://localhost:9023服务器上</a></td>
</tr>
<tr>
<td align="left">Method</td>
<td align="left">- Method=GET</td>
<td align="left">只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td>
</tr>
</tbody></table>
<h3 id="1-5-2-通过请求参数匹配"><a href="#1-5-2-通过请求参数匹配" class="headerlink" title="1.5.2 通过请求参数匹配"></a><strong>1.5.2</strong> 通过请求参数匹配</h3><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  	 <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="string">-Query=smile</span></span><br></pre></td></tr></table></figure>

<p>这样配置，只要请求中包含 smile 属性的参数即可匹配路由。</p>
<p>使用 curl 测试，命令行输入:</p>
<p>curl localhost:8080?smile=x&amp;id=2</p>
<p>经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 smile 参数则不会匹配。</p>
<p>还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="string">-Query=keep,</span> <span class="string">pu.</span></span><br></pre></td></tr></table></figure>

<p>这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由。</p>
<p>使用 curl 测试，命令行输入:</p>
<p>curl localhost:8080?keep=pub</p>
<p>测试可以返回页面代码，将 keep 的属性值改为 pubx 再次访问就会报 404,证明路由需要匹配正则表达式才会进行路由。</p>
<h3 id="1-5-3-通过-Header-属性匹配"><a href="#1-5-3-通过-Header-属性匹配" class="headerlink" title="1.5.3 通过 Header 属性匹配"></a><strong>1.5.3</strong> 通过 Header 属性匹配</h3><p>Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<p>curl <a href="http://localhost:8080/">http://localhost:8080</a> -H “X-Request-Id:88”</p>
<p>则返回页面代码证明匹配成功。将参数-H “X-Request-Id:88”改为-H “X-Request-Id:spring”再次执行时返回404证明没有匹配。</p>
<h3 id="1-5-4-通过-Cookie-匹配"><a href="#1-5-4-通过-Cookie-匹配" class="headerlink" title="1.5.4 通过 Cookie 匹配"></a><strong>1.5.4</strong> 通过 Cookie 匹配</h3><p>Cookie Route Predicate 可以接收两个参数，一个是 Cookie name ,一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=sessionId,</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<p>curl <a href="http://localhost:8080/">http://localhost:8080</a> –cookie “sessionId=test”</p>
<p>则会返回页面代码，如果去掉–cookie “sessionId=test”，后台汇报 404 错误。</p>
<h3 id="1-5-5-通过-Host-匹配"><a href="#1-5-5-通过-Host-匹配" class="headerlink" title="1.5.5 通过 Host 匹配"></a><strong>1.5.5</strong> 通过 Host 匹配</h3><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用.号作为分隔符。它通过参数中的主机地址作为匹配规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=**.baidu.com</span></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<p>curl <a href="http://localhost:8080/">http://localhost:8080</a> -H “Host: <a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a></p>
<p>curl <a href="http://localhost:8080/">http://localhost:8080</a> -H “Host: md.baidu.com”</p>
<p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p>
<h3 id="1-5-6-通过请求方式匹配"><a href="#1-5-6-通过请求方式匹配" class="headerlink" title="1.5.6 通过请求方式匹配"></a><strong>1.5.6</strong> 通过请求方式匹配</h3><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET</span></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<p># curl 默认是以 GET 的方式去请求</p>
<p>curl <a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。</p>
<p># curl 默认是以 GET 的方式去请求</p>
<p>curl -X POST <a href="http://localhost:8080/">http://localhost:8080</a></p>
<p>返回 404 没有找到，证明没有匹配上路由</p>
<h3 id="1-5-7-通过请求路径匹配"><a href="#1-5-7-通过请求路径匹配" class="headerlink" title="1.5.7 通过请求路径匹配"></a><strong>1.5.7</strong> 通过请求路径匹配</h3><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="string">-id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="string">-Path=/foo/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果请求路径符合要求，则此路由将匹配，例如：/foo/1 或者 /foo/bar。</p>
<p>使用 curl 测试，命令行输入:</p>
<p>curl <a href="http://localhost:8080/foo/1">http://localhost:8080/foo/1</a></p>
<p>curl <a href="http://localhost:8080/foo/xx">http://localhost:8080/foo/xx</a></p>
<p>curl <a href="http://localhost:8080/boo/xx">http://localhost:8080/boo/xx</a></p>
<p>经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报404，证明路由是通过指定路由来匹配。</p>
<h3 id="1-5-8-通过请求-ip-地址进行匹配"><a href="#1-5-8-通过请求-ip-地址进行匹配" class="headerlink" title="1.5.8 通过请求 ip 地址进行匹配"></a><strong>1.5.8</strong> 通过请求 ip 地址进行匹配</h3><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号(IPv4 或 IPv6 )字符串的列表(最小大小为1)，例如 192.168.0.1/16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gateway-service</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br></pre></td></tr></table></figure>

<p>可以将此地址设置为本机的 ip 地址进行测试。</p>
<p>curl localhost:8080</p>
<p>如果请求的远程地址是 192.168.1.10，则此路由将匹配。</p>
<h3 id="1-5-10-组合使用"><a href="#1-5-10-组合使用" class="headerlink" title="1.5.10 组合使用"></a><strong>1.5.10</strong> <strong>组合使用</strong></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gateway-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=**.foo.org</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/headers</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=baz</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br></pre></td></tr></table></figure>

<p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p>
<p>一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发</p>
<h2 id="3-2-过滤器规则（Filter）"><a href="#3-2-过滤器规则（Filter）" class="headerlink" title="3.2 过滤器规则（Filter）"></a>3.2 过滤器规则（Filter）</h2><h3 id="过滤器规则（Filter）"><a href="#过滤器规则（Filter）" class="headerlink" title="过滤器规则（Filter）"></a>过滤器规则（Filter）</h3><table>
<thead>
<tr>
<th align="left">过滤规则</th>
<th align="left">实例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PrefixPath</td>
<td align="left">- PrefixPath=/app</td>
<td align="left">在请求路径前加上app</td>
</tr>
<tr>
<td align="left">RewritePath</td>
<td align="left">- RewritePath=/test, /app/test</td>
<td align="left">访问localhost:9022/test,请求会转发到localhost:8001/app/test</td>
</tr>
<tr>
<td align="left">SetPath</td>
<td align="left">SetPath=/app/{path}</td>
<td align="left">通过模板设置路径，转发的规则时会在路径前增加app，{path}表示原请求路径</td>
</tr>
<tr>
<td align="left">RedirectTo</td>
<td align="left"></td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="left">RemoveRequestHeader</td>
<td align="left"></td>
<td align="left">去掉某个请求头信息</td>
</tr>
</tbody></table>
<p>注：当配置多个filter时，优先定义的会被调用，剩余的filter将不会生效</p>
<h3 id="PrefixPath"><a href="#PrefixPath" class="headerlink" title="PrefixPath"></a>PrefixPath</h3><p>对所有的请求路径添加前缀：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure>

<p>访问/hello的请求被发送到<a href="https://example.org/mypath/hello%E3%80%82">https://example.org/mypath/hello。</a></p>
<h3 id="RedirectTo"><a href="#RedirectTo" class="headerlink" title="RedirectTo"></a>RedirectTo</h3><p>重定向，配置包含重定向的返回码和地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">https://acme.org</span></span><br></pre></td></tr></table></figure>

<h3 id="RemoveRequestHeader"><a href="#RemoveRequestHeader" class="headerlink" title="RemoveRequestHeader"></a>RemoveRequestHeader</h3><p>去掉某个请求头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestHeader=X-Request-Foo</span></span><br></pre></td></tr></table></figure>

<p>去掉请求头信息 X-Request-Foo</p>
<h3 id="RemoveResponseHeader"><a href="#RemoveResponseHeader" class="headerlink" title="RemoveResponseHeader"></a>RemoveResponseHeader</h3><p>去掉某个回执头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveResponseHeader=X-Request-Foo</span></span><br></pre></td></tr></table></figure>

<h3 id="RemoveRequestParameter"><a href="#RemoveRequestParameter" class="headerlink" title="RemoveRequestParameter"></a>RemoveRequestParameter</h3><p>去掉某个请求参数信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestparameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestParameter=red</span></span><br></pre></td></tr></table></figure>

<h3 id="RewritePath"><a href="#RewritePath" class="headerlink" title="RewritePath"></a>RewritePath</h3><p>改写路径：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewrite_filter</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8081</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/test/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/where(?&lt;segment&gt;/?.*),</span> <span class="string">/test(?&lt;segment&gt;/?.*)</span></span><br></pre></td></tr></table></figure>

<p>/where/… 改成 test/…</p>
<p>使用代码改下路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RouteLocatorBuilder.Builder builder = routeLocatorBuilder.routes();</span><br><span class="line">   builder</span><br><span class="line">           .route(<span class="string">&quot;path_rote_at_guigu&quot;</span>, r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)</span><br><span class="line">                   .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>))</span><br><span class="line">           .route(<span class="string">&quot;csdn_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/csdn&quot;</span>)</span><br><span class="line">                   .uri(<span class="string">&quot;https://blog.csdn.net&quot;</span>))</span><br><span class="line">           .route(<span class="string">&quot;blog3_rewrite_filter&quot;</span>, r -&gt; r.path(<span class="string">&quot;/blog3/**&quot;</span>)</span><br><span class="line">                   .filters(f -&gt; f.rewritePath(<span class="string">&quot;/blog3/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$\\&#123;segment&#125;&quot;</span>))</span><br><span class="line">                   .uri(<span class="string">&quot;https://blog.csdn.net&quot;</span>))</span><br><span class="line">           .route(<span class="string">&quot;rewritepath_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/baidu/**&quot;</span>)</span><br><span class="line">                   .filters(f -&gt; f.rewritePath(<span class="string">&quot;/baidu/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$\\&#123;segment&#125;&quot;</span>))</span><br><span class="line">                   .uri(<span class="string">&quot;http://www.baidu.com&quot;</span>))</span><br><span class="line"></span><br><span class="line">           .build();</span><br></pre></td></tr></table></figure>

<h3 id="SetPath"><a href="#SetPath" class="headerlink" title="SetPath"></a>SetPath</h3><p>设置请求路径，与RewritePath类似。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/red/&#123;segment&#125;</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetPath=/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>如/red/blue的请求被转发到/blue。</p>
<h3 id="SetRequestHeader"><a href="#SetRequestHeader" class="headerlink" title="SetRequestHeader"></a>SetRequestHeader</h3><p>设置请求头信息。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setrequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetRequestHeader=X-Request-Red,</span> <span class="string">Blue</span></span><br></pre></td></tr></table></figure>

<h3 id="SetStatus"><a href="#SetStatus" class="headerlink" title="SetStatus"></a>SetStatus</h3><p>设置回执状态码。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">setstatusint_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SetStatus=401</span></span><br></pre></td></tr></table></figure>

<h3 id="StripPrefix"><a href="#StripPrefix" class="headerlink" title="StripPrefix"></a>StripPrefix</h3><p>跳过指定路径。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">nameRoot</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://nameservice</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/name/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=2</span></span><br></pre></td></tr></table></figure>

<p>请求/name/blue/red会转发到/red。</p>
<h3 id="RequestSize"><a href="#RequestSize" class="headerlink" title="RequestSize"></a>RequestSize</h3><p>请求大小。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">request_size_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8080/upload</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/upload</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestSize</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">maxSize:</span> <span class="number">5000000</span></span><br></pre></td></tr></table></figure>

<p>超过5M的请求会返回413错误。</p>
<h3 id="Default-filters"><a href="#Default-filters" class="headerlink" title="Default-filters"></a>Default-filters</h3><p>对所有请求添加过滤器。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Default-Red,</span> <span class="string">Default-Blue</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PrefixPath=/httpbin</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-通过代码进行配置"><a href="#3-3-通过代码进行配置" class="headerlink" title="3.3 通过代码进行配置"></a>3.3 通过代码进行配置</h2><p>通过代码进行配置，将路由规则设置为一个Bean即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> builder.routes()</span><br><span class="line">		.route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.route(<span class="string">&quot;host_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.myhost.org&quot;</span>)</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.route(<span class="string">&quot;rewrite_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.rewrite.org&quot;</span>)</span><br><span class="line">			.filters(f -&gt; f.rewritePath(<span class="string">&quot;/foo/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$&#123;segment&#125;&quot;</span>))</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.route(<span class="string">&quot;hystrix_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrix.org&quot;</span>)</span><br><span class="line">			.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>)))</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.route(<span class="string">&quot;hystrix_fallback_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrixfallback.org&quot;</span>)</span><br><span class="line">			.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>).setFallbackUri(<span class="string">&quot;forward:/hystrixfallback&quot;</span>)))</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.route(<span class="string">&quot;limit_route&quot;</span>, r -&gt; r</span><br><span class="line">			.host(<span class="string">&quot;*.limited.org&quot;</span>).and().path(<span class="string">&quot;/anything/**&quot;</span>)</span><br><span class="line">			.filters(f -&gt; f.requestRateLimiter(c -&gt; c.setRateLimiter(redisRateLimiter())))</span><br><span class="line">			.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">		.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-实现熔断降级"><a href="#3-2-实现熔断降级" class="headerlink" title="3.2 实现熔断降级"></a><strong>3.2</strong> 实现熔断降级</h2><p>为什么要实现熔断降级？</p>
<p>在分布式系统中，网关作为流量的入口，因此会有大量的请求进入网关，向其他服务发起调用，其他服务不可避免的会出现调用失败（超时、异常），失败时不能让请求堆积在网关上，需要快速失败并返回给客户端，想要实现这个要求，就必须在网关上做熔断、降级操作。</p>
<p>为什么在网关上请求失败需要快速返回给客户端？</p>
<p>因为当一个客户端请求发生故障的时候，这个请求会一直堆积在网关上，当然只有一个这种请求，网关肯定没有问题（如果一个请求就能造成整个系统瘫痪，那这个系统可以下架了），但是网关上堆积多了就会给网关乃至整个服务都造成巨大的压力，甚至整个服务宕掉。因此要对一些服务和页面进行有策略的降级，以此缓解服务器资源的的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户的得到正确的相应，所以需要网关上请求失败需要快速返回给客户端。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rateLimit_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8000</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">0</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/test/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">fallbackCmdA</span></span><br><span class="line">                <span class="attr">fallbackUri:</span> <span class="string">forward:/fallbackA</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">hystrix.command.fallbackCmdA.execution.isolation.thread.timeoutInMilliseconds:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<p>这里的配置，使用了两个过滤器：</p>
<p>（1）过滤器StripPrefix，作用是去掉请求路径的最前面n个部分截取掉。</p>
<p>StripPrefix=1就代表截取路径的个数为1，比如前端过来请求/test/good/1/view，匹配成功后，路由到后端的请求路径就会变成<a href="http://localhost:8888/good/1/view%E3%80%82">http://localhost:8888/good/1/view。</a></p>
<p>（2）过滤器Hystrix，作用是通过Hystrix进行熔断降级</p>
<p>当上游的请求，进入了Hystrix熔断降级机制时，就会调用fallbackUri配置的降级地址。需要注意的是，还需要单独设置Hystrix的commandKey的超时时间</p>
<p>fallbackUri配置的降级地址的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gateway.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gateway.response.Response;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fallbackA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">fallbackA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Response response = <span class="keyword">new</span> Response();</span><br><span class="line">        response.setCode(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        response.setMessage(<span class="string">&quot;服务暂时不可用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-高级配置"><a href="#4-高级配置" class="headerlink" title="4 高级配置"></a>4 高级配置</h1><h2 id="4-1-分布式限流"><a href="#4-1-分布式限流" class="headerlink" title="4.1 分布式限流"></a>4.1 分布式限流</h2><p>从某种意义上讲，令牌桶算法是对漏桶算法的一种改进，桶算法能够限制请求调用的速率，而令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌，所以就存在这种情况，桶中一直有大量的可用令牌，这时进来的请求就可以直接拿到令牌执行，比如设置qps为100，那么限流器初始化完成一秒后，桶中就已经有100个令牌了，这时服务还没完全启动好，等启动完成对外提供服务时，该限流器可以抵挡瞬时的100个请求。所以，只有桶中没有令牌时，请求才会进行等待，最后相当于以一定的速率执行。<br><a href="https://upload-images.jianshu.io/upload_images/19816137-89297e59a487540d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="https://gitee.com/littlefxc/oss/raw/master/images/1240-20210407151947763.jpeg" alt="在这里插入图片描述"></a></p>
<p>在Spring Cloud Gateway中，有Filter过滤器，因此可以在“pre”类型的Filter中自行实现上述三种过滤器。但是限流作为网关最基本的功能，Spring Cloud Gateway官方就提供了RequestRateLimiterGatewayFilterFactory这个类，适用在Redis内的通过执行Lua脚本实现了令牌桶的方式。具体实现逻辑在RequestRateLimiterGatewayFilterFactory类中，lua脚本在如下图所示的文件夹中：<br><a href="https://upload-images.jianshu.io/upload_images/19816137-0456652619daecaa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"><img src="https://gitee.com/littlefxc/oss/raw/master/images/1240-20210407151947778.jpeg" alt="在这里插入图片描述"></a></p>
<p>首先在工程的pom文件中引入gateway的起步依赖和redis的reactive依赖，代码如下：</p>
<p>配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">limit_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://httpbin.org:80/get</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@userKeyResolver&#125;&#x27;</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>​    在上面的配置文件，指定程序的端口为8081，配置了 redis的信息，并配置了RequestRateLimiter的限流过滤器，该过滤器需要配置三个参数：</p>
<ul>
<li>burstCapacity，令牌桶总容量。</li>
<li>replenishRate，令牌桶每秒填充平均速率。</li>
<li>key-resolver，用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</li>
</ul>
<p>这里根据用户ID限流，请求路径中必须携带userId参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">KeyResolver <span class="title">userKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>KeyResolver需要实现resolve方法，比如根据userid进行限流，则需要用userid去判断。实现完KeyResolver之后，需要将这个类的Bean注册到Ioc容器中。</p>
<p>如果需要根据IP限流，定义的获取限流Key的bean为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过exchange对象可以获取到请求信息，这边用了HostName，如果你想根据用户来做限流的话这边可以获取当前请求的用户ID或者用户名就可以了，比如：</p>
<p>如果需要根据接口的URI进行限流，则需要获取请求地址的uri作为限流key，定义的Bean对象为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">KeyResolver <span class="title">apiKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getPath().value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-2-健康检查配置"><a href="#4-2-健康检查配置" class="headerlink" title="4.2 健康检查配置"></a>4.2 健康检查配置</h2><p>admin-client、actuator健康检查配置，为之后的功能提供支持，此部分比较简单，不再赘述，加入以下maven依赖和配置</p>
<h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mas-cloud-gateway</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">      <span class="comment">### 本地搭建的admin-server</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8011</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:6887/eureka/</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br></pre></td></tr></table></figure>

<p>若转发的目标地址为微服务中组件，不为具体ip:port形式的，应写成lb://mas-openapi-service形式，目标地址会从注册中心直接拉取</p>
<h2 id="4-3-统一配置跨域请求："><a href="#4-3-统一配置跨域请求：" class="headerlink" title="4.3 统一配置跨域请求："></a>4.3 统一配置跨域请求：</h2><p>现在的请求通过经过gateWay网关时，需要在网关统一配置跨域请求，需求所有请求通过</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">cors-configurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowed-origins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowed-headers:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allow-credentials:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">allowed-methods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">POST</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">DELETE</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">PUT</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">OPTION</span></span><br></pre></td></tr></table></figure>

<h1 id="5-整合Nacos"><a href="#5-整合Nacos" class="headerlink" title="5 整合Nacos"></a>5 整合Nacos</h1><h2 id="maven依赖-1"><a href="#maven依赖-1" class="headerlink" title="maven依赖"></a>maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos_gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>nacos_gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos dicovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意在Gateway服务中的pom.xml文件中不要存在这个jar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>否则调用接口时会报以下错误因为gateway使用的是webflux,默认使用netty,所以从依赖中排除 tomcat相关的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.ClassCastException: org.springframework.core.io.buffer.DefaultDataBufferFactory cannot be cast to org.springframework.core.io.buffer.NettyDataBufferFactory</span><br><span class="line">	at org.springframework.cloud.gateway.filter.NettyWriteResponseFilter.lambda$filter$1(NettyWriteResponseFilter.java:82) ~[spring-cloud-gateway-core-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">	at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:44) [reactor-core-3.2.12.RELEASE.jar:3.2.12.RELEASE]</span><br></pre></td></tr></table></figure>

<p>错误2 是由于 spring-boot-starter-web 引起</p>
<h2 id="服务发现配置：从Nacos获取微服务提供者清单"><a href="#服务发现配置：从Nacos获取微服务提供者清单" class="headerlink" title="服务发现配置：从Nacos获取微服务提供者清单"></a>服务发现配置：从Nacos获取微服务提供者清单</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos_gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#表明gateway开启服务注册和发现的功能，并且spring cloud gateway自动根据服务发现为每一个服务创建了一个router，这个router将以服务名开头的请求路径转发到对应的服务</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span>  <span class="comment">#是将请求路径上的服务名配置为小写（因为服务注册的时候，向注册中心注册时将服务名转成大写的了</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="string">-id:</span> <span class="string">apiuser</span></span><br><span class="line">          <span class="comment">#</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://nacos-consumer-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment"># http://localhost:6601/user/user/users/2, 必须加上StripPrefix=1，否则访问服务时会带上user</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 转发该路径</span></span><br><span class="line">           <span class="comment">#以下是配置例子</span></span><br><span class="line">            <span class="comment"># - id: 163                     #网关路由到网易官网</span></span><br><span class="line">            <span class="comment">#  uri: http://www.163.com/</span></span><br><span class="line">            <span class="comment">#  predicates:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">Path=/163/**</span></span><br><span class="line">        <span class="comment">#      - id: ORDER-SERVICE           #网关路由到订单服务order-service</span></span><br><span class="line">        <span class="comment">#        uri: lb://ORDER-SERVICE</span></span><br><span class="line">        <span class="comment">#        predicates:</span></span><br><span class="line">        <span class="comment">#          - Path=/ORDER-SERVICE/**</span></span><br><span class="line">        <span class="comment">#      - id: USER-SERVICE            #网关路由到用户服务user-service</span></span><br><span class="line">        <span class="comment">#        uri: lb://USER-SERVICE</span></span><br><span class="line">        <span class="comment">#        predicates:</span></span><br><span class="line">        <span class="comment">#          - Pach=/USER-SERVICE/**</span></span><br></pre></td></tr></table></figure>

<h2 id="nacos实现动态配置"><a href="#nacos实现动态配置" class="headerlink" title="nacos实现动态配置"></a>nacos实现动态配置</h2><p>使用nacos实现动态路由，以上两种方式都是实现的静态配置路径，只能应对部分场景，接下来配置nacos实现动态配置以及配置的存储，由于gateWay并没有适配nacos，需要自定义监听器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosDynamicRouteService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String dataId = <span class="string">&quot;gateway-router&quot;</span>;</span><br><span class="line">  <span class="keyword">private</span> String group = <span class="string">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class="line">  <span class="meta">@Value(&quot;$&#123;spring.cloud.nacos.config.server-addr&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String serverAddr;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line">  <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; ROUTE_LIST = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dynamicRouteByNacosListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ConfigService configService = NacosFactory.createConfigService(serverAddr);</span><br><span class="line">      configService.getConfig(dataId, group, <span class="number">5000</span>);</span><br><span class="line">      configService.addListener(dataId, group, <span class="keyword">new</span> Listener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConfigInfo</span><span class="params">(String configInfo)</span> </span>&#123;</span><br><span class="line">          clearRoute();</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtil.isNullOrEmpty(configInfo)) &#123;<span class="comment">//配置被删除</span></span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;RouteDefinition&gt; gatewayRouteDefinitions = JSONObject.parseArray(configInfo, RouteDefinition.class);</span><br><span class="line">            <span class="keyword">for</span> (RouteDefinition routeDefinition : gatewayRouteDefinitions) &#123;</span><br><span class="line">              addRoute(routeDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">            publish();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;receiveConfigInfo error&quot;</span> + e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Executor <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NacosException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;dynamicRouteByNacosListener error&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearRoute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String id : ROUTE_LIST) &#123;</span><br><span class="line">      <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id)).subscribe();</span><br><span class="line">    &#125;</span><br><span class="line">    ROUTE_LIST.clear();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addRoute</span><span class="params">(RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">      ROUTE_LIST.add(definition.getId());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"> log.error(<span class="string">&quot;addRoute error&quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.applicationEventPublisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>.routeDefinitionWriter));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在nacos中增加一个规则：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">&quot;filters&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;baidu_route&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;order&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;predicates&quot;</span>: [&#123;</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;/baidu&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>访问网关的路由规则，能看到刚刚加入的规则，访问<em><a href="http://localhost:9022/baidu">http://localhost:9022/baidu</a></em>时请求直接被转发到百度的首页了。</p>
<p><a href="https://img-blog.csdnimg.cn/20200325164150414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvdXNlXw==,size_16,color_FFFFFF,t_70#pic_center"><img src="https://gitee.com/littlefxc/oss/raw/master/images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvdXNlXw==,size_16,color_FFFFFF,t_70-20210407151947799.png" alt="生效的路径"></a></p>
<h1 id="6-整合Swagger聚合微服务系统API文档"><a href="#6-整合Swagger聚合微服务系统API文档" class="headerlink" title="6 整合Swagger聚合微服务系统API文档"></a>6 整合Swagger聚合微服务系统API文档</h1><h2 id="maven依赖-2"><a href="#maven依赖-2" class="headerlink" title="maven依赖"></a>maven依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-center-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crazymaker.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crazymaker.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-gateway-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springcloud-gateway-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway 网关依赖,内置webflux 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--新增sentinel--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-transport-simple-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- nacos服务注册发现依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.connector.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- nacos配置服务依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger-ui.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.crazymaker.cloud.nacos.demo.gateway.starter.GatewayProviderApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 添加docker-maven插件 --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>dockerlocal:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>dockerlocal:5000/java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crazymaker.cloud.nacos.demo.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.config.GatewayProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.support.NameUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResource;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger.web.SwaggerResourcesProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> SwaggerProvider</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span> com.ruoyi.gateway.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> daiz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/8/16 10:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title">SwaggerResourcesProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String API_URI = <span class="string">&quot;/v2/api-docs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouteLocator routeLocator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GatewayProperties gatewayProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SwaggerResource&gt; <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 网关应用名称,不需要在网关的swagger 上展示</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String appName = <span class="string">&quot;springcloud-gateway&quot;</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;SwaggerResource&gt; resources = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; routes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 取出gateway的route</span></span><br><span class="line">        routeLocator.getRoutes().subscribe(route -&gt; routes.add(route.getId()));</span><br><span class="line">        <span class="comment">// 结合配置的route-路径(Path)，和route过滤，只获取有效的route节点</span></span><br><span class="line">        <span class="comment">// 打开下面注释可以自动扫描接入gateway的服务，为了演示，只扫描system</span></span><br><span class="line">        <span class="comment">// gatewayProperties.getRoutes().stream().filter(routeDefinition -&gt;</span></span><br><span class="line">        <span class="comment">// routes.contains(routeDefinition.getId()))</span></span><br><span class="line">        gatewayProperties.getRoutes().stream()</span><br><span class="line">                .filter(route -&gt; route.getUri().getHost() != <span class="keyword">null</span>)</span><br><span class="line">                .filter(route -&gt; !appName.equals(route.getUri().getHost()))</span><br><span class="line">                .forEach(routeDefinition -&gt; routeDefinition.getPredicates().stream()</span><br><span class="line">                        .filter(predicateDefinition -&gt; (<span class="string">&quot;Path&quot;</span>).equalsIgnoreCase(predicateDefinition.getName()))</span><br><span class="line">                        .forEach(predicateDefinition -&gt; resources</span><br><span class="line">                                .add(swaggerResource(routeDefinition.getId(), predicateDefinition.getArgs()</span><br><span class="line">                                        .get(NameUtils.GENERATED_NAME_PREFIX + <span class="string">&quot;0&quot;</span>).replace(<span class="string">&quot;/**&quot;</span>, API_URI)))));</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SwaggerResource <span class="title">swaggerResource</span><span class="params">(String name, String location)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SwaggerResource swaggerResource = <span class="keyword">new</span> SwaggerResource();</span><br><span class="line">        swaggerResource.setName(name);</span><br><span class="line">        swaggerResource.setLocation(location);</span><br><span class="line">        swaggerResource.setSwaggerVersion(<span class="string">&quot;2.0&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> swaggerResource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h2><p><a href="https://img-blog.csdnimg.cn/20210112153623924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5bWFrZXJjaXJjbGU=,size_16,color_FFFFFF,t_70"><img src="https://gitee.com/littlefxc/oss/raw/master/images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NyYXp5bWFrZXJjaXJjbGU=,size_16,color_FFFFFF,t_70-20210407151947874.png" alt="在这里插入图片描述"></a></p>
<h1 id="7-Gatway-网关的过滤器开发"><a href="#7-Gatway-网关的过滤器开发" class="headerlink" title="7 Gatway 网关的过滤器开发"></a>7 Gatway 网关的过滤器开发</h1><h2 id="7-1-过滤器的执行次序"><a href="#7-1-过滤器的执行次序" class="headerlink" title="7.1 过滤器的执行次序"></a>7.1 过滤器的执行次序</h2><p>Spring-Cloud-Gateway 基于过滤器实现，同 zuul 类似，有<strong>pre</strong>和<strong>post</strong>两种方式的 filter,分别处理<strong>前置逻辑</strong>和<strong>后置逻辑</strong>。客户端的请求先经过<strong>pre</strong>类型的 filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过<strong>post</strong>类型的 filter 处理，最后返回响应到客户端。</p>
<p>过滤器执行流程如下，<strong>order 越大，优先级越低</strong></p>
<p><a href="https://gitee.com/idea360/oss/raw/master/images/spring-cloud-gateway-fliter-order.png"><img src="https://gitee.com/littlefxc/oss/raw/master/images/spring-cloud-gateway-fliter-order-20210407151948451.png" alt="img"></a></p>
<p>分为全局过滤器和局部过滤器</p>
<ul>
<li><strong>全局过滤器：</strong></li>
</ul>
<blockquote>
<p>对所有路由生效</p>
<p>2、接口用时统计</p>
</blockquote>
<ul>
<li><strong>局部过滤器：</strong></li>
</ul>
<blockquote>
<p>对指定路由生效</p>
</blockquote>
<h2 id="7-2定义全局过滤器"><a href="#7-2定义全局过滤器" class="headerlink" title="7.2定义全局过滤器"></a>7.2定义全局过滤器</h2><p>实现 GlobalFilter 和 Ordered，重写相关方法，加入到spring容器管理即可，无需配置，全局过滤器对所有的路由都有效。</p>
<p>全局过滤器举例：代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crazymaker.cloud.nacos.demo.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(0)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">b</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">c</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CFilter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;AFilter前置逻辑&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                log.info(<span class="string">&quot;AFilter后置逻辑&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   值越小，优先级越高</span></span><br><span class="line"><span class="comment">//    int HIGHEST_PRECEDENCE = -2147483648;</span></span><br><span class="line"><span class="comment">//    int LOWEST_PRECEDENCE = 2147483647;</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HIGHEST_PRECEDENCE + <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;BFilter前置逻辑&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                log.info(<span class="string">&quot;BFilter后置逻辑&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//   值越小，优先级越高</span></span><br><span class="line"><span class="comment">//    int HIGHEST_PRECEDENCE = -2147483648;</span></span><br><span class="line"><span class="comment">//    int LOWEST_PRECEDENCE = 2147483647;</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HIGHEST_PRECEDENCE + <span class="number">200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Slf4j</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;CFilter前置逻辑&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                log.info(<span class="string">&quot;CFilter后置逻辑&quot;</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   值越小，优先级越高</span></span><br><span class="line"><span class="comment">//    int HIGHEST_PRECEDENCE = -2147483648;</span></span><br><span class="line"><span class="comment">//    int LOWEST_PRECEDENCE = 2147483647;</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> HIGHEST_PRECEDENCE + <span class="number">300</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3定义局部过滤器"><a href="#7-3定义局部过滤器" class="headerlink" title="7.3定义局部过滤器"></a>7.3定义局部过滤器</h2><p>步骤：</p>
<ol>
<li><p>需要实现GatewayFilter, Ordered，实现相关的方法</p>
</li>
<li><p>加入到过滤器工厂，并且注册到spring容器中。</p>
</li>
<li><p>在配置文件中进行配置，如果不配置则不启用此过滤器规则。</p>
</li>
</ol>
<p>局部过滤器举例, 对请求头部的 user-id 进行校验，代码如下：</p>
<ol>
<li><p>需要实现GatewayFilter, Ordered，实现相关的方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crazymaker.cloud.nacos.demo.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserIdCheckGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String url = exchange.getRequest().getPath().pathWithinApplication().value();</span><br><span class="line">        log.info(<span class="string">&quot;请求URL:&quot;</span> + url);</span><br><span class="line">        log.info(<span class="string">&quot;method:&quot;</span> + exchange.getRequest().getMethod());</span><br><span class="line">       <span class="comment">/*   String secret = exchange.getRequest().getHeaders().getFirst(&quot;secret&quot;);</span></span><br><span class="line"><span class="comment">        if (StringUtils.isBlank(secret))</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            return chain.filter(exchange);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">         <span class="comment">//获取param 请求参数</span></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="comment">//获取header</span></span><br><span class="line">        String userId = exchange.getRequest().getHeaders().getFirst(<span class="string">&quot;user-id&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;userId：&quot;</span> + userId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(userId))</span><br><span class="line">        &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****头部验证不通过，请在头部输入  user-id&quot;</span>);</span><br><span class="line">            <span class="comment">//终止请求，直接回应</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   值越小，优先级越高</span></span><br><span class="line"><span class="comment">//    int HIGHEST_PRECEDENCE = -2147483648;</span></span><br><span class="line"><span class="comment">//    int LOWEST_PRECEDENCE = 2147483647;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>加入到过滤器工厂，并且注册到spring容器中。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crazymaker.cloud.nacos.demo.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.crazymaker.cloud.nacos.demo.gateway.filter.UserIdCheckGateWayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserIdCheckGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">Object</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Object config)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserIdCheckGateWayFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在配置文件中进行配置，如果不配置则不启用此过滤器规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">service_provider_demo_route_filter</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://service-provider-demo</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/filter/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/filter/(?&lt;segment&gt;.*),</span> <span class="string">/provider/$\&#123;segment&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">UserIdCheck</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="8-整合Sentinel完成流控和降级"><a href="#8-整合Sentinel完成流控和降级" class="headerlink" title="8 整合Sentinel完成流控和降级"></a>8 整合Sentinel完成流控和降级</h1><h2 id="maven依赖-3"><a href="#maven依赖-3" class="headerlink" title="maven依赖"></a>maven依赖</h2><p>使用Sentinel作为gateWay的限流、降级、系统保护工具</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--alibaba 流量卫士--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sentinel.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h2><p>客户端配置：在配置文件中增加下列配置，dashboard就可以轻松管理客户端了，还有一种方式是在启动时加入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">## VM</span></span><br><span class="line">        <span class="comment">##-Djava.net.preferIPv4Stack=true -Dcsp.sentinel.dashboard.server=localhost:8080 -Dcsp.sentinel.api.port=8666 -Dproject.name=gateway -Dcsp.sentinel.app.type=1</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8880</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8880</span></span><br></pre></td></tr></table></figure>

<h2 id="限流规则通用配置"><a href="#限流规则通用配置" class="headerlink" title="限流规则通用配置"></a>限流规则通用配置</h2><p>由于sentinel的工作原理其实借助于全局的filter进行请求拦截并计算出是否进行限流、熔断等操作的，增加SentinelGateWayFilter配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span><span class="comment">//拦截请求</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sentinel 不仅支持通过硬代码方式进行资源的申明，还能通过注解方式进行声明，为了让注解生效，还需要配置切面类SentinelResourceAspect</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelResourceAspect <span class="title">sentinelResourceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> SentinelResourceAspect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sentinel拦截包括了视图、静态资源等，需要配置viewResolvers以及拦截之后的异常，我们也可以自定义抛出异常的提示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SentinelConfig</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                      ServerCodecConfigurer serverCodecConfigurer)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">  <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span><span class="comment">//自定义异常</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Register the block exception handler for Spring Cloud Gateway.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ExceptionHandler(viewResolvers, serverCodecConfigurer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义异常提示：当发生限流、熔断异常时，会返回定义的提示信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置限流的异常处理器:SentinelGatewayBlockExceptionHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandlerEX(viewResolvers, serverCodecConfigurer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不需要额外的配置，sentinel就已经可以正常工作了</p>
<h2 id="限流规则设置"><a href="#限流规则设置" class="headerlink" title="限流规则设置"></a>限流规则设置</h2><p>1 资源定义：定义API组</p>
<p>2 定义限流规则</p>
<h2 id="网关限流参数"><a href="#网关限流参数" class="headerlink" title="网关限流参数"></a>网关限流参数</h2><p>其中网关限流规则 GatewayFlowRule的字段解释如下：</p>
<ul>
<li><p>resource：资源名称，可以是网关中的 route 名称或者用户自定义的 API 分组名称。</p>
</li>
<li><p>resourceMode：规则是针对 API Gateway 的 route（RESOURCE_MODE_ROUTE_ID）还是用户在 Sentinel 中定义的 API 分组（RESOURCE_MODE_CUSTOM_API_NAME），默认是 route。</p>
</li>
<li><p>grade：限流指标维度，同限流规则的 grade 字段。</p>
</li>
<li><p>count：限流阈值</p>
</li>
<li><p>intervalSec：统计时间窗口，单位是秒，默认是 1 秒。</p>
</li>
<li><p>controlBehavior：流量整形的控制效果，同限流规则的 controlBehavior 字段，目前支持快速失败和匀速排队两种模式，默认是快速失败。</p>
</li>
<li><p>burst：应对突发请求时额外允许的请求数目。</p>
</li>
<li><p>maxQueueingTimeoutMs：匀速排队模式下的最长排队时间，单位是毫秒，仅在匀速排队模式下生效。</p>
</li>
<li><p>paramItem</p>
<p>参数限流配置。若不提供，则代表不针对参数进行限流，该网关规则将会被转换成普通流控规则；否则会转换成热点规则。其中的字段：</p>
<ul>
<li>parseStrategy：从请求中提取参数的策略，目前支持提取来源 IP（PARAM_PARSE_STRATEGY_CLIENT_IP）、Host（PARAM_PARSE_STRATEGY_HOST）、任意 Header（PARAM_PARSE_STRATEGY_HEADER）和任意 URL 参数（PARAM_PARSE_STRATEGY_URL_PARAM）四种模式。</li>
<li>fieldName：若提取策略选择 Header 模式或 URL 参数模式，则需要指定对应的 header 名称或 URL 参数名称。</li>
<li>pattern：参数值的匹配模式，只有匹配该模式的请求属性值会纳入统计和流控；若为空则统计该请求属性的所有值。（1.6.2 版本开始支持）</li>
<li>matchStrategy：参数值的匹配策略，目前支持精确匹配（PARAM_MATCH_STRATEGY_EXACT）、子串匹配（PARAM_MATCH_STRATEGY_CONTAINS）和正则匹配（PARAM_MATCH_STRATEGY_REGEX）。（1.6.2 版本开始支持）</li>
</ul>
</li>
</ul>
<p>用户可以通过 GatewayRuleManager.loadRules(rules) 手动加载网关规则，或通过 GatewayRuleManager.register2Property(property) 注册动态规则源动态推送（推荐方式）。</p>
]]></content>
  </entry>
  <entry>
    <title>SpringEl+aop+jedis实现缓存管理</title>
    <url>/2019/09/02/SpringEl-aop-jedis%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="SpringEl-aop-jedis实现缓存管理"><a href="#SpringEl-aop-jedis实现缓存管理" class="headerlink" title="SpringEl + aop + jedis实现缓存管理"></a>SpringEl + aop + jedis实现缓存管理</h2><p>目的：使用 aop 配合 jedis 和 spring expression 实现缓存管理</p>
<h3 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配合&#123;<span class="doctag">@link</span> CacheAspect&#125;，该注解是切入点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Cacheable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis key 的前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AthenaIotProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模仿spring cache</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(Cacheable)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">cacheable</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> info = log.isInfoEnabled();</span><br><span class="line">        Method method = AopUtils.getMethod(pjp);</span><br><span class="line">        Cacheable cacheable = method.getAnnotation(Cacheable.class);</span><br><span class="line">        String key = getELString(cacheable, method, pjp.getArgs());</span><br><span class="line">        <span class="keyword">int</span> expireIn = properties.getTokenExpireIn();</span><br><span class="line">        Boolean existKey = jedisCluster.exists(key);</span><br><span class="line">        <span class="keyword">if</span> (!existKey) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;缓存中没有 key:&#123;&#125;&quot;</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">            Object obj = pjp.proceed();</span><br><span class="line">            String value = JSON.toJSONString(obj);</span><br><span class="line">            jedisCluster.setex(key, expireIn, value);</span><br><span class="line">            <span class="keyword">if</span> (info) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;缓存token:key=&#123;&#125;, expireIn=&#123;&#125;, value=&#123;&#125;&quot;</span>, key, expireIn, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        String athenaIotTokenString = jedisCluster.get(key);</span><br><span class="line">        <span class="keyword">if</span> (info) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;缓存token:key=&#123;&#125;, expireIn=&#123;&#125;, value=&#123;&#125;&quot;</span>, key, expireIn, athenaIotTokenString);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(athenaIotTokenString, method.getReturnType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getELString</span><span class="params">(Cacheable cacheable, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        EvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">        <span class="comment">//获取被拦截方法参数名列表(使用Spring支持类库)</span></span><br><span class="line">        LocalVariableTableParameterNameDiscoverer nameDiscoverer = <span class="keyword">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class="line">        String[] paraNameArr = nameDiscoverer.getParameterNames(method);</span><br><span class="line">        <span class="comment">//把方法参数放入SPEL上下文中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paraNameArr.length; i++) &#123;</span><br><span class="line">            context.setVariable(paraNameArr[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        String keyPrefix = parser.parseExpression(cacheable.prefix()).getValue(context, String.class);</span><br><span class="line">        String key = parser.parseExpression(cacheable.key()).getValue(context, String.class);</span><br><span class="line">        <span class="keyword">return</span> MessageFormat.format(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>, keyPrefix, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(prefix = &quot;&#x27;token:&#x27;&quot;, key = &quot;#authRequest.appId+&#x27;:&#x27;+#authRequest.secret&quot;)</span></span><br><span class="line"><span class="comment">//@Cacheable(value = &quot;token&quot;, key = &quot;#p0.appId+&#x27;:&#x27;+#p0.secret&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AccessToken <span class="title">getAccessToken</span><span class="params">(AuthenticationRequest authRequest)</span> </span>&#123;</span><br><span class="line">    String tokenUrl = authRequest.getTokenUrl();</span><br><span class="line">    ParameterizedTypeReference typeReference = <span class="keyword">new</span> ParameterizedTypeReference&lt;ResultBean&lt;AccessToken&gt;&gt;()&#123;&#125;;</span><br><span class="line">    ResponseEntity&lt;ResultBean&lt;AccessToken&gt;&gt; entity = restTemplate.exchange(tokenUrl, HttpMethod.GET, <span class="keyword">null</span>, typeReference);</span><br><span class="line">    <span class="keyword">return</span> entity.getBody().getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>jedis</tag>
        <tag>spring expression</tag>
        <tag>aop</tag>
        <tag>aspect</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper 3.4.14 安装部署</title>
    <url>/2020/09/15/Zookeeper-3-4-14-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><blockquote>
<p>下载地址：<a href="http://zookeeper.apache.org/">http://zookeeper.apache.org/</a></p>
</blockquote>
<p>下载过程就不说了，我们下载了最新的<code>zookeeper-3.4.14</code>。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><strong>1、上传安装包</strong></p>
<p>把下载的最新的包（如：zookeeper-3.4.14.tar.gz）上传到服务器，上传的方式也不多说了。</p>
<p><strong>2、解压</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar zxvf zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure>

<p><strong>3、移动到/usr/local目录下</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ln -s zookeeper-3.4.14 /usr/<span class="built_in">local</span>/zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="服务器分配"><a href="#服务器分配" class="headerlink" title="服务器分配"></a>服务器分配</h3><table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>centos-node1</td>
<td>192.168.99.101</td>
</tr>
<tr>
<td>centos-node2</td>
<td>192.168.99.102</td>
</tr>
<tr>
<td>centos-node3</td>
<td>192.168.99.103</td>
</tr>
</tbody></table>
<h4 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h4><p>Zookeeper集群原则上需要2n+1个实例才能保证集群有效性，所以集群规模至少是3台。</p>
<p>下面演示如何创建3台的Zookeeper集群，N台也是如此。</p>
<p><strong>1、创建数据文件存储目录</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zookeeper</span><br><span class="line">$ mkdir data</span><br></pre></td></tr></table></figure>

<p><strong>2、添加主配置文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> conf</span><br><span class="line">$ cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>

<p><strong>3、修改配置</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi zoo.cfg</span><br></pre></td></tr></table></figure>

<p>先把<code>dataDir=/tmp/zookeeper</code>注释掉，然后添加以下核心配置。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/data</span><br><span class="line">server.1=centos-node1:2888:3888</span><br><span class="line">server.2=centos-node2:2888:3888</span><br><span class="line">server.3=centos-node3:2888:3888</span><br></pre></td></tr></table></figure>

<p><strong>4、创建myid文件</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../data</span><br><span class="line">$ touch myid</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;1&quot;</span>&gt;&gt;myid</span><br></pre></td></tr></table></figure>

<p>每台机器的myid里面的值对应server.后面的数字x。</p>
<p><strong>5、开放3个端口</strong></p>
<p>使用 iptables</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo /sbin/iptables -I INPUT -p tcp --dport 2181 -j ACCEPT</span><br><span class="line">$ sudo /sbin/iptables -I INPUT -p tcp --dport 2888 -j ACCEPT</span><br><span class="line">$ sudo /sbin/iptables -I INPUT -p tcp --dport 3888 -j ACCEPT</span><br><span class="line"></span><br><span class="line">$ sudo /etc/rc.d/init.d/iptables save</span><br><span class="line">$ sudo /etc/init.d/iptables restart</span><br><span class="line"></span><br><span class="line">$ sudo /sbin/iptables -L -n</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt <span class="built_in">source</span>               destination         </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:3888 </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:2888 </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           tcp dpt:2181</span><br></pre></td></tr></table></figure>

<p>或者 firewalld</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前区域</span></span><br><span class="line">$ firewall-cmd --get-active-zones</span><br><span class="line"><span class="comment"># 新建一个自定义服务</span></span><br><span class="line">$ firewall-cmd --new-service=zookeeper --permanent</span><br><span class="line">$ firewall-cmd --service=zookeeper --add-port 2181/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=zookeeper --add-port 2888/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=zookeeper --add-port 3888/tcp --permanent</span><br><span class="line"><span class="comment"># 不中断服务的重新加载</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --add-service=zookeeper</span><br><span class="line"><span class="comment"># 将当前防火墙的规则永久保存；</span></span><br><span class="line">$ firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>



<p><strong>6、配置集群其他机器</strong></p>
<p>把配置好的Zookeeper目录复制到其他两台机器上，重复上面4-5步。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -r /usr/<span class="built_in">local</span>/zookeeper centos-node2:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi /etc/profile </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line">ZOOKEEPER_HOME=/usr/<span class="built_in">local</span>/zookeeper</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$ZOOKEEPER_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH HADOOP_HOME HBASE_HOME</span><br></pre></td></tr></table></figure>

<p><strong>7、重启集群</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>3个Zookeeper都要启动。</p>
<p><strong>8、查看集群状态</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh status </span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>

<h4 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./zkCli.sh -server 192.168.99.101:2181</span><br></pre></td></tr></table></figure>

<p>连接本机的不用带-server。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果是在单机创建的多个Zookeeper伪集群，需要对应修改配置中的端口、日志文件、数据文件位置等配置信息。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>zookeeper,大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot使用@JsonView过滤对象属性</title>
    <url>/2019/06/26/Springboot%E4%BD%BF%E7%94%A8-JsonView%E8%BF%87%E6%BB%A4%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>@JsonView是Jackson的一个注解，可以用来过滤序列化对象的字段属性，是你可以选择序列化对象哪些属性，哪些过滤掉。</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li><p>使用接口来声明多个视图</p>
</li>
<li><p>在值对象的get方法上指定视图</p>
</li>
<li><p>在Controller方法上指定视图</p>
</li>
</ol>
<h2 id="步骤-1：使用接口来声明多个视图"><a href="#步骤-1：使用接口来声明多个视图" class="headerlink" title="步骤 1：使用接口来声明多个视图"></a>步骤 1：使用接口来声明多个视图</h2><p>使用同一个对象，面对不同的场景，去声明多个视图。</p>
<p>例如：</p>
<p>有一个 User 对象，里面有id、username、password、birthday等属性</p>
<ul>
<li><p>场景1：获得对象的用户名、密码</p>
</li>
<li><p>场景2：获得对象的全部属性</p>
</li>
</ul>
<p>为了测试，创建一个User实体对象，加入两个接口 UserSimpleView，UserDetailView</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailView</span> <span class="keyword">extends</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Past(message = &quot;生日必须是过去的时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤-2：在值对象的get方法上指定视图"><a href="#步骤-2：在值对象的get方法上指定视图" class="headerlink" title="步骤 2：在值对象的get方法上指定视图"></a>步骤 2：在值对象的get方法上指定视图</h2><p>在实体类 User 里的 get 方法上面加上 @JsonView 注解，并将它绑定到一个指定接口</p>
<p>分两类</p>
<ul>
<li><p>@JsonView(UserSimpleView.class)：绑定 id、username、birthday属性</p>
</li>
<li><p>@JsonView(UserDetailView.class)：绑定 password 属性，继承 UserSimpleView 接口（相当于绑了 UserSimpleView 绑定的属性）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailView</span> <span class="keyword">extends</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Past(message = &quot;生日必须是过去的时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="步骤-3：在Controller方法上指定视图"><a href="#步骤-3：在Controller方法上指定视图" class="headerlink" title="步骤 3：在Controller方法上指定视图"></a>步骤 3：在Controller方法上指定视图</h2><p>在controller中俩个方法分别加上@JsonView注解，在分配上不同场景的接口</p>
<ul>
<li><p>user1：输出视图1</p>
</li>
<li><p>user2：输出视图2</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@JsonView(User.UserSimpleView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">(UserQueryCondition condition)</span> </span>&#123;</span><br><span class="line">        System.out.println(ReflectionToStringBuilder.toString(condition, ToStringStyle.MULTI_LINE_STYLE));</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;id:\d+&#125;:正则表示只接受数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id:\\d+&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@JsonView(User.UserDetailView.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setUsername(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8080/user</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 26 Jun 2019 00:41:03 GMT</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: null,</span><br><span class="line">    &quot;username&quot;: null,</span><br><span class="line">    &quot;birthday&quot;: null</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: null,</span><br><span class="line">    &quot;username&quot;: null,</span><br><span class="line">    &quot;birthday&quot;: null</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;id&quot;: null,</span><br><span class="line">    &quot;username&quot;: null,</span><br><span class="line">    &quot;birthday&quot;: null</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>返回结果中没有密码属性</p>
<figure class="highlight"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">GET http://localhost:8080/user/1</span><br><span class="line"></span><br><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Wed, 26 Jun 2019 00:41:56 GMT</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;username&quot;: &quot;tom&quot;,</span><br><span class="line">  &quot;password&quot;: &quot;tom&quot;,</span><br><span class="line">  &quot;birthday&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果中包含了密码字段。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说明 @OneView 只会序列化 username、password 属性，TwoView 会序列化username、password、realName、sex属性。</p>
<p>因此想设置不同接口的不同场景,可以用 @JsonView 达到某些目的。</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>ab使用教程</title>
    <url>/2021/08/02/ab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>ab全称Apache HTTP server benchmarking tool的缩写，是Apache自带的网站benchmark测试工具。使用非常方便，简约而不简单。</p>
<p>官方网站：<a href="https://httpd.apache.org/docs/2.4/programs/ab.html">https://httpd.apache.org/docs/2.4/programs/ab.html</a></p>
<blockquote>
<p><strong>TIPS</strong></p>
<p>可达到ab相同效果的工具： </p>
<ul>
<li><p>wrk：<a href="https://github.com/wg/wrk">https://github.com/wg/wrk</a> </p>
</li>
<li><p>wrk2：<a href="https://github.com/giltene/wrk2">https://github.com/giltene/wrk2</a> </p>
</li>
<li><p>JMeter：<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a> </p>
</li>
<li><p>Locust：<a href="https://locust.io/">https://locust.io/</a></p>
</li>
</ul>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h2><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a><strong>macOS</strong></h3><p>系统自带，直接使用即可。</p>
<h3 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a><strong>CentOS 7</strong></h3><p>运行如下命令即可安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h3><ul>
<li>前往 <a href="https://www.apachehaus.com/cgi-bin/download.plx">https://www.apachehaus.com/cgi-bin/download.plx</a> 下载ab安装包。</li>
<li>解压，将目录切换到安装包的bin目录，并在终端中执行如下命令即可</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ab xxxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>TIPS</strong></p>
<p>由于笔者没有Windows环境，所以此步骤无法亲测。<br>亲们可百度 “Windows 安装 ab”，参照结果安装即可。资料非常丰富。</p>
</blockquote>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a><strong>使用说明</strong></h2><p>ab是一个命令行工具，使用说明如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ ab -help</span><br><span class="line"></span><br><span class="line">Usage: ab [options] [http[s]://]hostname[:port]/path</span><br><span class="line"></span><br><span class="line">Options are:</span><br><span class="line"></span><br><span class="line">  -n requests   指定请求多少次</span><br><span class="line"></span><br><span class="line">  -c concurrency 指定并发数(指定同时发送几个请求)</span><br><span class="line"></span><br><span class="line">  -t timelimit  测试持续的最长时间，默认无限制，此参数隐含-n 50000</span><br><span class="line"></span><br><span class="line">  -s timeout   每个请求的超时时间，默认30秒</span><br><span class="line"></span><br><span class="line">  -b windowsize  指定TCP收发缓存大小，单位字节</span><br><span class="line"></span><br><span class="line">  -B address   指定在发起连接时绑定的IP地址</span><br><span class="line"></span><br><span class="line">  -p postfile   指定想要POST的文件，需和-T参数配合使用</span><br><span class="line"></span><br><span class="line">  -u putfile   指定想要PUT的文件，需和-T参数配合使用</span><br><span class="line"></span><br><span class="line">  -T content-type 指定POST/PUT文件时的Content-type。默认text/plain</span><br><span class="line"></span><br><span class="line">  -v verbosity  详细模式，打印更多日志</span><br><span class="line"></span><br><span class="line">  -w       将结果输出到html表格中</span><br><span class="line"></span><br><span class="line">  -i       使用HEAD方式代替GET发起请求</span><br><span class="line"></span><br><span class="line">  -x attributes  插入字符串作为table标签的属性</span><br><span class="line"></span><br><span class="line">  -y attributes  插入字符串作为tr标签的属性</span><br><span class="line"></span><br><span class="line">  -z attributes  插入字符串作为td或th标签的属性</span><br><span class="line"></span><br><span class="line">  -C attribute  添加Cookie，例如Apache=1234；可重复该参数选项以添加多个Cookie</span><br><span class="line"></span><br><span class="line">  -H attribute  添加任意的请求头，例如Accept-Encoding: gzip；可重复该参数选项以添加多个</span><br><span class="line"></span><br><span class="line">  -A attribute  添加Basic WWW认证信息，用户名和密码之间用:分隔</span><br><span class="line"></span><br><span class="line">  -P attribute  添加Basic Proxy认证信息，用户名和密码之间用:分隔</span><br><span class="line"></span><br><span class="line">  -X proxy:port  指定代理地址</span><br><span class="line"></span><br><span class="line">  -V       打印ab的版本信息</span><br><span class="line"></span><br><span class="line">  -k       使用HTTP的KeepAlive特性</span><br><span class="line"></span><br><span class="line">  -d       不显示百分比</span><br><span class="line"></span><br><span class="line">  -S       不显示预估和警告信息</span><br><span class="line"></span><br><span class="line">  -q       默认情况下，如果处理的请求数大于150，ab每处理大约10%或者100个请求时，打印一下进度信息。使用该参数后则不打印进度。</span><br><span class="line"></span><br><span class="line">  -g filename   输出结果信息到gnuplot格式的文件中</span><br><span class="line"></span><br><span class="line">  -e filename   输出结果信息到CSV格式的文件中</span><br><span class="line"></span><br><span class="line">  -r       指定接收到错误信息时不退出程序</span><br><span class="line"></span><br><span class="line">  -h       显示使用说明</span><br><span class="line"></span><br><span class="line">  -Z ciphersuite 指定SSL/TLS密码套件</span><br><span class="line"></span><br><span class="line">  -f protocol   指定SSL/TLS协议(SSL3, TLS1, TLS1.1, TLS1.2 or ALL)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ab -c 100 -n 10000 http://www.baidu.com/</span><br></pre></td></tr></table></figure>

<p>表示并发100，请求baidu 10000次。</p>
<blockquote>
<p><strong>TIPS</strong></p>
<p><a href="http://www.baidu.com/">http://www.baidu.com/</a> 不能写成 <a href="http://www.baidu.com/">http://www.baidu.com</a> 。</p>
<p>这是因为 <a href="http://www.baidu.com/">http://www.baidu.com</a> 不符合ab要求的 [http[s]://]hostname[:port]/path 格式要求。这是个小坑，需要注意一下。</p>
</blockquote>
<h2 id="报表解读"><a href="#报表解读" class="headerlink" title="报表解读"></a><strong>报表解读</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">➜ ab -c 10 -n 1000 http://www.baidu.com/</span><br><span class="line"></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1843412 $&gt;</span><br><span class="line"></span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line"></span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking www.baidu.com (be patient)</span><br><span class="line"></span><br><span class="line">Completed 100 requests</span><br><span class="line"></span><br><span class="line">Completed 200 requests</span><br><span class="line"></span><br><span class="line">Completed 300 requests</span><br><span class="line"></span><br><span class="line">Completed 400 requests</span><br><span class="line"></span><br><span class="line">Completed 500 requests</span><br><span class="line"></span><br><span class="line">Completed 600 requests</span><br><span class="line"></span><br><span class="line">Completed 700 requests</span><br><span class="line"></span><br><span class="line">Completed 800 requests</span><br><span class="line"></span><br><span class="line">Completed 900 requests</span><br><span class="line"></span><br><span class="line">Completed 1000 requests</span><br><span class="line"></span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 展示测试地址所使用的服务器软件及版本</span></span><br><span class="line">Server Software:    BWS/1.1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试地址的主机名</span></span><br><span class="line">Server Hostname:    www.baidu.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试地址的端口</span></span><br><span class="line">Server Port:      80</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试地址的路径</span></span><br><span class="line">Document Path:     /</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试地址的文档大小</span></span><br><span class="line">Document Length:    255598 bytes</span><br><span class="line"><span class="meta">#</span><span class="bash"> 并发数</span></span><br><span class="line">Concurrency Level:   10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试花费了多久</span></span><br><span class="line">Time taken for tests:  81.881 seconds</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试总共请求了多少次</span></span><br><span class="line">Complete requests:   1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 失败的请求数</span></span><br><span class="line">Failed requests:    979</span><br><span class="line"></span><br><span class="line">  (Connect: 0, Receive: 0, Length: 979, Exceptions: 0)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 传输的总数据量</span></span><br><span class="line">Total transferred:   256761473 bytes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> HTML文档的总数据量</span></span><br><span class="line">HTML transferred:    255605512 bytes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 平均每秒的请求数，也叫RPS，该值越大表示服务器吞吐量越大，性能表现越好</span></span><br><span class="line">Requests per second:  12.21 [#/sec] (mean)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求平均耗时，越小说明响应越快</span></span><br><span class="line">Time per request:    818.815 [ms] (mean)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器平均处理时间，其实是服务器吞吐量的倒数</span></span><br><span class="line">Time per request:    81.881 [ms] (mean, across all concurrent requests)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每秒获取的数据长度，单位单位：KB/s</span></span><br><span class="line">Transfer rate:     3062.28 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接时间统计信息</span></span><br><span class="line">Connection Times (ms)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">       最小 平均     中值  最大</span></span><br><span class="line"></span><br><span class="line">​       min mean[+/-sd] median  max</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接时间</span></span><br><span class="line">Connect:    17 154 118.0  135  1416</span><br><span class="line"><span class="meta">#</span><span class="bash"> 处理时间</span></span><br><span class="line">Processing:  329 661 211.2  602  1824</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待时间</span></span><br><span class="line">Waiting:    22 160 88.4  143  1089</span><br><span class="line"><span class="meta">#</span><span class="bash"> 总计时间</span></span><br><span class="line">Total:    391 816 263.4  731  2521</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 请求耗时的统计信息。例如请求经过排序后，50百分位的请求花费了731毫秒；99百分位的请求花费了1942毫秒等</span></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"></span><br><span class="line"><span class="meta"> 50%</span><span class="bash">  731</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 66%</span><span class="bash">  804</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 75%</span><span class="bash">  873</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 80%</span><span class="bash">  943</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 90%</span><span class="bash">  1154</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 95%</span><span class="bash">  1332</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 98%</span><span class="bash">  1726</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> 99%</span><span class="bash">  1942</span></span><br><span class="line"></span><br><span class="line"><span class="meta">100%</span><span class="bash">  2521 (longest request)</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>cron表达式常用例子</title>
    <url>/2019/11/27/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E7%94%A8%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<h1 id="cron表达式常用例子"><a href="#cron表达式常用例子" class="headerlink" title="cron表达式常用例子"></a>cron表达式常用例子</h1><p>cron 表达式的写法老是记不住，当然也是我根本不想记得原因所致。</p>
<p>这里记录一下，有用到就来看一下</p>
<span id="more"></span>

<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>cron(秒 分钟 小时 日 月 星期 年)</p>
<h2 id="cron-的表达式的例子"><a href="#cron-的表达式的例子" class="headerlink" title="cron 的表达式的例子"></a>cron 的表达式的例子</h2><p>　　（1）0/2 * * * * ?   表示每2秒 执行任务</p>
<p>　　（2）0 0/2 * * * ?    表示每2分钟 执行任务</p>
<p>　　（3）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</p>
<p>　　（4）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</p>
<p>　　（5）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p>
<p>　　（6）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 </p>
<p>　　（7）0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时 </p>
<p>　　（8）0 0 12 ? * WED    表示每个星期三中午12点 </p>
<p>　　（9）0 0 12 * * ?   每天中午12点触发 </p>
<p>　　（10）0 15 10 ? * *    每天上午10:15触发 </p>
<p>　　（11）0 15 10 * * ?     每天上午10:15触发 </p>
<p>　　（12）0 15 10 * * ?    每天上午10:15触发 </p>
<p>　　（13）0 15 10 * * ? 2005    2005年的每天上午10:15触发 </p>
<p>　　（14）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 </p>
<p>　　（15）0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 </p>
<p>　　（16）0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </p>
<p>　　（17）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 </p>
<p>　　（18）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 </p>
<p>　　（19）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 </p>
<p>　　（20）0 15 10 15 * ?    每月15日上午10:15触发 </p>
<p>　　（21）0 15 10 L * ?    每月最后一日的上午10:15触发 </p>
<p>　　（22）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 </p>
<p>　　（23）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 </p>
<p>　　（24）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>apt-get在基于Ubuntu基础镜像Dockerfile中的常见用法</title>
    <url>/2020/05/28/apt-get%E5%9C%A8%E5%9F%BA%E4%BA%8EUbuntu%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8FDockerfile%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>首先，在Ubuntu的Docker官方镜像中是没有缓存Apt的软件包列表的。因此在做其他任何基础软件的安装前，都需要至少先做一次apt-get update。有时为了加快apt-get安装软件的速度，还需要修改Apt源的列表文件/etc/apt/sources.list。相应的操作用命令表示如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>在容器构建时，为了避免使用apt-get install安装基础软件的过程中需要进行交互操作，使用-y参数来避免安装非必须的文件，从而减小镜像的体积。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get -y --no-install-recommends install</span><br></pre></td></tr></table></figure>

<p>使用<code>apt-get autoremove</code>命令移除为了满足包依赖而安装的、但不再需要的包；使用<code>apt-get clean</code>命令清除所获得包文件的本地仓库。</p>
<p><code>DEBIAN_FRONTEND</code>这个环境变量，告知操作系统应该从哪儿获得用户输入。如果设置为<code>noninteractive</code>，你就可以直接运行命令，而无需向用户请求输入（所有操作都是非交互式的）。这在运行apt-get命令的时候格外有用，因为它会不停的提示用户进行到了哪步并且需要不断确认。非交互模式会选择默认的选项并以最快的速度完成构建。请确保只在Dockerfile中调用的RUN命令中设置了该选项，而不是使用ENV命令进行全局的设置。因为ENV命令在整个容器运行过程中都会生效，所以当你通过BASH和容器进行交互时，如果进行了全局设置那就会出问题。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的做法 - 只为这个命令设置ENV变量</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> DEBIAN_FRONTEND=noninteractive apt-get install -y python3</span></span><br><span class="line"><span class="comment"># 错误地做法 - 为接下来的任何命令都设置ENV变量，包括正在运行地容器</span></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND noninteractive</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y python3</span></span><br></pre></td></tr></table></figure>

<p>示例:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ali apt-get source.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv /etc/apt/sources.list /etc/apt/sources.list.bak &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://archive.ubuntu.com/ubuntu xenial main restricted&quot;</span> &gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://archive.canonical.com/ubuntu xenial partner&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://archive.canonical.com/ubuntu xenial partner&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe&quot;</span> &gt;&gt;/etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse&quot;</span> &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">        ca-certificates \</span></span><br><span class="line"><span class="bash">        vim \</span></span><br><span class="line"><span class="bash">        python \</span></span><br><span class="line"><span class="bash">        libopencv-dev \</span></span><br><span class="line"><span class="bash">        python-pip \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --upgrade pip \</span></span><br><span class="line"><span class="bash">    numpy \</span></span><br><span class="line"><span class="bash">    pymongo \</span></span><br><span class="line"><span class="bash">    opencv-python</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://www.aiuai.cn/aifarm299.html">Docker - 更换内部Ubuntu apt 为国内源</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>ubuntu,docker,apt-get,</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch</title>
    <url>/2019/08/07/elasticsearch/</url>
    <content><![CDATA[<h2 id="解决Elasticsearch-head插件链接不上服务"><a href="#解决Elasticsearch-head插件链接不上服务" class="headerlink" title="解决Elasticsearch-head插件链接不上服务"></a>解决Elasticsearch-head插件链接不上服务</h2><p>修改elasticsearch.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">$ES_HOME$/config/elasticsearch.yml</span></span><br><span class="line"><span class="comment"># 增加如下字段</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<p>重启ES</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>code review</title>
    <url>/2021/04/28/code-review/</url>
    <content><![CDATA[<p>前不久Google开源了一份文档（谷歌工程实践文档），里面包含了他们的代码评审（Code Review）指南，通读之后我发现这份文档非常有价值，所以决定写一篇文章将一些入门的，科普性质的部分翻译并总结成一篇文章帮助大家了解下Google的代码评审。</p>
<p>在Google开源的文档中，有两个内部的专业术语：CL和LGTM：</p>
<ul>
<li><p>CL，全称为“Change List”，表示已提交到版本控制或正在进行代码评审的一个独立更改。</p>
<blockquote>
<p>我理解和Github上的PR有点类似。</p>
</blockquote>
</li>
<li><p>LGTM，表示“Looks Good to Me”，当某个CL被批准后，评审者会说LGTM。</p>
</li>
</ul>
<span id="more"></span>

<h2 id="1-什么是代码评审"><a href="#1-什么是代码评审" class="headerlink" title="1. 什么是代码评审"></a>1. 什么是代码评审</h2><p>代码评审是评审者（某段代码作者之外的人），对某段代码进行检查（审核）的一个过程。</p>
<p>我们可以使用代码评审来维持代码和产品的质量，代码评审的主要目的是确保代码库的整体健康状况会随着时间不断改善。</p>
<p>代码评审的另一个重要功能是，它可以教给开发者一些关于语言，框架，常用的设计原则等知识。</p>
<h3 id="1-1-评审什么"><a href="#1-1-评审什么" class="headerlink" title="1.1 评审什么"></a>1.1 评审什么</h3><p>当进行代码评审时，评审者应该评审：</p>
<ul>
<li>设计：代码是否拥有良好的设计，并适用于项目整体设计。</li>
<li>功能：代码的行为是否是作者想要的？这种行为对用户是否友好。</li>
<li>复杂度：能否让代码更简单？如果未来某一天，其他开发者遇到这段代码时，他们能否很容易理解并使用这段代码？</li>
<li>测试：代码是否拥有正确，且设计良好的测试。</li>
<li>命名：是否为变量，类，方法等选择了清晰的名字？</li>
<li>注释：注释是否清晰且有用</li>
<li>风格：代码风格是否符合项目标准</li>
<li>文档：开发者是否更新了相关的文档</li>
</ul>
<p>本文的后面会针对上面提到的几点进行更详细的介绍。</p>
<h3 id="1-2-选择合适的审核者"><a href="#1-2-选择合适的审核者" class="headerlink" title="1.2 选择合适的审核者"></a>1.2 选择合适的审核者</h3><p>通常，开发者希望找到可以在合理的时间内响应自己审核需求的最合适的审核者。</p>
<p>最合适的审核者是能够为代码片段提供最彻底，最正确地审核的人，通常是代码的主人。有时可能会请求不同的人帮自己评审CL的不同部分。</p>
<p>如果与自己“结对编程”的人有资格作为这段代码的审核者，那么该代码将被视为已审核。</p>
<h3 id="1-3-代码评审标准"><a href="#1-3-代码评审标准" class="headerlink" title="1.3 代码评审标准"></a>1.3 代码评审标准</h3><p>评审者有责任确保每个CL的质量都使得代码库的整体健康状况不会随着时间而减少。这很困难，通常随着时间推移，代码库的健康会缓慢下降，尤其是团队处在时间限制下，为了快速迭代功能时。</p>
<p><strong>通常，只要CL可以改善整体代码的健康，评审者就应该批准，即便CL并不完美。</strong></p>
<p>这是所有代码评审指南中的最高原则。</p>
<blockquote>
<p>当然，这是有局限性的。例如，如果CL添加了评审者不希望出现在系统中的功能时，那么可以拒绝批准，即便代码拥有良好的设计。</p>
</blockquote>
<p>这里的关键点是，没有“完美”的代码，只有更好的代码。评审者追求的是持续改进，而不是追求完美。</p>
<p>总体而言，只要一个CL能对整个系统的维护性，可读性和可理解性起到改善的作用，评审者就不应该因为它不是“完美”的而被延迟几天或几周再批准。</p>
<p>评审者应该随时发表评论，表示某些代码可以变得更好，但是如果不是很重要，那么可以加上前缀“Nit:”让作者知道这仅仅是一个建议，可以选择忽略。</p>
<p>留下一些可以帮助开发者学习新东西的评论总是好的，随着时间的推移，分享知识是改善代码健康的一部分。但请记住，如果评论仅仅是出于教育目的，请在评论前面加上“Nit:”前缀，表明不是强制要求作者在此CL中对其进行解决。</p>
<h4 id="1-3-1-原则"><a href="#1-3-1-原则" class="headerlink" title="1.3.1 原则"></a>1.3.1 原则</h4><ul>
<li>技术事实和数据要优先于个人喜好和意见</li>
<li>关于风格问题，团队的风格指南是绝对的权威。不在风格指南中的任何代码习惯都属于个人喜好问题。风格应该与现有代码保持一致。如果之前没有规定这样的代码风格，则接受CL作者的风格。</li>
<li>软件设计方面从来不是纯粹的风格问题或个人喜好问题，它们基于基本原则，而不是简单的个人偏好。有时，会有几个不同的可行方案，如果作者能够通过数据或基于可靠的工程原则证明几种方案同样有效，那么评审者应该接受作者的偏好。否则，还是根据软件设计的标准原则进行选择。</li>
<li>如果没有其他适用规则，则评审者可以要求作者的偏好与当前代码库保持一致，只要这不会影响整体代码的健康情况。</li>
</ul>
<h2 id="2-代码评审"><a href="#2-代码评审" class="headerlink" title="2. 代码评审"></a>2. 代码评审</h2><p>注意：在考虑以下要点时，始终确保考虑到前面提到的“代码评审标准”。</p>
<h3 id="2-1-评审“设计”"><a href="#2-1-评审“设计”" class="headerlink" title="2.1 评审“设计”"></a>2.1 评审“设计”</h3><p>代码评审中最重要的事情是CL的总体设计。代码中的各个部分之间的交互是否有意义？本次修改应该放在代码仓库中吗？它与系统中的其他部分可以完美结合在一起吗？现在是添加这个功能的好时机吗？</p>
<h3 id="2-2-评审“功能”"><a href="#2-2-评审“功能”" class="headerlink" title="2.2 评审“功能”"></a>2.2 评审“功能”</h3><p>CL的功能是否符合开发者的预期？开发者想为用户提供哪些功能？</p>
<p>通常我们希望开发者会为CL提供良好的测试，但是作为评审者，仍然应该考虑一些极端情况，寻找并发现问题。尝试像用户一样思考，来确保这个功能没有bug，而不仅仅是通过阅读代码就确定没有bug。</p>
<p>当CL是对用户有影响的改动（例如：修改了UI上某个功能），最重要的事是检查CL的行为。因为评审者只是阅读代码很难理解这个代码修改会对用户产生什么影响，对于这样的修改，如果评审者检查CL的行为过于麻烦，可以让开发者提供该功能的演示。</p>
<h3 id="2-3-评审“复杂度”"><a href="#2-3-评审“复杂度”" class="headerlink" title="2.3 评审“复杂度”"></a>2.3 评审“复杂度”</h3><p>CL是否可以实现的更简单？对CL的所有“级别”进行检查。某行代码是否过于复杂？功能是否过于复杂？类是否过于复杂？“过于复杂”通常意味着<strong>代码的阅读者不能快速理解</strong>。还意味着开发者在尝试调用或修改此代码时，可能会引入bug。</p>
<p>关于复杂，有一种特殊的类型，叫做“过度设计”，开发者让代码过分通用，或添加了一些暂时还不需要的功能。评审者应该特别警惕过度设计。鼓励开发者解决他们现在需要解决的已知问题，而不是开发者推测的将来可能需要解决的问题。未来的问题应该在问题来临时解决。</p>
<h3 id="2-4-评审“测试”"><a href="#2-4-评审“测试”" class="headerlink" title="2.4 评审“测试”"></a>2.4 评审“测试”</h3><p>根据修改的内容进行单元测试，集成测试或端到端测试。确保CL中的测试正确，合理且有用，开发者必须确保测试有效。</p>
<p>测试也是必须维护的代码，不要因为代码是测试代码就接受代码的复杂性。</p>
<h3 id="2-5-评审“命名”"><a href="#2-5-评审“命名”" class="headerlink" title="2.5 评审“命名”"></a>2.5 评审“命名”</h3><p>开发者是否为所有命名都选择了一个好名字？好名字应该足够长，以充分表达含义和作用，而又不会太长而难以阅读。</p>
<h3 id="2-6-评审“注释”"><a href="#2-6-评审“注释”" class="headerlink" title="2.6 评审“注释”"></a>2.6 评审“注释”</h3><p>开发人员是否写下了清晰的注释？所有注释都是必要的吗？通常当注释解释了代码为什么存在时非常有用，不应该解释代码做了什么，如果代码不能清晰的解释自身，则应该让代码更简单。有一些例外的情况（正则表达式与复杂的算法通常会从解释他们作用的注释中受益匪浅），但大多数注释是针对代码本身无法包含的信息，例如决策背后的原因。</p>
<h3 id="2-7-评审“风格”"><a href="#2-7-评审“风格”" class="headerlink" title="2.7 评审“风格”"></a>2.7 评审“风格”</h3><p>请确保CL的风格与团队的风格指南保持一致。</p>
<p>如果想改善风格指南中没有提到的部分，请在注释前面加上“ Nit：”，以使开发者知道这是可以改善但不是强制性的选择。</p>
<p>CL不应该将风格改动和其他改动结合在一起提交，这会导致查看CL中有哪些改动变得非常困难，还会使merge与回滚也更加复杂。例如，如果开发者想重新格式化整个文件，则需要将重新格式化的改动作为一个CL提交，然后再发送另一个具有功能改动的CL。</p>
<h3 id="2-8-评审“文档”"><a href="#2-8-评审“文档”" class="headerlink" title="2.8 评审“文档”"></a>2.8 评审“文档”</h3><p>如果CL改变了用户构建，测试，交互或发布代码的方式，请检查是否更新了相关文档。如果CL删除或弃用了代码，请考虑是否应该删除该文档。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本文提到的内容只是谷歌工程实践文档中的一小部分，感兴趣的可以看原文了解更多。</p>
<p>通读了一遍谷歌工程实践文档后，我发现代码评审在Google内部是开发流程的一部分，和在Github上为开源项目贡献PR类似，开发者提交了PR后，项目作者肯定会先Review一遍代码，然后再决定是否将代码合并到仓库中，没有经过Review的代码是无法合并到仓库里的。</p>
<p>但大部分公司不是这么开发项目的，我觉得这也是代码评审普遍做得不够好的原因。</p>
<p>可能很多人会对代码评审有很多疑问，例如，将代码评审作为项目开发必须要走的一环，是否会降低开发效率。代码评审是否会消耗评审者很多时间。开发者和评审者之间发生了冲突怎么办等问题。</p>
<p>这些问题在谷歌工程实践文档中有清晰的解释，感兴趣的可以去看原文。原文地址：<a href="https://github.com/google/eng-practices">https://github.com/google/eng-practices</a></p>
]]></content>
      <tags>
        <tag>code review</tag>
      </tags>
  </entry>
  <entry>
    <title>flink资料汇总</title>
    <url>/2021/04/08/flink%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://ververica.cn/wp-content/uploads/2020/03/Apache-Flink-Stateful-Computations-over-Data-Streams.pdf">Flink知识图谱</a></p>
</li>
<li><p><a href="https://ververica.cn/">中文社区</a></p>
</li>
<li><p><a href="https://github.com/flink-china">https://github.com/flink-china</a></p>
</li>
<li><p><a href="https://github.com/flink-china/flink-training-course">Flink 中文视频课程（持续更新…）</a></p>
</li>
<li><p><a href="https://www.iteblog.com/archives/category/flink/">https://www.iteblog.com/archives/category/flink/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>filebeat</title>
    <url>/2019/08/07/filebeat/</url>
    <content><![CDATA[<h2 id="filebeat"><a href="#filebeat" class="headerlink" title="filebeat"></a>filebeat</h2><h2 id="filebeat合并多行日志示例"><a href="#filebeat合并多行日志示例" class="headerlink" title="filebeat合并多行日志示例"></a>filebeat合并多行日志示例</h2><p>本节中的示例包括以下内容：</p>
<ul>
<li>将Java堆栈跟踪日志组合成一个事件</li>
<li>将C风格的日志组合成一个事件</li>
<li>结合时间戳处理多行事件</li>
</ul>
<h3 id="Java堆栈跟踪"><a href="#Java堆栈跟踪" class="headerlink" title="Java堆栈跟踪"></a>Java堆栈跟踪</h3><h4 id="Java示例一"><a href="#Java示例一" class="headerlink" title="Java示例一"></a>Java示例一</h4><p>Java堆栈跟踪由多行组成，每一行在初始行之后以空格开头，如本例中所述:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">        at com.example.myproject.Book.getTitle(Book.java:16)</span><br><span class="line">        at com.example.myproject.Author.getBookTitles(Author.java:25)</span><br><span class="line">        at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</span><br></pre></td></tr></table></figure>

<p>要将这些行整合到Filebeat中的单个事件中，请使用以下多行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;^[[:space:]]&#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure>

<p>此配置将以空格开头的所有行合并到上一行。</p>
<h4 id="Java示例二"><a href="#Java示例二" class="headerlink" title="Java示例二"></a>Java示例二</h4><p>下面是一个Java堆栈跟踪日志，稍微复杂的例子:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalStateException: A book has a null property</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:38)</span><br><span class="line">       at com.example.myproject.Bootstrap.main(Bootstrap.java:14)</span><br><span class="line">Caused by: java.lang.NullPointerException</span><br><span class="line">       at com.example.myproject.Book.getId(Book.java:22)</span><br><span class="line">       at com.example.myproject.Author.getBookIds(Author.java:35)</span><br><span class="line">       ... 1 more</span><br></pre></td></tr></table></figure>

<p>要将这些行整合到Filebeat中的单个事件中，请使用以下多行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;^[[:space:]]+(at|\.&#123;3&#125;)\b|^Caused by:&#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure>

<p>此配置解释如下：</p>
<ul>
<li>将以空格开头的所有行合并到上一行</li>
<li>并把以Caused by开头的也追加到上一行</li>
</ul>
<h3 id="C风格的日志"><a href="#C风格的日志" class="headerlink" title="C风格的日志"></a>C风格的日志</h3><p>一些编程语言在一行末尾使用反斜杠 <code>\</code> 字符，表示该行仍在继续，如本例中所示:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;%10.10ld  \t %10.10ld \t %s\</span></span><br><span class="line"><span class="string">  %f&quot;</span>, w, x, y, z );</span><br></pre></td></tr></table></figure>

<p>要将这些行整合到Filebeat中的单个事件中，请使用以下多行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;\\$&#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">before</span></span><br></pre></td></tr></table></figure>

<p>此配置将以\字符结尾的任何行与后面的行合并。</p>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>来自Elasticsearch等服务的活动日志通常以时间戳开始，然后是关于特定活动的信息，如下例所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2015-08-24 11:49:14,389][INFO ][env                      ] [Letha] using [1] data paths, mounts [[&#x2F;</span><br><span class="line">(&#x2F;dev&#x2F;disk1)]], net usable_space [34.5gb], net total_space [118.9gb], types [hfs]</span><br></pre></td></tr></table></figure>

<p>要将这些行整合到Filebeat中的单个事件中，请使用以下多行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;^\[[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br></pre></td></tr></table></figure>

<p>此配置使用negate: true和match: after设置来指定任何不符合指定模式的行都属于上一行。</p>
<h3 id="应用程序事件"><a href="#应用程序事件" class="headerlink" title="应用程序事件"></a>应用程序事件</h3><p>有时您的应用程序日志包含以自定义标记开始和结束的事件，如以下示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2015-08-24 11:49:14,389] Start new event</span><br><span class="line">[2015-08-24 11:49:14,395] Content of processing something</span><br><span class="line">[2015-08-24 11:49:14,399] End event</span><br></pre></td></tr></table></figure>

<p>要在Filebeat中将其整合为单个事件，请使用以下多行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">multiline.pattern:</span> <span class="string">&#x27;Start new event&#x27;</span></span><br><span class="line"><span class="attr">multiline.negate:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">multiline.match:</span> <span class="string">after</span></span><br><span class="line"><span class="attr">multiline.flush_pattern:</span> <span class="string">&#x27;End event&#x27;</span></span><br></pre></td></tr></table></figure>

<p>此配置把指定字符串开头，指定字符串结尾的多行合并为一个事件。</p>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>filebeat</tag>
      </tags>
  </entry>
  <entry>
    <title>一个 Flink 简单的入门 quickstart</title>
    <url>/2021/04/06/flink-java-quickstart/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Mac-OS-安装-flink"><a href="#Mac-OS-安装-flink" class="headerlink" title="Mac OS 安装 flink"></a>Mac OS 安装 flink</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install apache-flink</span><br></pre></td></tr></table></figure>

<h2 id="启动-flink"><a href="#启动-flink" class="headerlink" title="启动 flink"></a>启动 flink</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/opt/apache-flink/libexec/bin/start-cluster.sh</span><br></pre></td></tr></table></figure>

<p>查看 flink 的 Web 界面 <a href="http://localhost:8081/">http://localhost:8081/</a></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/flink_quickstart_launch_flink.png" alt="flink_quickstart_launch_flink.png"></p>
<h2 id="新建一个-maven-工程"><a href="#新建一个-maven-工程" class="headerlink" title="新建一个 maven 工程"></a>新建一个 maven 工程</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SocketTextStreamWordCount"><a href="#SocketTextStreamWordCount" class="headerlink" title="SocketTextStreamWordCount"></a>SocketTextStreamWordCount</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.fengxuechao.example.flink.quickstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.FlatMapFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketTextStreamWordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数检查</span></span><br><span class="line">        <span class="keyword">if</span> (args.length != <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;USAGE:\nSocketTextStreamWordCount &lt;hostname&gt; &lt;port&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String hostname = args[<span class="number">0</span>];</span><br><span class="line">        Integer port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set up the streaming execution environment</span></span><br><span class="line">        <span class="keyword">final</span> StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        DataStreamSource&lt;String&gt; stream = env.socketTextStream(hostname, port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        SingleOutputStreamOperator&lt;Tuple2&lt;String, Integer&gt;&gt; sum = stream.map(value -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;map:&quot;</span> + value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;).flatMap(<span class="keyword">new</span> LineSplitter())</span><br><span class="line">                .keyBy(<span class="number">0</span>)</span><br><span class="line">                .sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        sum.print();</span><br><span class="line"></span><br><span class="line">        env.execute(<span class="string">&quot;Java WordCount from SocketTextStream Example&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LineSplitter</span> <span class="keyword">implements</span> <span class="title">FlatMapFunction</span>&lt;<span class="title">String</span>, <span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatMap</span><span class="params">(String s, Collector&lt;Tuple2&lt;String, Integer&gt;&gt; collector)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;LineSplitter.value:&quot;</span>+s);</span><br><span class="line">            String[] tokens = s.toLowerCase().split(<span class="string">&quot;\\W+&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;LineSplitter.value.splits:&quot;</span>+ Arrays.toString(tokens));</span><br><span class="line">            <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">                <span class="keyword">if</span> (token.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    collector.collect(<span class="keyword">new</span> Tuple2&lt;String, Integer&gt;(token, <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;LineSplitter.value.split:&quot;</span>+ token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="maven-项目打包"><a href="#maven-项目打包" class="headerlink" title="maven 项目打包"></a>maven 项目打包</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<h3 id="监听-9000-端口"><a href="#监听-9000-端口" class="headerlink" title="监听 9000 端口"></a>监听 9000 端口</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nc -l 9000</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/flink_quickstart_nc.png" alt="img.png"></p>
<h3 id="使用-flink-运行程序"><a href="#使用-flink-运行程序" class="headerlink" title="使用 flink 运行程序"></a>使用 flink 运行程序</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">flink run -c org.fengxuechao.example.flink.quickstart.SocketTextStreamWordCount flink/quickstart/target/quickstart-1.0-SNAPSHOT.jar 127.0.0.1 9000</span><br></pre></td></tr></table></figure>

<h3 id="查看-flink-界面的日志"><a href="#查看-flink-界面的日志" class="headerlink" title="查看 flink 界面的日志"></a>查看 flink 界面的日志</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/flink_quickstart_webui_log.png" alt="img.png"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>flink集群安装</title>
    <url>/2021/04/08/flink%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>Flink 是一个以 Java 及 Scala 作为开发语言的开源大数据项目，代码开源在 GitHub 上，并使用 Maven 来编译和构建项目。</p>
<p>关于开发测试环境，Mac OS、Linux 系统或者 Windows 都可以。如果使用的是 Windows 10 系统，建议使用 Windows 10 系统的 Linux 子系统来编译和运行。</p>
<span id="more"></span>

<p>Flink支持多种安装模式。</p>
<ul>
<li>local（本地）——单机模式，一般不使用 </li>
<li>standalone——独立模式，Flink自带集群，开发测试环境使用 </li>
<li>yarn——计算资源统一由Hadoop YARN管理，生产环境测试</li>
</ul>
<h1 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h1><p>运行 Flink 应用其实非常简单，但是在运行 Flink 应用之前，还是有必要了解 Flink 运行时的各个组件，因为这涉及到 Flink 应用的配置问题。</p>
<p>Flink 实际运行时包括两类进程（下图所示）：</p>
<ul>
<li>JobManager（又称为 JobMaster）：协调 Task 的分布式执行，包括调度 Task、协调创建 Checkpoint 以及当 Job failover 时协调各个 Task 从 Checkpoint 恢复等。</li>
<li>TaskManager（又称为 Worker）：执行 Dataflow 中的 Tasks，包括内存 Buffer 的分配、Data Stream 的传递等。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/3.png" alt="Flink Runtime 架构图"></p>
<p>Flink Runtime 架构图说明：</p>
<ul>
<li><p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p>
</li>
<li><p>JobManager</p>
<p>Master进程，负责Job的管理和资源的协调。包括任务调度，检查点管理，失败恢复等。</p>
<p>当然，对于集群HA模式，可以同时多个master进程，其中一个作为leader，其他作为standby。当leader失败时，会选出一个standby的master作为新的leader（通过zookeeper实现leader选举）。</p>
</li>
</ul>
<h1 id="3-安装环境准备"><a href="#3-安装环境准备" class="headerlink" title="3 安装环境准备"></a>3 安装环境准备</h1><ul>
<li>从<a href="https://flink.apache.org/downloads.html">官网</a>下载压缩包</li>
<li>安装Java，并配置 JAVA_HOME 环境变量</li>
</ul>
<p>安装好Flink后，再来看下安装路径下的配置文件有哪些吧</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210409111154176.png" alt="image-20210409111154176"></p>
<p>安装目录下主要有 flink-conf.yaml 配置、日志的配置文件、zk 配置、Flink SQL Client 配置。</p>
<h1 id="4-日志的查看和配置"><a href="#4-日志的查看和配置" class="headerlink" title="4 日志的查看和配置"></a>4 日志的查看和配置</h1><p>JobManager 和 TaskManager 的启动日志可以在 Flink binary 目录下的 Log 子目录中找到。Log 目录中以<code>flink-&#123;id&#125;-$&#123;hostname&#125;</code>为前缀的文件对应的是 JobManager 的输出，其中有三个文件：</p>
<ul>
<li><code>flink-$&#123;user&#125;-standalonesession-$&#123;id&#125;-$&#123;hostname&#125;.log</code>：代码中的日志输出</li>
<li><code>flink-$&#123;user&#125;-standalonesession-$&#123;id&#125;-$&#123;hostname&#125;.out</code>：进程执行时的stdout输出</li>
<li><code>flink-$&#123;user&#125;-standalonesession-$&#123;id&#125;-$&#123;hostname&#125;-gc.log</code>：JVM的GC的日志</li>
</ul>
<p>Log 目录中以<code>flink-&#123;id&#125;-$&#123;hostname&#125;</code>为前缀的文件对应的是 TaskManager 的输出，也包括三个文件，和 JobManager 的输出一致。</p>
<p>日志的配置文件在 Flink binary 目录的 conf 子目录下，其中：</p>
<ul>
<li><code>log4j-cli.properties</code>：用 Flink 命令行时用的 log 配置，比如执行“ flink run”命令</li>
<li><code>log4j-yarn-session.properties</code>：用 <code>yarn-session.sh</code> 启动时命令行执行时用的 log 配置</li>
<li><code>log4j.properties</code>：无论是 Standalone 还是 Yarn 模式，JobManager 和 TaskManager 上用的 log 配置都是 log4j.properties</li>
</ul>
<p>这三个<code>log4j.*properties</code>文件分别有三个<code>logback.*xml</code>文件与之对应，如果想使用 Logback 的同学，之需要把与之对应的<code>log4j.*properties</code>文件删掉即可，对应关系如下：</p>
<ul>
<li><code>log4j-cli.properties -&gt; logback-console.xml</code></li>
<li><code>log4j-yarn-session.properties -&gt; logback-yarn.xml</code></li>
<li><code>log4j.properties -&gt; logback.xml</code></li>
</ul>
<p>需要注意的是，“flink-{id}-和{user}-taskexecutor-{hostname}”都带有“，{id}”表示本进程在本机上该角色（JobManager 或 TaskManager）的所有进程中的启动顺序，默认从 0 开始。</p>
<h1 id="5-配置文件-Flink-conf-yaml-详解"><a href="#5-配置文件-Flink-conf-yaml-详解" class="headerlink" title="5 配置文件 Flink-conf.yaml 详解"></a>5 配置文件 Flink-conf.yaml 详解</h1><h2 id="5-1-基础配置"><a href="#5-1-基础配置" class="headerlink" title="5.1 基础配置"></a>5.1 基础配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jobManager 的IP地址</span></span><br><span class="line"><span class="attr">jobmanager.rpc.address:</span> <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JobManager 的端口号</span></span><br><span class="line"><span class="attr">jobmanager.rpc.port:</span> <span class="number">6123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JobManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">jobmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TaskManager JVM heap 内存大小</span></span><br><span class="line"><span class="attr">taskmanager.heap.size:</span> <span class="string">1024m</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个 TaskManager 提供的任务 slots 数量大小</span></span><br><span class="line"><span class="attr">taskmanager.numberOfTaskSlots:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序默认并行计算的个数</span></span><br><span class="line"><span class="attr">parallelism.default:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件系统来源, 使用本地文件系统：&quot;file:///&quot;, 使用 HDFS 分布式文件系统：&quot;hdfs://mynamenode:12345&quot;</span></span><br><span class="line"><span class="comment"># fs.default-scheme</span></span><br><span class="line"><span class="comment"># fs.default-scheme: hdfs://localhost:9000</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2-高可用"><a href="#5-2-高可用" class="headerlink" title="5.2 高可用"></a>5.2 高可用</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以选择 &#x27;NONE&#x27; 或者 &#x27;zookeeper&#x27;.</span></span><br><span class="line"><span class="comment"># high-availability: zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件系统路径，让 Flink 在高可用性设置中持久保存元数据</span></span><br><span class="line"><span class="comment"># high-availability.storageDir: hdfs:///flink/ha/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zookeeper 集群中仲裁者的机器 ip 和 port 端口号, host1:clientPort,host2:clientPort,...</span></span><br><span class="line"><span class="comment"># high-availability.zookeeper.quorum: localhost:2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是 open，如果 zookeeper security 启用了该值会更改成 creator</span></span><br><span class="line"><span class="comment"># &quot;creator&quot; (ZOO_CREATE_ALL_ACL) 或者 &quot;open&quot; (ZOO_OPEN_ACL_UNSAFE)</span></span><br><span class="line"><span class="comment"># high-availability.zookeeper.client.acl: open</span></span><br></pre></td></tr></table></figure>

<h2 id="5-3-容错和检查点配置"><a href="#5-3-容错和检查点配置" class="headerlink" title="5.3 容错和检查点配置"></a>5.3 容错和检查点配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于存储和检查点状态，可选值：&#x27;jobmanager&#x27;, &#x27;filesystem&#x27;, &#x27;rocksdb&#x27;, or the &lt;class-name-of-factory&gt;</span></span><br><span class="line"><span class="comment"># state.backend: filesystem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储检查点的数据文件和元数据的默认目录</span></span><br><span class="line"><span class="comment"># state.checkpoints.dir: hdfs://namenode-host:port/flink-checkpoints</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># savepoints 的默认目标目录(可选)</span></span><br><span class="line"><span class="comment"># state.savepoints.dir: hdfs://namenode-host:port/flink-checkpoints</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于启用/禁用增量 checkpoints 的标志</span></span><br><span class="line"><span class="comment"># state.backend.incremental: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 故障转移策略，即作业计算如何从任务故障中恢复。</span></span><br><span class="line"><span class="comment"># 仅重新启动可能已受任务故障影响的任务，通常包括下游任务和潜在的上游任务（如果它们产生的数据不再可供使用）。</span></span><br><span class="line"><span class="attr">jobmanager.execution.failover-strategy:</span> <span class="string">region</span></span><br></pre></td></tr></table></figure>

<h2 id="5-4-Restful-和-web-前端配置"><a href="#5-4-Restful-和-web-前端配置" class="headerlink" title="5.4 Restful 和 web 前端配置"></a>5.4 Restful 和 web 前端配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基于 Web 的运行时监视器侦听的地址.</span></span><br><span class="line"><span class="comment">#jobmanager.web.address: 0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rest 端口，如果没有指定 rest.bind-port 的话会使用这个配置</span></span><br><span class="line"><span class="attr">rest.port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rest 客户端地址</span></span><br><span class="line"><span class="attr">rest.address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rest 和 web 服务的端口范围</span></span><br><span class="line"><span class="attr">rest.bind-port:</span> <span class="number">8080</span><span class="number">-8090</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rest 和 web 服务的地址</span></span><br><span class="line"><span class="attr">rest.bind-address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标记以指定是否从基于Web的运行时监视器启用作业提交。 取消注释以禁用。</span></span><br><span class="line"><span class="comment"># jobmanager.web.submit.enable: false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-5-高级配置"><a href="#5-5-高级配置" class="headerlink" title="5.5 高级配置"></a>5.5 高级配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># io.tmp.dirs: /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否应在 TaskManager 启动时预先分配 TaskManager 管理的内存</span></span><br><span class="line"><span class="comment"># taskmanager.memory.preallocate: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类加载解析顺序，是先检查用户代码 jar（“child-first”）还是应用程序类路径（“parent-first”）。 默认设置指示首先从用户代码 jar 加载类</span></span><br><span class="line"><span class="comment"># classloader.resolve-order: child-first</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于网络缓冲区的 JVM 内存的分数。 </span></span><br><span class="line"><span class="comment"># 这决定了 TaskManager 可以同时拥有多少流数据交换通道以及通道缓冲的程度。 </span></span><br><span class="line"><span class="comment"># 如果作业被拒绝或者您收到系统没有足够缓冲区的警告，请增加此值或下面的最小/最大值。 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># taskmanager.memory.network.fraction: 0.1</span></span><br><span class="line"><span class="comment"># taskmanager.memory.network.min: 64mb</span></span><br><span class="line"><span class="comment"># taskmanager.memory.network.max: 1gb</span></span><br></pre></td></tr></table></figure>

<h2 id="5-6-Flink-集群安全配置"><a href="#5-6-Flink-集群安全配置" class="headerlink" title="5.6 Flink 集群安全配置"></a>5.6 Flink 集群安全配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指示是否从 Kerberos ticket 缓存中读取</span></span><br><span class="line"><span class="comment"># security.kerberos.login.use-ticket-cache: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含用户凭据的 Kerberos 密钥表文件的绝对路径</span></span><br><span class="line"><span class="comment"># security.kerberos.login.keytab: /path/to/kerberos/keytab</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与 keytab 关联的 Kerberos 主体名称</span></span><br><span class="line"><span class="comment"># security.kerberos.login.principal: flink-user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以逗号分隔的登录上下文列表，用于提供 Kerberos 凭据（例如，`Client，KafkaClient`使用凭证进行 ZooKeeper 身份验证和 Kafka 身份验证）</span></span><br><span class="line"><span class="comment"># security.kerberos.login.contexts: Client,KafkaClient</span></span><br></pre></td></tr></table></figure>

<h2 id="5-7-Zookeeper-安全配置"><a href="#5-7-Zookeeper-安全配置" class="headerlink" title="5.7 Zookeeper 安全配置"></a>5.7 Zookeeper 安全配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 覆盖以下配置以提供自定义 ZK 服务名称</span></span><br><span class="line"><span class="comment"># zookeeper.sasl.service-name: zookeeper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置必须匹配 &quot;security.kerberos.login.contexts&quot; 中的列表（含有一个）</span></span><br><span class="line"><span class="comment"># zookeeper.sasl.login-context-name: Client</span></span><br></pre></td></tr></table></figure>

<h2 id="5-8-HistoryServer"><a href="#5-8-HistoryServer" class="headerlink" title="5.8 HistoryServer"></a>5.8 HistoryServer</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 你可以通过 bin/historyserver.sh (start|stop) 命令启动和关闭 HistoryServer</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将已完成的作业上传到的目录</span></span><br><span class="line"><span class="comment"># jobmanager.archive.fs.dir: hdfs:///completed-jobs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 Web 的 HistoryServer 的地址</span></span><br><span class="line"><span class="comment"># historyserver.web.address: 0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 Web 的 HistoryServer 的端口号</span></span><br><span class="line"><span class="comment"># historyserver.web.port: 8082</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以逗号分隔的目录列表，用于监视已完成的作业</span></span><br><span class="line"><span class="comment"># historyserver.archive.fs.dir: hdfs:///completed-jobs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新受监控目录的时间间隔（以毫秒为单位）</span></span><br><span class="line"><span class="comment"># historyserver.archive.fs.refresh-interval: 10000</span></span><br></pre></td></tr></table></figure>

<h1 id="6-masters"><a href="#6-masters" class="headerlink" title="6 masters"></a>6 masters</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8081</span><br></pre></td></tr></table></figure>

<h1 id="7-workers"><a href="#7-workers" class="headerlink" title="7 workers"></a>7 workers</h1><p>里面是每个 worker 节点的 IP/Hostname，每一个 worker 结点之后都会运行一个 TaskManager，一个一行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost</span><br></pre></td></tr></table></figure>



<h1 id="8-zoo-cfg-可选"><a href="#8-zoo-cfg-可选" class="headerlink" title="8 zoo.cfg(可选)"></a>8 zoo.cfg(可选)</h1><p>Flink 自带的 zookeeper，如果使用外部独立的zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 每个 tick 的毫秒数</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line"></span><br><span class="line"># 初始同步阶段可以采用的 tick 数</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line"></span><br><span class="line"># 在发送请求和获取确认之间可以传递的 tick 数</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line"></span><br><span class="line"># 存储快照的目录</span><br><span class="line"># dataDir&#x3D;&#x2F;tmp&#x2F;zookeeper</span><br><span class="line"></span><br><span class="line"># 客户端将连接的端口</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line"></span><br><span class="line"># ZooKeeper quorum peers</span><br><span class="line">server.1&#x3D;localhost:2888:3888</span><br><span class="line"># server.2&#x3D;host:peer-port:leader-port</span><br></pre></td></tr></table></figure>



<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul>
<li><a href="https://blog.csdn.net/oTengYue/article/details/102689538">一文弄懂Flink基础理论</a></li>
<li><a href="https://bigjar.github.io/2018/11/13/Akka%E5%9C%A8Flink%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/#Akka%E5%92%8CActor%E6%A8%A1%E5%9E%8B">Akka在Flink中的应用</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/FLINK/Akka+and+Actors">Akka and Actors</a></li>
<li><a href="https://blog.csdn.net/qq_19427611/article/details/80378273">【Flink系列】之 Akka和Actors</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>内置故障排查工具-jinfo</title>
    <url>/2021/08/10/jinfo/</url>
    <content><![CDATA[<h1 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>jinfo全称Java Configuration Info，主要用来查看与调整JVM参数。</p>
<blockquote>
<p><strong>TIPS</strong></p>
<ul>
<li>此命令是实验性的，不受支持，对于JDK 9及更高版本，部分功能可使用 <code>jhsdb jinfo</code> 代替，也可用jcmd代替。</li>
<li>部分JDK版本的jinfo命令对Windows支持比较有限，参数较少。本文为了更加接近生产环境，都是基于类Unix操作系统编写的。如果在Windows操作系统下测试，应以jinfo -h的结果为准。</li>
</ul>
</blockquote>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜ jinfo -h</span><br><span class="line">Usage:</span><br><span class="line">    jinfo &lt;option&gt; &lt;pid&gt;</span><br><span class="line">       (to connect to a running process)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         打印指定参数的值</span><br><span class="line">    -flag [+|-]&lt;name&gt;    启用&#x2F;关闭指定参数</span><br><span class="line">    -flag &lt;name&gt;&#x3D;&lt;value&gt; 将指定的参数设置为指定的值</span><br><span class="line">    -flags               打印VM参数</span><br><span class="line">    -sysprops            打印系统属性（笔者注：系统属性打印的是System.getProperties()的结果）</span><br><span class="line">    &lt;no option&gt;          打印VM参数及系统属性</span><br><span class="line">    -? | -h | --help | -help to print this help message</span><br><span class="line">12345678910111213</span><br></pre></td></tr></table></figure>

<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="查看参数"><a href="#查看参数" class="headerlink" title="查看参数"></a>查看参数</h3><p>示例1：打印42342这个进程的VM参数及Java系统属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo 42342</span><br></pre></td></tr></table></figure>

<p>示例2：打印42342这个进程的Java系统属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo -sysprops 42342</span><br></pre></td></tr></table></figure>

<p>示例3：打印42342这个进程的VM参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo -flags 42342</span><br></pre></td></tr></table></figure>

<p>示例4：打印42342这个进程ConcGCThreads参数的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo -flag ConcGCThreads 42342</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>拓展知识</strong></p>
<p>要想查看JVM参数，也可在启动时，指定 <code>-XX:+PrintFlagsFinal</code> ，这样会在启动时将JVM参数打印到日志。</p>
</blockquote>
<h3 id="动态修改参数"><a href="#动态修改参数" class="headerlink" title="动态修改参数"></a>动态修改参数</h3><p>示例5：将42342这个进程的PrintClassHistogram设置为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo -flag -PrintClassHistogram 42342</span><br></pre></td></tr></table></figure>

<p>示例6：将42342这个进程的MaxHeapFreeRatio设置为80</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jinfo -flag MaxHeapFreeRatio&#x3D;80 42342</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>TIPS</strong></p>
<p>虽然可用jinfo动态修改VM参数，但并非所有参数都支持动态修改，如果操作了不支持的修改的参数，将会报类似如下的异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.sun.tools.attach.AttachOperationFailedException: flag &#39;xxx&#39; cannot be changed</span><br></pre></td></tr></table></figure>

<p>使用如下命令显示出来的参数，基本上都是支持动态修改的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintFlagsInitial | grep manageable</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
        <tag>监控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>文章标题</title>
    <url>/2018/11/28/hello-world/</url>
    <content><![CDATA[<p>文章摘要写在前面，支持markdown左右语法。</p>
<span id="more"></span>

<p>文章正文写在这里。</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>文章分类</category>
      </categories>
      <tags>
        <tag>标签1</tag>
        <tag>标签2</tag>
        <tag>更多标签</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase 1.4.13 安装部署</title>
    <url>/2020/09/16/hbase-1-4-13-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="认识HBase"><a href="#认识HBase" class="headerlink" title="认识HBase"></a>认识HBase</h1><h2 id="HBase介绍"><a href="#HBase介绍" class="headerlink" title="HBase介绍"></a>HBase介绍</h2><p>HBase = Hadoop database，Hadoop数据库<br>开源数据库<br>官网：<a href="http://hbase.apache.org/">hbase.apache.org/</a><br>HBase源于Google的BigTable<br>Apache HBase™是Hadoop数据库，是一个分布式，可扩展的大数据存储。<br>当需要对大数据进行随机、实时读/写访问时，请使用Apache HBase™。该项目的目标是托管非常大的表 - 数十亿行X百万列 - 在商品硬件集群上。Apache HBase是一个开源的，分布式的，版本化的非关系数据库nosql，模仿Google的Bigtable： Chang等人的结构化数据分布式存储系统。正如Bigtable利用Google文件系统提供的分布式数据存储一样，Apache HBase在Hadoop和HDFS之上提供类似Bigtable的功能。<br>HBase可执行基于Yarn平台的计算任务，但不擅长。</p>
<p>&lt; !–more–&gt;</p>
<h2 id="HBase集群角色"><a href="#HBase集群角色" class="headerlink" title="HBase集群角色"></a>HBase集群角色</h2><ul>
<li>HDFS：<ul>
<li>NameNode——主节点</li>
<li>DataNode——数据存储节点</li>
</ul>
</li>
<li>Yarn：<ul>
<li>ResourceManager——全局的资源管理器</li>
<li>NodeManager——分节点资源和任务管理器</li>
</ul>
</li>
<li>HBase：<ul>
<li>HMaster<ul>
<li>负责Table表和RegionServer的监控管理工作</li>
<li>处理元数据的变更</li>
<li>对HRegionServer进行故障转移</li>
<li>空闲时对数据进行负载均衡处理</li>
<li>管理Region</li>
<li>借助ZooKeeper发布位置到客户端</li>
</ul>
</li>
<li>HRegionServer<ul>
<li>负责Table数据的实际读写</li>
<li>刷新缓存数据到HDFS</li>
<li>处理Region</li>
<li>可以进行数据压缩</li>
<li>维护Hlog</li>
<li>Region分片</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="hbase-架构"><a href="#hbase-架构" class="headerlink" title="hbase 架构"></a>hbase 架构</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200916184659443.png" alt="image-20200916184659443"></p>
<p>HRegionServer结构：</p>
<ul>
<li>HLog：存储HBase的修改记录</li>
<li>HRegion：根据rowkey（行键，类似id）分割的表的分片</li>
<li>Store：对应HBase表中的一个列族，可存储多个字段</li>
<li>HFile：真正的存储文件</li>
<li>MemStore：保存当前的操作</li>
<li>ZooKeeper：存放数据的元数据信息，负责维护RegionServer中保存的元数据信息</li>
<li>DFS Client：存储数据信息到HDFS集群中</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>Hadoop集群环境</li>
<li>ZooKeeper集群环境</li>
</ul>
<h2 id="服务器分配"><a href="#服务器分配" class="headerlink" title="服务器分配"></a>服务器分配</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
</tr>
</thead>
<tbody><tr>
<td>centos-node1</td>
<td>192.168.99.101</td>
</tr>
<tr>
<td>centos-node2</td>
<td>192.168.99.102</td>
</tr>
<tr>
<td>centos-node3</td>
<td>192.168.99.103</td>
</tr>
</tbody></table>
<h2 id="解压安装文件到指定目录"><a href="#解压安装文件到指定目录" class="headerlink" title="解压安装文件到指定目录"></a>解压安装文件到指定目录</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf hbase-1.4.13.tar.gz -C 目标目录</span><br></pre></td></tr></table></figure>

<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="hbase-env-sh"><a href="#hbase-env-sh" class="headerlink" title="hbase-env.sh"></a>hbase-env.sh</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi hbase-env.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The java implementation to use.  Java 1.7+ required.</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=jdk安装路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释掉以下语句（jdk1.8中不需要这个配置）</span></span><br><span class="line"><span class="comment"># export HBASE_MASTER_OPTS=&quot;$HBASE_MASTER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span></span><br><span class="line"><span class="comment"># export HBASE_REGIONSERVER_OPTS=&quot;$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell HBase whether it should manage it&#x27;s own instance of Zookeeper or not.</span></span><br><span class="line"><span class="comment"># 关闭HBase自带的ZooKeeper</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="hbase-site-xml"><a href="#hbase-site-xml" class="headerlink" title="hbase-site.xml"></a>hbase-site.xml</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi hbase-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 设置namenode所在位置（HDFS中存放的路径） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://centos-node1:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 是否开启集群 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="comment">&lt;!-- HBase-0.9.8之前默认端口为60000 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>16000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>16010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>16201<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>16301<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- zookeeper集群的位置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="comment">&lt;!-- 注意不要有空格 --&gt;</span>  </span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>centos-node1,centos-node2,centos-node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- hbase的元数据信息存储在zookeeper的位置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/zookeeper/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="regionservers"><a href="#regionservers" class="headerlink" title="regionservers"></a>regionservers</h3><p>加入节点主机名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">centos-node1</span><br><span class="line">centos-node2</span><br><span class="line">centos-node3</span><br></pre></td></tr></table></figure>

<h2 id="解决依赖问题"><a href="#解决依赖问题" class="headerlink" title="解决依赖问题"></a>解决依赖问题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hbase/lib</span><br><span class="line">$ rm -fr hadoop-*</span><br><span class="line">$ rm -fr zookeeper-*</span><br></pre></td></tr></table></figure>

<p>把相关版本的zookeeper和hadoop的依赖包导入到hbase/lib</p>
<h2 id="软链接hadoop配置"><a href="#软链接hadoop配置" class="headerlink" title="软链接hadoop配置"></a>软链接hadoop配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/core-site.xml /usr/<span class="built_in">local</span>/hbase/conf/core-site.xml</span><br><span class="line">$ ln -s /usr/<span class="built_in">local</span>/hadoop/etc/hadoop/hdfs-site.xml /usr/<span class="built_in">local</span>/hbase/conf/hdfs-site.xml</span><br></pre></td></tr></table></figure>

<h2 id="复制到其他节点"><a href="#复制到其他节点" class="headerlink" title="复制到其他节点"></a>复制到其他节点</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -r /usr/<span class="built_in">local</span>/hbase centos-node2:/usr/<span class="built_in">local</span>/</span><br><span class="line">$ scp -r /usr/<span class="built_in">local</span>/hbase centos-node3:/usr/<span class="built_in">local</span>/</span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line">ZOOKEEPER_HOME=/usr/<span class="built_in">local</span>/zookeeper</span><br><span class="line">HBASE_HOME=/usr/<span class="built_in">local</span>/hbase</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$HBASE_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH HADOOP_HOME ZOOKEEPER_HOME HBASE_HOME</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="修改防火墙"><a href="#修改防火墙" class="headerlink" title="修改防火墙"></a>修改防火墙</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前区域</span></span><br><span class="line">$ firewall-cmd --get-active-zones</span><br><span class="line"><span class="comment"># 新建一个自定义服务(端口不全)</span></span><br><span class="line">$ firewall-cmd --new-service=hbase --permanent</span><br><span class="line">$ firewall-cmd --service=hbase --add-port 16000/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hbase --add-port 16010/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hbase --add-port 16201/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hbase --add-port 16301/tcp --permanent</span><br><span class="line">$ firewall-cmd --service=hbase --add-port 2181/tcp --permanent</span><br><span class="line"><span class="comment"># 不中断服务的重新加载</span></span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --add-service=hbase</span><br><span class="line"><span class="comment"># 将当前防火墙的规则永久保存；</span></span><br><span class="line">$ firewall-cmd --runtime-to-permanent</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>



<h1 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h1><ul>
<li>启动主节点<ul>
<li><code>hbase-daemon.sh start master</code></li>
</ul>
</li>
<li>启动从节点<ul>
<li><code>hbase-daemon.sh start regionserver</code></li>
</ul>
</li>
</ul>
<h1 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h1><ul>
<li>关闭主节点<ul>
<li><code>hbase-daemon.sh stop master</code></li>
</ul>
</li>
<li>关闭从节点<ul>
<li><code>hbase-daemon.sh stop regionserver</code></li>
</ul>
</li>
</ul>
<h1 id="UI-展示"><a href="#UI-展示" class="headerlink" title="UI 展示"></a>UI 展示</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921184311647.png" alt="image-20200921184311647"></p>
<h1 id="hbase-shell的一些命令"><a href="#hbase-shell的一些命令" class="headerlink" title="hbase shell的一些命令"></a>hbase shell的一些命令</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入终端</span></span><br><span class="line">$ hbase shell</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921185108081.png" alt="image-20200921185108081"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询表</span></span><br><span class="line">$ list</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921185132638.png" alt="image-20200921185132638"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示服务器状态</span></span><br><span class="line">$ status</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921185249611.png" alt="image-20200921185249611"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前用户</span></span><br><span class="line">$ whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921185450703.png" alt="image-20200921185450703"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">$ create <span class="string">&#x27;表名&#x27;</span>, <span class="string">&#x27;列族1&#x27;</span>, <span class="string">&#x27;列族2&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20200921185551041.png" alt="image-20200921185551041"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表的一些操作</span></span><br><span class="line"><span class="comment"># 全表扫描</span></span><br><span class="line">$ scan <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 指定Rowkey扫描</span></span><br><span class="line">$ scan <span class="string">&#x27;表名&#x27;</span>, &#123;STARTROW =&gt; <span class="string">&#x27;Rowkey值&#x27;</span>, STOPROW =&gt; <span class="string">&#x27;Rowkey值&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 查看表结构</span></span><br><span class="line">$ describe <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 修改表结构信息</span></span><br><span class="line">$ alter <span class="string">&#x27;表名&#x27;</span>, &#123;NAME =&gt; <span class="string">&#x27;列族名&#x27;</span>, 变更字段名 =&gt; <span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 查询指定数据信息</span></span><br><span class="line"><span class="comment"># 指定具体的rowkey</span></span><br><span class="line">$ get <span class="string">&#x27;表名&#x27;</span>, <span class="string">&#x27;rowkey&#x27;</span></span><br><span class="line"><span class="comment"># 指定具体的列</span></span><br><span class="line">$ get <span class="string">&#x27;表名&#x27;</span>, <span class="string">&#x27;rowkey&#x27;</span>, <span class="string">&#x27;列族:列名&#x27;</span></span><br><span class="line"><span class="comment"># 统计表行数</span></span><br><span class="line">$ count <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 根据Rowkey进行统计</span></span><br><span class="line">$ count <span class="string">&#x27;表名&#x27;</span>, <span class="string">&#x27;rowkey&#x27;</span></span><br><span class="line"><span class="comment"># 表中添加数据信息。HBase只有覆盖没有修改,覆盖时对应表名、rowkey、列族、列名字段，输入新的值信息</span></span><br><span class="line">$ put <span class="string">&#x27;表名&#x27;</span>, <span class="string">&#x27;rowkey&#x27;</span>, <span class="string">&#x27;列族:列名&#x27;</span>, <span class="string">&#x27;值&#x27;</span></span><br><span class="line"><span class="comment"># 清空表</span></span><br><span class="line">$ truncate <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line"><span class="comment"># 指定表不可用</span></span><br><span class="line">$ <span class="built_in">disable</span> <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">$ drop <span class="string">&#x27;表名&#x27;</span></span><br><span class="line"><span class="comment"># 退出终端</span></span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ quit</span><br></pre></td></tr></table></figure>

<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul>
<li><a href="https://juejin.im/post/6844903797655863309#heading-21">https://juejin.im/post/6844903797655863309#heading-21</a></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hbase,大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>hive 2.3.7 安装</title>
    <url>/2020/09/22/hive2-3-7%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Hive介绍"><a href="#Hive介绍" class="headerlink" title="Hive介绍"></a>Hive介绍</h1><p>官网：<a href="http://hive.apache.org/">hive.apache.org/</a></p>
<p>Apache Hive™<strong>数据仓库</strong>软件有助于使用SQL读取，编写和管理驻留在<strong>分布式存储</strong>中的<strong>大型数据集</strong>。可以将结构投影到已存储的数据中。提供了<strong>命令行工具</strong>和<strong>JDBC驱动程序</strong>以将用户连接到Hive。</p>
<p>hive提供了SQL查询功能 hdfs分布式存储。</p>
<p>hive本质HQL转化为MapReduce程序。</p>
<h1 id="Hive-安装前提"><a href="#Hive-安装前提" class="headerlink" title="Hive 安装前提"></a>Hive 安装前提</h1><ol>
<li>启动 hdfs 集群</li>
<li>启动 yarn 集群</li>
<li>启动 mysql</li>
</ol>
<p>如果想用hive的话，需要提前安装部署好hadoop集群。</p>
<h1 id="安装-Hive"><a href="#安装-Hive" class="headerlink" title="安装 Hive"></a>安装 Hive</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /opt/apache-hive-2.3.7-bin /usr/local/hive</span><br></pre></td></tr></table></figure>

<h1 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HIVE_HOME=/usr/<span class="built_in">local</span>/hive</span><br><span class="line"><span class="built_in">export</span> HIVE_HOME</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$HIVE_HOME</span>/bin</span><br></pre></td></tr></table></figure>

<h1 id="配置-hive-site-xml"><a href="#配置-hive-site-xml" class="headerlink" title="配置 hive-site.xml"></a>配置 hive-site.xml</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/hive</span><br><span class="line">vi conf/hive-site.xml</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://master:3306/hive?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span>               </span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>username to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>password to use against metastore database<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面的部分如果不配置会产生错误</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.local.scratchdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Local scratch space for Hive jobs<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.downloaded.resources.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/hive-downloaded-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Temporary local directory for added resources in the remote file system. <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.querylog.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/querylog-location-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Location of Hive run time structured log file<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.logging.operation.log.location<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/hive/hive-logging-operation-log-addDir/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Top level directory where operation logs are stored if logging functionality is enabled<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hiveserver2 的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="配置-hive-env-sh"><a href="#配置-hive-env-sh" class="headerlink" title="配置 hive-env.sh"></a>配置 hive-env.sh</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/usr/<span class="built_in">local</span>/hive</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line"><span class="built_in">export</span> HIVE_CONF_DIR=/usr/<span class="built_in">local</span>/hive/conf</span><br></pre></td></tr></table></figure>

<h1 id="修改hive-log4j-properties"><a href="#修改hive-log4j-properties" class="headerlink" title="修改hive-log4j.properties"></a>修改hive-log4j.properties</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi hive-log4j.properties</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hive.log.dir=自定义目录</span><br></pre></td></tr></table></figure>

<h1 id="下载并配置-mysql-驱动包"><a href="#下载并配置-mysql-驱动包" class="headerlink" title="下载并配置 mysql 驱动包"></a>下载并配置 mysql 驱动包</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /mnt/share/mysql-connector-java-5.1.47.jar /usr/local/hive/lib/</span><br></pre></td></tr></table></figure>



<h1 id="初始化元数据"><a href="#初始化元数据" class="headerlink" title="初始化元数据"></a>初始化元数据</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/hive/bin/schematool -dbType mysql -initSchema</span><br></pre></td></tr></table></figure>

<h1 id="启动-Hive"><a href="#启动-Hive" class="headerlink" title="启动 Hive"></a>启动 Hive</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/hive/bin/hive</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create table users(user_id int,username varchar(20),pwd varchar(20),email varchar(30),grade int);</span><br><span class="line">insert into users(user_id,username,pwd,email,grade)values(1,&#x27;admin&#x27;,&#x27;1234&#x27;,&#x27;admin@qq.com&#x27;,2);</span><br><span class="line">insert into users(user_id,username,pwd,email,grade)values(2,&#x27;admin2&#x27;,&#x27;1234&#x27;,&#x27;admin2@qq.com&#x27;,2);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive,大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>内置监控工具 - jstat</title>
    <url>/2021/08/05/jstat/</url>
    <content><![CDATA[<h1 id="内置监控工具-jstat"><a href="#内置监控工具-jstat" class="headerlink" title="内置监控工具 - jstat"></a>内置监控工具 - jstat</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>jstat全称JVM Statistics Monitoring Tool，用于监控JVM的各种运行状态。</p>
<blockquote>
<p>TIPS<br>此命令是实验性的，不受支持。</p>
</blockquote>
<blockquote>
<p>参考文档：<br>Java 8：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html</a><br>Java 11：<a href="https://docs.oracle.com/en/java/javase/11/tools/jstat.html">https://docs.oracle.com/en/java/javase/11/tools/jstat.html</a></p>
</blockquote>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜ jstat -h</span><br><span class="line">Usage: jstat --<span class="built_in">help</span>|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      指定参数，取值可用jstat -options查看</span><br><span class="line">  &lt;vmid&gt;        VM标识，格式为&lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                &lt;lvmid&gt;：如果lvmid是本地VM，那么用进程号即可; </span><br><span class="line">                &lt;hostname&gt;：目标JVM的主机名;</span><br><span class="line">                &lt;port&gt;：目标主机的rmiregistry端口;</span><br><span class="line">  -t            用来展示每次采样花费的时间</span><br><span class="line">  &lt;lines&gt;       每抽样几次就列一个标题，默认0，显示数据第一行的列标题</span><br><span class="line">  &lt;interval&gt;    抽样的周期，格式使用:&lt;n&gt;[<span class="string">&quot;ms&quot;</span>|<span class="string">&quot;s&quot;</span>]，n是数字，ms/s是时间单位，默认是ms</span><br><span class="line">  &lt;count&gt;       采样多少次停止</span><br><span class="line">  -J&lt;flag&gt;      将&lt;flag&gt;传给运行时系统，例如：-J-Xms48m</span><br><span class="line">  -? -h --<span class="built_in">help</span>  Prints this <span class="built_in">help</span> message.</span><br><span class="line">  -<span class="built_in">help</span>         Prints this <span class="built_in">help</span> message.</span><br></pre></td></tr></table></figure>

<p>option取值如下：</p>
<ul>
<li>class：显示类加载器的统计信息</li>
<li>compiler：显示有关Java HotSpot VM即时编译器行为的统计信息</li>
<li>gc：显示有关垃圾收集堆行为的统计信息</li>
<li>gccapacity：统计各个分代（新生代，老年代，持久代）的容量情况</li>
<li>gccause：显示引起垃圾收集事件的原因</li>
<li>gcnew：显示有关新生代行为的统计信息</li>
<li>gcnewcapacity：显示新生代容量</li>
<li>gcold：显示老年代、元空间区的统计信息</li>
<li>gcoldcapacity：显示老年代的容量</li>
<li>gcmetacapacity：显示元空间的容量</li>
<li>gcutil：显示有关垃圾收集统计信息的摘要</li>
<li>printcompilation：显示Java HotSpot VM编译方法统计信息</li>
</ul>
<h2 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h2><p>class:</p>
<ul>
<li>Loaded：当前加载的类的数量</li>
<li>Bytes：当前加载的空间(单位KB)</li>
<li>Unloaded：卸载的类的数量Number of classes unloaded.</li>
<li>Bytes：当前卸载的空间(单位KB)</li>
<li>Time：执行类加载/卸载操作所花费的时间</li>
<li>compiler：</li>
</ul>
<p>compiler:</p>
<ul>
<li>Compiled：执行了多少次编译任务</li>
<li>Failed：多少次编译任务执行失败</li>
<li>Invalid：无效的编译任务数</li>
<li>Time：执行编译任务所花费的时间</li>
<li>FailedType：上次失败的编译的编译类型</li>
<li>FailedMethod：上次失败的编译的类名和方法</li>
</ul>
<p>gc：</p>
<ul>
<li>S0C：第一个存活区(S0)的容量（KB）</li>
<li>S1C：第二个存活区(S1)的容量（KB）</li>
<li>S0U：第一个存活区(S0)使用的大小（KB）</li>
<li>S1U：第二个存活区(S1)使用的大小（KB）</li>
<li>EC：伊甸园空间容量（KB）</li>
<li>EU：伊甸园使用的大小（KB）</li>
<li>OC：老年代容量（KB）</li>
<li>OU：老年代使用的大小（KB）</li>
<li>MC：元空间的大小（KB）</li>
<li>MU：元空间使用的大小（KB）</li>
<li>CCSC：压缩的类空间大小（KB）</li>
<li>CCSU：压缩类空间使用的大小（KB）</li>
<li>YGC：年轻代垃圾收集事件的数量</li>
<li>YGCT：年轻代垃圾回收时间</li>
<li>FGC：Full GC事件的数量</li>
<li>FGCT：Full GC回收时间</li>
<li>GCT：垃圾收集总时间</li>
</ul>
<p>gccapacity：</p>
<ul>
<li>NGCMN：最小新生代容量（KB）</li>
<li>NGCMX：最大新生代容量（KB）</li>
<li>NGC：当前的新生代容量（KB）</li>
<li>S0C：第一个存活区(S0)的当前容量（KB）</li>
<li>S1C：第二个存活区(S1)的当前容量（KB）</li>
<li>EC：当前伊甸园容量（KB）</li>
<li>OGCMN：最小老年代容量（KB）</li>
<li>OGCMX：最大老年代容量（KB）</li>
<li>OGC：当前老年代容量（KB）</li>
<li>OC：当前old space容量（KB）</li>
<li>MCMN：最小元空间容量（KB）</li>
<li>MCMX：最大元空间容量（KB）</li>
<li>MC：当前元空间的容量（KB）</li>
<li>CCSMN：压缩的类空间最小容量（KB）</li>
<li>CCSMX：压缩的类空间最大容量（KB）</li>
<li>CCSC：当前压缩的类空间大小（KB）</li>
<li>YGC：年轻代GC事件的数量</li>
<li>FGC：Full GC事件的数量</li>
</ul>
<p>gccause：其他展示列和-gcutil一致</p>
<ul>
<li>LGCC：导致GC的原因</li>
<li>GCC：导致当前GC的原因</li>
</ul>
<p>gcnew：</p>
<ul>
<li>S0C：第一个存活区(S0)的容量（KB）</li>
<li>S1C：第二个存活区(S1)的容量（KB）</li>
<li>S0U：第一个存活区(S0)的利用率（KB）</li>
<li>S1U：第二个存活区(S1)的利用率（KB）</li>
<li>TT：老年代阈值</li>
<li>MTT：最大老年代阈值</li>
<li>DSS：期望的存活区大小（KB）</li>
<li>EC：当前伊甸园容量（KB）</li>
<li>EU：伊甸园利用率（KB）</li>
<li>YGC：年轻代GC事件的数量</li>
<li>YGCT：年轻代垃圾回收时间</li>
</ul>
<p>gcnewcapacity：</p>
<ul>
<li>NGCMN：最小年轻代容量（KB）</li>
<li>NGCMX：最大年轻代容量（KB）</li>
<li>NGC：当前年轻代容量（KB） </li>
<li>S0CMX：最大S0容量（KB） </li>
<li>S0C：当前S0容量（KB） </li>
<li>S1CMX：最大S1容量（KB） </li>
<li>S1C：当前S1容量（KB） </li>
<li>ECMX：最大伊甸园容量（KB） </li>
<li>EC：当前伊甸园容量（KB） </li>
<li>YGC：年轻代GC事件的数量 </li>
<li>FGC：Full GC事件的数量</li>
</ul>
<p>gcold：</p>
<ul>
<li>MC：当前元空间使用大小（KB）</li>
<li>MU：元空间利用率（KB）</li>
<li>CCSC：压缩的类的大小（KB）</li>
<li>CCSU：使用的压缩类空间（KB）</li>
<li>OC：当前的老年代空间容量（KB）</li>
<li>OU：来年代空间利用率（KB）</li>
<li>YGC：年轻代GC事件的数量</li>
<li>FGC：Full GC事件的数量</li>
<li>FGCT：Full GC垃圾收集时间</li>
<li>GCT：总垃圾收集时间</li>
</ul>
<p>gcoldcapacity：</p>
<ul>
<li>OGCMN：最小老年代容量（KB）</li>
<li>OGCMX：最大老年代容量（KB）</li>
<li>OGC：当前老年代容量（KB）</li>
<li>OC：当前old space容量（KB）</li>
<li>YGC：年轻代GC事件的数量</li>
<li>FGC：Full GC事件的数量</li>
<li>FGCT：Full GC垃圾收集时间</li>
<li>GCT：总垃圾收集时间</li>
</ul>
<p>gcmetacapacity：</p>
<ul>
<li>MCMN：最小元空间容量（KB）</li>
<li>MCMX：最大元空间容量（KB）</li>
<li>MC：元空间大小（KB）</li>
<li>CCSMN：压缩的类空间最小容量（KB）</li>
<li>CCSMX：压缩的类空间最大容量（KB）</li>
<li>YGC：年轻代GC事件的数量</li>
<li>FGC：Full GC事件的数量</li>
<li>FGCT：Full GC垃圾收集时间</li>
<li>GCT：总垃圾收集时间</li>
</ul>
<p>gcutil：</p>
<ul>
<li>S0：第一个存活区(S0)利用率</li>
<li>S1：第二个存活区(S1)利用率</li>
<li>E：Eden空间利用率</li>
<li>O：老年代空间利用率</li>
<li>M：元空间利用率</li>
<li>CCS：压缩的类空间利用率</li>
<li>YGC：年轻代GC事件的数量</li>
<li>YGCT：年轻代垃圾回收时间</li>
<li>FGC：Full GC事件的数量</li>
<li>FGCT：Full GC垃圾收集时间</li>
<li>GCT：总垃圾收集时间</li>
</ul>
<p>printcompilation：</p>
<ul>
<li>Compiled：由最近编译的方法去执行的编译任务数</li>
<li>Size：最近编译的方法的字节码的字节数</li>
<li>Type：最近编译的方法的编译类型。</li>
<li>Method：标识最近编译的方法的类名和方法名。类名使用 / 代替点 . 作为名称空间分隔符；方法名称是指定类中的方法。这两个字段的格式与HotSpot -XX:+PrintCompilation 选项一致。</li>
</ul>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>示例1：查看21891这个进程的gc相关信息，每隔250ms采样1次，采样7次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jstat -gcutil 21891 250 7</span><br></pre></td></tr></table></figure>

<p>示例2：显示有关新生代行为的统计信息，重复列标题：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jstat -gcnew -h3 21891 250</span><br></pre></td></tr></table></figure>

<p>示例3：查看remote.domain机器上的40496这个进程有关垃圾收集统计信息的摘要，每隔1秒采样1次：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jstat -gcutil 40496@remote.domain 1000</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JVM</tag>
        <tag>Java</tag>
        <tag>监控工具</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes学习笔记</title>
    <url>/2020/04/28/kubernetesNotes/</url>
    <content><![CDATA[<p>markdown编写的hexo博客文章内部怎么跳转?</p>
<p><code>&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</code></p>
<p>相对路径引用资源文件</p>
<p><code>&#123;% asset_img example.jpg This is an example image %&#125;</code></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="/2020/04/27/Kubenete%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/" title="Kubernetes集群安装指南">Kubernetes集群安装指南</a></li>
<li><a href="/2020/04/29/CentOS7%E4%B8%8Byum%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AENFS/" title="CentOS7下yum安装和配置NFS">CentOS7下yum安装和配置NFS</a></li>
<li><a href="/2020/04/28/Kubernetes%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/" title="Kubernetes数据持久化">Kubernetes数据持久化</a></li>
<li><a href="/2020/04/28/%E5%9F%BA%E4%BA%8EJenkins%E3%80%81SVN%E3%80%81Harbor%E3%80%81Helm%E5%92%8CKubernetes%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/" title="基于Jenkins、SVN、Harbor、Helm和Kubernetes的持续集成">基于Jenkins、SVN、Harbor、Helm和Kubernetes的持续集成</a></li>
</ol>
<span id="more"></span>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>helm</tag>
        <tag>jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装Java的脚本</title>
    <url>/2019/05/06/linux%E5%AE%89%E8%A3%85Java%E7%9A%84%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="linux安装Java的脚本"><a href="#linux安装Java的脚本" class="headerlink" title="linux安装Java的脚本"></a>linux安装Java的脚本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -ex</span><br><span class="line"></span><br><span class="line"><span class="comment"># UPDATE THESE URLs</span></span><br><span class="line"><span class="built_in">export</span> JDK_URL=https://download.oracle.com/otn-pub/java/jdk/8u191-b12/2787e4a523244c269598db4e85c51e0c/jdk-8u191-linux-x64.tar.gz</span><br><span class="line"><span class="built_in">export</span> UNLIMITED_STRENGTH_URL=http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download Oracle Java 8 accepting the license</span></span><br><span class="line">wget --no-cookies --header <span class="string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> \</span><br><span class="line"><span class="variable">$&#123;JDK_URL&#125;</span></span><br><span class="line"><span class="comment"># Extract the archive</span></span><br><span class="line">tar -xzvf jdk-*.tar.gz</span><br><span class="line"><span class="comment"># clean up the tar</span></span><br><span class="line">rm -fr jdk-*.tar.gz</span><br><span class="line"><span class="comment"># mk the jvm dir</span></span><br><span class="line">sudo mkdir -p /usr/lib/jvm</span><br><span class="line"><span class="comment"># move the server jre</span></span><br><span class="line">sudo mv jdk1.8* /usr/lib/jvm/oracle_jdk8</span><br><span class="line"></span><br><span class="line"><span class="comment"># install unlimited strength policy</span></span><br><span class="line">wget --no-cookies --header <span class="string">&quot;Cookie: oraclelicense=accept-securebackup-cookie&quot;</span> \</span><br><span class="line"><span class="variable">$&#123;UNLIMITED_STRENGTH_URL&#125;</span></span><br><span class="line">unzip jce_policy-8.zip</span><br><span class="line">mv UnlimitedJCEPolicyJDK8/local_policy.jar /usr/lib/jvm/oracle_jdk8/jre/lib/security/</span><br><span class="line">mv UnlimitedJCEPolicyJDK8/US_export_policy.jar /usr/lib/jvm/oracle_jdk8/jre/lib/security/</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/oracle_jdk8/jre/bin/java 2000</span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/oracle_jdk8/bin/javac 2000</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">echo</span> <span class="string">&quot;export J2SDKDIR=/usr/lib/jvm/oracle_jdk8</span></span><br><span class="line"><span class="string">export J2REDIR=/usr/lib/jvm/oracle_jdk8/jre</span></span><br><span class="line"><span class="string">export PATH=<span class="variable">$PATH</span>:/usr/lib/jvm/oracle_jdk8/bin:/usr/lib/jvm/oracle_jdk8/db/bin:/usr/lib/jvm/oracle_jdk8/jre/bin</span></span><br><span class="line"><span class="string">export JAVA_HOME=/usr/lib/jvm/oracle_jdk8</span></span><br><span class="line"><span class="string">export DERBY_HOME=/usr/lib/jvm/oracle_jdk8/db&quot;</span> | sudo tee -a /etc/profile.d/oraclejdk.sh</span><br></pre></td></tr></table></figure>

<p>chmod +x 文件名.sh</p>
<p>脚本来自 <a href="https://stackoverflow.com/questions/36478741/installing-oracle-jdk-on-windows-subsystem-for-linux">https://stackoverflow.com/questions/36478741/installing-oracle-jdk-on-windows-subsystem-for-linux</a></p>
]]></content>
  </entry>
  <entry>
    <title>kafka设置某个topic的数据过期时间</title>
    <url>/2019/08/22/kafka%E8%AE%BE%E7%BD%AE%E6%9F%90%E4%B8%AAtopic%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h1 id="kafka-单独设置某个topic的数据过期时间"><a href="#kafka-单独设置某个topic的数据过期时间" class="headerlink" title="kafka 单独设置某个topic的数据过期时间"></a>kafka 单独设置某个topic的数据过期时间</h1><p>kafka 默认存放7天的临时数据，如果遇到磁盘空间小，存放数据量大，可以设置缩短这个时间。</p>
<h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>修改 server.properties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">log.retention.hours=72</span></span><br><span class="line"><span class="string">log.cleanup.policy=delete</span></span><br></pre></td></tr></table></figure>

<h2 id="单独对某一个topic设置过期时间"><a href="#单独对某一个topic设置过期时间" class="headerlink" title="单独对某一个topic设置过期时间"></a>单独对某一个topic设置过期时间</h2><p>但如果只有某一个topic数据量过大。<br>想单独对这个topic的过期时间设置短点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;kafka-configs.sh --zookeeper localhost:2181 --alter --entity-name mytopic --entity-type topics --add-config retention.ms&#x3D;86400000</span><br></pre></td></tr></table></figure>

<p>retention.ms=86400000 为一天，单位是毫秒。</p>
<p>查看设置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./kafka-configs.sh --zookeeper localhost:2181 --describe --entity-name mytopic --entity-type topics</span><br><span class="line">Configs <span class="keyword">for</span> topics:wordcounttopic are retention.ms=86400000</span><br></pre></td></tr></table></figure>

<h2 id="立即删除某个topic下的数据"><a href="#立即删除某个topic下的数据" class="headerlink" title="立即删除某个topic下的数据"></a>立即删除某个topic下的数据</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --zookeeper localhost:2181 --alter --topic mytopic --config cleanup.policy=delete</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash基础语法与使用</title>
    <url>/2021/04/20/logstash%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="logstash基础语法与使用"><a href="#logstash基础语法与使用" class="headerlink" title="logstash基础语法与使用"></a>logstash基础语法与使用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 解压安装</span></span><br><span class="line">tar -zxvf logstash-6.6.0.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">## conf下配置文件说明：</span></span><br><span class="line"><span class="comment"># logstash配置文件：/config/logstash.yml</span></span><br><span class="line"><span class="comment"># JVM参数文件：/config/jvm.options</span></span><br><span class="line"><span class="comment"># 日志格式配置文件：log4j2.properties</span></span><br><span class="line"><span class="comment"># 制作Linux服务参数：/config/startup.options</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置文件说明：</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/logstash-6.6.0/config/logstash.yml</span><br><span class="line"></span><br><span class="line">--path.config 或 –f ：logstash启动时使用的配置文件</span><br><span class="line">--configtest 或 –t：测试 Logstash 读取到的配置文件语法是否能正常解析</span><br><span class="line">--<span class="built_in">log</span>或-l：日志输出存储位置</span><br><span class="line">--pipeline.workers 或 –w：运行 filter 和 output 的 pipeline 线程数量。默认是 CPU 核数。</span><br><span class="line">--pipeline.batch.size 或 –b：每个 Logstash pipeline 线程，在执行具体的 filter 和 output 函数之前，最多能累积的日志条数。</span><br><span class="line">--pipeline.batch.delay 或 –u：每个 Logstash pipeline 线程，在打包批量日志的时候，最多等待几毫秒。</span><br><span class="line">--verbose：输出调试日志</span><br><span class="line">--debug：输出更多的调试日志</span><br><span class="line"></span><br><span class="line"><span class="comment">## 虚拟机配置</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/logstash-6.6.0/config/jvm.options</span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动配置 比如启动时的java位置、LS的home等</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/logstash-6.6.0/config/startup.options</span><br><span class="line"></span><br><span class="line"><span class="comment">## 数据收集目录：/usr/local/logstash-6.6.0/data</span></span><br><span class="line"><span class="comment">## 插件目录：/usr/local/logstash-6.6.0/vendor/bundle/jruby/1.9/gems</span></span><br><span class="line"><span class="comment">## 查看插件命令：</span></span><br><span class="line">/usr/<span class="built_in">local</span>/logstash-6.6.0/bin/logstash-plugin list</span><br><span class="line"><span class="comment">## 更新插件命令：</span></span><br><span class="line">/usr/<span class="built_in">local</span>/logstash-6.6.0/bin/logstash-plugin update logstash-xxxx-xxxxx</span><br><span class="line"><span class="comment">## 安装插件命令：</span></span><br><span class="line">/usr/<span class="built_in">local</span>/logstash-6.6.0/bin/logstash-plugin install logstash-xxxx-xxxxx</span><br><span class="line"><span class="comment">## 插件地址： https://github.com/logstash-plugins</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>logstash语法与基本使用：</strong></p>
<ol>
<li><p>Logstash设计了自己的DSL包括有区域，注释，数据类型(布尔值，字符串，数值，数组，哈希)，条件判断字段引用等。</p>
</li>
<li><p>Logstash用{}来定义区域。区域内可以包括插件区域定义，你可以在一个区域内定义多个插件。插件区域内则可以定义键值对设置。</p>
</li>
<li><p>格式、语法、使用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 注释.</span><br><span class="line">input &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">filter &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">output &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>两个input设置：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path &#x3D;&gt; &quot;&#x2F;var&#x2F;log&#x2F;messages&quot;</span><br><span class="line">    type &#x3D;&gt; &quot;syslog&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path &#x3D;&gt; &quot;&#x2F;var&#x2F;log&#x2F;apache&#x2F;access.log&quot;</span><br><span class="line">    type &#x3D;&gt; &quot;apache&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;                                                           </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 数据类型：</span><br><span class="line">## bool类型</span><br><span class="line">debug &#x3D;&gt; true</span><br><span class="line">## string类型</span><br><span class="line">host &#x3D;&gt; &quot;hostname&quot;</span><br><span class="line">## number类型</span><br><span class="line">port &#x3D;&gt; 6789</span><br><span class="line">## array or list类型</span><br><span class="line">path &#x3D;&gt; [&quot;&#x2F;var&#x2F;log&#x2F;message&quot;,&quot;&#x2F;var&#x2F;log&#x2F;*.log&quot;]</span><br><span class="line">## hash类型</span><br><span class="line">match &#x3D;&gt; &#123;</span><br><span class="line">    &quot;field1&quot; &#x3D;&gt; &quot;value1&quot;</span><br><span class="line">    &quot;field2&quot; &#x3D;&gt; &quot;value2&quot;</span><br><span class="line">&#125;</span><br><span class="line">## codec类型</span><br><span class="line">codec &#x3D;&gt; &quot;json&quot;</span><br><span class="line"></span><br><span class="line">##字段引用方式：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;agent&quot;:  &quot;Mozilla&#x2F;5.0  (compatible;  MSIE  9.0)&quot;,</span><br><span class="line">    &quot;ip&quot;:  &quot;192.168.24.44&quot;,</span><br><span class="line">    &quot;request&quot;:  &quot;&#x2F;index.html&quot;</span><br><span class="line">    &quot;response&quot;:  &#123;</span><br><span class="line">        &quot;status&quot;:  200,</span><br><span class="line">        &quot;bytes&quot;:  52353</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ua&quot;:  &#123;</span><br><span class="line">        &quot;os&quot;:  &quot;Windows  7&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">##获取字段值：</span><br><span class="line">[response][status]</span><br><span class="line">[ua][os]                                       </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 条件判断condition：</span><br><span class="line">if EXPRESSION &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else if EXPRESSION &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;(等于), !&#x3D;(不等于), &lt;(小于), &gt;(大于), &lt;&#x3D;(小于等于), &gt;&#x3D;(大于等于), &#x3D;~(匹配正则), !~（不匹配正则）</span><br><span class="line">in(包含), not in(不包含), and(与), or(或), nand(非与), xor(非或)</span><br><span class="line">()(复合表达式), !()(对复合表达式结果取反)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 使用环境变量（缺失报错）:</span><br><span class="line">input &#123; </span><br><span class="line">	tcp &#123; </span><br><span class="line">		port &#x3D;&gt; &quot;$&#123;TCP_PORT&#125;&quot; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line">## 使用环境变量（缺失使用默认值）：</span><br><span class="line">input &#123; </span><br><span class="line">	tcp &#123; </span><br><span class="line">		port &#x3D;&gt; &quot;$&#123;TCP_PORT:54321&#125;&quot; </span><br><span class="line">	&#125; </span><br><span class="line">&#125;                                            </span><br></pre></td></tr></table></figure></li>
<li><p>logstash例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## input 从标准输入流：</span><br><span class="line">input &#123; stdin &#123; &#125; &#125;</span><br><span class="line"></span><br><span class="line">## 输入数据之后 如何进行处理：</span><br><span class="line">filter &#123;</span><br><span class="line">  ## grok：解析元数据插件,这里从input输入进来的所有数据默认都会存放到 &quot;message&quot; 字段中</span><br><span class="line">  ## grok提供很多正则表达式，地址为：http:&#x2F;&#x2F;grokdebug.herokuapp.com&#x2F;patterns</span><br><span class="line">  ## 比如：%&#123;COMBINEDAPACHELOG&#125; 表示其中一种正则表达式 Apache的表达式</span><br><span class="line">  grok &#123;</span><br><span class="line">    match &#x3D;&gt; &#123; &quot;message&quot; &#x3D;&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ## date：日期格式化</span><br><span class="line">  date &#123;</span><br><span class="line">    match &#x3D;&gt; [ &quot;timestamp&quot; , &quot;dd&#x2F;MMM&#x2F;yyyy:HH:mm:ss Z&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## output 从标准输出流：</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; hosts &#x3D;&gt; [&quot;192.168.11.35:9200&quot;] &#125;</span><br><span class="line">  stdout &#123; codec &#x3D;&gt; rubydebug &#125;</span><br><span class="line">&#125;                         </span><br></pre></td></tr></table></figure></li>
<li><p>file插件使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## file插件</span><br><span class="line">input &#123;</span><br><span class="line">    file &#123;</span><br><span class="line">        path &#x3D;&gt; [&quot;&#x2F;var&#x2F;log&#x2F;*.log&quot;, &quot;&#x2F;var&#x2F;log&#x2F;message&quot;]</span><br><span class="line">        type &#x3D;&gt; &quot;system&quot;</span><br><span class="line">        start_position &#x3D;&gt; &quot;beginning&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">## 其他参数：</span><br><span class="line">discover_interval ## 表示每隔多久检测一下文件，默认15秒</span><br><span class="line">exclude ## 表示排除那些文件</span><br><span class="line">close_older ## 文件超过多长时间没有更新，就关闭监听 默认3600s</span><br><span class="line">ignore_older ## 每次检查文件列表 如果有一个文件 最后修改时间超过这个值 那么就忽略文件 86400s</span><br><span class="line">sincedb_path ## sincedb保存文件的位置，默认存在home下（&#x2F;dev&#x2F;null）</span><br><span class="line">sincedb_write_interval ## 每隔多久去记录一次 默认15秒</span><br><span class="line">stat_interval ## 每隔多久查询一次文件状态 默认1秒</span><br><span class="line">start_position ## 从头开始读取或者从结尾开始读取</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>elk</tag>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>logback+Kafka+logstash集成</title>
    <url>/2019/06/26/logback-Kafka-logstash%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>我们是通过 logback 打印日志，然后将日志通过 kafka 消息队列发送到 Logstash,经过处理以后存储到 Elasticsearch 中，然后通过 Kibana 图形化界面进行分析和处理。</p>
<p>在 spring boot 应用程序中，默认使用 logback 来记录日志，并用 INFO 级别输出日志到控制台。</p>
<p>日志级别和顺序：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</p>
<p>Spring Boot官方推荐优先使用带有-spring的文件名作为,按照如下规则组织配置文件名，就能被正确加载:</p>
<p>logback-spring.xml &gt; logback-spring.groovy &gt; logback.xml &gt; logback.groovy</p>
<h2 id="1-logback-与-Kafka-的集成"><a href="#1-logback-与-Kafka-的集成" class="headerlink" title="1. logback 与 Kafka 的集成"></a>1. logback 与 Kafka 的集成</h2><p>logback 记录日志到 Kafka 消息队列中去，主要使用的是 <code>com.github.danielwegener:logback-kafka-appender:0.2.0-RC2</code> 这个依赖.</p>
<h3 id="1-1-KafkaAppender-配置说明"><a href="#1-1-KafkaAppender-配置说明" class="headerlink" title="1.1. KafkaAppender 配置说明"></a>1.1. KafkaAppender 配置说明</h3><p>由于Logback Encoder API中的重大更改，您需要至少使用logback版本1.2。</p>
<p>确保项目依赖中有：</p>
<p>[maven pom.xml]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.danielwegener&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-kafka-appender&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.2.0-RC2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.3&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>[maven pom.xml]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- This is the kafkaAppender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;kafkaAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topic</span>&gt;</span>logs<span class="tag">&lt;/<span class="name">topic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyingStrategy</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy&quot;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 可选参数, 用于固定分区 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;partition&gt;0&lt;/partition&gt; --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 可选参数，用于在kafka消息中包含日志时间戳 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;appendTimestamp&gt;true&lt;/appendTimestamp&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每个&lt;producerConfig&gt;转换为常规kafka-client配置（格式：key = value） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产者配置记录在这里：https//kafka.apache.org/documentation.html#newproducerconfigs --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bootstrap.servers是唯一必需的 producerConfig --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>bootstrap.servers=localhost:9092<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果kafka不可用，这是后备appender。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标准输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;kafkaAppender&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-兼容性-Compatibility"><a href="#1-2-兼容性-Compatibility" class="headerlink" title="1.2. 兼容性:Compatibility"></a>1.2. 兼容性:Compatibility</h3><p>logback-kafka-appender 依赖于 <code>org.apache.kafka:kafka-clients:1.0.0:jar</code>。它可以将日志附加到版本为 <code>0.9.0.0</code> 或更高版本的 kafka 代理。</p>
<p>对 <code>kafka-clients</code> 的依赖性不会被遮蔽，并且可以通过依赖性覆盖升级到更高的 api 兼容版本。</p>
<h3 id="1-3-分发策略-Delivery-strategies"><a href="#1-3-分发策略-Delivery-strategies" class="headerlink" title="1.3. 分发策略:Delivery strategies"></a>1.3. 分发策略:Delivery strategies</h3><p>直接通过网络进行日志记录并不是一件容易的事情，因为它可能不如本地文件系统可靠，并且如果传输出现问题，对应用程序性能的影响要大得多。</p>
<p>您需要做出一个重要的决定：是将所有日志传递到远程 Kafka 更重要，还是让应用程序保持平稳运行更为重要？这两个决定都允许您调整此 appender 以获得吞吐量。</p>
<ul>
<li><p>AsynchronousDeliveryStrategy: </p>
<p>  将每个日志消息分派给Kafka生成器。如果由于某些原因传递失败，则将消息发送给 fallback appenders。<br>  但是，如果生产者发送的缓冲区已满，这个交付策略就会阻塞(如果到代理的连接丢失，就会发生这种情况)。<br>  为了避免这种阻塞，可以启用 <code>producerConfig</code> <code>block.buffer.full=false</code>。<br>  所有不能足够快地交付的日志消息都将立即转到 fallback appenders。</p>
</li>
<li><p>BlockingDeliveryStrategy: </p>
<p>  将每条日志消息分派给Kafka Producer。如果由于某些原因导致传递失败，则会将消息分派给备用追加程序(fallback appender)。<br>  但是，如果生成器发送缓冲区已满，则此DeliveryStrategy 阻止每个调用线程，直到实际传递日志消息。<br>  通常不鼓励这种策略，因为它对吞吐量有很大的负面影响。警告：此策略不应与 <code>producerConfig</code> 一起使用 <code>linger.ms</code></p>
</li>
</ul>
<h4 id="1-3-1-关于-broker-的中断"><a href="#1-3-1-关于-broker-的中断" class="headerlink" title="1.3.1. 关于 broker 的中断"></a>1.3.1. 关于 broker 的中断</h4><p>AsynchronousDeliveryStrategy 不会阻止被Kafka元数据交换阻塞的应用程序。<br>这意味着：如果在日志记录上下文启动时无法访问所有代理，或者所有代理在较长时间内无法访问（&gt; metadata.max.age.ms），<br>则 appender 最终将阻塞。这种行为通常是不受欢迎的，可以使用 kafka-clients 0.9 进行迁移（参见＃16）。<br>在此之前，您可以使用 logback 自己的 AsyncAppender 包装 KafkaAppender。</p>
<p>示例配置可能如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- This is the kafkaAppender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;kafkaAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Kafka Appender configuration --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ASYNC&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;kafkaAppender&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ASYNC&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-自定义分发策略-delivery-strategies"><a href="#1-3-2-自定义分发策略-delivery-strategies" class="headerlink" title="1.3.2. 自定义分发策略(delivery strategies)"></a>1.3.2. 自定义分发策略(delivery strategies)</h4><p>你可能使用自己的分发策略，只需继承 <code>com.github.danielwegener.logback.kafka.delivery.DeliveryStrategy</code></p>
<h4 id="1-3-3-备用追加程序-fallback-appender"><a href="#1-3-3-备用追加程序-fallback-appender" class="headerlink" title="1.3.3. 备用追加程序:fallback appender"></a>1.3.3. 备用追加程序:fallback appender</h4><p>如果由于某种原因，kafka-producer决定它无法发布日志消息，那么该消息仍然可以记录到 fallback appender（STDOUT 或 STDERR 上的 ConsoleAppender 将是一个合理的选择）。</p>
<p>只需将您的后备appender作为logback appender-ref添加到logback.xml中的KafkaAppender部分。 每个无法传递给kafka的消息都将写入所有已定义的appender-ref。</p>
<p>1.1 章节示例：<code>&lt;appender-ref ref =&quot;STDOUT&quot;&gt;</code> 中 <code>STDOUT</code> 是已定义的 appender。</p>
<p>请注意，AsynchronousDeliveryStrategy 将重用 kafka 生成器io线程将消息写入备用 appender。 因此，所有后备追加者应该是合理的快速，所以他们不会减慢或打破卡夫卡生产者。</p>
<h4 id="1-3-4-生产者调整"><a href="#1-3-4-生产者调整" class="headerlink" title="1.3.4. 生产者调整"></a>1.3.4. 生产者调整</h4><p>这个appender使用kafka-0.8.2中引入的 <a href="https://kafka.apache.org/documentation.html#producerconfigs">kafka生成器</a>。 它使用生成器默认配置。</p>
<p>您可以使用 <code>&lt;producerConfig&gt; Name = Value &lt;/ producerConfig&gt;</code> 块覆盖任何已知的kafka生成器配置（请注意，boostrap.servers配置是必需的）。<br>这允许很多微调潜力（例如，使用batch.size，compression.type 和 linger.ms）。</p>
<h4 id="1-3-5-序列化"><a href="#1-3-5-序列化" class="headerlink" title="1.3.5. 序列化"></a>1.3.5. 序列化</h4><p>该模块支持任何 <code>ch.qos.logback.core.encoder.Encoder</code>。这允许您使用能够编码 <code>ILoggingEvent</code>或 <code>IAccessEvent</code> 的任何编码器，<br>如众所周知的<a href="https://logback.qos.ch/manual/encoders.html#PatternLayoutEncoder">logback PatternLayoutEncoder</a>，<br>或者例如 <a href="https://github.com/logstash/logstash-logback-encoder#usage">logstash-logback-encoder的LogstashEncoxer</a>。</p>
<h5 id="1-3-5-1-自定义序列化"><a href="#1-3-5-1-自定义序列化" class="headerlink" title="1.3.5.1 自定义序列化"></a>1.3.5.1 自定义序列化</h5><p>如果要在kafka日志记录主题上编写与字符串不同的内容，可以使用编码机制。 用例将是生产或消费方面的较小消息大小和/或更好的序列化/反序列化性能。<br>有用的格式可以是BSON，Avro或其他。</p>
<p>要推出自己的实现，请参阅<a href="https://logback.qos.ch/xref/ch/qos/logback/core/encoder/Encoder.html">logback文档</a>。<br>请注意，logback-kafka-appender永远不会调用headerBytes（）或footerBytes（）方法。</p>
<p>您的编码器应该针对您要支持的事件类型的任何子类型（通常是 <code>ILoggingEvent</code>）进行类型参数化，例如:</p>
<p><code>public class MyEncoder extends ch.qos.logback.core.encoder.Encoder&lt;ILoggingEvent&gt; &#123;/*..*/&#125;</code></p>
<h3 id="1-4-键控策略-分区-Keying-strategies-Partitioning"><a href="#1-4-键控策略-分区-Keying-strategies-Partitioning" class="headerlink" title="1.4 键控策略/分区:Keying strategies / Partitioning"></a>1.4 键控策略/分区:Keying strategies / Partitioning</h3><p>Kafka的可扩展性和排序保证严重依赖于分区的概念（<a href="https://kafka.apache.org/082/documentation.html#introduction">这里有更多细节</a>）。<br>对于应用程序日志记录，这意味着我们需要决定如何在多个kafka主题分区上分发日志消息。<br>这个决定的一个含义是消息在从任意多分区消费者消费时如何排序，因为kafka仅在每个单独的分区上提供有保证的读取顺序。<br>另一个含义是我们的日志消息在所有可用分区中的分布均匀，因此在多个代理之间保持平衡。</p>
<p>日志消息的顺序可能重要，也可能不重要，具体取决于预期的消费者 - 受众（例如，logstash索引器无论如何都会按时间戳重新排序所有消息）。</p>
<p>您可以使用partition属性为kafka appender提供固定分区，或让生产者使用消息密钥对消息进行分区。 因此logback-kafka-appender支持以下键控策略策略：</p>
<ul>
<li><p><code>NoKeyKeyingStrategy</code> : </p>
<p>  不生成 message key。如果未提供固定分区，则导致跨分区的循环分布。</p>
</li>
<li><p><code>HostNameKeyingStrategy</code> : </p>
<p>  此策略使用 HOSTNAME 作为 message key。 这很有用，因为它可以确保此主机发出的所有日志消息对于任何使用者都保持正确的顺序。<br>  但是这种策略可能导致少量主机的日志分配不均匀（与分区数量相比）。</p>
</li>
<li><p><code>ContextNameKeyingStrategy</code> : </p>
<p>  此策略使用 logback 的 CONTEXT_NAME 作为 message key。<br>  这可以确保由同一日志记录上下文记录的所有日志消息将保持在任何使用者的正确顺序中。<br>  但是这种策略可能导致少量主机的日志分配不均匀（与分区数量相比）。<br>  此策略仅适用于ILoggingEvents。</p>
</li>
<li><p><code>ThreadNameKeyingStrategy</code> : </p>
<p>  此策略使用调用线程名(thread name)称作为 message key。<br>  这可确保同一线程记录的所有消息将保持正确的顺序，供任何使用者使用。<br>  但是这种策略可能会导致少量线程（-names）的日志分配不均匀（与分区数量相比）。<br>  此策略仅适用于 ILoggingEvents。</p>
</li>
<li><p><code>LoggerNameKeyingStrategy</code> : </p>
<p>  *此策略使用记录器名称(logger name)作为 message key。<br>  这可确保同一记录器记录的所有消息都将保持在任何使用者的正确顺序中。<br>  但是这种策略可能会导致少量不同记录器的日志分配不均匀（与分区数量相比）。<br>  此策略仅适用于 ILoggingEvents。</p>
</li>
</ul>
<h4 id="1-4-1-自定义键控策略-Custom-keying-strategies"><a href="#1-4-1-自定义键控策略-Custom-keying-strategies" class="headerlink" title="1.4.1. 自定义键控策略 Custom keying strategies"></a>1.4.1. 自定义键控策略 Custom keying strategies</h4><p>如果上述键控策略都不满足您的要求，您可以通过实现自定义 KeyingStrategy 轻松实现自己的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> foo;</span><br><span class="line"><span class="keyword">import</span> com.github.danielwegener.logback.kafka.keying.KeyingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 这是一个有效的例子，但并没有多大意义 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LevelKeyingStrategy</span> <span class="keyword">implements</span> <span class="title">KeyingStrategy</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] createKey(ILoggingEvent e) &#123;</span><br><span class="line">        <span class="keyword">return</span> ByteBuffer.allocate(<span class="number">4</span>).putInt(e.getLevel()).array();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作为大多数自定义 logback 组件，您的自定义分区策略还可以实现 <code>ch.qos.logback.core.spi.ContextAware</code> 和 <code>ch.qos.logback.core.spi.LifeCycle</code> 接口。</p>
<p>当您想要使用kafka的日志压缩工具时，自定义键控策略可能会特别方便。</p>
<h3 id="1-5-logback-spring-xml-示例"><a href="#1-5-logback-spring-xml-示例" class="headerlink" title="1.5. logback-spring.xml 示例"></a>1.5. logback-spring.xml 示例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>oauth2-auth-server<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %contextName [%thread] %highlight(%-5level) %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到kafka--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;kafka&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.KafkaAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topic</span>&gt;</span>oauth2-auth-server<span class="tag">&lt;/<span class="name">topic</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我们不关心如何对日志消息进行分区 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyingStrategy</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用异步传递。 日志记录不会阻止应用程序线程 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">deliveryStrategy</span> <span class="attr">class</span>=<span class="string">&quot;com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每个&lt;producerConfig&gt;转换为常规kafka-client配置（格式：key = value） --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产者配置记录在这里：https://kafka.apache.org/documentation.html#newproducerconfigs --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- bootstrap.servers是唯一必需的 producerConfig --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>bootstrap.servers=192.168.213.13:9092,192.168.213.14:9092,192.168.213.21:9092<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不用等待代理对批的接收进行打包。  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>acks=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 等待最多1000毫秒并收集日志消息，然后再批量发送 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>linger.ms=1000<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 即使生产者缓冲区运行已满，也不要阻止应用程序而是开始丢弃消息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>max.block.ms=0<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义用于标识kafka代理的客户端ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">producerConfig</span>&gt;</span>client.id=$&#123;HOSTNAME&#125;-$&#123;CONTEXT_NAME&#125;-logback-relaxed<span class="tag">&lt;/<span class="name">producerConfig</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果kafka不可用，这是后备appender。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/oauth2-auth-server.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-12(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;kafka&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-Kafka-与-Logstash-的集成"><a href="#2-Kafka-与-Logstash-的集成" class="headerlink" title="2. Kafka 与 Logstash 的集成"></a>2. Kafka 与 Logstash 的集成</h2><p>logstash 与 Kafka 的简单配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">input</span> &#123;</span><br><span class="line">     <span class="string">kafka</span> &#123;</span><br><span class="line">        <span class="string">topics</span> <span class="string">=&gt;</span> <span class="string">&quot;applog&quot;</span></span><br><span class="line">        <span class="string">bootstrap_servers</span> <span class="string">=&gt;</span> <span class="string">&quot;Kafka服务器IP:9092,Kafka服务器IP:9092&quot;</span></span><br><span class="line">        <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">&quot;json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">filter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">output</span> &#123;</span><br><span class="line">  <span class="string">//控制台输入</span></span><br><span class="line">  <span class="string">stdout</span> &#123;  <span class="string">codec</span> <span class="string">=&gt;</span> <span class="string">rubydebug</span> &#125;</span><br><span class="line">  <span class="string">elasticsearch</span> &#123;</span><br><span class="line">    <span class="string">hosts</span> <span class="string">=&gt;</span> [ <span class="string">&quot;elasticsearch服务器IP:9200&quot;</span> ]</span><br><span class="line">    <span class="string">index</span> <span class="string">=&gt;</span> <span class="string">&quot;kafka&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动 logstash：</p>
<p><code>.\bin\logstash -f .\conf\logstash-kaka.conf</code></p>
]]></content>
      <categories>
        <category>elk</category>
      </categories>
      <tags>
        <tag>kafka</tag>
        <tag>logstash</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2019/06/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="文件系统常用命令"><a href="#文件系统常用命令" class="headerlink" title="文件系统常用命令"></a>文件系统常用命令</h2><p><code>ls /</code> : 查看根目录下的子节点（文件夹和文件）信息</p>
<p><code>ls -al</code> : -a 显示隐藏文件 -l 以更详细的列表形式显示</p>
<p><code>mkdir aaa</code> : 创建相对路径文件夹的写法</p>
<p><code>mkdir -p aaa/bbb/ccc</code></p>
<p><code>rmdir</code> : 可以删除空目录</p>
<p><code>rm -r aaa</code> : 可以把 aaa 整个文件夹及其中的所有子节点全都删除</p>
<p><code>rm -fr aaa</code> : 强制删除 aaa</p>
<p><code>touch somefile.txt</code> : 创建一个空文件</p>
<p><code>&gt;</code> : 重定向 <code>echo &quot;利用 &gt; 重定向的功能，将一定指令的输出结果写入到一个文件中，会覆盖原文件内容&quot; &gt; somefile.txt</code></p>
<p><code>&gt;&gt;</code> : 追加 <code>echo &quot;利用 &gt;&gt; 可以把字符串追加到一个文件中，不会覆盖原文件内容&quot; &gt;&gt; somefile.txt</code></p>
<h2 id="vi-编辑器的一些快捷键"><a href="#vi-编辑器的一些快捷键" class="headerlink" title="vi 编辑器的一些快捷键"></a>vi 编辑器的一些快捷键</h2><h3 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h3><p><code>a</code> : 在光标后一位开始插入</p>
<p><code>A</code> : 在该行的最后插入</p>
<p><code>I</code> : 在该行的最前面插入</p>
<p><code>gg</code> : 直接跳到文件的首行</p>
<p><code>G</code> : </p>
<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3>]]></content>
  </entry>
  <entry>
    <title>netty入门示例</title>
    <url>/2021/05/11/netty%E5%85%A5%E9%97%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在，我们开始编写一个最简单的Netty示例，在这之前我们先熟悉一下最基本的编码实现步骤！</p>
<p>Netty实现通信的步骤：（客户端与服务器端基本一致）</p>
<ul>
<li>创建两个的NIO线程组，一个专门用于网络事件处理（接受客户端的连接），另一个则进行网络通信读写。</li>
<li>创建一个ServerBootstrap对象，配置Netty的一系列参数，例如接受传出数据的缓存大小等等。</li>
<li>创建一个实际处理数据的类ChannelInitializer，进行初始化的准备工作，比如设置接受传出数据的字符集、格式、已经实际处理数据的接口。</li>
<li>绑定端口，执行同步阻塞方法等待服务器端启动即可。</li>
</ul>
<span id="more"></span>

<p>Netty的使用非常简单，仅仅引入依赖即可快速开始：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.12.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Netty-Server"><a href="#Netty-Server" class="headerlink" title="Netty Server"></a>Netty Server</h1><p>Netty Server端需要编写 Server 与 ServerHandler两个核心类！</p>
<h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 创建两个线程组: 一个用于进行网络连接接受的 另一个用于我们的实际处理（网络通信的读写）</span></span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过辅助类去构造server/client</span></span><br><span class="line">        ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 进行Nio Server的基础配置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1 绑定两个线程组</span></span><br><span class="line">        b.group(bossGroup, workGroup)</span><br><span class="line">                <span class="comment">//3.2 因为是server端，所以需要配置NioServerSocketChannel</span></span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                <span class="comment">//3.3 设置链接超时时间</span></span><br><span class="line">                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">3000</span>)</span><br><span class="line">                <span class="comment">//3.4 设置TCP backlog参数 = sync队列 + accept队列</span></span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">                <span class="comment">//3.5 设置配置项 通信不延迟</span></span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//3.6 设置配置项 接收与发送缓存区大小</span></span><br><span class="line">                .childOption(ChannelOption.SO_RCVBUF, <span class="number">1024</span> * <span class="number">32</span>)</span><br><span class="line">                .childOption(ChannelOption.SO_SNDBUF, <span class="number">1024</span> * <span class="number">32</span>)</span><br><span class="line">                <span class="comment">//3.7 进行初始化 ChannelInitializer , 用于构建双向链表 &quot;pipeline&quot; 添加业务handler处理</span></span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">//3.8 这里仅仅只是添加一个业务处理器：ServerHandler（后面我们要针对他进行编码）</span></span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> ServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 服务器端绑定端口并启动服务;使用channel级别的监听close端口 阻塞的方式</span></span><br><span class="line">        ChannelFuture cf = b.bind(<span class="number">8765</span>).sync();</span><br><span class="line">        cf.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 释放资源</span></span><br><span class="line">        bossGroup.shutdownGracefully();</span><br><span class="line">        workGroup.shutdownGracefully();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ServerHandler"><a href="#ServerHandler" class="headerlink" title="ServerHandler"></a>ServerHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelActive</span></span><br><span class="line"><span class="comment">     * 通道激活方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;server channel active..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelRead</span></span><br><span class="line"><span class="comment">     * 读写数据核心方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 读取客户端的数据(缓存中去取并打印到控制台)</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] request = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(request);</span><br><span class="line">        String requestBody = <span class="keyword">new</span> String(request, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.err.println(<span class="string">&quot;Server: &quot;</span> + requestBody);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 返回响应数据</span></span><br><span class="line">        String responseBody = <span class="string">&quot;返回响应数据，&quot;</span> + requestBody;</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(responseBody.getBytes()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * exceptionCaught</span></span><br><span class="line"><span class="comment">     * 捕获异常方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Netty-Client"><a href="#Netty-Client" class="headerlink" title="Netty Client"></a>Netty Client</h1><p>Netty Client端需要编写 Client与 ClientHandler两个核心类！</p>
<h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1. 创建两个线程组: 只需要一个线程组用于我们的实际处理（网络通信的读写）</span></span><br><span class="line">		EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2. 通过辅助类去构造client,然后进行配置响应的配置参数</span></span><br><span class="line">		Bootstrap b = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">		b.group(workGroup)</span><br><span class="line">		 .channel(NioSocketChannel.class)</span><br><span class="line">		 .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">3000</span>)</span><br><span class="line">		 .option(ChannelOption.SO_RCVBUF, <span class="number">1024</span> * <span class="number">32</span>)</span><br><span class="line">		 .option(ChannelOption.SO_SNDBUF, <span class="number">1024</span> * <span class="number">32</span>)</span><br><span class="line">		 <span class="comment">//3. 初始化ChannelInitializer</span></span><br><span class="line">		 .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">				<span class="comment">//3.1  添加客户端业务处理类</span></span><br><span class="line">				ch.pipeline().addLast(<span class="keyword">new</span> ClientHandler());	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">//4. 服务器端绑定端口并启动服务; 使用channel级别的监听close端口 阻塞的方式</span></span><br><span class="line">		ChannelFuture cf = b.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8765</span>).syncUninterruptibly();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//5. 发送一条数据到服务器端</span></span><br><span class="line">		cf.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello netty!&quot;</span>.getBytes()));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//6. 休眠一秒钟后再发送一条数据到服务端</span></span><br><span class="line">		Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		cf.channel().writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;hello netty again!&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//7. 同步阻塞关闭监听并释放资源</span></span><br><span class="line">		cf.channel().closeFuture().sync();</span><br><span class="line">		workGroup.shutdownGracefully();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ClientHandler"><a href="#ClientHandler" class="headerlink" title="ClientHandler"></a>ClientHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  channelActive</span></span><br><span class="line"><span class="comment">     *  客户端通道激活</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	System.err.println(<span class="string">&quot;client channel active..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  channelRead</span></span><br><span class="line"><span class="comment">     *  真正的数据最终会走到这个方法进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">// 固定模式的 try .. finally  </span></span><br><span class="line">    	<span class="comment">// 在try代码片段处理逻辑, finally进行释放缓存资源, 也就是 Object msg (buffer)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">            <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">            buf.readBytes(req);</span><br><span class="line"></span><br><span class="line">            String body = <span class="keyword">new</span> String(req, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Client :&quot;</span> + body );</span><br><span class="line">            String response = <span class="string">&quot;收到服务器端的返回信息：&quot;</span> + body;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  exceptionCaught</span></span><br><span class="line"><span class="comment">     *  异常捕获方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/vYiVSQ.png" alt="vYiVSQ.png"></p>
<p>客户端向服务端发送数据</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/eUQopw.png" alt="eUQopw.png"></p>
<p>客户端收到服务端返回的数据</p>
]]></content>
      <categories>
        <category>netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>opentsdb</title>
    <url>/2021/03/26/opentsdb/</url>
    <content><![CDATA[<h1 id="1-OpenTSDB-概述"><a href="#1-OpenTSDB-概述" class="headerlink" title="1 OpenTSDB 概述"></a>1 OpenTSDB 概述</h1><p><a href="http://opentsdb.net/overview.html">官网概述</a></p>
<p><a href="https://github.com/OpenTSDB/opentsdb">源码</a></p>
<p>OpenTSDB是基于HBase的分布式、可伸缩的时间序列数据库。它存储的是时间序列数据，时间序列数据是指在不同时间点上收集到的数据，这类数据反映了一个对象随时间的变化状态或程度。</p>
<h2 id="1-1-架构"><a href="#1-1-架构" class="headerlink" title="1.1 架构"></a>1.1 架构</h2><p>OpenTSDB由时间序列守护进程（TSD）和一组命令行实用程序组成。与OpenTSDB的交互主要通过运行一个或多个TSD来实现。每个TSD都是独立的。没有主服务器，没有共享状态，因此您可以根据需要运行任意数量的TSD来处理您向其投入的任何负载。每个TSD使用CloudTable集群中的HBase来存储和检索时间序列数据。数据模式经过高度优化，可快速聚合相似的时间序列，从而最大限度地减少存储空间。TSD的用户不需要直接访问底层存储。您可以通过HTTP API与TSD进行通信。所有通信都发生在同一个端口上（TSD通过查看它收到的前几个字节来确定客户端的协议）。</p>
<p><img src="http://opentsdb.net/img/tsdb-architecture.png" alt="tsdb-architecture"></p>
<h2 id="1-2-基本概念"><a href="#1-2-基本概念" class="headerlink" title="1.2 基本概念"></a>1.2 基本概念</h2><ul>
<li><p><strong>data point</strong>：时间序列数据点，包括metric、timestamp、value和tag。表示某个metric在某个时间点的数值。</p>
</li>
<li><p><strong>metric</strong>：指标项。例如，在系统监控中的CPU使用率、内存、IO等指标。</p>
</li>
<li><p><strong>timestamp</strong>：UNIX时间戳（自Epoch以来的秒或毫秒），即value产生的时间。</p>
</li>
<li><p><strong>value</strong>：某个metric的值，是JSON格式的事件或直方图/摘要。</p>
</li>
<li><p>tag：标签，是由Tagk和Tagv组成的键值对。用于描述该点所属的时间序列。</p>
<p>标签允许您从不同的源或相关实体中分离出类似的数据点，因此您可以轻松地单独或成组地绘制它们。标签的一个常见用法是使用生成数据点的机器名称以及机器所属的集群或池的名称来注释数据点。这使您可以轻松地制作显示每个服务器的服务状态的仪表盘，以及显示跨逻辑服务器池的聚合状态的仪表盘。</p>
</li>
</ul>
<h2 id="1-3-OpenTSDB系统表简介"><a href="#1-3-OpenTSDB系统表简介" class="headerlink" title="1.3 OpenTSDB系统表简介"></a>1.3 OpenTSDB系统表简介</h2><p>OpenTSDB是基于HBase存储时序列数据的，在集群中开启OpenTSDB后，系统会在集群中创建4张HBase表。OpenTSDB系统表如下表所示。</p>
<blockquote>
<p>请不要人为去修改这4张HBase表，因为这可能会导致OpenTSDB不可用。</p>
</blockquote>
<table>
<thead>
<tr>
<th>表名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>OPENTSDB.DATA</td>
<td>用于存储数据点，OpenTSDB的所有数据都存储在这个表中。OpenTSDB按照salt进行分区，默认20个region，暂不支持设置。</td>
</tr>
<tr>
<td>OPENTSDB.UID</td>
<td>用于存储UID映射，数据点中的每个metric，tag都会映射成UID，同时每个UID反向映射为metric，tag，这些映射关系存储在这个表中。</td>
</tr>
<tr>
<td>OPENTSDB.TREE</td>
<td>用于存储metric的结构信息，默认未开启该特性。</td>
</tr>
<tr>
<td>OPENTSDB.META</td>
<td>用于存储时间序列索引和元数据，默认未开启该特性。</td>
</tr>
</tbody></table>
<h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><h2 id="2-1-运行时要求"><a href="#2-1-运行时要求" class="headerlink" title="2.1 运行时要求"></a>2.1 运行时要求</h2><p>要实际运行OpenTSDB，您需要满足以下条件：</p>
<ul>
<li>Linux系统</li>
<li>Java运行时环境1.6或更高版本</li>
<li>HBase 0.92 或更高版本</li>
<li>GnuPlot 4.2 或更高版本</li>
</ul>
<h2 id="2-2-手动安装"><a href="#2-2-手动安装" class="headerlink" title="2.2 手动安装"></a>2.2 手动安装</h2><p>当然，如果为了尽快上手，你也可以<code>standalone</code>模式（该模式独立运行zookeeper，hbase数据保存在本地）安装 HBase。(所以如果需要好的性能，整套大数据集群是少不了的)</p>
<p>opentsdb的安装方式有两种：源码编译安装和RPM包安装。</p>
<h3 id="2-2-1-源码编译安装"><a href="#2-2-1-源码编译安装" class="headerlink" title="2.2.1 源码编译安装"></a>2.2.1 源码编译安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/OpenTSDB/opentsdb.git</span><br><span class="line">cd opentsdb</span><br><span class="line">./build.sh # 等同于 .configure &amp;&amp; make</span><br><span class="line">./build/tsdb # 等同于 make install</span><br></pre></td></tr></table></figure>

<p>如果要卸载的话，执行 <code>make uninstall</code>。</p>
<h3 id="2-2-2-RPM-包安装"><a href="#2-2-2-RPM-包安装" class="headerlink" title="2.2.2 RPM 包安装"></a>2.2.2 RPM 包安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接从 github 上下载 OpenTSDB 的 release 版本的 RPM 包。</span></span><br><span class="line">yum localinstall opentsdb-2.3.1.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>注： 安装时会提示下面两个问题 </p>
<ul>
<li><p>gnuplot-4.6.2-3.el7.x86_64: [Errno 256] No more mirrors to try. </p>
</li>
<li><p>gnuplot-common-4.6.2-3.el7.x86_64: [Errno 256] No more mirrors to try. </p>
</li>
</ul>
<p>这个是应为CentOS中官方的yum源默认是国外的源，除非挂载VPN，否者不发找到镜像。<br>解决方法： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先下载阿里源</span> </span><br><span class="line">wget http://mirrors.aliyun.com/repo/Centos-7.repo -O /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后更新源</span></span><br><span class="line">yum makecache </span><br></pre></td></tr></table></figure>

<p>再重新安装OpenTSDB。</p>
<h3 id="2-2-3-建表"><a href="#2-2-3-建表" class="headerlink" title="2.2.3 建表"></a>2.2.3 建表</h3><p>配置完成后，我们通过下面命令在 HBase 中建立 opentsdb 所需的表。默认情况下 opentsdb 建立的 HBase 表启用了 lzo 压缩。需要开启 Hadoop 中的 lzo 压缩支持， 这里我们直接在下面脚本中把 COMPRESSION 的支持关闭。修改 <code>/usr/share/opentsdb/tools/create_table.sh</code>，设置 COMPRESSION=NONE，并且在文件开始处设置 HBase 所在目录。之后执行该脚本，在 HBase 中创建相应的表，命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># COMPRESSION 的值有：NONE, LZO, GZIP or SNAPPY，</span></span><br><span class="line"><span class="comment"># TSDB_TTL: 数据只保存一个月</span></span><br><span class="line">env COMPRESSION=snappy HBASE_HOME=/usr/<span class="built_in">local</span>/hbase TSDB_TTL=1296000 /usr/share/opentsdb/tools/create_table.sh</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/lin443514407lin/article/details/80591867">opentsdb调优</a></p>
<p><a href="https://blog.csdn.net/bigdataf/article/details/87350357">opentsdb加kerberos认证</a></p>
<h3 id="2-2-4-启动"><a href="#2-2-4-启动" class="headerlink" title="2.2.4 启动"></a>2.2.4 启动</h3><p>启动 OpenTSDB，<code>service opentsdb start</code> 或者 <code>nohup tsdb tsd &amp;</code>。</p>
<p>通过浏览器访问 <a href="http://localhost:4242/%E6%9F%A5%E7%9C%8B%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E3%80%82">http://localhost:4242/查看是否安装成功。</a></p>
<h2 id="2-3-Docker-安装"><a href="#2-3-Docker-安装" class="headerlink" title="2.3 Docker 安装"></a>2.3 Docker 安装</h2><p>还有一种更快速便捷的方法，就是直接使用 docker 安装。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 4242:4242 --name opentsdb petergrace/opentsdb-docker</span><br></pre></td></tr></table></figure>

<p>-d表示在后台运行，<br>-p绑定主机端口，<br>–name为容器命名为opentsdb</p>
<p>下次可以直接使用：<br>docker start opentsdb启动<br>docker stop opentsdb停止<br>docker rm opentsdb删除</p>
<h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h1><p>OpenTSDB所有的配置都在 <a href="http://opentsdb.net/docs/build/html/user_guide/configuration.html#data-types">link</a>. 这里列出来的配置基本都有默认值，但是有些需要根据环境和性能做出改变，具体如下表：</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>默认值</th>
<th>描述</th>
<th>修改值</th>
</tr>
</thead>
<tbody><tr>
<td>tsd.core.preload_uid_cache</td>
<td>false</td>
<td>是否在TSD启动的时候，预热UID缓存数据，为了提升性能，需要开启</td>
<td>true</td>
</tr>
<tr>
<td>tsd.core.auto_create_metrics</td>
<td>false</td>
<td>一个新的metric存入tsdb时，是否自动为其生成UID，如果true,存入成功，反之，失败。(按照最大优化性能的目标来说，应该预先为所有的metric生成UID，但是实际中预先不知道所有的metric,所以这个值需要设置为true)</td>
<td>true</td>
</tr>
<tr>
<td>tsd.http.cachedir</td>
<td>无</td>
<td>tsd写临时文件的目录    根据实际环境设置，比如/tmp/opentsdb</td>
<td></td>
</tr>
<tr>
<td>tsd.http.request.enable_chunked</td>
<td>false</td>
<td>Http写入数据时是否支持一次写入大批量的数据</td>
<td>true</td>
</tr>
<tr>
<td>tsd.http.request.max_chunk</td>
<td>4096</td>
<td>写入的批量数据的上限    根据需要增大，比如65535</td>
<td></td>
</tr>
<tr>
<td>tsd.http.staticroot</td>
<td>无</td>
<td>opentsdb页面的静态资源文件目录    安装目录下 ./build/staticroot</td>
<td></td>
</tr>
<tr>
<td>tsd.network.port</td>
<td>无</td>
<td>tsd读写数据的端口 根据实际配置 比如9099</td>
<td></td>
</tr>
<tr>
<td>tsd.query.timeout</td>
<td>0</td>
<td>tsd查询的timeout,如果为0,则不会timeout    合理配置。 比如200</td>
<td></td>
</tr>
<tr>
<td>tsd.storage.enable_appends</td>
<td>false</td>
<td>2.2版本，tsd 写数据到HBase有两种方式，一种是每来一条数据append到hbase, 一种是先缓存大量数据到tsd内存，然后进行compaction，一些性写入。推荐Append方式</td>
<td>true</td>
</tr>
<tr>
<td>tsd.storage.enable_compaction</td>
<td>true</td>
<td>append打开，这种就关闭</td>
<td>false</td>
</tr>
<tr>
<td>tsd.storage.fix_duplicates</td>
<td>false</td>
<td>相同时间存储相同metric的时候(重复数据)，最新写入的覆盖前面的值</td>
<td>true</td>
</tr>
<tr>
<td>tsd.storage.hbase.zk_basedir</td>
<td>/hbase</td>
<td>hbase 的zk的目录</td>
<td>根据实际配置</td>
</tr>
<tr>
<td>tsd.storage.hbase.zk_quorum</td>
<td>localhost</td>
<td>hbase 的zk地址</td>
<td>根据实际配置</td>
</tr>
</tbody></table>
<h1 id="4-OpenTSDB-API简介"><a href="#4-OpenTSDB-API简介" class="headerlink" title="4 OpenTSDB API简介"></a>4 OpenTSDB API简介</h1><p>OpenTSDB提供了基于HTTP或HTTPS的应用程序接口。请求方式是通过向资源对应的路径发送标准的HTTP请求，请求包含GET、POST方法。它的接口与开源OpenTSDB保持一致，请参见<a href="http://opentsdb.net/docs/build/html/api_http/index.html%E3%80%82">http://opentsdb.net/docs/build/html/api_http/index.html。</a></p>
<h2 id="4-1-api-put"><a href="#4-1-api-put" class="headerlink" title="4.1 /api/put"></a>4.1 /api/put</h2><h2 id="4-2-api-query"><a href="#4-2-api-query" class="headerlink" title="4.2 /api/query"></a>4.2 /api/query</h2><h2 id="4-3-api-search"><a href="#4-3-api-search" class="headerlink" title="4.3 /api/search"></a>4.3 /api/search</h2><h1 id="5-开发-OpenTSDB-应用"><a href="#5-开发-OpenTSDB-应用" class="headerlink" title="5 开发 OpenTSDB 应用"></a>5 开发 OpenTSDB 应用</h1><h2 id="5-1-示例场景"><a href="#5-1-示例场景" class="headerlink" title="5.1 示例场景"></a>5.1 示例场景</h2>]]></content>
      <tags>
        <tag>hbase</tag>
        <tag>opentsdb</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq整合springboot2.x(23)</title>
    <url>/2021/01/27/rabbitmq%E6%95%B4%E5%90%88springboot2-x23/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_3.png" alt="rabbitmq_23_3"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_4.png" alt="rabbitmq_23_4"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_5.png" alt="rabbitmq_23_5"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_6.png" alt="rabbitmq_23_6"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rabbitmq_23_8.png" alt="rabbitmq_23_8"></p>
<h2 id="生产者关键代码"><a href="#生产者关键代码" class="headerlink" title="生产者关键代码"></a>生产者关键代码</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.servlet.context-path=/</span><br><span class="line">server.port=<span class="number">8001</span></span><br><span class="line"></span><br><span class="line">spring.rabbitmq.addresses=<span class="number">192.168</span><span class="number">.11</span><span class="number">.71</span>:<span class="number">5672</span>,<span class="number">192.168</span><span class="number">.11</span><span class="number">.72</span>:<span class="number">5672</span>,<span class="number">192.168</span><span class="number">.11</span><span class="number">.71</span>:<span class="number">5673</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line">spring.rabbitmq.connection-timeout=<span class="number">15000</span></span><br><span class="line"></span><br><span class="line">##	使用启用消息确认模式</span><br><span class="line">spring.rabbitmq.publisher-confirms=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">## 	设置return消息模式，注意要和mandatory一起去配合使用</span><br><span class="line">##spring.rabbitmq.publisher-returns=true</span><br><span class="line">##spring.rabbitmq.template.mandatory=true</span><br><span class="line"></span><br><span class="line">spring.application.name=rabbit-producer</span><br><span class="line">spring.http.encoding.charset=UTF-<span class="number">8</span></span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.jackson.time-zone=GMT+<span class="number">8</span></span><br><span class="line">spring.jackson.<span class="keyword">default</span>-property-inclusion=NON_NULL</span><br></pre></td></tr></table></figure>

<h3 id="RabbitSender"><a href="#RabbitSender" class="headerlink" title="RabbitSender"></a>RabbitSender</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate.ConfirmCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	这里就是确认消息的回调监听接口，用于确认消息是否被broker所收到</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">final</span> ConfirmCallback confirmCallback = <span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 	<span class="doctag">@param</span> CorrelationData 作为一个唯一的标识</span></span><br><span class="line"><span class="comment">		 * 	<span class="doctag">@param</span> ack broker 是否落盘成功 </span></span><br><span class="line"><span class="comment">		 * 	<span class="doctag">@param</span> cause 失败的一些异常信息</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">			System.err.println(<span class="string">&quot;消息ACK结果:&quot;</span> + ack + <span class="string">&quot;, correlationData: &quot;</span> + correlationData.getId());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	对外发送消息的方法</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message 	具体的消息内容</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> properties	额外的附加属性</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, Map&lt;String, Object&gt; properties)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		MessageHeaders mhs = <span class="keyword">new</span> MessageHeaders(properties);</span><br><span class="line">		Message&lt;?&gt; msg = MessageBuilder.createMessage(message, mhs);</span><br><span class="line">		</span><br><span class="line">		rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 	指定业务唯一的iD</span></span><br><span class="line">		CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">		</span><br><span class="line">		MessagePostProcessor mpp = <span class="keyword">new</span> MessagePostProcessor() &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="keyword">public</span> org.springframework.amqp.core.<span class="function">Message <span class="title">postProcessMessage</span><span class="params">(org.springframework.amqp.core.Message message)</span></span></span><br><span class="line"><span class="function">					<span class="keyword">throws</span> AmqpException </span>&#123;</span><br><span class="line">				System.err.println(<span class="string">&quot;---&gt; post to do: &quot;</span> + message);</span><br><span class="line">				<span class="keyword">return</span> message;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">&quot;exchange-1&quot;</span>,</span><br><span class="line">				<span class="string">&quot;springboot.rabbit&quot;</span>, </span><br><span class="line">				msg, mpp, correlationData);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者关键代码"><a href="#消费者关键代码" class="headerlink" title="消费者关键代码"></a>消费者关键代码</h2><h3 id="application-properties-1"><a href="#application-properties-1" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.servlet.context-path=/</span><br><span class="line">server.port=<span class="number">8002</span></span><br><span class="line"></span><br><span class="line">spring.rabbitmq.addresses=<span class="number">192.168</span><span class="number">.11</span><span class="number">.71</span>:<span class="number">5672</span>,<span class="number">192.168</span><span class="number">.11</span><span class="number">.72</span>:<span class="number">5672</span>,<span class="number">192.168</span><span class="number">.11</span><span class="number">.71</span>:<span class="number">5673</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line">spring.rabbitmq.connection-timeout=<span class="number">15000</span></span><br><span class="line"></span><br><span class="line">## 	表示消费者消费成功消息以后需要手工的进行签收(ack)，默认为auto</span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br><span class="line">spring.rabbitmq.listener.simple.concurrency=<span class="number">5</span></span><br><span class="line">spring.rabbitmq.listener.simple.max-concurrency=<span class="number">10</span></span><br><span class="line">spring.rabbitmq.listener.simple.prefetch=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##	作业：</span><br><span class="line">##	最好不要在代码里写死配置信息，尽量使用这种方式也就是配置文件的方式</span><br><span class="line">##	在代码里使用 	$&#123;&#125;	方式进行设置配置: $&#123;spring.rabbitmq.listener.order.exchange.name&#125;</span><br><span class="line">spring.rabbitmq.listener.order.exchange.name=order-exchange</span><br><span class="line">spring.rabbitmq.listener.order.exchange.durable=<span class="keyword">true</span></span><br><span class="line">spring.rabbitmq.listener.order.exchange.type=topic</span><br><span class="line">spring.rabbitmq.listener.order.exchange.key=order.*</span><br><span class="line"></span><br><span class="line">spring.application.name=rabbit-producer</span><br><span class="line">spring.http.encoding.charset=UTF-<span class="number">8</span></span><br><span class="line">spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.jackson.time-zone=GMT+<span class="number">8</span></span><br><span class="line">spring.jackson.<span class="keyword">default</span>-property-inclusion=NON_NULL</span><br></pre></td></tr></table></figure>

<h3 id="RabbitReceive"><a href="#RabbitReceive" class="headerlink" title="RabbitReceive"></a>RabbitReceive</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitReceive</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 	组合使用监听</span></span><br><span class="line"><span class="comment">	 * 	<span class="doctag">@RabbitListener</span> <span class="doctag">@QueueBinding</span> <span class="doctag">@Queue</span> <span class="doctag">@Exchange</span></span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> channel</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">					value = @Queue(value = &quot;queue-1&quot;, durable = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">					exchange = @Exchange(name = &quot;exchange-1&quot;,</span></span><br><span class="line"><span class="meta">					durable = &quot;true&quot;,</span></span><br><span class="line"><span class="meta">					type = &quot;topic&quot;,</span></span><br><span class="line"><span class="meta">					ignoreDeclarationExceptions = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">					key = &quot;springboot.*&quot;</span></span><br><span class="line"><span class="meta">				)</span></span><br><span class="line"><span class="meta">			)</span></span><br><span class="line">	<span class="meta">@RabbitHandler</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">//	1. 收到消息以后进行业务端消费处理</span></span><br><span class="line">		System.err.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">		System.err.println(<span class="string">&quot;消费消息:&quot;</span> + message.getPayload());</span><br><span class="line"></span><br><span class="line">		<span class="comment">//  2. 处理成功之后 获取deliveryTag 并进行手工的ACK操作, 因为我们配置文件里配置的是 手工签收</span></span><br><span class="line">		<span class="comment">//	spring.rabbitmq.listener.simple.acknowledge-mode=manual</span></span><br><span class="line">		Long deliveryTag = (Long)message.getHeaders().get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line">		channel.basicAck(deliveryTag, <span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>mq</tag>
        <tag>rabbitmq</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>redis数据结构sortedset</title>
    <url>/2019/07/22/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84sortedset/</url>
    <content><![CDATA[<h2 id="Redis-有序集合-sorted-set"><a href="#Redis-有序集合-sorted-set" class="headerlink" title="Redis 有序集合(sorted set)"></a>Redis 有序集合(sorted set)</h2><p>Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-batch入门之CSV-to-DB</title>
    <url>/2019/05/06/spring-batch%E5%85%A5%E9%97%A8%E4%B9%8BCSV-to-DB/</url>
    <content><![CDATA[<p>学习使用Spring batch从CSV文件读取记录，并使用 <code>StaxEventItemWriter</code> 输出经过处理的记录转换为 XML 的数据。</p>
<p><img src="https://img-blog.csdnimg.cn/20190131143346968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="spring-batch-reference-model.png"></p>
<ol>
<li><p>JobLauncher： 顾名思义，该领域对象就是Job的启动器，其作用就是绑定一组JobParameters到Job上，然后运行该Job。</p>
</li>
<li><p>Job： 定义，配置批处理任务的领域对象，该对象的作用，第一是做Step的容器，配置该批处理任务需要的Step，以及他们之间的逻辑关系。第二是配置该批处理任务的特征，比方说名字，是否可重启，是否对JobParameters进行验证以及验证规则等。</p>
</li>
<li><p>Step： 定义批处理任务中一个对立的逻辑任务处理单元。基本上的业务逻辑处理代码都是封装在Step中的。Step有2种实现形式，一种是Tasklet形式的，这种形式非常自由，开发人员只需要实现Tasklet接口，其中的逻辑完全有自己决定，另一种是Chunk-Oriented形式的，这种形式定义了一个Step的流程必须是“读-处理（可选）-写”，当然Spring Batch也对每一个步骤提供了接口ItemReader， ItemProcessor，ItemWriter还有很多常用的默认实现（读文件，读数据库，写文件，写数据库等等）。 每一个Step只能由一个Tasklet或者一个Chunk构成。</p>
</li>
<li><p>JobRepository： 该领域对象会为Spring Batch的运维数据提供一种持久化机制。其为所有的运维数据的提供CRUD的操作接口，并为所有的操作提供事务支持。</p>
</li>
</ol>
<h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><p>在这个应用程序中，我们将执行以下任务:</p>
<ol>
<li>使用 <code>FlatFileItemReader</code> 从CSV文件读取交易记录</li>
<li>使用 <code>CustomItemProcessor</code> 进行项目的业务处理。当 <code>ItemReader</code> 读取一个项目，而 <code>ItemWriter</code> 写入它们时，<br><code>ItemProcessor</code> 提供一个转换或应用其他业务处理的访问点。 </li>
<li><del>使用 <code>StaxEventItemWriter</code> 获取 <code>CustomItemProcessor</code> 的处理结果，并将它转换成 XML 类型数据作为最终输出。</del></li>
<li>使用 <code>MyBatisBatchItemWriter</code> 获取 <code>CustomItemProcessor</code> 的处理结果，并将它转换成 XML 类型数据作为最终输出。</li>
<li>查看MySQL</li>
</ol>
<h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p><img src="https://img-blog.csdnimg.cn/20190131143512507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p><code>sqlite-jdbc</code> 和 <code>mysql-connector-java</code> 可以选择其中一个。<br>当选择其中一种时，同时也要在 <code>applicationContext.xml</code> 文件中做出相应的改动。</p>
<p>改动:</p>
<ul>
<li>依赖的版本由 <code>platform-bom</code> 来统一管理</li>
<li>添加 <code>mybatis</code>, <code>mybatis-spring</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-CSV-to-DB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.9.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.batch.version</span>&gt;</span>4.0.1.RELEASE<span class="tag">&lt;/<span class="name">spring.batch.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlite.version</span>&gt;</span>3.8.11.2<span class="tag">&lt;/<span class="name">sqlite.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>platform-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Cairo-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- MySQL database driver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring的XML文件处理依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.batch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-batch-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><p>我们将使用 <code>FlatFileItemReader</code> 读取 CSV 文件。<br>我们将使用它的标准配置，包括 <code>DefaultLineMapper</code>，<code>DelimitedLineTokenizer</code> 和 <code>BeanWrapperFieldSetMapper</code> 类。<br>为了在XML文件中输出记录，我们将使用 <code>StaxEventItemWriter</code> 作为标准编写器。</p>
<p>改动：</p>
<ul>
<li>将输出XML变为输出到mysql</li>
<li>Spring Batch 持久层框架由 <code>spring-jdbc</code> 改为 <code>mybatis</code>, <code>mybatis-spring</code> </li>
</ul>
<p>当然，原来的输出 <code>itemWriter</code> 去掉注释后，仍然起作用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jdbc</span>=<span class="string">&quot;http://www.springframework.org/schema/jdbc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:batch</span>=<span class="string">&quot;http://www.springframework.org/schema/batch&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:application.properties&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.littlefxc.examples.batch&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. 数据库脚本：这里是为了方便起见保证每次重启程序数据库都是最新的（生产环境中不要这么做!!!） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbc:initialize-database</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;batch.schema-drop&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;batch.schema-create&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;project.schema-drop&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbc:script</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;project.schema-create&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbc:initialize-database</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 连接数据库：可以选择其它的数据源实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:driverClassName</span>=<span class="string">&quot;$&#123;jdbc.driver-class-name&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:url</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:username</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:password</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 事务管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.batch.support.transactionRecord.ResourcelessTransactionManager&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:dataSource-ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.1 申明式事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.2 mybatis 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:dataSource-ref</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:typeAliasesPackage</span>=<span class="string">&quot;$&#123;mybatis.type-aliases-package&#125;&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:configLocation</span>=<span class="string">&quot;$&#123;mybatis.configuration&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.3 mybatis dao 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:basePackage</span>=<span class="string">&quot;com.littlefxc.examples.batch.dao&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:sqlSessionFactoryBeanName</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 为JobLauncher，Job和Step实现提供CRUD操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jobRepository&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.core.repository.support.JobRepositoryFactoryBean&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:dataSource-ref</span>=<span class="string">&quot;dataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:transactionManager-ref</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:databaseType</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5. JobLauncher表示一个简单的接口，用于使用给定的 JobParameter 启动作业 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jobLauncher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.core.launch.support.SimpleJobLauncher&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:jobRepository-ref</span>=<span class="string">&quot;jobRepository&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 6. batch 输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;itemReader&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.item.file.FlatFileItemReader&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 输入资源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;resource&quot;</span> <span class="attr">value</span>=<span class="string">&quot;input/record.csv&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不读取第一行数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;linesToSkip&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将输入资源转化为对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lineMapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.item.file.mapping.DefaultLineMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lineTokenizer&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.item.file.transform.DelimitedLineTokenizer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span> <span class="attr">value</span>=<span class="string">&quot;username,user_id,transaction_date,transaction_amount&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fieldSetMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;recordFieldSetMapper&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 7. batch的处理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;itemProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.littlefxc.examples.batch.service.CustomItemProcessor&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 8. batch 输出:输出为xml --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;itemWriter&quot; class=&quot;org.springframework.batch.item.xml.StaxEventItemWriter&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;resource&quot; value=&quot;file:xml/output.xml&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;marshaller&quot;&gt;</span></span><br><span class="line"><span class="comment">            &amp;lt;!&amp;ndash; xml 与 对象的转换器 &amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class=&quot;org.springframework.oxm.jaxb.Jaxb2Marshaller&quot;</span></span><br><span class="line"><span class="comment">                  p:packagesToScan=&quot;com.littlefxc.examples.batch.model&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;rootTagName&quot; value=&quot;transactionRecord&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 8. batch 输出:输出到mysql --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id=&quot;itemWriter&quot; class=&quot;org.springframework.batch.item.database.JdbcBatchItemWriter&quot;</span></span><br><span class="line"><span class="comment">          p:dataSource-ref=&quot;dataSource&quot; p:sql=&quot;$&#123;batch.sql&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;itemSqlParameterSourceProvider&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;bean class=&quot;org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 8. batch 输出:使用 mybatis 输出到mysql --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;itemWriter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.batch.MyBatisBatchItemWriter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 与 mybatis 关联的 dao 层的接口名：com.littlefxc.examples.batch.dao.TransactionRecordDao.insertTransactionRecord --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;statementId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;insertTransactionRecord&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 9. 配置batch的输入(6)、处理器(7)、输出(8) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- commit-interval:提交事务之前将处理的项目数。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">batch:job</span> <span class="attr">id</span>=<span class="string">&quot;firstBatchJob&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">batch:step</span> <span class="attr">id</span>=<span class="string">&quot;step1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">batch:tasklet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">batch:chunk</span> <span class="attr">reader</span>=<span class="string">&quot;itemReader&quot;</span> <span class="attr">processor</span>=<span class="string">&quot;itemProcessor&quot;</span> <span class="attr">writer</span>=<span class="string">&quot;itemWriter&quot;</span> <span class="attr">commit-interval</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">batch:tasklet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">batch:step</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">batch:job</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="RecordFieldSetMapper"><a href="#RecordFieldSetMapper" class="headerlink" title="RecordFieldSetMapper"></a>RecordFieldSetMapper</h2><p><code>ItemReader</code> 的属性，作用是将 <code>FieldSet</code> 转换为对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.batch.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.batch.model.TransactionRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.FieldSet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将 FieldSet 转换为对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/4</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordFieldSetMapper</span> <span class="keyword">implements</span> <span class="title">FieldSetMapper</span>&lt;<span class="title">Transaction</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">mapFieldSet</span><span class="params">(FieldSet fieldSet)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class="line">        Transaction transactionRecord = <span class="keyword">new</span> Transaction();</span><br><span class="line"></span><br><span class="line">        transactionRecord.setUsername(fieldSet.readString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        transactionRecord.setUserId(fieldSet.readInt(<span class="string">&quot;user_id&quot;</span>));</span><br><span class="line">        transactionRecord.setAmount(fieldSet.readDouble(<span class="string">&quot;transaction_amount&quot;</span>));</span><br><span class="line">        String dateString = fieldSet.readString(<span class="string">&quot;transaction_date&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transactionRecord.setTransactionDate(dateFormat.parse(dateString));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transactionRecord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CustomItemProcessor"><a href="#CustomItemProcessor" class="headerlink" title="CustomItemProcessor"></a>CustomItemProcessor</h2><p>自定义实现接口 <code>ItemProcessor</code>, 作为 <code>ItemReader</code> 和 <code>ItemWriter</code> 的转换点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.batch.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.batch.model.TransactionRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.mapping.FieldSetMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.item.file.transform.FieldSet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将读取到的数据集合转换为对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/4</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecordFieldSetMapper</span> <span class="keyword">implements</span> <span class="title">FieldSetMapper</span>&lt;<span class="title">Transaction</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Transaction <span class="title">mapFieldSet</span><span class="params">(FieldSet fieldSet)</span> <span class="keyword">throws</span> BindException </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;dd/MM/yyyy&quot;</span>);</span><br><span class="line">        Transaction transactionRecord = <span class="keyword">new</span> Transaction();</span><br><span class="line"></span><br><span class="line">        transactionRecord.setUsername(fieldSet.readString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        transactionRecord.setUserId(fieldSet.readInt(<span class="string">&quot;user_id&quot;</span>));</span><br><span class="line">        transactionRecord.setAmount(fieldSet.readDouble(<span class="string">&quot;transaction_amount&quot;</span>));</span><br><span class="line">        String dateString = fieldSet.readString(<span class="string">&quot;transaction_date&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            transactionRecord.setTransactionDate(dateFormat.parse(dateString));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> transactionRecord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.batch.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@XmlRootElement(name = &quot;transactionRecord&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date transactionDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="record-csv"><a href="#record-csv" class="headerlink" title="record.csv"></a>record.csv</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devendra, 1234, 31&#x2F;10&#x2F;2015, 10000</span><br><span class="line">john    , 2134, 3&#x2F;12&#x2F;2015 , 12321</span><br><span class="line">robin   , 2134, 2&#x2F;02&#x2F;2015 , 23411</span><br></pre></td></tr></table></figure>

<h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.batch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.Job;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.JobExecution;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.JobParameters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.batch.core.launch.JobLauncher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext();</span><br><span class="line">        context.setConfigLocations(<span class="string">&quot;classpath:spring-context.xml&quot;</span>);</span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        JobLauncher jobLauncher = (JobLauncher) context.getBean(<span class="string">&quot;jobLauncher&quot;</span>);</span><br><span class="line">        Job job = (Job) context.getBean(<span class="string">&quot;firstBatchJob&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting the batch job&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JobExecution execution = jobLauncher.run(job, <span class="keyword">new</span> JobParameters());</span><br><span class="line">            System.out.println(<span class="string">&quot;Job Status : &quot;</span> + execution.getStatus());</span><br><span class="line">            System.out.println(<span class="string">&quot;Job completed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;Job failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amount</span>&gt;</span>10000.0<span class="tag">&lt;/<span class="name">amount</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionDate</span>&gt;</span>2015-10-31T00:00:00+08:00<span class="tag">&lt;/<span class="name">transactionDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userId</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>devendra<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amount</span>&gt;</span>12321.0<span class="tag">&lt;/<span class="name">amount</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionDate</span>&gt;</span>2015-12-03T00:00:00+08:00<span class="tag">&lt;/<span class="name">transactionDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userId</span>&gt;</span>2134<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>john<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">amount</span>&gt;</span>23411.0<span class="tag">&lt;/<span class="name">amount</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionDate</span>&gt;</span>2015-02-02T00:00:00+08:00<span class="tag">&lt;/<span class="name">transactionDate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">userId</span>&gt;</span>2134<span class="tag">&lt;/<span class="name">userId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>robin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionRecord</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionRecord</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">batch.schema-drop=org/springframework/batch/core/schema-drop-mysql.sql</span></span><br><span class="line"><span class="string">batch.schema-create=org/springframework/batch/core/schema-mysql.sql</span></span><br><span class="line"><span class="string">batch.sql=INSERT</span> <span class="string">INTO</span> <span class="string">transaction_record</span> <span class="string">(user_id,</span> <span class="string">username,</span> <span class="string">transaction_date,</span> <span class="string">amount)</span> <span class="string">VALUES</span> <span class="string">(:userId,</span> <span class="string">:username,</span> <span class="string">:transactionDate,</span> <span class="string">:amount)</span></span><br><span class="line"></span><br><span class="line"><span class="string">jdbc.url=jdbc:mysql://192.168.120.63:3306/batch?useSSL=false</span></span><br><span class="line"><span class="string">jdbc.username=root</span></span><br><span class="line"><span class="string">jdbc.password=123456</span></span><br><span class="line"><span class="string">jdbc.driver-class-name=com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义数据库删除脚本</span></span><br><span class="line"><span class="string">project.schema-drop=classpath:schema-drop.sql</span></span><br><span class="line"><span class="comment"># 自定义数据库创建脚本</span></span><br><span class="line"><span class="string">project.schema-create=classpath:schema.sql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis Config</span></span><br><span class="line"><span class="string">mybatis.configuration=classpath:mybatis-config.xml</span></span><br><span class="line"><span class="string">mybatis.type-aliases-package=com.littlefxc.examples.batch.model</span></span><br><span class="line"><span class="string">mybatis.mapper.base-package=com.littlefxc.examples.batch.dao</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="schema-sql"><a href="#schema-sql" class="headerlink" title="schema.sql"></a>schema.sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50722</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : batch</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50722</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 31/01/2019 10:27:20</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for transaction_record</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"># <span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `transaction_record`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `transaction_record`  (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `transaction_date` datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `amount` <span class="keyword">double</span>(<span class="number">11</span>, <span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="schema-drop-sql"><a href="#schema-drop-sql" class="headerlink" title="schema-drop.sql"></a>schema-drop.sql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `transaction_record`;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring-batch</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter-validation学习笔记</title>
    <url>/2019/05/06/spring-boot-starter-validation%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>开发过程中，后台的参数校验是必不可少的，本文关于 <code>spring-boot-starter-validation</code>的学习笔记。</p>
<span id="more"></span>

<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>开发过程中，后台的参数校验是必不可少的，本文关于 <code>spring-boot-starter-validation</code>的学习笔记</p>
<h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h2><h3 id="2-1-如何在pom-xml中引用"><a href="#2-1-如何在pom-xml中引用" class="headerlink" title="2.1 如何在pom.xml中引用"></a>2.1 如何在pom.xml中引用</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>personal<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.16.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 校验框架 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-Hibernate-Validator-常用注解"><a href="#2-2-Hibernate-Validator-常用注解" class="headerlink" title="2.2 Hibernate Validator 常用注解"></a>2.2 Hibernate Validator 常用注解</h3><p><img src="https://img-blog.csdn.net/20181023094553732?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>
<h3 id="2-3-创建自定义校验器"><a href="#2-3-创建自定义校验器" class="headerlink" title="2.3 创建自定义校验器"></a>2.3 创建自定义校验器</h3><h4 id="2-3-1-创建自定义注解"><a href="#2-3-1-创建自定义注解" class="headerlink" title="2.3.1 创建自定义注解"></a>2.3.1 创建自定义注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ReportAsSingleViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.PARAMETER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Documented</span></span><br><span class="line"> <span class="meta">@Constraint(validatedBy = &#123; &#125;)</span></span><br><span class="line"> <span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)</span></span><br><span class="line"> <span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"> <span class="meta">@ReportAsSingleViolation</span><span class="meta">@Pattern(regexp = &quot;&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> IsPhone &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误提示</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;</span>&#123;login.phone.invalid&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-2-实现ConstraintValidator"><a href="#2-3-2-实现ConstraintValidator" class="headerlink" title="2.3.2 实现ConstraintValidator"></a>2.3.2 实现ConstraintValidator</h4><p>仅仅创建注解是没有任何意义的，必须与ConstraintValidator这个接口配合，才能使自定义注解生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsPhoneConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">IsPhone</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pattern pattern = Pattern.compile(<span class="string">&quot;^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d&#123;8&#125;$&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(IsPhone constraintAnnotation)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动时执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义校验逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value CharSequence为校验的类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> || value.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pattern.matcher(value).matches();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-3-组合验证：创建两个接口表示添加时和编辑时"><a href="#2-3-3-组合验证：创建两个接口表示添加时和编辑时" class="headerlink" title="2.3.3 组合验证：创建两个接口表示添加时和编辑时"></a>2.3.3 组合验证：创建两个接口表示添加时和编辑时</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.validation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidatorAdd</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.littlefxc.examples.validation;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编辑时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidatorEdit</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-4-定义错误信息"><a href="#2-3-4-定义错误信息" class="headerlink" title="2.3.4 定义错误信息"></a>2.3.4 定义错误信息</h4><p>Spring Boot Validation约定错误信息放在resources文件夹下的ValidationMessages.properties。<br>文件中key代表的是校验框架注解中的message属性。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">login.id.NotNull=id不能为空</span></span><br><span class="line"><span class="string">login.username.NotBlank=用户名不能为空</span></span><br><span class="line"><span class="string">login.username.Email=用户名必须是邮箱账号</span></span><br><span class="line"><span class="string">login.password.NotBlank=密码不能为空</span></span><br><span class="line"><span class="string">login.password.Length=密码长度至少为6位</span></span><br><span class="line"><span class="string">login.phone.invalid=&quot;手机号格式不合法&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-5-创建实体类"><a href="#2-3-5-创建实体类" class="headerlink" title="2.3.5 创建实体类"></a>2.3.5 创建实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.model;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.validation.IsPhone;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.validation.ValidatorAdd;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.validation.ValidatorEdit;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@Datapublic</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编辑时：不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;&#123;login.id.NotNull&#125;&quot;, groups = &#123;ValidatorEdit.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加时：不能为空，符合邮箱格式</span></span><br><span class="line"><span class="comment">     * 编辑时：符合邮箱格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;&#123;login.username.NotBlank&#125;&quot;, groups = &#123;ValidatorAdd.class&#125;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;&#123;login.username.Email&#125;&quot;, groups = &#123;ValidatorAdd.class, ValidatorEdit.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加时：不能为空，密码长度至少为6位</span></span><br><span class="line"><span class="comment">     * 编辑时：密码长度至少为6位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;&#123;login.password.NotBlank&#125;&quot;, groups = &#123;ValidatorAdd.class&#125;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6, message = &quot;&#123;login.password.Length&#125;&quot;, groups = &#123;ValidatorAdd.class, ValidatorEdit.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加时：符合手机格式</span></span><br><span class="line"><span class="comment">     * 编辑时：符合手机格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@IsPhone(groups = &#123;ValidatorAdd.class, ValidatorEdit.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-6-定义控制器"><a href="#2-3-6-定义控制器" class="headerlink" title="2.3.6 定义控制器"></a>2.3.6 定义控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.controller;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.model.LoginVo;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.validation.ValidatorAdd;</span><br><span class="line"><span class="keyword">import</span> com.littlefxc.examples.validation.ValidatorEdit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span><span class="meta">@RestControllerpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, LoginVo&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@Validated(&#123;ValidatorAdd.class&#125;)</span> LoginVo loginVo)</span> </span>&#123;</span><br><span class="line">        loginVo.setId(UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        map.put(loginVo.getId(), loginVo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;添加通过：&quot;</span> + loginVo.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编辑时</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginVo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/edit&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(<span class="meta">@Validated(&#123;ValidatorEdit.class&#125;)</span> LoginVo loginVo)</span> </span>&#123;</span><br><span class="line">        map.replace(loginVo.getId(), map.get(loginVo.getId()), loginVo);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;编辑通过：&quot;</span> + loginVo.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, LoginVo&gt; <span class="title">edit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一异常处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleBindException</span><span class="params">(BindException ex)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (FieldError fieldError : ex.getFieldErrors()) &#123;</span><br><span class="line">            sb.append(fieldError.getField())</span><br><span class="line">                .append(<span class="string">&quot;: &quot;</span>)</span><br><span class="line">                hexo.append(fieldError.getDefaultMessage())</span><br><span class="line">                hexo.append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;验证失败：&quot;</span> + sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>spring-boot-starter-validation</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot 2.3.7 + es7 集成</title>
    <url>/2021/01/14/spring-boot-2-3-7-es7-%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_20280007/article/details/108388459?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.control">springboot2.3.3中关于spring-data-elasticsearch-4.0.3的使用_阿良~的博客-CSDN博客</a></p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring boot 2.3.7 以上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.3.7.RELEASE 支持 ES 7.X --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">&lt;http://localhost:9200&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="对象映射"><a href="#对象映射" class="headerlink" title="对象映射"></a><strong>对象映射</strong></h1><ul>
<li><p>首先要清楚注解的使用。</p>
<ul>
<li>@Document：类注解，以指示该类是映射到数据库的候选对象。最重要的属性是：<ul>
<li>indexName：用于存储此实体的索引的名称</li>
<li>type：映射类型。如果未设置，则使用小写的类的简单名称。（当前版本开始不推荐使用）</li>
<li>shards：索引的分片数。（经测试，分片数无法设置，应该是个BUG，推荐先创建索引设置好分片数和副本数）</li>
<li>replicas：索引的副本数。（经测试，分片数无法设置，应该是个BUG）</li>
<li>refreshIntervall：索引的刷新间隔。用于索引创建。默认值为“ 1s”。</li>
<li>indexStoreType：索引的索引存储类型。用于索引创建。默认值为“ fs”。</li>
<li>createIndex：配置是否在存储库引导中创建索引。默认值为true。</li>
<li>versionType：版本管理的配置。默认值为EXTERNAL。</li>
</ul>
</li>
<li>@Id：字段注解，以标记用于标识目的的字段。</li>
<li>@Field：在字段级别应用并定义字段的属性，大多数属性映射到各自的Elasticsearch映射定义（以下列表不完整，请查看注释Javadoc以获取完整的参考）：<ul>
<li>name：字段名称，它将在Elasticsearch文档中表示，如果未设置，则使用Java字段名称。</li>
<li>type：字段类型，可以是文本，关键字，长整数，短整数，字节，双精度，浮点型，半浮点数，标度浮点数，日期，布尔值，二进制，整数等。（属性（FieldType）类型不灵活）</li>
<li>format和日期类型的pattern定义。必须为日期类型定义。</li>
<li>store：标记是否将原始字段值存储在Elasticsearch中，默认值为false。</li>
<li>analyzer，searchAnalyzer，normalizer用于指定自定义分析和正规化。</li>
</ul>
</li>
<li>@GeoPoint：将字段标记为geo_point数据类型。如果字段是GeoPoint类的实例，则可以省略。</li>
</ul>
</li>
<li><p>示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经测试，更改 shards，replicas的值无法更改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;stu&quot;, shards = 3, replicas = 2, createIndex = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long stuId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(store = true)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(store = true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(store = true)</span></span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(store = true, type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String sign;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(store = true)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 getter、setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Stu&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;stuId=&quot;</span> + stuId +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\\&#x27;</span><span class="string">&#x27; +</span></span><br><span class="line"><span class="string">                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="string">                &quot;, money=&quot; + money +</span></span><br><span class="line"><span class="string">                &quot;, sign=&#x27;</span><span class="string">&quot; + sign + &#x27;\\&#x27;&#x27; +</span></span><br><span class="line"><span class="string">                &quot;</span>, description=<span class="string">&#x27;&quot; + description + &#x27;</span>\\<span class="string">&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="ElasticsearchRestTemplate-用法"><a href="#ElasticsearchRestTemplate-用法" class="headerlink" title="ElasticsearchRestTemplate 用法"></a>ElasticsearchRestTemplate 用法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fengxuechao.FoodieSearchApp;</span><br><span class="line"><span class="keyword">import</span> com.fengxuechao.es.pojo.Stu;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.index.IndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.QueryBuilders;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.FieldSortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.sort.SortOrder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.SearchHits;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.document.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.query.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = FoodieSearchApp.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate esTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不建议使用 ElasticsearchRestTemplate 对索引进行管理（创建索引，更新映射，删除索引）</span></span><br><span class="line"><span class="comment">     * 索引就像是数据库或者数据库中的表，我们平时是不会是通过java代码频繁的去创建修改删除数据库或者表的</span></span><br><span class="line"><span class="comment">     * 我们只会针对数据做CRUD的操作</span></span><br><span class="line"><span class="comment">     * 在es中也是同理，我们尽量使用 ElasticsearchRestTemplate 对文档数据做CRUD的操作</span></span><br><span class="line"><span class="comment">     * 1. 属性（FieldType）类型不灵活</span></span><br><span class="line"><span class="comment">     * 2. 主分片与副本分片数无法设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexStu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Stu stu = <span class="keyword">new</span> Stu();</span><br><span class="line">        stu.setStuId(<span class="number">1007L</span>);</span><br><span class="line">        stu.setName(<span class="string">&quot;iron man&quot;</span>);</span><br><span class="line">        stu.setAge(<span class="number">22</span>);</span><br><span class="line">        stu.setMoney(<span class="number">1000.8f</span>);</span><br><span class="line">        stu.setSign(<span class="string">&quot;I am iron man&quot;</span>);</span><br><span class="line">        stu.setDescription(<span class="string">&quot;I have a spider man&quot;</span>);</span><br><span class="line"></span><br><span class="line">        IndexQuery indexQuery = <span class="keyword">new</span> IndexQueryBuilder().withObject(stu).build();</span><br><span class="line">        esTemplate.index(indexQuery, esTemplate.getIndexCoordinatesFor(stu.getClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexStu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        esTemplate.indexOps(Stu.class).delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    ------------------------- 我是分割线 --------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStuDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; sourceMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        sourceMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;spider man&quot;</span>);</span><br><span class="line">        sourceMap.put(<span class="string">&quot;money&quot;</span>, <span class="number">99.8f</span>);</span><br><span class="line">        sourceMap.put(<span class="string">&quot;age&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest();</span><br><span class="line">        indexRequest.source(sourceMap);</span><br><span class="line"></span><br><span class="line">        UpdateQuery updateQuery = UpdateQuery.builder(<span class="string">&quot;1004&quot;</span>)</span><br><span class="line">                .withDocument(Document.from(sourceMap))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        update stu set sign=&#x27;abc&#x27;,age=33,money=88.6 where docId=&#x27;1002&#x27;</span></span><br><span class="line"></span><br><span class="line">        esTemplate.update(updateQuery, IndexCoordinates.of(<span class="string">&quot;stu&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStuDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stu stu = esTemplate.get(<span class="string">&quot;1004&quot;</span>, Stu.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(stu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteStuDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        esTemplate.delete(<span class="string">&quot;1002&quot;</span>, IndexCoordinates.of(<span class="string">&quot;stu&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    ------------------------- 我是分割线 --------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchStuDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        NativeSearchQuery query = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;spider man&quot;</span>))</span><br><span class="line">                .withPageable(pageable)</span><br><span class="line">                .build();</span><br><span class="line">        SearchHits&lt;Stu&gt; hits = esTemplate.search(query, Stu.class, esTemplate.getIndexCoordinatesFor(Stu.class));</span><br><span class="line">        System.out.println(<span class="string">&quot;检索后的总分页数目为：&quot;</span> + hits.getTotalHits());</span><br><span class="line">        <span class="keyword">for</span> (SearchHit&lt;Stu&gt; hit : hits) &#123;</span><br><span class="line">            System.out.println(hit.getContent());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">highlightStuDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String preTag = <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>;</span><br><span class="line">        String postTag = <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        SortBuilder sortBuilder = <span class="keyword">new</span> FieldSortBuilder(<span class="string">&quot;money&quot;</span>)</span><br><span class="line">                .order(SortOrder.DESC);</span><br><span class="line">        SortBuilder sortBuilderAge = <span class="keyword">new</span> FieldSortBuilder(<span class="string">&quot;age&quot;</span>)</span><br><span class="line">                .order(SortOrder.ASC);</span><br><span class="line"></span><br><span class="line">        NativeSearchQuery query = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(QueryBuilders.matchQuery(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;spider man&quot;</span>))</span><br><span class="line">                .withHighlightFields(<span class="keyword">new</span> HighlightBuilder.Field(<span class="string">&quot;description&quot;</span>)</span><br><span class="line">                        .preTags(preTag)</span><br><span class="line">                        .postTags(postTag))</span><br><span class="line">                .withSort(sortBuilder)</span><br><span class="line">                .withSort(sortBuilderAge)</span><br><span class="line">                .withPageable(pageable)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        SearchHits&lt;Stu&gt; hits = esTemplate.search(query, Stu.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;检索后的总分页数目为：&quot;</span> + hits.getTotalHits());</span><br><span class="line">        <span class="comment">// 将</span></span><br><span class="line">        List&lt;SearchHit&lt;Stu&gt;&gt; list = hits.get()</span><br><span class="line">                .peek(stuSearchHit -&gt; stuSearchHit.getContent().setDescription(stuSearchHit.getHighlightField(<span class="string">&quot;description&quot;</span>).get(<span class="number">0</span>))).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (SearchHit&lt;Stu&gt; hit : list) &#123;</span><br><span class="line">            System.out.println(hit.getContent());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>es, springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter-quartz动态调度任务实现</title>
    <url>/2019/05/06/spring-boot-starter-quartz%E5%8A%A8%E6%80%81%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1.项目结构"></a>1.项目结构</h1><p><img src="https://img-blog.csdnimg.cn/20181225160450315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="2-Maven"><a href="#2-Maven" class="headerlink" title="2.Maven"></a>2.Maven</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learn-quartz-SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h1 id="3-数据库-模型"><a href="#3-数据库-模型" class="headerlink" title="3.数据库-模型"></a>3.数据库-模型</h1><p>在jar包quartz-2.3.0.jar下有数据库sql文件.</p>
<p>sql文件的包路径地址：<code>org.quartz.impl.jdbcjobstore</code>，选择<code>tables_mysql_innodb.sql</code></p>
<h2 id="3-1-scheduler-job-info-sql"><a href="#3-1-scheduler-job-info-sql" class="headerlink" title="3.1. scheduler_job_info.sql"></a>3.1. scheduler_job_info.sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `scheduler_job_info`;  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `scheduler_job_info`  (  </span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,  </span><br><span class="line">  `cron_expression` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `cron_job` bit(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `job_class` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `job_group` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `job_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `scheduler_name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  `repeat_time` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,  </span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `uk_job_name`(`job_name`) <span class="keyword">USING</span> BTREE  </span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;  </span><br></pre></td></tr></table></figure>

<h2 id="3-2-实体类"><a href="#3-2-实体类" class="headerlink" title="3.2.实体类"></a>3.2.实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.enitiy;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@Entity</span>  </span><br><span class="line"><span class="meta">@Table(name = &quot;scheduler_job_info&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8990533448070839127L</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Id</span>  </span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Column(unique = true)</span>  </span><br><span class="line">    <span class="keyword">private</span> String jobName;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String jobGroup;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String jobClass;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String cronExpression;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long repeatTime;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Boolean cronJob;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String schedulerName;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h1><h2 id="4-1-application-properties"><a href="#4-1-application-properties" class="headerlink" title="4.1.application.properties"></a>4.1.application.properties</h2><p><code>com.littlefxc.example.quartz.component.CustomQuartzInstanceIdGenerator</code>表示使用自定义的实例名生成策略，该类代码可以在5.1章节中看到,在数据库上的代码实际效果可以查看到(表<code>qrtz_scheduler_state</code>, 字段<code>INSTANCE_NAME</code>)。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">learn-quartz-SpringBoot  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># jackson Config  </span></span><br><span class="line"><span class="meta">spring.jackson.time-zone</span>=<span class="string">GMT+8  </span></span><br><span class="line"><span class="meta">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:sss  </span></span><br><span class="line"><span class="comment">#spring.jackson.property-naming-strategy=SNAKE_CASE  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># DataSource Config  </span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/learn-quartz?useSSL=false  </span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root  </span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456  </span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver  </span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.filters</span>=<span class="string">slf4j,wall  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">1  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">1  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">8  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-wait</span>=<span class="string">60000  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.time-between-eviction-runs-millis</span>=<span class="string">60000  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-evictable-idle-time-millis</span>=<span class="string">300000  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string">true  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string">false  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-return</span>=<span class="string">false  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.pool-prepared-statements</span>=<span class="string">true  </span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span>=<span class="string">20  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># JPA Config  </span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update  </span></span><br><span class="line"><span class="comment">#spring.jpa.open-in-view=false  </span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Quartz Config  </span></span><br><span class="line"><span class="meta">spring.quartz.job-store-type</span>=<span class="string">jdbc  </span></span><br><span class="line"><span class="meta">spring.quartz.jdbc.initialize-schema</span>=<span class="string">never  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceName</span>=<span class="string">$&#123;spring.application.name&#125;  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceId</span>=<span class="string">AUTO  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceIdGenerator.class</span>=<span class="string">com.littlefxc.example.quartz.component.CustomQuartzInstanceIdGenerator  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.threadPool.threadCount</span>=<span class="string">20  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.driverDelegateClass</span>=<span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.useProperties</span>=<span class="string">true  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.misfireThreshold</span>=<span class="string">60000  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.tablePrefix</span>=<span class="string">qrtz_  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.isClustered</span>=<span class="string">true  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.plugin.shutdownHook.class</span>=<span class="string">org.quartz.plugins.management.ShutdownHookPlugin  </span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.plugin.shutdownHook.cleanShutdown</span>=<span class="string">TRUE  </span></span><br></pre></td></tr></table></figure>

<h2 id="4-2-自定义SchedulerFactoryBean"><a href="#4-2-自定义SchedulerFactoryBean" class="headerlink" title="4.2.自定义SchedulerFactoryBean"></a>4.2.自定义SchedulerFactoryBean</h2><p>创建SchedulerFactoryBean。<br>黄色代码高亮处表示在SchedulerFactoryBean中注入Spring上下文(applicationContext)，该类(SchedulerJobFactory)可以在5.2章节中详细查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.component.SchedulerJobFactory;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.quartz.QuartzProperties;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;  </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerConfig</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> QuartzProperties quartzProperties;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * create scheduler factory </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        SchedulerJobFactory jobFactory = <span class="keyword">new</span> SchedulerJobFactory();  </span><br><span class="line">        jobFactory.setApplicationContext(applicationContext);  </span><br><span class="line">  </span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();  </span><br><span class="line">        properties.putAll(quartzProperties.getProperties());  </span><br><span class="line">  </span><br><span class="line">        SchedulerFactoryBean factory = <span class="keyword">new</span> SchedulerFactoryBean();  </span><br><span class="line">        factory.setOverwriteExistingJobs(<span class="keyword">true</span>);  </span><br><span class="line">        factory.setDataSource(dataSource);  </span><br><span class="line">        factory.setQuartzProperties(properties);  </span><br><span class="line">        factory.setJobFactory(jobFactory);  </span><br><span class="line">        <span class="keyword">return</span> factory;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="5-组件"><a href="#5-组件" class="headerlink" title="5.组件"></a>5.组件</h1><h2 id="5-1-CustomQuartzInstanceIdGenerator"><a href="#5-1-CustomQuartzInstanceIdGenerator" class="headerlink" title="5.1.CustomQuartzInstanceIdGenerator"></a>5.1.CustomQuartzInstanceIdGenerator</h2><p>用法详见4.1章节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.component;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.spi.InstanceIdGenerator;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.UUID;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomQuartzInstanceIdGenerator</span> <span class="keyword">implements</span> <span class="title">InstanceIdGenerator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateInstanceId</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> UUID.randomUUID().toString();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SchedulerException(<span class="string">&quot;Couldn&#x27;t generate UUID!&quot;</span>, ex);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-2-SchedulerJobFactory"><a href="#5-2-SchedulerJobFactory" class="headerlink" title="5.2.SchedulerJobFactory"></a>5.2.SchedulerJobFactory</h2><p>Quartz与Spring结合。<br>在SchedulerFactory中引入Spring上下文。<br>用法详见4.2章节。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.component;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.quartz.spi.TriggerFiredBundle;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.AutowireCapableBeanFactory;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SpringBeanJobFactory;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 模仿了：&#123;<span class="doctag">@link</span> org.springframework.boot.autoconfigure.quartz.AutowireCapableBeanJobFactory&#125; </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &lt;a href=&quot;http://blog.btmatthews.com/?p=40#comment-33797&quot;&gt;注入Spring上下文(applicationContext) </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJobFactory</span> <span class="keyword">extends</span> <span class="title">SpringBeanJobFactory</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> AutowireCapableBeanFactory beanFactory;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(<span class="keyword">final</span> ApplicationContext context)</span> </span>&#123;  </span><br><span class="line">        beanFactory = context.getAutowireCapableBeanFactory();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(<span class="keyword">final</span> TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> Object job = <span class="keyword">super</span>.createJobInstance(bundle);  </span><br><span class="line">        beanFactory.autowireBean(job);  </span><br><span class="line">        <span class="keyword">return</span> job;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="5-3-JobScheduleCreator"><a href="#5-3-JobScheduleCreator" class="headerlink" title="5.3.JobScheduleCreator"></a>5.3.JobScheduleCreator</h2><p>Scheduler 创建Job，SimpleTrigger，CronTrigger的封装类。<br>用法在service 层体现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.component;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.CronTrigger;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDataMap;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobDetail;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.SimpleTrigger;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.CronTriggerFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.JobDetailFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SimpleTriggerFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Scheduler创建Job, SimpleTrigger, CronTrigger </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &lt;a href=&quot;https://blog.csdn.net/yangshangwei/article/details/78539433#withmisfirehandlinginstructiondonothing&quot;&gt;Quartz-错过触发机制&lt;/a&gt; </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobScheduleCreator</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Create Quartz Job. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobClass  Class whose executeInternal() method needs to be called. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDurable Job needs to be persisted even after completion. if true, job will be persisted, not otherwise. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context   Spring application context. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName   Job name. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup  Job group. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JobDetail object </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">createJob</span><span class="params">(Class&lt;? extends QuartzJobBean&gt; jobClass, <span class="keyword">boolean</span> isDurable,  </span></span></span><br><span class="line"><span class="function"><span class="params">                               ApplicationContext context, String jobName, String jobGroup)</span> </span>&#123;  </span><br><span class="line">        JobDetailFactoryBean factoryBean = <span class="keyword">new</span> JobDetailFactoryBean();  </span><br><span class="line">        factoryBean.setJobClass(jobClass);  </span><br><span class="line">        factoryBean.setDurability(isDurable);  </span><br><span class="line">        factoryBean.setApplicationContext(context);  </span><br><span class="line">        factoryBean.setName(jobName);  </span><br><span class="line">        factoryBean.setGroup(jobGroup);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// set job data map  </span></span><br><span class="line">        JobDataMap jobDataMap = <span class="keyword">new</span> JobDataMap();  </span><br><span class="line">        jobDataMap.put(jobName + jobGroup, jobClass.getName());  </span><br><span class="line">        factoryBean.setJobDataMap(jobDataMap);  </span><br><span class="line">  </span><br><span class="line">        factoryBean.afterPropertiesSet();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Create cron trigger. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName        Trigger name. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime          Trigger start time. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cronExpression     Cron expression. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> misFireInstruction Misfire instruction (what to do in case of misfire happens). </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> CronTrigger&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTrigger <span class="title">createCronTrigger</span><span class="params">(String triggerName, Date startTime, String cronExpression, <span class="keyword">int</span> misFireInstruction)</span> </span>&#123;  </span><br><span class="line">        CronTriggerFactoryBean factoryBean = <span class="keyword">new</span> CronTriggerFactoryBean();  </span><br><span class="line">        factoryBean.setName(triggerName);  </span><br><span class="line">        factoryBean.setStartTime(startTime);  </span><br><span class="line">        factoryBean.setCronExpression(cronExpression);  </span><br><span class="line">        factoryBean.setMisfireInstruction(misFireInstruction);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            factoryBean.afterPropertiesSet();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;  </span><br><span class="line">            log.error(e.getMessage(), e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Create simple trigger. </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> triggerName        Trigger name. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime          Trigger start time. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> repeatTime         Job repeat period mills </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> misFireInstruction Misfire instruction (what to do in case of misfire happens). </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SimpleTrigger&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleTrigger <span class="title">createSimpleTrigger</span><span class="params">(String triggerName, Date startTime, Long repeatTime, <span class="keyword">int</span> misFireInstruction)</span> </span>&#123;  </span><br><span class="line">        SimpleTriggerFactoryBean factoryBean = <span class="keyword">new</span> SimpleTriggerFactoryBean();  </span><br><span class="line">        factoryBean.setName(triggerName);  </span><br><span class="line">        factoryBean.setStartTime(startTime);  </span><br><span class="line">        factoryBean.setRepeatInterval(repeatTime);  </span><br><span class="line">        factoryBean.setRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY);  </span><br><span class="line">        factoryBean.setMisfireInstruction(misFireInstruction);  </span><br><span class="line">        factoryBean.afterPropertiesSet();  </span><br><span class="line">        <span class="keyword">return</span> factoryBean.getObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="6-Jobs"><a href="#6-Jobs" class="headerlink" title="6.Jobs"></a>6.Jobs</h1><p>这里的任务都是实现了<code>org.quartz.Job</code>这个接口</p>
<h2 id="Simple-Job"><a href="#Simple-Job" class="headerlink" title="Simple Job"></a>Simple Job</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.jobs;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; Start................&quot;</span>, context.getJobDetail().getKey());  </span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">5</span>).forEach(i -&gt; &#123;  </span><br><span class="line">            log.info(<span class="string">&quot;Counting - &#123;&#125;&quot;</span>, i);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                log.error(e.getMessage(), e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; End................&quot;</span>, context.getJobDetail().getKey());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="Cron-Job"><a href="#Cron-Job" class="headerlink" title="Cron Job"></a>Cron Job</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.jobs;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.DisallowConcurrentExecution;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@DisallowConcurrentExecution</span> <span class="comment">// 这个注解告诉Quartz，一个给定的Job定义（也就是一个JobDetail实例），不并发运行。  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleCronJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;  </span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; Start................&quot;</span>, context.getJobDetail().getKey());  </span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10</span>).forEach(i -&gt; &#123;  </span><br><span class="line">            log.info(<span class="string">&quot;Counting - &#123;&#125;&quot;</span>, i);  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                log.error(e.getMessage(), e);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;);  </span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125; End................&quot;</span>, context.getJobDetail().getKey());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="7-控制器层"><a href="#7-控制器层" class="headerlink" title="7.控制器层"></a>7.控制器层</h1><h2 id="7-1-QuartzController"><a href="#7-1-QuartzController" class="headerlink" title="7.1.QuartzController"></a>7.1.QuartzController</h2><p>工作调度的主要代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.enitiy.SchedulerJob;  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.service.SchedulerService;  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.web.PageableDefault;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> **/</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/job&quot;)</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzController</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SchedulerService schedulerService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuartzController</span><span class="params">(SchedulerService schedulerService)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.schedulerService = schedulerService;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 添加 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/addjob&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addjob</span><span class="params">(<span class="meta">@RequestBody</span> SchedulerJob jobInfo)</span> </span>&#123;  </span><br><span class="line">        schedulerService.scheduleNewJob(jobInfo);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 暂停 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/pausejob&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pausejob</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam</span> String jobName, <span class="meta">@RequestParam</span> String jobGroup)</span> </span>&#123;  </span><br><span class="line">        schedulerService.pauseJob(jobName, jobGroup);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 恢复启动 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/resumejob&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumejob</span><span class="params">(<span class="meta">@RequestParam</span> String jobName, <span class="meta">@RequestParam</span> String jobGroup)</span> </span>&#123;  </span><br><span class="line">        schedulerService.resumeJob(jobName, jobGroup);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 更新：移除older trigger,添加new trigger </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobInfo </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/reschedulejob&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rescheduleJob</span><span class="params">(<span class="meta">@RequestBody</span> SchedulerJob jobInfo)</span> </span>&#123;  </span><br><span class="line">        schedulerService.updateScheduleJob(jobInfo);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 删除 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/deletejob&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletejob</span><span class="params">(<span class="meta">@RequestParam</span> String jobName, <span class="meta">@RequestParam</span> String jobGroup)</span> </span>&#123;  </span><br><span class="line">        schedulerService.deleteJob(jobName, jobGroup);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cron </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/queryjob&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> Page&lt;Map&lt;String, Object&gt;&gt; queryjob(  </span><br><span class="line">            <span class="meta">@PageableDefault</span> Pageable pageable, <span class="meta">@RequestParam</span> Boolean cron) &#123;  </span><br><span class="line">        <span class="keyword">return</span> schedulerService.findAll(pageable, cron);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="7-2-SchedulerController"><a href="#7-2-SchedulerController" class="headerlink" title="7.2.SchedulerController"></a>7.2.SchedulerController</h2><p>仅对自定义数据库(scheduler_job_info)操作的控制器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.enitiy.SchedulerJob;  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.service.SchedulerService;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/20/2018 </span></span><br><span class="line"><span class="comment"> **/</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/job-info&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerController</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> SchedulerService schedulerService;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据jobName查询 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SchedulerJob&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findOne&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerJob <span class="title">findOne</span><span class="params">(<span class="meta">@RequestParam</span> String jobName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> schedulerService.findOne(jobName);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="8-Service层"><a href="#8-Service层" class="headerlink" title="8.Service层"></a>8.Service层</h1><h2 id="8-1-SchedulerServiceImpl"><a href="#8-1-SchedulerServiceImpl" class="headerlink" title="8.1.SchedulerServiceImpl"></a>8.1.SchedulerServiceImpl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.service.impl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.component.JobScheduleCreator;  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.enitiy.SchedulerJob;  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.repository.SchedulerRepository;  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.service.SchedulerService;  </span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;  </span><br><span class="line"><span class="keyword">import</span> org.quartz.*;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.QuartzJobBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.quartz.SchedulerFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerServiceImpl</span> <span class="keyword">implements</span> <span class="title">SchedulerService</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> SchedulerFactoryBean schedulerFactoryBean;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> SchedulerRepository schedulerRepository;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> JobScheduleCreator scheduleCreator;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 启动所有的在表scheduler_job_info中记录的job </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAllSchedulers</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        List&lt;SchedulerJob&gt; jobInfoList = schedulerRepository.findAll();  </span><br><span class="line">        <span class="keyword">if</span> (jobInfoList != <span class="keyword">null</span>) &#123;  </span><br><span class="line">            Scheduler scheduler = schedulerFactoryBean.getScheduler();  </span><br><span class="line">            jobInfoList.forEach(jobInfo -&gt; &#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    JobDetail jobDetail = JobBuilder.newJob((Class&lt;? extends QuartzJobBean&gt;) Class.forName(jobInfo.getJobClass()))  </span><br><span class="line">                            .withIdentity(jobInfo.getJobName(), jobInfo.getJobGroup()).build();  </span><br><span class="line">                    <span class="keyword">if</span> (!scheduler.checkExists(jobDetail.getKey())) &#123;  </span><br><span class="line">                        Trigger trigger;  </span><br><span class="line">                        jobDetail = scheduleCreator.createJob((Class&lt;? extends QuartzJobBean&gt;) Class.forName(jobInfo.getJobClass()),  </span><br><span class="line">                                <span class="keyword">false</span>, context, jobInfo.getJobName(), jobInfo.getJobGroup());  </span><br><span class="line">  </span><br><span class="line">                        <span class="keyword">if</span> (jobInfo.getCronJob() &amp;&amp; CronExpression.isValidExpression(jobInfo.getCronExpression())) &#123;  </span><br><span class="line">                            trigger = scheduleCreator.createCronTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(),  </span><br><span class="line">                                    jobInfo.getCronExpression(), CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING);  </span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                            trigger = scheduleCreator.createSimpleTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(),  </span><br><span class="line">                                    jobInfo.getRepeatTime(), SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT);  </span><br><span class="line">                        &#125;  </span><br><span class="line">  </span><br><span class="line">                        scheduler.scheduleJob(jobDetail, trigger);  </span><br><span class="line">  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">                    log.error(<span class="string">&quot;Class Not Found - &#123;&#125;&quot;</span>, jobInfo.getJobClass(), e);  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">                    log.error(e.getMessage(), e);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleNewJob</span><span class="params">(SchedulerJob jobInfo)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Scheduler scheduler = schedulerFactoryBean.getScheduler();  </span><br><span class="line">  </span><br><span class="line">            JobDetail jobDetail = JobBuilder.newJob((Class&lt;? extends QuartzJobBean&gt;) Class.forName(jobInfo.getJobClass()))  </span><br><span class="line">                    .withIdentity(jobInfo.getJobName(), jobInfo.getJobGroup()).build();  </span><br><span class="line">            <span class="keyword">if</span> (!scheduler.checkExists(jobDetail.getKey())) &#123;  </span><br><span class="line">  </span><br><span class="line">                jobDetail = scheduleCreator.createJob((Class&lt;? extends QuartzJobBean&gt;) Class.forName(jobInfo.getJobClass()),  </span><br><span class="line">                        <span class="keyword">false</span>, context, jobInfo.getJobName(), jobInfo.getJobGroup());  </span><br><span class="line">  </span><br><span class="line">                Trigger trigger;  </span><br><span class="line">                <span class="keyword">if</span> (jobInfo.getCronJob()) &#123;  </span><br><span class="line">                    trigger = scheduleCreator.createCronTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(), jobInfo.getCronExpression(),  </span><br><span class="line">                            CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING);  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    trigger = scheduleCreator.createSimpleTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(), jobInfo.getRepeatTime(),  </span><br><span class="line">                            SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT);  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">                scheduler.scheduleJob(jobDetail, trigger);  </span><br><span class="line">                jobInfo.setSchedulerName(schedulerFactoryBean.getScheduler().getSchedulerName());  </span><br><span class="line">                schedulerRepository.save(jobInfo);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.error(<span class="string">&quot;scheduleNewJobRequest.jobAlreadyExist&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Class Not Found - &#123;&#125;&quot;</span>, jobInfo.getJobClass(), e);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(e.getMessage(), e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateScheduleJob</span><span class="params">(SchedulerJob jobInfo)</span> </span>&#123;  </span><br><span class="line">        Trigger newTrigger;  </span><br><span class="line">        <span class="keyword">if</span> (jobInfo.getCronJob()) &#123;  </span><br><span class="line">            newTrigger = scheduleCreator.createCronTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(), jobInfo.getCronExpression(),  </span><br><span class="line">                    CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            newTrigger = scheduleCreator.createSimpleTrigger(jobInfo.getJobName(), <span class="keyword">new</span> Date(), jobInfo.getRepeatTime(),  </span><br><span class="line">                    SimpleTrigger.MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            schedulerFactoryBean.getScheduler().rescheduleJob(TriggerKey.triggerKey(jobInfo.getJobName()), newTrigger);  </span><br><span class="line">            jobInfo.setSchedulerName(schedulerFactoryBean.getScheduler().getSchedulerName());  </span><br><span class="line">            schedulerRepository.save(jobInfo);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(e.getMessage(), e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * unscheduleJob(TriggerKey triggerKey)只是不再调度触发器，所以，当其他的触发器引用了这个Job，它们不会被改变 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unScheduleJob</span><span class="params">(String jobName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> schedulerFactoryBean.getScheduler().unscheduleJob(<span class="keyword">new</span> TriggerKey(jobName));  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Failed to un-schedule job - &#123;&#125;&quot;</span>, jobName, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * deleteJob(JobKey jobKey):&lt;br&gt; </span></span><br><span class="line"><span class="comment">     * 1.循环遍历所有引用此Job的触发器，以取消它们的调度(to unschedule them)&lt;br&gt; </span></span><br><span class="line"><span class="comment">     * 2.从jobstore中删除Job </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName  job name </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup job group </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteJob</span><span class="params">(String jobName, String jobGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">boolean</span> deleteJob = schedulerFactoryBean.getScheduler().deleteJob(<span class="keyword">new</span> JobKey(jobName, jobGroup));  </span><br><span class="line">            <span class="keyword">if</span> (deleteJob) &#123;  </span><br><span class="line">                SchedulerJob job = schedulerRepository.findSchedulerJobByJobName(jobName);  </span><br><span class="line">                schedulerRepository.delete(job);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> deleteJob;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Failed to delete job - &#123;&#125;&quot;</span>, jobName, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 暂停 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName  job name </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup job group </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">pauseJob</span><span class="params">(String jobName, String jobGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            schedulerFactoryBean.getScheduler().pauseJob(<span class="keyword">new</span> JobKey(jobName, jobGroup));  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Failed to pause job - &#123;&#125;&quot;</span>, jobName, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 恢复 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName  job name </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobGroup job group </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resumeJob</span><span class="params">(String jobName, String jobGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            schedulerFactoryBean.getScheduler().resumeJob(<span class="keyword">new</span> JobKey(jobName, jobGroup));  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Failed to resume job - &#123;&#125;&quot;</span>, jobName, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startJobNow</span><span class="params">(String jobName, String jobGroup)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            schedulerFactoryBean.getScheduler().triggerJob(<span class="keyword">new</span> JobKey(jobName, jobGroup));  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;Failed to start new job - &#123;&#125;&quot;</span>, jobName, e);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 分页查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cron     true: cron trigger, false: simple trigger </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span><span class="comment">// 方法上注解属性会覆盖类注解上的相同属性  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Page&lt;Map&lt;String, Object&gt;&gt; findAll(Pageable pageable, Boolean cron) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (cron) &#123;  </span><br><span class="line">            <span class="keyword">return</span> schedulerRepository.getJobWithCronTrigger(pageable);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> schedulerRepository.getJobWithSimpleTrigger(pageable);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据jobName查询单条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Transactional(readOnly = true)</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerJob <span class="title">findOne</span><span class="params">(String jobName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> schedulerRepository.findSchedulerJobByJobName(jobName);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="9-Dao层"><a href="#9-Dao层" class="headerlink" title="9.Dao层"></a>9.Dao层</h1><h2 id="9-1-SchedulerRepository"><a href="#9-1-SchedulerRepository" class="headerlink" title="9.1.SchedulerRepository"></a>9.1.SchedulerRepository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.example.quartz.repository;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.littlefxc.example.quartz.enitiy.SchedulerJob;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SchedulerRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">SchedulerJob</span>, <span class="title">Long</span>&gt; </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 仅查询simple trigger关联的Job </span></span><br><span class="line"><span class="comment">     * 不查询cron trigger关联的job </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable 分页信息 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Query(value = &quot;select &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_GROUP, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_CLASS_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;t.TRIGGER_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;t.TRIGGER_GROUP, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;s.REPEAT_INTERVAL, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;s.TIMES_TRIGGERED &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;from qrtz_job_details as j &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;join qrtz_triggers as t &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;join qrtz_simple_triggers as s ON j.JOB_NAME = t.JOB_NAME &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;and t.TRIGGER_NAME = s.TRIGGER_NAME &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;and t.TRIGGER_GROUP = s.TRIGGER_GROUP &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;where j.SCHED_NAME = &#x27;schedulerFactoryBean&#x27; &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;order by ?#&#123;#pageable&#125;&quot;,  </span></span><br><span class="line"><span class="meta">            countQuery = &quot;select count(1) &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;from qrtz_job_details as j &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;join qrtz_triggers as t &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;join qrtz_cron_triggers as c  ON j.JOB_NAME = t.JOB_NAME &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;and t.TRIGGER_NAME = c.TRIGGER_NAME &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;and t.TRIGGER_GROUP = c.TRIGGER_GROUP &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;where j.SCHED_NAME = &#x27;schedulerFactoryBean&#x27; &quot;,  </span></span><br><span class="line"><span class="meta">            nativeQuery = true)</span>  </span><br><span class="line">    Page&lt;Map&lt;String, Object&gt;&gt; getJobWithSimpleTrigger(Pageable pageable);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 仅查询cron trigger关联的Job </span></span><br><span class="line"><span class="comment">     * 不查询simple trigger关联的job </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageable </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Query(value = &quot;select &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_GROUP, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;j.JOB_CLASS_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;t.TRIGGER_NAME, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;t.TRIGGER_GROUP, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;c.CRON_EXPRESSION, &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;c.TIME_ZONE_ID &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;from qrtz_job_details as j &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;join qrtz_triggers as t &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;join qrtz_cron_triggers as c ON j.JOB_NAME = t.JOB_NAME &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;and t.TRIGGER_NAME = c.TRIGGER_NAME &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;and t.TRIGGER_GROUP = c.TRIGGER_GROUP &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;where j.SCHED_NAME = &#x27;schedulerFactoryBean&#x27; &quot; +  </span></span><br><span class="line"><span class="meta">            &quot;order by ?#&#123;#pageable&#125;&quot;,  </span></span><br><span class="line"><span class="meta">            countQuery = &quot;select count(1) &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;from qrtz_job_details as j &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;join qrtz_triggers as t &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;join qrtz_cron_triggers as c  ON j.JOB_NAME = t.JOB_NAME &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;and t.TRIGGER_NAME = c.TRIGGER_NAME &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;and t.TRIGGER_GROUP = c.TRIGGER_GROUP &quot; +  </span></span><br><span class="line"><span class="meta">                    &quot;where j.SCHED_NAME = &#x27;schedulerFactoryBean&#x27; &quot;,  </span></span><br><span class="line"><span class="meta">            nativeQuery = true)</span>  </span><br><span class="line">    Page&lt;Map&lt;String, Object&gt;&gt; getJobWithCronTrigger(Pageable pageable);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据JobName查询SchedulerJob </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobName </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SchedulerJob </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function">SchedulerJob <span class="title">findSchedulerJobByJobName</span><span class="params">(String jobName)</span></span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h1 id="10-网页Vue-ElementUI实现"><a href="#10-网页Vue-ElementUI实现" class="headerlink" title="10.网页Vue+ElementUI实现"></a>10.网页Vue+ElementUI实现</h1><h2 id="10-1-simple-html"><a href="#10-1-simple-html" class="headerlink" title="10.1.simple.html"></a>10.1.simple.html</h2><p>仅对Simple Trigger管理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>QuartzDemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-resource/1.5.1/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line">        #top &#123;  </span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#20A0FF</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;cron.html&quot;</span>&gt;</span>goto simple.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleadd&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:15px&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">ref</span>=<span class="string">&quot;testTable&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">border</span>  </span></span><br><span class="line"><span class="tag">        &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">show-overflow-tooltip</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_GROUP&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务所在组&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_CLASS_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TRIGGER_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;触发器名称&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TRIGGER_GROUP&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;触发器所在组&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;REPEAT_INTERVAL&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;触发间隔(毫秒)&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TIMES_TRIGGERED&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;已触发次数&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handlePause(scope.$index, scope.row)&quot;</span>&gt;</span>暂停  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleResume(scope.$index, scope.row)&quot;</span>&gt;</span>恢复  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.$index, scope.row)&quot;</span>&gt;</span>修改  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-pagination</span>  </span></span><br><span class="line"><span class="tag">                    @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span>  </span></span><br><span class="line"><span class="tag">                    @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:page-sizes</span>=<span class="string">&quot;[10, 20, 30, 40]&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:page-size</span>=<span class="string">&quot;pagesize&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:total</span>=<span class="string">&quot;totalCount&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;添加任务&quot;</span> <span class="attr">:visible.syn</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobName&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务分组&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobGroup&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobClass&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发器类型&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-switch</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">&quot;form.cronJob&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-text</span>=<span class="string">&quot;cron&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-text</span>=<span class="string">&quot;simple&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;表达式&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;form.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.cronExpression&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发间隔(毫秒)&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!form.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.repeatTime&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;修改任务&quot;</span> <span class="attr">:visible.syn</span>=<span class="string">&quot;updateFormVisible&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;updateform&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobName&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务分组&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobGroup&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobClass&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发器类型&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-switch</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">&quot;updateform.cronJob&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-text</span>=<span class="string">&quot;cron&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-text</span>=<span class="string">&quot;simple&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;表达式&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;updateform.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.cronExpression&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发间隔(毫秒)&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!updateform.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.repeatTime&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>© Quartz 任务管理<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;  </span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#test&quot;</span>,  </span></span><br><span class="line">        data: &#123;  </span><br><span class="line"><span class="javascript">            <span class="comment">//表格当前页数据  </span></span></span><br><span class="line">            tableData: [],  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//请求的URL  </span></span></span><br><span class="line"><span class="javascript">            url: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//默认每页数据量  </span></span></span><br><span class="line">            pagesize: 10,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//当前页码  </span></span></span><br><span class="line">            currentPage: 1,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//查询的页码  </span></span></span><br><span class="line">            start: 1,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//默认数据总数  </span></span></span><br><span class="line">            totalCount: 1000,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//添加对话框默认可见性  </span></span></span><br><span class="line"><span class="javascript">            dialogFormVisible: <span class="literal">false</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//修改对话框默认可见性  </span></span></span><br><span class="line"><span class="javascript">            updateFormVisible: <span class="literal">false</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//提交的表单  </span></span></span><br><span class="line">            form: &#123;  </span><br><span class="line"><span class="javascript">                jobName: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobGroup: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobClass: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                cronJob: <span class="literal">false</span>,  </span></span><br><span class="line">                repeatTime: 0,  </span><br><span class="line"><span class="javascript">                cronExpression: <span class="string">&#x27;&#x27;</span>  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">// 修改的表单  </span></span></span><br><span class="line">            updateform: &#123;  </span><br><span class="line">                id: 0,  </span><br><span class="line"><span class="javascript">                jobName: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobGroup: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobClass: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                cronJob: <span class="literal">false</span>,  </span></span><br><span class="line">                repeatTime: 0,  </span><br><span class="line"><span class="javascript">                cronExpression: <span class="string">&#x27;&#x27;</span>  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">  </span><br><span class="line">        methods: &#123;  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//从服务器读取数据  </span></span></span><br><span class="line"><span class="javascript">            loadData: <span class="function"><span class="keyword">function</span> (<span class="params">pageNum, pageSize</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&#x27;job/queryjob?cron=false&amp;&#x27;</span> + <span class="string">&#x27;page=&#x27;</span> + pageNum + <span class="string">&#x27;&amp;size=&#x27;</span> + pageSize).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.tableData = res.body.content;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.totalCount = res.body.numberOfElements;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//单行删除  </span></span></span><br><span class="line"><span class="javascript">            handleDelete: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/deletejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//暂停任务  </span></span></span><br><span class="line"><span class="javascript">            handlePause: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/pausejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//恢复任务  </span></span></span><br><span class="line"><span class="javascript">            handleResume: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/resumejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//搜索  </span></span></span><br><span class="line"><span class="javascript">            search: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//弹出对话框  </span></span></span><br><span class="line"><span class="javascript">            handleadd: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//添加  </span></span></span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/addjob&#x27;</span>, <span class="built_in">this</span>.form, &#123;  </span></span><br><span class="line"><span class="javascript">                    headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>&#125;  </span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//更新  </span></span></span><br><span class="line"><span class="javascript">            handleUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(row);  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateFormVisible = <span class="literal">true</span>;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobName = row.JOB_NAME;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobGroup = row.JOB_GROUP;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobClass = row.JOB_CLASS_NAME;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.cronJob = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.repeatTime = row.REPEAT_INTERVAL;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&#x27;job-info/findOne?jobName=&#x27;</span> + row.JOB_NAME).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateform.id = res.body.id;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateform.cronExpression = row.cronExpression;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.updateform)  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//更新任务  </span></span></span><br><span class="line"><span class="javascript">            update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/reschedulejob&#x27;</span>, <span class="built_in">this</span>.updateform, &#123;  </span></span><br><span class="line"><span class="javascript">                    headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>&#125;  </span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateFormVisible = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//每页显示数据量变更  </span></span></span><br><span class="line"><span class="javascript">            handleSizeChange: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.pagesize = val;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//页码变更  </span></span></span><br><span class="line"><span class="javascript">            handleCurrentChange: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.currentPage = val;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">  </span><br><span class="line">    &#125;);  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">    <span class="comment">//载入数据  </span></span></span><br><span class="line">    vue.loadData(vue.currentPage, vue.pagesize);  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h2 id="10-2-cron-html"><a href="#10-2-cron-html" class="headerlink" title="10.2.cron.html"></a>10.2.cron.html</h2><p>进队Cron Trigger 管理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>QuartzDemo<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/vue-resource/1.3.4/vue-resource.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line">        #top &#123;  </span><br><span class="line"><span class="css">            <span class="attribute">background</span>: <span class="number">#20A0FF</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">5px</span>;  </span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>: hidden  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;simple.html&quot;</span>&gt;</span>goto cron.html<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;search&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleadd&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:white&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:15px&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">ref</span>=<span class="string">&quot;testTable&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">border</span>  </span></span><br><span class="line"><span class="tag">        &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">show-overflow-tooltip</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_GROUP&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务所在组&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;JOB_CLASS_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TRIGGER_NAME&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;触发器名称&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TRIGGER_GROUP&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;触发器所在组&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;CRON_EXPRESSION&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;表达式&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">prop</span>=<span class="string">&quot;TIME_ZONE_ID&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">label</span>=<span class="string">&quot;时区&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">sortable</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handlePause(scope.$index, scope.row)&quot;</span>&gt;</span>暂停  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleResume(scope.$index, scope.row)&quot;</span>&gt;</span>恢复  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.$index, scope.row)&quot;</span>&gt;</span>删除  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>  </span></span><br><span class="line"><span class="tag">                            <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>  </span></span><br><span class="line"><span class="tag">                            @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.$index, scope.row)&quot;</span>&gt;</span>修改  </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">template</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-pagination</span>  </span></span><br><span class="line"><span class="tag">                    @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span>  </span></span><br><span class="line"><span class="tag">                    @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:page-sizes</span>=<span class="string">&quot;[10, 20, 30, 40]&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:page-size</span>=<span class="string">&quot;pagesize&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>  </span></span><br><span class="line"><span class="tag">                    <span class="attr">:total</span>=<span class="string">&quot;totalCount&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;添加任务&quot;</span> <span class="attr">:visible.syn</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobName&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务分组&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobGroup&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.jobClass&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发器类型&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-switch</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">&quot;form.cronJob&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-text</span>=<span class="string">&quot;cron&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-text</span>=<span class="string">&quot;simple&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;表达式&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;form.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.cronExpression&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发间隔(毫秒)&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!form.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.repeatTime&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;修改任务&quot;</span> <span class="attr">:visible.syn</span>=<span class="string">&quot;updateFormVisible&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;updateform&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务名称&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobName&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务分组&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobGroup&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;任务类名&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.jobClass&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发器类型&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-switch</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">v-model</span>=<span class="string">&quot;updateform.cronJob&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-color</span>=<span class="string">&quot;#13ce66&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-color</span>=<span class="string">&quot;#ff4949&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">active-text</span>=<span class="string">&quot;cron&quot;</span>  </span></span><br><span class="line"><span class="tag">                        <span class="attr">inactive-text</span>=<span class="string">&quot;simple&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-switch</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;表达式&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;updateform.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.cronExpression&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;触发间隔(毫秒)&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!updateform.cronJob&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;120px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:35%&quot;</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;updateform.repeatTime&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFormVisible = false&quot;</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>© Quartz 任务管理<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;  </span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#test&quot;</span>,  </span></span><br><span class="line">        data: &#123;  </span><br><span class="line"><span class="javascript">            <span class="comment">//表格当前页数据  </span></span></span><br><span class="line">            tableData: [],  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//请求的URL  </span></span></span><br><span class="line"><span class="javascript">            url: <span class="string">&#x27;job/queryjob&#x27;</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//默认每页数据量  </span></span></span><br><span class="line">            pagesize: 10,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//当前页码  </span></span></span><br><span class="line">            currentPage: 1,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//查询的页码  </span></span></span><br><span class="line">            start: 1,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//默认数据总数  </span></span></span><br><span class="line">            totalCount: 1000,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//添加对话框默认可见性  </span></span></span><br><span class="line"><span class="javascript">            dialogFormVisible: <span class="literal">false</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//修改对话框默认可见性  </span></span></span><br><span class="line"><span class="javascript">            updateFormVisible: <span class="literal">false</span>,  </span></span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//提交的表单  </span></span></span><br><span class="line">            form: &#123;  </span><br><span class="line"><span class="javascript">                jobName: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobGroup: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobClass: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                cronJob: <span class="literal">true</span>,  </span></span><br><span class="line">                repeatTime: 0,  </span><br><span class="line"><span class="javascript">                cronExpression: <span class="string">&#x27;&#x27;</span>  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">// 修改的表单  </span></span></span><br><span class="line">            updateform: &#123;  </span><br><span class="line">                id: 0,  </span><br><span class="line"><span class="javascript">                jobName: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobGroup: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                jobClass: <span class="string">&#x27;&#x27;</span>,  </span></span><br><span class="line"><span class="javascript">                cronJob: <span class="literal">true</span>,  </span></span><br><span class="line">                repeatTime: 0,  </span><br><span class="line"><span class="javascript">                cronExpression: <span class="string">&#x27;&#x27;</span>  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">  </span><br><span class="line">        methods: &#123;  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//从服务器读取数据  </span></span></span><br><span class="line"><span class="javascript">            loadData: <span class="function"><span class="keyword">function</span> (<span class="params">pageNum, pageSize</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&#x27;job/queryjob?cron=true&amp;&#x27;</span> + <span class="string">&#x27;page=&#x27;</span> + pageNum + <span class="string">&#x27;&amp;size=&#x27;</span> + pageSize).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.tableData = res.body.content;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.totalCount = res.body.numberOfElements;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//单行删除  </span></span></span><br><span class="line"><span class="javascript">            handleDelete: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/deletejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//暂停任务  </span></span></span><br><span class="line"><span class="javascript">            handlePause: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/pausejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//恢复任务  </span></span></span><br><span class="line"><span class="javascript">            handleResume: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/resumejob&#x27;</span>, &#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobName&quot;</span>: row.JOB_NAME,  </span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;jobGroup&quot;</span>: row.JOB_GROUP  </span></span><br><span class="line"><span class="javascript">                &#125;, &#123;<span class="attr">emulateJSON</span>: <span class="literal">true</span>&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//搜索  </span></span></span><br><span class="line"><span class="javascript">            search: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//弹出对话框  </span></span></span><br><span class="line"><span class="javascript">            handleadd: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//添加  </span></span></span><br><span class="line"><span class="javascript">            add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/addjob&#x27;</span>, <span class="built_in">this</span>.form, &#123;  </span></span><br><span class="line"><span class="javascript">                    headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>&#125;  </span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//更新  </span></span></span><br><span class="line"><span class="javascript">            handleUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">index, row</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(row);  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateFormVisible = <span class="literal">true</span>;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobName = row.JOB_NAME;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobGroup = row.JOB_GROUP;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.jobClass = row.JOB_CLASS_NAME;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.cronJob = <span class="literal">true</span>;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.updateform.cronExpression = row.CRON_EXPRESSION;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.get(<span class="string">&#x27;job-info/findOne?jobName=&#x27;</span> + row.JOB_NAME).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateform.id = res.body.id;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateform.repeatTime = res.body.repeatTime;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.updateform)  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//更新任务  </span></span></span><br><span class="line"><span class="javascript">            update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$http.post(<span class="string">&#x27;job/reschedulejob&#x27;</span>, <span class="built_in">this</span>.updateform, &#123;  </span></span><br><span class="line"><span class="javascript">                    headers: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>&#125;  </span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.updateFormVisible = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>);  </span></span><br><span class="line">                &#125;);  </span><br><span class="line">  </span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//每页显示数据量变更  </span></span></span><br><span class="line"><span class="javascript">            handleSizeChange: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.pagesize = val;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">  </span><br><span class="line"><span class="javascript">            <span class="comment">//页码变更  </span></span></span><br><span class="line"><span class="javascript">            handleCurrentChange: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.currentPage = val;  </span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.loadData(<span class="built_in">this</span>.currentPage, <span class="built_in">this</span>.pagesize);  </span></span><br><span class="line">            &#125;,  </span><br><span class="line">        &#125;,  </span><br><span class="line">  </span><br><span class="line">    &#125;);  </span><br><span class="line"><span class="javascript">    <span class="comment">//载入数据  </span></span></span><br><span class="line">    vue.loadData(vue.currentPage, vue.pagesize);  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<h1 id="11-引用"><a href="#11-引用" class="headerlink" title="11. 引用"></a>11. 引用</h1><p><a href="https://blog.csdn.net/u012907049/article/details/73801122">https://blog.csdn.net/u012907049/article/details/73801122</a><br><a href="https://blog.csdn.net/yangshangwei/article/details/78539433#withmisfirehandlinginstructiondonothing">https://blog.csdn.net/yangshangwei/article/details/78539433#withmisfirehandlinginstructiondonothing</a><br><a href="http://blog.btmatthews.com/?p=40#comment-33797">http://blog.btmatthews.com/?p=40#comment-33797</a><br><a href="https://www.baeldung.com/spring-quartz-schedule">https://www.baeldung.com/spring-quartz-schedule</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>定时调度器</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter单元测试入门</title>
    <url>/2019/05/06/spring-boot-starter%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下3点来介绍，基本满足日常需求：</p>
<ul>
<li>Dao层单元测试</li>
<li>Service层单元测试</li>
<li>Controller层单元测试<br>在单元测试中要尽量使用断言，本文所有的测试类都符合几个原则：</li>
<li>测试类卸载src/test/java目录下</li>
<li>测试类的包结构与被测试类的包结构相同</li>
<li>测试类的命名都是被测试类类名后缀加上Test，例如,UserDaoImpl与UserDaoImplTest相对应</li>
<li>测试类的方法与被测试类的方法命名相同</li>
</ul>
<span id="more"></span>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>这次来介绍下Spring Boot中对单元测试的整合使用，本篇会通过以下3点来介绍，基本满足日常需求：</p>
<ul>
<li>Dao层单元测试</li>
<li>Service层单元测试</li>
<li>Controller层单元测试<br>在单元测试中要尽量使用断言，本文所有的测试类都符合几个原则：</li>
<li>测试类卸载src/test/java目录下</li>
<li>测试类的包结构与被测试类的包结构相同</li>
<li>测试类的命名都是被测试类类名后缀加上Test，例如,UserDaoImpl与UserDaoImplTest相对应</li>
<li>测试类的方法与被测试类的方法命名相同</li>
</ul>
<h2 id="2-正文"><a href="#2-正文" class="headerlink" title="2.正文"></a>2.正文</h2><h3 id="2-1核心依赖"><a href="#2-1核心依赖" class="headerlink" title="2.1核心依赖"></a>2.1核心依赖</h3><p>在Spring Boot 项目中引入单元测试很简单，依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-如何创建单元测试类"><a href="#2-2-如何创建单元测试类" class="headerlink" title="2.2 如何创建单元测试类"></a>2.2 如何创建单元测试类</h3><p>Spring Boot中单元测试类写在在src/test/java目录下，你可以手动创建具体测试类，如果是IDEA，则可以通过IDEA自动创建测试类，如下图，可以通过快捷键Ctrl+Shift+T(Window)来创建，如下：</p>
<h3 id="2-3-盲点解释"><a href="#2-3-盲点解释" class="headerlink" title="2.3. 盲点解释"></a>2.3. 盲点解释</h3><h4 id="Runwith"><a href="#Runwith" class="headerlink" title="@Runwith"></a>@Runwith</h4><p>JUnit用例都是在Runner（运行器）来执行的。通过它，可以为这个测试类指定一个特定的Runner。<br>JUnit允许用户指定其它的单元测试执行类，只需要我们的测试执行类继承类org.junit.runners.BlockJUnit4ClassRunner就可以了，Spring的执行类SpringJUnit4ClassRunner就是继承了该类。我们平时用Spring也比较多，为了能够更加方便的引用配置文件，我们单元测试就使用了Spring实现的执行类。此时的单元测试执行类将会看起来是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = dao.getByUsername(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.err.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="SpringRunner"><a href="#SpringRunner" class="headerlink" title="SpringRunner"></a>SpringRunner</h4><p><code>SpringRunner</code>是<code>SpringJUnit4ClassRunner</code>的一个别名。<code>SpringJUnit4ClassRunner</code>是JUnit的<code>BlockJUnit4ClassRunner</code>类的一个常规扩展，提供了一些spring测试环境上下文去规范JUnit测试。</p>
<h4 id="SpringBootTest"><a href="#SpringBootTest" class="headerlink" title="@SpringBootTest"></a>@SpringBootTest</h4><p>注解制定了一个测试类运行了Spring Boot环境。提供以下特性：</p>
<ul>
<li>自动搜索到SpringBootConfiguration注解的文件。</li>
<li>允许自动注入Environment类读取配置文件。</li>
<li>提供一个webEnvironment环境，可以完整的允许一个web环境使用随机的端口或者自定义的端口。</li>
</ul>
<h4 id="Spring-Boot测试步骤"><a href="#Spring-Boot测试步骤" class="headerlink" title="Spring Boot测试步骤"></a>Spring Boot测试步骤</h4><p>直接在测试类上面加上如下2个注解<br><code>@RunWith(SpringRunner.class)</code><br><code>@SpringBootTest</code><br>就能取到spring中的容器的实例，如果配置了@Autowired那么就自动将对象注入。</p>
<h4 id="单元测试回滚"><a href="#单元测试回滚" class="headerlink" title="单元测试回滚"></a>单元测试回滚</h4><p>单元个测试的时候如果不想造成垃圾数据，可以开启事物功能，记在方法或者类头部添加@Transactional注解即可,如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> save = dao.save(user);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, save);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样测试完数据就会回滚了，不会造成垃圾数据。</p>
<h2 id="3-核心代码示例"><a href="#3-核心代码示例" class="headerlink" title="3.核心代码示例"></a>3.核心代码示例</h2><h3 id="3-1-Dao层单元测试"><a href="#3-1-Dao层单元测试" class="headerlink" title="3.1.Dao层单元测试"></a>3.1.Dao层单元测试</h3><p>基本上所有的WEB程序都会涉及到数据库，本次示例就以最简化的模式：<br>持久层框架就用spring-jdbc。<br>Dao层的测试涉及到基本的CRUD操作。</p>
<h4 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl"></a>UserDaoImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BeanPropertyRowMapper&lt;User&gt; MAPPER = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template.update(</span><br><span class="line">                <span class="string">&quot;insert into user(username, password) values (?, ?)&quot;</span>,</span><br><span class="line">                user.getUsername(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template.update(</span><br><span class="line">                <span class="string">&quot;update user set password = ? where username = ?&quot;</span>, user.getPassword(), user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID删除用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template.update(<span class="string">&quot;delete from user where id = ?&quot;</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> template.query(<span class="string">&quot;select id, username, password from user&quot;</span>, MAPPER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> template.queryForObject(</span><br><span class="line">                    <span class="string">&quot;select id, username, password from user where username = ? limit 1&quot;</span>, MAPPER, username);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EmptyResultDataAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserDaoImplTest"><a href="#UserDaoImplTest" class="headerlink" title="UserDaoImplTest"></a>UserDaoImplTest</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = dao.getByUsername(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.err.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试新建用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> save = dao.save(user);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试修改密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dao.save(user);</span><br><span class="line">        <span class="comment">/* 密码修改前 */</span></span><br><span class="line">        User before = dao.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        <span class="comment">/* 密码修改后 */</span></span><br><span class="line">        dao.update(user);</span><br><span class="line">        User after = dao.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="comment">/* 断言判断修改密码前后的两个类不同 */</span></span><br><span class="line">        Assert.assertNotEquals(before, after);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> save = dao.save(<span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, save);</span><br><span class="line">        User user = dao.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> delete = dao.delete(user.getId());</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = dao.list();</span><br><span class="line">        System.err.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-Service层单元测试"><a href="#3-2-Service层单元测试" class="headerlink" title="3.2.Service层单元测试"></a>3.2.Service层单元测试</h3><h4 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.getByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表查询用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePassword</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserServiceImplTest"><a href="#UserServiceImplTest" class="headerlink" title="UserServiceImplTest"></a>UserServiceImplTest</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = service.getByUsername(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        System.err.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试列表查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = service.list();</span><br><span class="line">        System.err.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试修改密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        service.save(user);</span><br><span class="line">        <span class="comment">/* 密码修改前 */</span></span><br><span class="line">        User before = service.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        <span class="comment">/* 密码修改后 */</span></span><br><span class="line">        service.updatePassword(user);</span><br><span class="line">        User after = service.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="comment">/* 断言判断修改密码前后的两个类不同 */</span></span><br><span class="line">        Assert.assertNotEquals(before, after);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据ID删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> save = service.save(<span class="keyword">new</span> User(<span class="string">&quot;测试用户&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, save);</span><br><span class="line">        User user = service.getByUsername(<span class="string">&quot;测试用户&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> delete = service.deleteById(user.getId());</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试添加用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = service.list();</span><br><span class="line">        System.err.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-Controller层单元测试"><a href="#3-3-Controller层单元测试" class="headerlink" title="3.3.Controller层单元测试"></a>3.3.Controller层单元测试</h3><p>上面只是针对Service和Dao层做测试，但是有时候需要对Controller层（API）做测试，这时候就得用到MockMvc了，你可以不必启动工程就能测试这些接口。</p>
<p>MockMvc实现了对Http请求的模拟，能够直接使用网络的形式，转换到Controller的调用，这样可以使得测试速度快、不依赖网络环境，而且提供了一套验证的工具，这样可以使得请求的验证统一而且很方便。</p>
<h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.save(<span class="keyword">new</span> User(username, password));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据ID删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/delete&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@RequestParam</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/getByUsername&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.getByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名修改密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newPassword</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/updatepassword&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatepassword</span><span class="params">(<span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String newPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> service.updatePassword(<span class="keyword">new</span> User(username, newPassword));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserControllerTest"><a href="#UserControllerTest" class="headerlink" title="UserControllerTest"></a>UserControllerTest</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.SpringRunner继承SpringJUnit4ClassRunner，通俗的讲SpringRunner是SpringJUnit4ClassRunner的别名。</span></span><br><span class="line"><span class="comment"> * 2.SpringBoot项目中自动添加注解式事务支持，在测试环境中添加<span class="doctag">@Transactional</span>，可以对有事务影响的数据库操作回滚</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟浏览器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载WEB的上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WebApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//       mvc = MockMvcBuilders.standaloneSetup(new TestController()).build();</span></span><br><span class="line">        mvc = MockMvcBuilders.webAppContextSetup(context).build();<span class="comment">//建议使用这种</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(</span><br><span class="line">                MockMvcRequestBuilders.get(<span class="string">&quot;/user/list&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk()) <span class="comment">// 期待返回状态码200</span></span><br><span class="line">                .andDo(print()); <span class="comment">// 打印返回的 http response 信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试添加用户</span></span><br><span class="line"><span class="comment">     * 期待：Body = 1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(</span><br><span class="line">                MockMvcRequestBuilders.post(<span class="string">&quot;/user/save&quot;</span>)</span><br><span class="line">                        .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;测试用户1&quot;</span>)</span><br><span class="line">                        .param(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除用户</span></span><br><span class="line"><span class="comment">     * 期待：Body = 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/user/delete&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;1&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getByUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/user/getByUsername&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;小明&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试修改密码</span></span><br><span class="line"><span class="comment">     * 期待：Body = 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatepassword</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/user/updatepassword&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;小明&quot;</span>)</span><br><span class="line">                .param(<span class="string">&quot;newPassword&quot;</span>, <span class="string">&quot;654321&quot;</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
        <tag>spring-boot-starter-test</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot中注解@EnableAutoConfiguration的解析</title>
    <url>/2019/05/06/spring-boot%E4%B8%AD%E6%B3%A8%E8%A7%A3-EnableAutoConfiguration%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>个人感觉@EnableAutoConfiguration这个Annotation最为重要，Spring框架有提供的各种名字为@Enable开头的Annotation定义，比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，借助@Import的支持…</p>
<span id="more"></span>

<p>个人感觉@EnableAutoConfiguration这个Annotation最为重要，Spring框架有提供的各种名字为@Enable开头的Annotation定义，比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，<strong>借助@Import的支持，收集和注册特定场景相关的bean定义</strong>。</p>
<p>又例如：</p>
<ul>
<li>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li>
<li>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。</li>
</ul>
<p>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</p>
<p>@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下：<br><img src="https://img-blog.csdnimg.cn/20181217104614152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="@EnableAutoCOnfiguration"></p>
<p>其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。</p>
<p>借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！<br><img src="https://img-blog.csdnimg.cn/20181217104843615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>自动配置幕后英雄：SpringFactoriesLoader详解</strong></p>
<p>SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;  </span><br><span class="line">    <span class="comment">//...  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;  </span><br><span class="line">    ...  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;  </span><br><span class="line">    ....  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类</p>
<p><img src="https://img-blog.csdnimg.cn/20181217105056281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。<br>所以，@EnableAutoConfiguration自动配置就是：从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</p>
<p><strong>注：@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p>
<p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>@Conditional扩展注解</td>
<td>作用（判断是否满足当前指定条件）</td>
</tr>
<tr>
<td>@ConditionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConditionalOnBean</td>
<td>容器中存在指定Bean</td>
</tr>
<tr>
<td>@ConditionalOnMissingBean</td>
<td>容器中不存在指定Bean</td>
</tr>
<tr>
<td>@ConditionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConditionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnMissingClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConditionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConditionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConditionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConditionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConditionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnJndi</td>
<td>JNDI存在指定项</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot启动流程</title>
    <url>/2019/05/06/spring-boot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="spring-boot启动流程"><a href="#spring-boot启动流程" class="headerlink" title="spring-boot启动流程"></a>spring-boot启动流程</h2><p>SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：</p>
<ol>
<li>如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：<br>根据classpath里面是否存在某个特征类<code>org.springframework.web.context.ConfigurableWebApplicationContext</code>来决定是否应该创建一个为Web应用使用的ApplicationContext类型。<br>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的<code>ApplicationContextInitializer</code>。<br>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的<code>ApplicationListener</code>。<br>推断并设置main方法的定义类。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">		<span class="keyword">this</span>.webApplicationType = deduceWebApplicationType();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 查找并加载所有可用的ApplicationContextInitializer</span></span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">		<span class="comment">// 查找并加载所有可用的ApplicationListener</span></span><br><span class="line">		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过<code>SpringFactoriesLoader</code>可以查找到并加载的<code>SpringApplicationRunListener</code>。调用它们的started()方法，告诉这些<code>SpringApplicationRunListener</code>，“嘿，SpringBoot应用要开始执行咯！”。</li>
<li>创建并配置当前Spring Boot应用将要使用的<code>Environment</code>（包括配置要使用的PropertySource以及Profile）。</li>
<li> 遍历调用所有<code>SpringApplicationRunListener</code>的<code>environmentPrepared()</code>的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</li>
<li>如果<code>SpringApplication</code>的<code>showBanner</code>属性被设置为<code>true</code>，则打印<code>banner</code>。</li>
<li>根据用户是否明确设置了<code>applicationContextClass</code>类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加<code>ShutdownHook</code>，决定是否使用自定义的<code>BeanNameGenerator</code>，决定是否使用自定义的<code>ResourceLoader</code>，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</li>
<li>ApplicationContext创建好之后，SpringApplication会再次借助<code>SpringFactoriesLoader</code>，查找并加载classpath中所有可用的<code>ApplicationContextInitializer</code>，然后遍历调用这些ApplicationContextInitializer的<code>initialize(applicationContext)</code>方法来对已经创建好的ApplicationContext进行进一步的处理。</li>
<li>遍历调用所有<code>SpringApplicationRunListener</code>的<code>contextPrepared()</code>方法。</li>
<li>最核心的一步，将之前通过<code>@EnableAutoConfiguration</code>获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</li>
<li>遍历调用所有<code>SpringApplicationRunListener</code>的<code>contextLoaded()</code>方法。</li>
<li>调用<code>ApplicationContext</code>的<code>refresh()</code>方法，完成IoC容器可用的最后一道工序。</li>
<li>查找当前<code>ApplicationContext</code>中是否注册有<code>CommandLineRunner</code>，如果有，则遍历执行它们。</li>
<li>正常情况下，遍历执行<code>SpringApplicationRunListener</code>的<code>finished()</code>方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）</li>
</ol>
<p>Spring 源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">	StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">	stopWatch.start();</span><br><span class="line">	ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">	Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	configureHeadlessProperty();</span><br><span class="line">	<span class="comment">// SpringFactoriesLoader =&gt; META-INF/spring.factories</span></span><br><span class="line">	SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">	listeners.starting();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">				args);</span><br><span class="line">		<span class="comment">// 环境配置 None(非WEB), Servlet, Reactive(响应式)</span></span><br><span class="line">		ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">				applicationArguments);</span><br><span class="line">		configureIgnoreBeanInfo(environment);</span><br><span class="line">		<span class="comment">// Banner</span></span><br><span class="line">		Banner printedBanner = printBanner(environment);</span><br><span class="line">		context = createApplicationContext();</span><br><span class="line">		exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">				SpringBootExceptionReporter.class,</span><br><span class="line">				<span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">		prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">				printedBanner);</span><br><span class="line">		<span class="comment">// IOC容器的最后一步</span></span><br><span class="line">		refreshContext(context);</span><br><span class="line">		afterRefresh(context, applicationArguments);</span><br><span class="line">		stopWatch.stop();</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">			<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">					.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">		&#125;</span><br><span class="line">		listeners.started(context);</span><br><span class="line">		<span class="comment">// 查找 CommandLineRunner, ApplicationRunner, ...</span></span><br><span class="line">		callRunners(context, applicationArguments);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		listeners.running(context);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">		handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot配置文件的优先级</title>
    <url>/2019/05/07/spring-boot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="SpringBoot配置文件的优先级"><a href="#SpringBoot配置文件的优先级" class="headerlink" title="SpringBoot配置文件的优先级"></a>SpringBoot配置文件的优先级</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://img-blog.csdnimg.cn/20190321160947190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h2><p>application.properties 和 application.yml 文件按照优先级从大到小顺序排列在以下四个位置：</p>
<ol>
<li>file:./config/ (当前项目路径config目录下);</li>
<li>file:./ (当前项目路径下);</li>
<li>classpath:/config/ (类路径config目录下);</li>
<li>classpath:/ (类路径config下).</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20190321160812255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>源代码展示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigFileApplicationListener</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">EnvironmentPostProcessor</span>, <span class="title">SmartApplicationListener</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"><span class="comment">// Note the order is from least to most specific (last one wins)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SEARCH_LOCATIONS = <span class="string">&quot;classpath:/,classpath:/config/,file:./,file:./config/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略其它代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以端口配置为例</p>
<ul>
<li>在resources/config目录下配置文件设置端口为8888;</li>
<li>在resources/目录下配置文件设置端口为8080;</li>
<li>在类路径config目录下配置文件设置端口为6666;</li>
<li>在类路径下配置文件设置端口为5555;</li>
</ul>
<p>运行结果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190321160853993.png" alt="在这里插入图片描述"></p>
<h2 id="自定义配置文件的绑定"><a href="#自定义配置文件的绑定" class="headerlink" title="自定义配置文件的绑定"></a>自定义配置文件的绑定</h2><ol>
<li><p>CustomizedFile 类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置文件, 需要配合使用后<span class="doctag">@Configuration</span>和<span class="doctag">@PropertySource</span>(&quot;classpath:customized-file.properties&quot;)来指定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;customizedFile&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:customized-file-$&#123;spring.profiles.active&#125;.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomizedFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">// 省略 setter/getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 看到 <code>$&#123;spring.profiles.active&#125;</code>，聪明的你一定知道这是 spring boot多环境自定义配置文件的实现方式。<br> 生效的配置文件是 <code>$&#123;spring.profiles.active&#125;</code> 所指定的配置文件，本文案例中生效的是 <code>customized-file-dev.properties</code>。<br> 接下来继续创建配置文件验证</p>
</li>
<li><p>customized-file.properties</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">customizedFile.name=自定义配置文件名</span></span><br><span class="line"><span class="string">customizedFile.author=作者名</span></span><br><span class="line"><span class="string">customizedFile.path=路径地址</span></span><br><span class="line"><span class="string">customizedFile.description=看到这个就表明自定义配置文件成功了</span></span><br></pre></td></tr></table></figure></li>
<li><p>customized-file-dev.properties</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">customizedFile.description=DEV:看到这个就表明自定义配置文件成功了</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行结果：</p>
<p> <img src="https://img-blog.csdnimg.cn/2019032116083452.png" alt="在这里插入图片描述"></p>
<p> 结论：只有 <code>customized-file-dev.properties</code> 中配置的属性生效</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot使用atomikos实现分布式事务</title>
    <url>/2019/05/06/spring-boot%E4%BD%BF%E7%94%A8atomikos%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>Java规范对分布式事务定义了标准的规范Java事务API和Java事务服务，分别是JTA和JTS一个分布式事务必须包括一个事务管理器和多个资源管理器。</p>
<p>资源管理器是任意类型的持久化数据存储；<br>而事务管理器则是承担着所有事务参与单元者的相互通讯的责任。</p>
<p>JTA的规范制定了分布式事务的实现的整套流程框架，定义了各个接口且只有接口，而实现分别交给事务管理器的实现方和资源管理器的实现方</p>
<span id="more"></span>

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Java规范对分布式事务定义了标准的规范Java事务API和Java事务服务，分别是JTA和JTS一个分布式事务必须包括一个事务管理器和多个资源管理器。</p>
<p>资源管理器是任意类型的持久化数据存储；<br>而事务管理器则是承担着所有事务参与单元者的相互通讯的责任。</p>
<p>JTA的规范制定了分布式事务的实现的整套流程框架，定义了各个接口且只有接口，而实现分别交给事务管理器的实现方和资源管理器的实现方</p>
<p>对于资源管理器而言，主要包括数据库连接，JMS等，还有很多了解的不清楚。</p>
<p>对于事务管理器而言，从网上了解主要是应用服务器，包括JBOSS，WEBLOGIC等应用服务器，也就是说事务管理器的实现方是应用服务器，用来管理事务的通讯和协调。<br>对于大多数谈的数据库了解，事务管理器需要从数据库获得XAConnection , XAResource等对象，而这些对象是数据库驱动程序需要提供的，所以如果要实现分布式事务还必须有支持分布式事务的数据库服务器以及数据库驱动程序。</p>
<p>对Mysql而言，在mysql5.0以上的版本已经支持了分布式事务，另外常用的mysql-connector-java-5.1.25-bin.jar也是支持分布式事务的，可以在jar包的com.mysql.jdbc.jdbc2.optional中找到XA对象的实现<br>上面介绍了事务管理器和资源管理器的实现方式，在学习研究过程中发现对于事务管理器，特别强调了tomcat等服务器是不支持的，这句话的意思应该是在tomcat容器内<br>并没有分布式事务管理器的实现对象。而在JBOSS或者WEBLOGIC等商业服务器应该内置了分布式事务管理器的实现对象，应用程序可以通过JNDI方式获取UserTransaction<br>和TransactionManager等分布式事务环境中所需要用到的对象。</p>
<p>通常，应用程序服务器（Application Server）提供了应用程序可以使用的多种服务。在谈到分布式事务时，该服务就称作 XA Resource。当然，在应用程序可以使用 XA Resource 之前，首先要在应用程序服务器中注册和配置 XA Resource。</p>
<p>事务管理器作为管理和协调分布式事务的关键处理中心非常重要，所以应用服务器可以单独只用过事务管理器。</p>
<h2 id="2-在SpringBoot中使用分布式事务"><a href="#2-在SpringBoot中使用分布式事务" class="headerlink" title="2.在SpringBoot中使用分布式事务"></a>2.在SpringBoot中使用分布式事务</h2><p>上面主要是一些基本的概念，在学习研究中总结出来的，可能不太全面，下面主要介绍一下在使用Spring使用分布式事务中的心得，这种做法也是将事务管理器嵌入应用中。</p>
<p>开始准备Spring的时候，Spring官网-SpringBoot文档第38章介绍了Atomikos和Bitronix 等工具，实际上这些工具都是取代应用服务器对事务管理器的支持，负责实现事务管理器对象。由于Atomikos介绍在Bitronix 之前，所以直接使用Atomikos进行测试。</p>
<h3 id="2-1-盲点解释"><a href="#2-1-盲点解释" class="headerlink" title="2.1.盲点解释"></a>2.1.盲点解释</h3><p>要理解 JTA 的实现原理首先需要了解其架构：它包括事务管理器（Transaction Manager）和一个或多个支持 XA 协议的资源管理器 ( Resource Manager ) 两部分， 我们可以将资源管理器看做任意类型的持久化数据存储；事务管理器则承担着所有事务参与单元的协调与控制。 根据所面向对象的不同，我们可以将 JTA 的事务管理器和资源管理器理解为两个方面：面向开发人员的使用接口（事务管理器）和面向服务提供商的实现接口（资源管理器）。其中开发接口的主要部分即为上述示例中引用的 UserTransaction 对象，开发人员通过此接口在信息系统中实现分布式事务；而实现接口则用来规范提供商（如数据库连接提供商）所提供的事务服务，它约定了事务的资源管理功能，使得 JTA 可以在异构事务资源之间执行协同沟通。以数据库为例，IBM 公司提供了实现分布式事务的数据库驱动程序，Oracle 也提供了实现分布式事务的数据库驱动程序， 在同时使用 DB2 和 Oracle 两种数据库连接时， JTA 即可以根据约定的接口协调者两种事务资源从而实现分布式事务。正是基于统一规范的不同实现使得 JTA 可以协调与控制不同数据库或者 JMS 厂商的事务资源，其架构如下图所示：<br><img src="https://img-blog.csdnimg.cn/20181205164907157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图 2.1 JTA体系结构</p>
<p>开发人员使用开发人员接口，实现应用程序对全局事务的支持；各提供商（数据库，JMS 等）依据提供商接口的规范提供事务资源管理功能；事务管理器（ TransactionManager ）将应用对分布式事务的使用映射到实际的事务资源并在事务资源间进行协调与控制。 下面，本文将对包括 UserTransaction、Transaction 和 TransactionManager 在内的三个主要接口以及其定义的方法进行介绍。</p>
<p><img src="https://img-blog.csdnimg.cn/20181205164937608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>UserTransaction:面向开发人员的接口,开发人员通常只使用此接口实现 JTA 事务管理</li>
<li>Transaction:代表了一个物理意义上的事务</li>
<li>TransactionManager:本身并不承担实际的事务处理功能，它更多的是充当用户接口和实现接口之间的桥梁</li>
<li>UserTransaction 对象不会对事务进行任何控制，所有的事务方法都是通过 TransactionManager 传递到实际的事务资源即 Transaction 对象上</li>
</ul>
<h3 id="2-2-确保mysql开启XA事务支持"><a href="#2-2-确保mysql开启XA事务支持" class="headerlink" title="2.2.确保mysql开启XA事务支持"></a>2.2.确保mysql开启XA事务支持</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%xa%&#x27;</span>  </span><br></pre></td></tr></table></figure>

<p>如果innodb_support_xa的值是ON就说明mysql已经开启对XA事务的支持了。<br>如果不是就执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> innodb_support_xa <span class="operator">=</span> <span class="keyword">ON</span>  </span><br></pre></td></tr></table></figure>

<h3 id="2-3-重要Maven依赖"><a href="#2-3-重要Maven依赖" class="headerlink" title="2.3.重要Maven依赖"></a>2.3.重要Maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库连接 --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- 分布式事务atomikos --&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    </span><br><span class="line"><span class="comment">&lt;!-- Druid --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- MyBatis --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h3 id="2-4-配置Atomikos-Druid-MyBatis"><a href="#2-4-配置Atomikos-Druid-MyBatis" class="headerlink" title="2.4.配置Atomikos, Druid, MyBatis"></a>2.4.配置Atomikos, Druid, MyBatis</h3><p>首先，要使下面的代码配置生效要先确保你在项目工程中引入了spring-boot-starter-jta-atomikos, druid-spring-boot-starter这两个依赖。<br>第二，SpringBoot会自动配置Atomikos的事务管理配置，无需做其它的配置。</p>
<h4 id="2-4-1-application-properties"><a href="#2-4-1-application-properties" class="headerlink" title="2.4.1.application.properties"></a>2.4.1.application.properties</h4><p>第15-19行代码表示实现javax.sql.XADataSource接口的com.alibaba.druid.pool.xa.DruidXADataSource的特有属性, 并不是Atomikos的属性.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.application.name=learn-jta-atomikos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启下划线-驼峰命名转换</span></span><br><span class="line"><span class="string">mybatis.configuration.map-underscore-to-camel-case=true</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.aop.proxy-target-class=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## jta相关参数配置</span></span><br><span class="line"><span class="comment"># 如果你在JTA环境中，并且仍然希望使用本地事务，你可以设置spring.jta.enabled属性为false以禁用JTA自动配置。</span></span><br><span class="line"><span class="string">spring.jta.enabled=true</span></span><br><span class="line"><span class="comment"># 必须配置唯一的资源名</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.unique-resource-name=jta-personal</span></span><br><span class="line"><span class="comment"># 配置Druid的属性 https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-data-source-class-name=com.alibaba.druid.pool.xa.DruidXADataSource</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.url=jdbc:mysql://localhost:3306/personal?characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.username=root</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.password=123456</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.filters=slf4j,stat,wall,config</span></span><br><span class="line"><span class="comment">#spring.jta.atomikos.datasource.one.xa-properties.connectionProperties=config.decrypt=true;config.decrypt.key=$&#123;druid.publickey&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.unique-resource-name=jta-book</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.max-pool-size=8</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-data-source-class-name=com.alibaba.druid.pool.xa.DruidXADataSource</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.url=jdbc:mysql://localhost:3306/secondary?characterEncoding=utf-8&amp;useSSL=false&amp;&amp;allowMultiQueries=true</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.username=root</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.password=123456</span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.filters=slf4j,stat,wall,config</span></span><br><span class="line"><span class="comment">#spring.jta.atomikos.datasource.two.xa-properties.connectionProperties=config.decrypt=true;config.decrypt.key=$&#123;druid.publickey&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Druid监控设置</span></span><br><span class="line"><span class="string">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span></span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*</span></span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.reset-enable=true</span></span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.login-username=admin</span></span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.login-password=admin</span></span><br><span class="line"><span class="string">spring.datasource.druid.aop-patterns=com.example.atomikos.service.*</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-2-配置Atomikos数据源与MyBatis集成"><a href="#2-4-2-配置Atomikos数据源与MyBatis集成" class="headerlink" title="2.4.2.配置Atomikos数据源与MyBatis集成"></a>2.4.2.配置Atomikos数据源与MyBatis集成</h4><p>这里只给出默认数据源的Atomikos与MyBatis的集成，其余的数据源的配置与它大同小异(见第2.5章实例)。<br>注意！第18行代码，这里指定com.example.atomikos.dao.one这个包路径下Mapper接口的MyBatis的会话工厂，不同的数据源指定不同的会话工厂！！！<br>然后在使用dao层的时候，正常使用即可，详细代码见(见第2.5章实例)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置JTA(Atomikos)数据源，Mybatis</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.atomikos.dao.one&quot;, sqlSessionFactoryRef = &quot;oneSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDatabaseConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置JTA(Atomikos)数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> AtomikosDataSourceBean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.jta.atomikos.datasource.one&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置Mybatis的会话工厂类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource JTA(Atomikos)数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SqlSessionFactoryBean#getObject()&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;oneSqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">oneSqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-3-配置声明式事务-tx-aop"><a href="#2-4-3-配置声明式事务-tx-aop" class="headerlink" title="2.4.3.配置声明式事务(tx+aop)"></a>2.4.3.配置声明式事务(tx+aop)</h4><p>Java配置声明式事务AOP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 配置声明式事务 切面拦截 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TX_METHOD_TIMEOUT = <span class="number">5</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_POINTCUT_EXPRESSION = <span class="string">&quot;execution (* com.example.atomikos.service.*.*(..))&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">txAdvice</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        NameMatchTransactionAttributeSource source = <span class="keyword">new</span> NameMatchTransactionAttributeSource();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* 只读事务，不做更新操作 */</span>  </span><br><span class="line">        RuleBasedTransactionAttribute readOnlyTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();  </span><br><span class="line">        readOnlyTx.setReadOnly(<span class="keyword">true</span>);  </span><br><span class="line">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务 */</span>  </span><br><span class="line">        RuleBasedTransactionAttribute requiredTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();  </span><br><span class="line">        requiredTx.setRollbackRules(Collections.singletonList(<span class="keyword">new</span> RollbackRuleAttribute(Exception.class)));  </span><br><span class="line">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);  </span><br><span class="line">        requiredTx.setTimeout(TX_METHOD_TIMEOUT);  </span><br><span class="line">        Map&lt;String, TransactionAttribute&gt; txMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">        txMap.put(<span class="string">&quot;add*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;save*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;insert*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;update*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;delete*&quot;</span>, requiredTx);  </span><br><span class="line">  </span><br><span class="line">        txMap.put(<span class="string">&quot;get*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;query*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;list*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;find*&quot;</span>, readOnlyTx);  </span><br><span class="line">        source.setNameMap(txMap);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionInterceptor(transactionManager, source);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 切点 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">txAdviceAdvisor</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        AspectJExpressionPointcut pointcut = <span class="keyword">new</span> AspectJExpressionPointcut();  </span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, txAdvice());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>等同于下面的Spring XML配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>  </span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!-- 配置事务传播特性 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">                            name        ：绑定事务的方法名，可以使用通配符，可以配置多个。  </span></span><br><span class="line"><span class="comment">                            propagation ：传播行为  </span></span><br><span class="line"><span class="comment">                            isolation   ：隔离级别  </span></span><br><span class="line"><span class="comment">                            read-only   ：是否只读  </span></span><br><span class="line"><span class="comment">                            timeout     ：超时信息  </span></span><br><span class="line"><span class="comment">                            rollback-for：发生哪些异常回滚.  </span></span><br><span class="line"><span class="comment">                            no-rollback-for：发生哪些异常不回滚.  </span></span><br><span class="line"><span class="comment">                        --&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 哪些方法加事务 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;list*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;Exception&quot;</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 注意：如果是自己编写的切面，使用&lt;aop:aspect&gt;标签，如果是系统制作的，使用&lt;aop:advisor&gt;标签。 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution (* com.example.atomikos.service.*.*(..))&quot;</span> <span class="attr">order</span>=<span class="string">&quot;0&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h3 id="2-5-实例"><a href="#2-5-实例" class="headerlink" title="2.5.实例"></a>2.5.实例</h3><h4 id="2-5-1-项目结构"><a href="#2-5-1-项目结构" class="headerlink" title="2.5.1.项目结构"></a>2.5.1.项目结构</h4><p><img src="https://img-blog.csdnimg.cn/2018120517000116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="项目工程结构"></p>
<h4 id="2-5-2-数据库"><a href="#2-5-2-数据库" class="headerlink" title="2.5.2.数据库"></a>2.5.2.数据库</h4><p>personal.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> article  </span><br><span class="line">(  </span><br><span class="line">  id <span class="type">bigint</span> unsigned auto_increment  </span><br><span class="line">    <span class="keyword">primary</span> key,  </span><br><span class="line">  content <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span>,  </span><br><span class="line">  title <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span>,  </span><br><span class="line">  url <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">null</span>  </span><br><span class="line">);  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">user</span>  </span><br><span class="line">(  </span><br><span class="line">  id <span class="type">bigint</span> unsigned auto_increment <span class="keyword">primary</span> key,  </span><br><span class="line">  username <span class="type">varchar</span>(<span class="number">255</span>) charset utf8 <span class="keyword">null</span>,  </span><br><span class="line">  password <span class="type">varchar</span>(<span class="number">255</span>) charset utf8 <span class="keyword">null</span>  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<p>secondary.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> book  </span><br><span class="line">(  </span><br><span class="line">  id         <span class="type">bigint</span> unsigned auto_increment <span class="keyword">primary</span> key,  </span><br><span class="line">  name       <span class="type">varchar</span>(<span class="number">255</span>)    <span class="keyword">null</span>,  </span><br><span class="line">  article_id <span class="type">bigint</span> unsigned <span class="keyword">null</span>,  </span><br><span class="line">  user_id    <span class="type">bigint</span> unsigned <span class="keyword">null</span>  </span><br><span class="line">);  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-3-Maven依赖"><a href="#2-5-3-Maven依赖" class="headerlink" title="2.5.3.Maven依赖"></a>2.5.3.Maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learn-jta-atomikos-SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>learn-jta-atomikos<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- MyBatis --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 分布式事务atomikos --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jta-atomikos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- tx + aop --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 添加Log4j2 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 为log4j2添加异步支持 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 简化代码 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 用于监控与管理 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- WEB --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配合@ConfigurationProperties编译生成元数据文件(IDEA编辑器的属性提示) --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-4-配置"><a href="#2-5-4-配置" class="headerlink" title="2.5.4.配置"></a>2.5.4.配置</h4><h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.application.name=learn-jta-atomikos</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 开启下划线-驼峰命名转换  </span></span><br><span class="line"><span class="string">mybatis.configuration.map-underscore-to-camel-case=true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="string">spring.aop.proxy-target-class=true</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">## jta相关参数配置  </span></span><br><span class="line"><span class="comment"># 如果你在JTA环境中，并且仍然希望使用本地事务，你可以设置spring.jta.enabled属性为false以禁用JTA自动配置。  </span></span><br><span class="line"><span class="string">spring.jta.enabled=true</span>  </span><br><span class="line"><span class="comment"># 必须配置唯一的资源名  </span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.unique-resource-name=jta-personal</span>  </span><br><span class="line"><span class="comment"># 配置Druid的属性 https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8  </span></span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-data-source-class-name=com.alibaba.druid.pool.xa.DruidXADataSource</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.url=jdbc:mysql://localhost:3306/personal?characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.username=root</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.password=123456</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.one.xa-properties.filters=slf4j,stat,wall,config</span>  </span><br><span class="line"><span class="comment">#spring.jta.atomikos.datasource.one.xa-properties.connectionProperties=config.decrypt=true;config.decrypt.key=$&#123;druid.publickey&#125;  </span></span><br><span class="line">  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.unique-resource-name=jta-book</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.max-pool-size=8</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-data-source-class-name=com.alibaba.druid.pool.xa.DruidXADataSource</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.url=jdbc:mysql://localhost:3306/secondary?characterEncoding=utf-8&amp;useSSL=false&amp;&amp;allowMultiQueries=true</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.username=root</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.password=123456</span>  </span><br><span class="line"><span class="string">spring.jta.atomikos.datasource.two.xa-properties.filters=slf4j,stat,wall,config</span>  </span><br><span class="line"><span class="comment">#spring.jta.atomikos.datasource.two.xa-properties.connectionProperties=config.decrypt=true;config.decrypt.key=$&#123;druid.publickey&#125;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">## Druid监控设置  </span></span><br><span class="line"><span class="string">spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span>  </span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*</span>  </span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.reset-enable=true</span>  </span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.login-username=admin</span>  </span><br><span class="line"><span class="string">spring.datasource.druid.stat-view-servlet.login-password=admin</span>  </span><br><span class="line"><span class="string">spring.datasource.druid.aop-patterns=com.example.atomikos.service.*</span>  </span><br></pre></td></tr></table></figure>

<h5 id="OneDatabaseConfig"><a href="#OneDatabaseConfig" class="headerlink" title="OneDatabaseConfig"></a>OneDatabaseConfig</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 设置JTA(Atomikos)数据源，Mybatis </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.atomikos.dao.one&quot;, sqlSessionFactoryRef = &quot;oneSqlSessionFactory&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDatabaseConfig</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 设置JTA(Atomikos)数据源 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> AtomikosDataSourceBean&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Primary</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.jta.atomikos.datasource.one&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomikosDataSourceBean();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 设置Mybatis的会话工厂类 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource JTA(Atomikos)数据源 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SqlSessionFactoryBean#getObject()&#125; </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Primary</span>  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;oneSqlSessionFactory&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">oneSqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();  </span><br><span class="line">        bean.setDataSource(dataSource);  </span><br><span class="line">        <span class="keyword">return</span> bean.getObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="TwoDatabaseConfig"><a href="#TwoDatabaseConfig" class="headerlink" title="TwoDatabaseConfig"></a>TwoDatabaseConfig</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.atomikos.jdbc.AtomikosDataSourceBean;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;  </span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 设置JTA(Atomikos)数据源，Mybatis </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.example.atomikos.dao.two&quot;, sqlSessionFactoryRef = &quot;twoSqlSessionFactory&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDatabaseConfig</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 设置JTA(Atomikos)数据源 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> AtomikosDataSourceBean&#125; </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;twoAtomikosDataSource&quot;)</span>  </span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.jta.atomikos.datasource.two&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">oneDataSource</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomikosDataSourceBean();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 设置Mybatis的会话工厂类 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource JTA(Atomikos)数据源 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> SqlSessionFactoryBean#getObject()&#125; </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;twoSqlSessionFactory&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">oneSqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;twoAtomikosDataSource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();  </span><br><span class="line">        bean.setDataSource(dataSource);  </span><br><span class="line">        <span class="keyword">return</span> bean.getObject();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="TransactionConfig"><a href="#TransactionConfig" class="headerlink" title="TransactionConfig"></a>TransactionConfig</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.config;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.Advisor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJExpressionPointcut;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultPointcutAdvisor;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.interceptor.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Collections;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 配置声明式事务 切面拦截 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionConfig</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TX_METHOD_TIMEOUT = <span class="number">5</span>;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AOP_POINTCUT_EXPRESSION = <span class="string">&quot;execution (* com.example.atomikos.service.*.*(..))&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager transactionManager;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">txAdvice</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        NameMatchTransactionAttributeSource source = <span class="keyword">new</span> NameMatchTransactionAttributeSource();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* 只读事务，不做更新操作 */</span>  </span><br><span class="line">        RuleBasedTransactionAttribute readOnlyTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();  </span><br><span class="line">        readOnlyTx.setReadOnly(<span class="keyword">true</span>);  </span><br><span class="line">        readOnlyTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_SUPPORTS);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* 当前存在事务就使用当前事务，当前不存在事务就创建一个新的事务 */</span>  </span><br><span class="line">        RuleBasedTransactionAttribute requiredTx = <span class="keyword">new</span> RuleBasedTransactionAttribute();  </span><br><span class="line">        requiredTx.setRollbackRules(Collections.singletonList(<span class="keyword">new</span> RollbackRuleAttribute(Exception.class)));  </span><br><span class="line">        requiredTx.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);  </span><br><span class="line">        requiredTx.setTimeout(TX_METHOD_TIMEOUT);  </span><br><span class="line">        Map&lt;String, TransactionAttribute&gt; txMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line">        txMap.put(<span class="string">&quot;add*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;save*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;insert*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;update*&quot;</span>, requiredTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;delete*&quot;</span>, requiredTx);  </span><br><span class="line">  </span><br><span class="line">        txMap.put(<span class="string">&quot;get*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;query*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;list*&quot;</span>, readOnlyTx);  </span><br><span class="line">        txMap.put(<span class="string">&quot;find*&quot;</span>, readOnlyTx);  </span><br><span class="line">        source.setNameMap(txMap);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionInterceptor(transactionManager, source);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 切点 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Advisor <span class="title">txAdviceAdvisor</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        AspectJExpressionPointcut pointcut = <span class="keyword">new</span> AspectJExpressionPointcut();  </span><br><span class="line">        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, txAdvice());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-5-实体类"><a href="#2-5-5-实体类" class="headerlink" title="2.5.5.实体类"></a>2.5.5.实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.entity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 文章 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleDO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3971756585655871603L</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String title;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String content;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String url;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.entity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 书 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3231762613546697469L</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long articleId;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long userId;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.entity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookVo</span> <span class="keyword">extends</span> <span class="title">BookDO</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> UserDO user;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.entity;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;  </span><br><span class="line"><span class="keyword">import</span> lombok.Data;  </span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 用户 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  </span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">469663920369239035L</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Long id;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-6-Dao层"><a href="#2-5-6-Dao层" class="headerlink" title="2.5.6.Dao层"></a>2.5.6.Dao层</h4><h5 id="UserDao"><a href="#UserDao" class="headerlink" title="UserDao"></a>UserDao</h5><p>注意包名，UserDao对应的配置为OneDatabaseConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.dao.one;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.UserDO;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/30 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据主键查询一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Select(&quot;select id, username, password from user where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function">UserDO <span class="title">get</span><span class="params">(Long id)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 分页列表查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Select(&quot;select id, username, password from user limit #&#123;page&#125;, #&#123;size&#125;&quot;)</span>  </span><br><span class="line">    <span class="function">List&lt;UserDO&gt; <span class="title">list</span><span class="params">(Integer page, Integer size)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 保存 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDO </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增主键 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(username, password) values(#&#123;username&#125;, #&#123;password&#125;)&quot;)</span>  </span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyColumn = &quot;id&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(UserDO userDO)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 修改一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Update(&quot;update user set username = #&#123;username&#125;, password = #&#123;password&#125; where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(UserDO user)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 删除一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="BookDao"><a href="#BookDao" class="headerlink" title="BookDao"></a>BookDao</h5><p>注意包名，UserDao对应的配置为TwoDatabaseConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.dao.two;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookDO;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/11/30 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Mapper</span>  </span><br><span class="line"><span class="meta">@Repository</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 分页查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 每页记录数 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, article_id as articleId, user_id as userId from book limit $&#123;page&#125;, $&#123;size&#125;&quot;)</span>  </span><br><span class="line">    <span class="function">List&lt;BookDO&gt; <span class="title">list</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Integer page, <span class="meta">@Param(&quot;size&quot;)</span> Integer size)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 根据主键查询单条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, article_id as articleId, user_id as userId from book where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function">BookDO <span class="title">get</span><span class="params">(Long id)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 添加一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增主键 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Insert(&quot;insert into book(name, article_id, user_id) values(#&#123;name&#125;, #&#123;articleId&#125;, #&#123;userId&#125;)&quot;)</span>  </span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;, keyColumn = &quot;id&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(BookDO book)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 修改一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Update(&quot;update book set name = #&#123;name&#125;, article_id = #&#123;articleId&#125;, user_id = #&#123;userId&#125; where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(BookDO book)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 删除一条记录 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 主键 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Delete(&quot;delete from book where id = #&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-7-Service层"><a href="#2-5-7-Service层" class="headerlink" title="2.5.7.Service层"></a>2.5.7.Service层</h4><h5 id="Bookservice"><a href="#Bookservice" class="headerlink" title="Bookservice"></a>Bookservice</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.service;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.UserDO;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 主要目的是测试分布式事务 </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 保存 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function">BookDO <span class="title">save</span><span class="params">(BookDO book, UserDO user)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 单条查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function">BookDO <span class="title">get</span><span class="params">(Long id)</span></span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 分页查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function">List&lt;BookDO&gt; <span class="title">list</span><span class="params">(Integer page, Integer size)</span></span>;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="BookServiceImpl"><a href="#BookServiceImpl" class="headerlink" title="BookServiceImpl"></a>BookServiceImpl</h5><p>请注意，其中有些代码故意抛出异常是为了测试的目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.service.impl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.dao.one.UserDao;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.dao.two.BookDao;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.UserDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.service.BookService;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 保存书本和文章, 使用声明式事务(tx+aop形式) </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book &#123;<span class="doctag">@link</span> BookDO&#125; </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user &#123;<span class="doctag">@link</span> UserDO&#125; </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">save</span><span class="params">(BookDO book, UserDO user)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> userSave = userDao.save(user);  </span><br><span class="line">        <span class="keyword">if</span> (userSave == <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        book.setUserId(user.getId());  </span><br><span class="line">        <span class="keyword">int</span> bookSave = bookDao.save(book);  </span><br><span class="line">        <span class="keyword">if</span> (bookSave == <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"><span class="comment">//        throw new RuntimeException(&quot;测试分布式事务(tx+aop形式)&quot;);  </span></span><br><span class="line">        <span class="keyword">return</span> book;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 单条查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;  </span><br><span class="line">        BookDO book = bookDao.get(id);  </span><br><span class="line">        UserDO user = userDao.get(book.getUserId());  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookDO(book.getId(), book.getName(), book.getArticleId(), user.getId());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 分页查询 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BookDO&gt; <span class="title">list</span><span class="params">(Integer page, Integer size)</span> </span>&#123;  </span><br><span class="line">        page = (page &lt; <span class="number">1</span> ? <span class="number">0</span> : page - <span class="number">1</span>) * size;  </span><br><span class="line">        <span class="keyword">return</span> bookDao.list(page, size);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 修改书本和文章, 使用声明式事务(注解形式) </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">update</span><span class="params">(BookDO book, UserDO user)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> bookUpdate = bookDao.update(book);  </span><br><span class="line">        <span class="keyword">if</span> (bookUpdate != <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> userUpdate = userDao.update(user);  </span><br><span class="line">        <span class="keyword">if</span> (userUpdate != <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;测试分布式事务(注解形式)&quot;</span>);  </span><br><span class="line"><span class="comment">//        return book;  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 删除书本和文章 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;  </span><br><span class="line">        BookDO book = bookDao.get(id);  </span><br><span class="line">        System.err.println(book);  </span><br><span class="line">        Long userId = book.getUserId();  </span><br><span class="line">        <span class="keyword">int</span> userDelete = userDao.delete(userId);  </span><br><span class="line">        <span class="keyword">if</span> (userDelete != <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> bookDelete = bookDao.delete(id);  </span><br><span class="line">        <span class="keyword">if</span> (bookDelete != <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;测试没有添加分布式事务管理)&quot;</span>);  </span><br><span class="line"><span class="comment">//        return 1;  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-8-Controller层"><a href="#2-5-8-Controller层" class="headerlink" title="2.5.8.Controller层"></a>2.5.8.Controller层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookVo;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.service.BookService;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.service.impl.BookServiceImpl;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@RestController</span>  </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> BookService bookService;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BookDO&gt; <span class="title">list</span><span class="params">(  </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,  </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer size)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> bookService.list(page, size);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">get</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> bookService.get(id);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@PostMapping</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> BookVo book)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> bookService.save(book, book.getUser());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@PutMapping</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDO <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> BookVo book)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ((BookServiceImpl) bookService).update(book, book.getUser());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ((BookServiceImpl) bookService).delete(id);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h4 id="2-5-9-单元测试"><a href="#2-5-9-单元测试" class="headerlink" title="2.5.9.单元测试"></a>2.5.9.单元测试</h4><h5 id="BookServiceImplTest"><a href="#BookServiceImplTest" class="headerlink" title="BookServiceImplTest"></a>BookServiceImplTest</h5><p>由于故意抛出异常，故单元测试失败，查看数据库，数据库中数据保持原样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.service.impl;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.UserDO;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.service.BookService;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;  </span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试分布式事务：切面拦截形式, 注解式 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span>  </span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImplTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    BookService bookService;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 测试分布式事务(切面拦截形式) </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        BookDO book = <span class="keyword">new</span> BookDO();  </span><br><span class="line">        book.setName(<span class="string">&quot;Book Name - 001&quot;</span>);  </span><br><span class="line">        book.setArticleId(<span class="number">69L</span>);  </span><br><span class="line">  </span><br><span class="line">        UserDO user = <span class="keyword">new</span> UserDO();  </span><br><span class="line">        user.setUsername(<span class="string">&quot;username - 001&quot;</span>);  </span><br><span class="line">        user.setPassword(<span class="string">&quot;password - 001&quot;</span>);  </span><br><span class="line">        BookDO bookDO = bookService.save(book, user);  </span><br><span class="line">        System.out.println(bookDO);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 测试分布式事务(注解式) </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        BookDO book = <span class="keyword">new</span> BookDO();  </span><br><span class="line">        book.setId(<span class="number">10L</span>);  </span><br><span class="line">        book.setName(<span class="string">&quot;Book Name - 002&quot;</span>);  </span><br><span class="line">        book.setArticleId(<span class="number">69L</span>);  </span><br><span class="line">  </span><br><span class="line">        UserDO user = <span class="keyword">new</span> UserDO();  </span><br><span class="line">        user.setId(<span class="number">18L</span>);  </span><br><span class="line">        user.setUsername(<span class="string">&quot;username - 002&quot;</span>);  </span><br><span class="line">        user.setPassword(<span class="string">&quot;password - 002&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        ((BookServiceImpl)bookService).update(book, user);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 没有事务管理 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> delete = ((BookServiceImpl) bookService).delete(<span class="number">11L</span>);  </span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, delete);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h5 id="BookControllerTest"><a href="#BookControllerTest" class="headerlink" title="BookControllerTest"></a>BookControllerTest</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.atomikos.controller;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.dao.one.UserDao;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.BookVo;  </span><br><span class="line"><span class="keyword">import</span> com.example.atomikos.entity.UserDO;  </span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Before;  </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;  </span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.Matchers.is;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 测试分布式事务 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span>  </span><br><span class="line"><span class="meta">@SpringBootTest</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookControllerTest</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext context;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Before</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.context).build();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 申明式 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        UserDO user = <span class="keyword">new</span> UserDO();  </span><br><span class="line">        user.setUsername(<span class="string">&quot;username - 002&quot;</span>);  </span><br><span class="line">        user.setPassword(<span class="string">&quot;password - 002&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        BookVo book = <span class="keyword">new</span> BookVo();  </span><br><span class="line">        book.setName(<span class="string">&quot;Book Name - 002&quot;</span>);  </span><br><span class="line">        book.setArticleId(<span class="number">69L</span>);  </span><br><span class="line">        book.setUser(user);  </span><br><span class="line">        String json = objectMapper.writeValueAsString(book);  </span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(  </span><br><span class="line">                post(<span class="string">&quot;/books&quot;</span>)  </span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON_UTF8)  </span><br><span class="line">                        .content(json))  </span><br><span class="line">                .andExpect(status().isOk())  </span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.name&quot;</span>, is(<span class="string">&quot;Book Name - 002&quot;</span>)))  </span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.articleId&quot;</span>, is(<span class="number">69</span>)))  </span><br><span class="line">                .andDo(print());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 注解式 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        UserDO user = userDao.get(<span class="number">3L</span>);  </span><br><span class="line">        <span class="keyword">assert</span> user != <span class="keyword">null</span>;  </span><br><span class="line">        user.setUsername(<span class="string">&quot;username - 003&quot;</span>);  </span><br><span class="line">        user.setPassword(<span class="string">&quot;password - 003&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        BookVo book = <span class="keyword">new</span> BookVo();  </span><br><span class="line">        book.setId(<span class="number">3L</span>);  </span><br><span class="line">        book.setName(<span class="string">&quot;Book Name - 003&quot;</span>);  </span><br><span class="line">        book.setArticleId(<span class="number">69L</span>);  </span><br><span class="line">        book.setUser(user);  </span><br><span class="line">  </span><br><span class="line">        String json = objectMapper.writeValueAsString(book);  </span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(  </span><br><span class="line">                put(<span class="string">&quot;/books&quot;</span>)  </span><br><span class="line">                        .contentType(MediaType.APPLICATION_JSON_UTF8)  </span><br><span class="line">                        .content(json))  </span><br><span class="line">                .andExpect(status().isOk())  </span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.name&quot;</span>, is(<span class="string">&quot;Book Name - 003&quot;</span>)))  </span><br><span class="line">                .andExpect(jsonPath(<span class="string">&quot;$.articleId&quot;</span>, is(<span class="number">69</span>)))  </span><br><span class="line">                .andDo(print());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 没有事务管理 </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Test</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(  </span><br><span class="line">                MockMvcRequestBuilders.delete(<span class="string">&quot;/books/4&quot;</span>))  </span><br><span class="line">                .andExpect(status().isOk())  </span><br><span class="line">                .andDo(print());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h2 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h2><ul>
<li><a href="http://www.thedevpiece.com/configuring-multiple-datasources-using-springboot-and-atomikos/">http://www.thedevpiece.com/configuring-multiple-datasources-using-springboot-and-atomikos/</a></li>
<li><a href="https://blog.csdn.net/a510835147/article/details/75675311">https://blog.csdn.net/a510835147/article/details/75675311</a></li>
<li><a href="https://www.jianshu.com/p/0dde641295af">https://www.jianshu.com/p/0dde641295af</a></li>
<li><a href="http://www.importnew.com/15812.html">http://www.importnew.com/15812.html</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jta/">https://www.ibm.com/developerworks/cn/java/j-lo-jta/</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>分布式事务</tag>
        <tag>spring-boot</tag>
        <tag>atomikos</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud consul 应用的多实例名的解决</title>
    <url>/2019/08/22/spring-cloud-consul-%E5%BA%94%E7%94%A8%E7%9A%84%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%90%8D%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>之前使用eureka时，注册服务的ID 是随机数，eureka上不会出现同一服务多实例的问题。但是，换上了 consul 作为注册中心后，却出现同一个服务拥有多个实例的问题，上次服务挂掉之后的实例还在注册中心上挂着，每次重启多一个实例。</p>
<p>有什么办法去解决这个问题？答案就是自定义spring cloud consul 的注册方法，使其唯一化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceIdRegister</span> <span class="keyword">extends</span> <span class="title">ConsulServiceRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceIdRegister</span><span class="params">(ConsulClient client, ConsulDiscoveryProperties properties, TtlScheduler ttlScheduler, HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(client, properties, ttlScheduler, heartbeatProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(ConsulRegistration reg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//重新设计id， 服务命-ip-port</span></span><br><span class="line">        reg.getService().setId(reg.getService().getName() + <span class="string">&quot;-&quot;</span> + reg.getService().getAddress() + <span class="string">&quot;-&quot;</span> + reg.getPort());</span><br><span class="line">        <span class="keyword">super</span>.register(reg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnConsulEnabled</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsulConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> TtlScheduler ttlScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写register方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consulClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> heartbeatProperties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceIdRegister <span class="title">consulServiceRegistry</span><span class="params">(ConsulClient consulClient, ConsulDiscoveryProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   HeartbeatProperties heartbeatProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceIdRegister(consulClient, properties, ttlScheduler, heartbeatProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring-cloud</category>
      </categories>
      <tags>
        <tag>consul</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-expression学习记录</title>
    <url>/2019/05/06/spring-expression%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Spring-SpEl-表达式语言-学习记录"><a href="#Spring-SpEl-表达式语言-学习记录" class="headerlink" title="Spring SpEl 表达式语言 - 学习记录"></a>Spring SpEl 表达式语言 - 学习记录</h1><p>SpEL是类似于OGNL和JSF EL的表达式语言，能够在运行时构建复杂表达式，存取对象属性、对象方法调用等。<br>所有的SpEL都支持XML和Annotation两种方式，格式：<code>#&#123; expressoin &#125;</code></p>
<h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><p>因为 <code>spring-context</code> 依赖中包含 <code>spring-expression</code>，所以选择它。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在后面的一系列的测试中，都有用到在 <code>@Before</code> 中的元素。我仅仅只是将一份这份单元测试类分解了而已。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpelTest</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 XML 配置 SpEl</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试注解配置 SpEl</span></span><br><span class="line">    FieldValueTestBean fieldValueTestBean;</span><br><span class="line"></span><br><span class="line">    MovieRecommender movieRecommender;</span><br><span class="line"></span><br><span class="line">    PropertyValueTestBean propertyValueTestBean;</span><br><span class="line"></span><br><span class="line">    StandardEvaluationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发明家列表</span></span><br><span class="line">    List&lt;Inventor&gt; inventorList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发明家特斯拉</span></span><br><span class="line">    Inventor inventorTesla;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发明家爱迪生</span></span><br><span class="line">    Inventor inventorEdlson;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发明家贝尔</span></span><br><span class="line">    Inventor inventorBell;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发明家数组</span></span><br><span class="line">    Inventor[] inventorArrays;</span><br><span class="line"></span><br><span class="line">    Society society;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化Spring</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        beanFactory = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:spring-root.xml&quot;</span>);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 允许 SpEl 表达式访问 IOC 容器中的 bean</span></span><br><span class="line">            <span class="comment">// SpEL支持使用 &quot;@&quot; 符号来引用Bean, 在引用Bean时需要使用BeanResolver接口实现来查找Bean, Spring提供BeanFactoryResolver实现</span></span><br><span class="line">            context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">            context.setBeanResolver(<span class="keyword">new</span> BeanFactoryResolver(beanFactory));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SpEl 解析器</span></span><br><span class="line">        parser = (ExpressionParser) beanFactory.getBean(<span class="string">&quot;parser&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// XML 配置 SpEl</span></span><br><span class="line">        user = (User) beanFactory.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注解配置 SpEl</span></span><br><span class="line">        fieldValueTestBean = (FieldValueTestBean) beanFactory.getBean(<span class="string">&quot;fieldValueTestBean&quot;</span>);</span><br><span class="line">        movieRecommender = (MovieRecommender) beanFactory.getBean(<span class="string">&quot;movieRecommender&quot;</span>);</span><br><span class="line">        propertyValueTestBean = (PropertyValueTestBean) beanFactory.getBean(<span class="string">&quot;propertyValueTestBean&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置 SpEl 的 根对象</span></span><br><span class="line">            inventorTesla = <span class="keyword">new</span> Inventor(<span class="string">&quot;尼古拉·特斯拉&quot;</span>, <span class="string">&quot;塞尔维亚裔美籍&quot;</span>);</span><br><span class="line">            inventorTesla.setPlaceOfBirth(<span class="keyword">new</span> PlaceOfBirth(<span class="string">&quot;利卡-塞尼县&quot;</span>, <span class="string">&quot;克罗地亚&quot;</span>));</span><br><span class="line"></span><br><span class="line">            inventorEdlson = <span class="keyword">new</span> Inventor(<span class="string">&quot;托马斯·阿尔瓦·爱迪生&quot;</span>, <span class="string">&quot;美国&quot;</span>);</span><br><span class="line">            inventorEdlson.setPlaceOfBirth(<span class="keyword">new</span> PlaceOfBirth(<span class="string">&quot;米兰&quot;</span>, <span class="string">&quot;美国俄亥俄州&quot;</span>));</span><br><span class="line"></span><br><span class="line">            inventorBell = <span class="keyword">new</span> Inventor(<span class="string">&quot;亚历山大·格拉汉姆·贝尔&quot;</span>, <span class="string">&quot;美国&quot;</span>);</span><br><span class="line">            inventorBell.setPlaceOfBirth(<span class="keyword">new</span> PlaceOfBirth(<span class="string">&quot;爱丁堡&quot;</span>, <span class="string">&quot;英国苏格兰&quot;</span>));</span><br><span class="line"></span><br><span class="line">            inventorList.add(inventorTesla);</span><br><span class="line">            inventorList.add(inventorEdlson);</span><br><span class="line">            inventorList.add(inventorBell);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 数组和列表的内容通过使用方括号表示法获得</span></span><br><span class="line">            Inventor[] inventorArrays = <span class="keyword">new</span> Inventor[<span class="number">3</span>];</span><br><span class="line">            inventorArrays = inventorList.toArray(inventorArrays);</span><br><span class="line"></span><br><span class="line">            society = <span class="keyword">new</span> Society();</span><br><span class="line">            society.getOfficers().put(Society.President, inventorEdlson);</span><br><span class="line">            society.getOfficers().put(Society.Advisors, inventorList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><h3 id="支持执行字符串表达式"><a href="#支持执行字符串表达式" class="headerlink" title="支持执行字符串表达式"></a>支持执行字符串表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">    Expression exp = parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;&quot;</span>);</span><br><span class="line">    String message = (String) exp.getValue();</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Hello World&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpEL支持广泛的功能，例如调用方法，访问属性和调用构造函数"><a href="#SpEL支持广泛的功能，例如调用方法，访问属性和调用构造函数" class="headerlink" title="SpEL支持广泛的功能，例如调用方法，访问属性和调用构造函数"></a>SpEL支持广泛的功能，例如调用方法，访问属性和调用构造函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">    Expression exp = parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.concat(&#x27;!&#x27;)&quot;</span>);</span><br><span class="line">    String message = (String) exp.getValue();</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Hello World!&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用属性</span></span><br><span class="line">    exp = parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.bytes&quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] bytesE = <span class="string">&quot;Hello World&quot;</span>.getBytes();</span><br><span class="line">    <span class="keyword">byte</span>[] bytesA = (<span class="keyword">byte</span>[]) exp.getValue();</span><br><span class="line">    Assert.assertArrayEquals(bytesE, bytesA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// SpEL还通过使用标准点表示法（例如prop1.prop2.prop3）和属性值的设置来支持嵌套属性。也可以访问公共字段。</span></span><br><span class="line">    exp = parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;.bytes.length&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> lengthE = <span class="string">&quot;Hello World&quot;</span>.getBytes().length;</span><br><span class="line">    <span class="keyword">int</span> lengthA = (<span class="keyword">int</span>) exp.getValue();</span><br><span class="line">    Assert.assertEquals(lengthE, lengthA);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用构造方法</span></span><br><span class="line">    exp = parser.parseExpression(<span class="string">&quot;new String(&#x27;hello world&#x27;).toUpperCase()&quot;</span>);</span><br><span class="line">    String constructorA = exp.getValue(String.class);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;HELLO WORLD&quot;</span>, constructorA);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpEL的更常见用法是提供针对特定对象实例（称为根对象）计算的表达式字符串"><a href="#SpEL的更常见用法是提供针对特定对象实例（称为根对象）计算的表达式字符串" class="headerlink" title="SpEL的更常见用法是提供针对特定对象实例（称为根对象）计算的表达式字符串"></a>SpEL的更常见用法是提供针对特定对象实例（称为根对象）计算的表达式字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">    Expression exp = parser.parseExpression(<span class="string">&quot;username == &#x27;fxc&#x27;&quot;</span>);</span><br><span class="line">    Boolean expValue = exp.getValue(user, Boolean.class);</span><br><span class="line">    Assert.assertEquals(<span class="keyword">true</span>, expValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-Beans-中的-SpEl-表达式-Bean-的引用"><a href="#Spring-Beans-中的-SpEl-表达式-Bean-的引用" class="headerlink" title="Spring Beans 中的 SpEl 表达式, Bean 的引用"></a>Spring Beans 中的 SpEl 表达式, Bean 的引用</h3><p>Spring SpEL 可以在 XML 配置文件中使用，同样可以在注解配置中使用例如 <code>@Value(&quot;#&#123;expression&#125;&quot;)</code>。</p>
<p>Spring 允许 SpEl 表达式访问 IOC 容器中的 bean，SpEL支持使用 <code>@</code> 符号来引用Bean, 在引用 Bean 时需要使用 <code>BeanResolver</code> 接口实现来查找Bean, Spring提供 <code>BeanFactoryResolver</code> 实现</p>
<p>ClassPathXmlApplicationContext 实现默认会把 <code>System.getProperties()</code> 注册名为<code>systemProperties</code> 的 Bean，因此使用 <code>@systemProperties</code> 来引用该 Bean。</p>
<h4 id="在-Spring-配置文件中使用-SpEl-表达式"><a href="#在-Spring-配置文件中使用-SpEl-表达式" class="headerlink" title="在 Spring 配置文件中使用 SpEl 表达式"></a>在 Spring 配置文件中使用 SpEl 表达式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:application.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.littlefxc.examples.spel&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;parser&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.expression.spel.standard.SpelExpressionParser&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 同样也适用于 Java Config, 例如 @Value(&quot;#&#123;systemProperties[&#x27;user.country&#x27;]&#125;&quot;) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.littlefxc.examples.spel.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fxc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;uuid&quot; value=&quot;#&#123;T(java.util.UUID).randomUUID().toString()&#125;&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uuid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.uuid&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;place&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;systemProperties[&#x27;user.country&#x27;]&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.properties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">user.uuid=#&#123;T(java.util.UUID).randomUUID().toString()&#125;</span></span><br><span class="line"><span class="string">user.age=18</span></span><br></pre></td></tr></table></figure>

<h4 id="在注解中用法1：在成员属性上使用-SpEL-表达式"><a href="#在注解中用法1：在成员属性上使用-SpEL-表达式" class="headerlink" title="在注解中用法1：在成员属性上使用 SpEL 表达式"></a>在注解中用法1：在成员属性上使用 SpEL 表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.spel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/1/24</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldValueTestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.country&#x27;] &#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在注解中用法2：在构造方法上使用-SpEL-表达式"><a href="#在注解中用法2：在构造方法上使用-SpEL-表达式" class="headerlink" title="在注解中用法2：在构造方法上使用 SpEL 表达式"></a>在注解中用法2：在构造方法上使用 SpEL 表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieRecommender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String movieName;</span><br><span class="line">    <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieRecommender</span><span class="params">(<span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.country&#x27;] &#125;&quot;)</span> String defaultLocale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在注解中用法3：在属性设置方法上使用-SpEL-表达式"><a href="#在注解中用法3：在属性设置方法上使用-SpEL-表达式" class="headerlink" title="在注解中用法3：在属性设置方法上使用 SpEL 表达式"></a>在注解中用法3：在属性设置方法上使用 SpEL 表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.spel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyValueTestBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String defaultLocale;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDefaultLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defaultLocale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;#&#123; systemProperties[&#x27;user.country&#x27;] &#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultLocale</span><span class="params">(String defaultLocale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultLocale = defaultLocale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 允许 SpEl 表达式访问 IOC 容器中的 bean</span></span><br><span class="line">    <span class="comment">// SpEL支持使用 &quot;@&quot; 符号来引用Bean, 在引用Bean时需要使用BeanResolver接口实现来查找Bean, Spring提供BeanFactoryResolver实现</span></span><br><span class="line">    <span class="comment">// ClassPathXmlApplicationContext 实现默认会把&quot;System.getProperties()&quot;注册为&quot;systemProperties&quot;Bean，因此我们使用 &quot;@systemProperties&quot;来引用该Bean</span></span><br><span class="line">    Properties result1 = parser.parseExpression(<span class="string">&quot;@systemProperties&quot;</span>).getValue(context, Properties.class);</span><br><span class="line">    System.out.println(result1.getProperty(<span class="string">&quot;user.dir&quot;</span>, <span class="string">&quot;环境变量中没有该属性&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// XML 配置</span></span><br><span class="line">    User userActual = parser.parseExpression(<span class="string">&quot;@user&quot;</span>).getValue(context, User.class);</span><br><span class="line">    Assert.assertSame(user, userActual);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注解配置</span></span><br><span class="line">    Assert.assertSame(movieRecommender, parser.parseExpression(<span class="string">&quot;@movieRecommender&quot;</span>).getValue(context, MovieRecommender.class));</span><br><span class="line">    Assert.assertSame(propertyValueTestBean, parser.parseExpression(<span class="string">&quot;@propertyValueTestBean&quot;</span>).getValue(context, PropertyValueTestBean.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-字面量表达式"><a href="#2-字面量表达式" class="headerlink" title="2. 字面量表达式"></a>2. 字面量表达式</h2><p>SpEL支持的字面量包括：字符串、数字类型（int、long、float、double）、布尔类型、null类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>字符串</td>
<td>String str1 = parser.parseExpression(“‘Hello World!’”).getValue(String.class); <br> String str2 = parser.parseExpression(“\“Hello World!\“”).getValue(String.class);</td>
</tr>
<tr>
<td>数字类型</td>
<td>int int1 = parser.parseExpression(“1”).getValue(Integer.class); <br> long long1 = parser.parseExpression(“-1L”).getValue(long.class); <br> float float1 = parser.parseExpression(“1.1”).getValue(Float.class); <br> double double1 = parser.parseExpression(“1.1E+2”).getValue(double.class); <br> int hex1 = parser.parseExpression(“0xa”).getValue(Integer.class); <br> long hex2 = parser.parseExpression(“0xaL”).getValue(long.class);</td>
</tr>
<tr>
<td>布尔类型</td>
<td>boolean true1 = parser.parseExpression(“true”).getValue(boolean.class); <br> boolean false1 = parser.parseExpression(“false”).getValue(boolean.class);</td>
</tr>
<tr>
<td>null类型</td>
<td>Object null1 = parser.parseExpression(“null”).getValue(Object.class);</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// evals to &quot;Hello World&quot;</span></span><br><span class="line">    String helloWorld = (String) parser.parseExpression(<span class="string">&quot;&#x27;Hello World&#x27;&quot;</span>).getValue();</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Hello World&quot;</span>, helloWorld);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浮点型字面量</span></span><br><span class="line">    <span class="keyword">double</span> avogadrosNumber = (Double) parser.parseExpression(<span class="string">&quot;6.0221415E+23&quot;</span>).getValue();</span><br><span class="line">    Assert.assertEquals(Double.valueOf(<span class="string">&quot;6.0221415E+23&quot;</span>), avogadrosNumber, Double.MIN_VALUE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// evals to 2147483647</span></span><br><span class="line">    <span class="keyword">int</span> maxValue = (Integer) parser.parseExpression(<span class="string">&quot;0x7FFFFFFF&quot;</span>).getValue();</span><br><span class="line">    Assert.assertEquals(<span class="number">2147483647</span>, maxValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> trueValue = (Boolean) parser.parseExpression(<span class="string">&quot;true&quot;</span>).getValue();</span><br><span class="line">    Assert.assertTrue(trueValue);</span><br><span class="line"></span><br><span class="line">    Object nullValue = parser.parseExpression(<span class="string">&quot;null&quot;</span>).getValue();</span><br><span class="line">    Assert.assertNull(nullValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-集合的表达式-Properties-Arrays-Lists-Maps-and-Indexers"><a href="#3-集合的表达式-Properties-Arrays-Lists-Maps-and-Indexers" class="headerlink" title="3. 集合的表达式(Properties, Arrays, Lists, Maps, and Indexers)"></a>3. 集合的表达式(Properties, Arrays, Lists, Maps, and Indexers)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合的表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.util.Properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.util.Arrays</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.util.List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.util.Map</span></span><br><span class="line"><span class="comment">     * Index 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 属性名称的第一个字母不区分大小写</span></span><br><span class="line">        <span class="comment">// 数组和列表的内容通过使用方括号表示法获得</span></span><br><span class="line">        <span class="keyword">int</span> year = (Integer) parser.parseExpression(<span class="string">&quot;Birthdate.Year = 1856&quot;</span>).getValue(context);</span><br><span class="line">        String city = (String) parser.parseExpression(<span class="string">&quot;placeOfBirth.City&quot;</span>).getValue(context);</span><br><span class="line">        Assert.assertEquals(<span class="number">1856</span>, year);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;利卡-塞尼县&quot;</span>, city);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列表</span></span><br><span class="line">        context.setRootObject(inventorList);</span><br><span class="line">        String birthCity = parser</span><br><span class="line">                .parseExpression(<span class="string">&quot;[0].placeOfBirth.City&quot;</span>)</span><br><span class="line">                .getValue(context, String.class);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;利卡-塞尼县&quot;</span>, birthCity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字典</span></span><br><span class="line">        context.setRootObject(society);</span><br><span class="line">        <span class="comment">// 改变字典的值的某个属性</span></span><br><span class="line">        parser.parseExpression(<span class="string">&quot;Officers[&#x27;president&#x27;].placeOfBirth.City&quot;</span>)</span><br><span class="line">                .setValue(context, <span class="string">&quot;随便&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取字典的值的某个属性</span></span><br><span class="line">        birthCity = (String) parser</span><br><span class="line">                .parseExpression(<span class="string">&quot;officers[&#x27;president&#x27;].placeOfBirth.City&quot;</span>)</span><br><span class="line">                .getValue(context);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;随便&quot;</span>, birthCity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-内联列表-Inline-Lists"><a href="#4-内联列表-Inline-Lists" class="headerlink" title="4. 内联列表( Inline Lists )"></a>4. 内联列表( Inline Lists )</h2><p>可以使用{}符号直接在表达式中表示列表.{}本身表示一个空列表。出于性能原因，如果列表本身完全由固定的文字组成，那么将创建一个常量列表来表示表达式(而不是在每个表达式上构建一个新的列表)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内联列表(Inline Lists)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test(expected = UnsupportedOperationException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将返回不可修改的空List</span></span><br><span class="line">    List list = parser.parseExpression(<span class="string">&quot;&#123;&#125;&quot;</span>).getValue(List.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于字面量列表也将返回不可修改的List</span></span><br><span class="line">    List list2 = parser.parseExpression(<span class="string">&quot;&#123;1,2,3,4&#125;&quot;</span>).getValue(List.class);</span><br><span class="line">    <span class="comment">// 不会进行不可修改处理</span></span><br><span class="line">    list2.set(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内联列表(Inline Lists)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于列表中只要有一个不是字面量表达式，将只返回原始List</span></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = parser.parseExpression(<span class="string">&quot;&#123;&#123;1+2, 2+4&#125;,&#123;3, 4+4&#125;&#125;&quot;</span>).getValue(List.class);</span><br><span class="line">    <span class="comment">// 操作的不是原始列表</span></span><br><span class="line">    list.get(<span class="number">0</span>).set(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    Integer value = parser.parseExpression(<span class="string">&quot;&#123;&#123;1+2, 2+4&#125;,&#123;3, 4+4&#125;&#125;[0][0]&quot;</span>).getValue(Integer.class);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, list.get(<span class="number">0</span>).get(<span class="number">0</span>).intValue());</span><br><span class="line">    Assert.assertEquals(<span class="number">3</span>, value.intValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-内联字典-Inline-Maps"><a href="#5-内联字典-Inline-Maps" class="headerlink" title="5. 内联字典( Inline Maps )"></a>5. 内联字典( Inline Maps )</h2><p>您可以使用熟悉的Java语法来构建数组，也可以提供一个初始化器来在构建时填充数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 内联字典(Inline Maps)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// evaluates to a Java map containing the two entries</span></span><br><span class="line">       Map inventorInfo = (Map) parser.parseExpression(<span class="string">&quot;&#123;name:&#x27;Nikola&#x27;,dob:&#x27;10-July-1856&#x27;&#125;&quot;</span>).getValue(context);</span><br><span class="line">       Assert.assertEquals(<span class="string">&quot;Nikola&quot;</span>, inventorInfo.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 字典中的字典</span></span><br><span class="line">       Map mapOfMaps = (Map) parser</span><br><span class="line">               .parseExpression(<span class="string">&quot;&#123;name:&#123;first:&#x27;Nikola&#x27;,last:&#x27;Tesla&#x27;&#125;,dob:&#123;day:10,month:&#x27;July&#x27;,year:1856&#125;&#125;&quot;</span>)</span><br><span class="line">               .getValue(context);</span><br><span class="line">       Map tesla = (Map) mapOfMaps.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">       Assert.assertEquals(<span class="string">&quot;Tesla&quot;</span>, tesla.get(<span class="string">&quot;last&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 空字典 &#123;:&#125;</span></span><br><span class="line">       Map emptyMap = (Map) parser.parseExpression(<span class="string">&quot;&#123;:&#125;&quot;</span>).getValue(context);</span><br><span class="line">       Assert.assertEquals(<span class="number">0</span>, emptyMap.size());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>{:}本身表示一个空映射。出于性能原因，如果映射本身由固定的文字或其他嵌套的常量结构(列表或映射)组成，则创建常量映射来表示表达式(而不是在每个表达式上构建新的映射)。</p>
<h2 id="6-数组构造-Array-Construction"><a href="#6-数组构造-Array-Construction" class="headerlink" title="6. 数组构造(Array Construction)"></a>6. 数组构造(Array Construction)</h2><p>您可以使用熟悉的Java语法来构建数组，也可以提供一个初始化器来在构建时填充数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数组创建(Array Construction):相似的 Java 数组语法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test9</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers1 = (<span class="keyword">int</span>[]) parser.parseExpression(<span class="string">&quot;new int[4]&quot;</span>).getValue(context);</span><br><span class="line">        Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>], numbers1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Array with initializer</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers2 = (<span class="keyword">int</span>[]) parser.parseExpression(<span class="string">&quot;new int[]&#123;1,2,3&#125;&quot;</span>).getValue(context);</span><br><span class="line">        Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, numbers2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Multi dimensional array</span></span><br><span class="line">        <span class="keyword">int</span>[][] numbers3 = (<span class="keyword">int</span>[][]) parser.parseExpression(<span class="string">&quot;new int[4][5]&quot;</span>).getValue(context);</span><br><span class="line">        Assert.assertArrayEquals(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">5</span>], numbers3);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>在构造多维数组时，无法初始化，也就是 <code>&quot;new int[4][5]&quot;</code> 后面无法添加<code>&#123;&#125;</code></p>
<h2 id="8-方法调用"><a href="#8-方法调用" class="headerlink" title="8. 方法调用"></a>8. 方法调用</h2><p>您可以使用典型的Java编程语法来调用方法。您还可以对文字调用方法。还支持变量参数。下面的示例展示了如何调用方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 方法调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// string literal, evaluates to &quot;bc&quot;</span></span><br><span class="line">       String bc = parser.parseExpression(<span class="string">&quot;&#x27;abc&#x27;.substring(1, 3)&quot;</span>).getValue(String.class);</span><br><span class="line">       Assert.assertEquals(<span class="string">&quot;bc&quot;</span>, bc);</span><br><span class="line"></span><br><span class="line">       society.getMembers().add(inventorTesla);</span><br><span class="line">       context.setRootObject(society);</span><br><span class="line">       <span class="comment">// evaluates to true</span></span><br><span class="line">       <span class="keyword">boolean</span> isMember = parser.parseExpression(<span class="string">&quot;isMember(&#x27;尼古拉·特斯拉&#x27;)&quot;</span>)</span><br><span class="line">               .getValue(context, Boolean.class);</span><br><span class="line">       Assert.assertTrue(isMember);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-运算符"><a href="#9-运算符" class="headerlink" title="9. 运算符"></a>9. 运算符</h2><h3 id="9-1-关系运算符"><a href="#9-1-关系运算符" class="headerlink" title="9.1. 关系运算符"></a>9.1. 关系运算符</h3><p>关系运算符(等于、不等于、小于、小于或等于、大于、大于或等于)通过使用标准运算符表示法得到支持。下面的清单显示了一些操作符示例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符：关系运算符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test11</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 关系运算符(等于、不等于、小于、小于或等于、大于、大于或等于、instanceof、正则表达式)</span></span><br><span class="line">        <span class="comment">// lt (&lt;) gt (&gt;) le (&lt;=) ge (&gt;=) eq (==) ne (!=) div (/) mod (%) not (!) 可以在XML文档中替换相应的符号</span></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = parser.parseExpression(<span class="string">&quot;2 == 2&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertTrue(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to false</span></span><br><span class="line">        flag = parser.parseExpression(<span class="string">&quot;2 &lt; -5.0&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertFalse(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        flag = parser.parseExpression(<span class="string">&quot;&#x27;black&#x27; &lt; &#x27;block&#x27;&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertTrue(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to false</span></span><br><span class="line">        flag = parser.parseExpression(</span><br><span class="line">                <span class="string">&quot;&#x27;xyz&#x27; instanceof T(Integer)&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertFalse(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        flag = parser.parseExpression(</span><br><span class="line">                <span class="string">&quot;&#x27;5.00&#x27; matches &#x27;^-?\\d+(\\.\\d&#123;2&#125;)?$&#x27;&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertTrue(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//evaluates to false</span></span><br><span class="line">        flag = parser.parseExpression(</span><br><span class="line">                <span class="string">&quot;&#x27;5.0067&#x27; matches &#x27;^-?\\d+(\\.\\d&#123;2&#125;)?$&#x27;&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertFalse(flag);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>每个符号运算符也可以指定为纯字母等价的。这避免了使用的符号对嵌入表达式的文档类型具有特殊意义的问题(例如在XML文档中).</p>
<ul>
<li>lt (&lt;)</li>
<li>gt (&gt;)</li>
<li>le (&lt;=)</li>
<li>ge (&gt;=)</li>
<li>eq (==)</li>
<li>ne (!=)</li>
<li>div (/)</li>
<li>mod (%)</li>
<li>not (!)</li>
</ul>
<h3 id="9-2-逻辑运算符"><a href="#9-2-逻辑运算符" class="headerlink" title="9.2. 逻辑运算符"></a>9.2. 逻辑运算符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运算符：逻辑运算符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test12</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        society.getMembers().add(inventorTesla);</span><br><span class="line">        society.getMembers().add(inventorEdlson);</span><br><span class="line">        context.setRootObject(society);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -- AND --</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to false</span></span><br><span class="line">        <span class="keyword">boolean</span> flagAnd = parser.parseExpression(<span class="string">&quot;true and false&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertFalse(flagAnd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        String expression = <span class="string">&quot;isMember(&#x27;尼古拉·特斯拉&#x27;) and isMember(&#x27;托马斯·阿尔瓦·爱迪生&#x27;)&quot;</span>;</span><br><span class="line">        flagAnd = parser.parseExpression(expression).getValue(context, Boolean.class);</span><br><span class="line">        Assert.assertTrue(flagAnd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -- OR --</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        <span class="keyword">boolean</span> flagOr = parser.parseExpression(<span class="string">&quot;true or false&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertTrue(flagOr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to true</span></span><br><span class="line">        expression = <span class="string">&quot;isMember(&#x27;尼古拉·特斯拉&#x27;) or isMember(&#x27;托马斯·阿尔瓦·爱迪生&#x27;)&quot;</span>;</span><br><span class="line">        flagOr = parser.parseExpression(expression).getValue(context, Boolean.class);</span><br><span class="line">        Assert.assertTrue(flagOr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -- NOT --</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// evaluates to false</span></span><br><span class="line">        <span class="keyword">boolean</span> flagNot = parser.parseExpression(<span class="string">&quot;!true&quot;</span>).getValue(Boolean.class);</span><br><span class="line">        Assert.assertFalse(flagNot);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// -- AND and NOT --</span></span><br><span class="line">        expression = <span class="string">&quot;isMember(&#x27;尼古拉·特斯拉&#x27;) and !isMember(&#x27;托马斯·阿尔瓦·爱迪生&#x27;)&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flagAndNot = parser.parseExpression(expression).getValue(context, Boolean.class);</span><br><span class="line">        Assert.assertFalse(flagAndNot);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-3-赋值运算符"><a href="#9-3-赋值运算符" class="headerlink" title="9.3. 赋值运算符"></a>9.3. 赋值运算符</h3><p>若要设置属性，请使用赋值运算符(=)。这通常在对setValue的调用中完成，但也可以在对getValue的调用中完成。下面的代码展示了使用赋值运算符的两种方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 运算符：赋值运算符</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test14</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Inventor inventor = <span class="keyword">new</span> Inventor();</span><br><span class="line"></span><br><span class="line">    parser.parseExpression(<span class="string">&quot;Name&quot;</span>).setValue(context, inventor, <span class="string">&quot;Alexander Graham&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alternatively</span></span><br><span class="line">    String bell = parser.parseExpression(</span><br><span class="line">        <span class="string">&quot;Name = &#x27;Alexander Graham Bell&#x27;&quot;</span>).getValue(context, inventor, String.class);</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Alexander Graham Bell&quot;</span>, bell);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-构造函数"><a href="#10-构造函数" class="headerlink" title="10. 构造函数"></a>10. 构造函数</h2><p>您可以通过使用新的操作符来调用构造函数。除了基本类型(int、float等)和字符串之外，应该对所有类型使用全限定类名。下面的例子展示了如何使用新的操作符来调用构造函数:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类类型表达式：使用&quot;T(Type)&quot;来表示java.lang.Class实例，&quot;Type&quot;必须是类全限定名，&quot;java.lang&quot;包除外，即该包下的类可以不指定包名；</span></span><br><span class="line"><span class="comment">     * 使用类类型表达式还可以进行访问类静态方法及类静态字段。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inventor einstein = parser.parseExpression(</span><br><span class="line">                <span class="string">&quot;new com.littlefxc.examples.spel.Inventor(&#x27;爱因斯坦&#x27;, &#x27;德国&#x27;)&quot;</span>)</span><br><span class="line">                .getValue(Inventor.class);</span><br><span class="line">        Assert.assertEquals(<span class="keyword">new</span> Inventor(<span class="string">&quot;爱因斯坦&quot;</span>, <span class="string">&quot;德国&quot;</span>).getName(), einstein.getName());</span><br><span class="line"></span><br><span class="line">        context.setRootObject(society);</span><br><span class="line">        <span class="comment">//create new inventor instance within add method of List</span></span><br><span class="line">        parser.parseExpression(<span class="string">&quot;Members.add(new com.littlefxc.examples.spel.Inventor(&#x27;爱因斯坦&#x27;, &#x27;德国&#x27;))&quot;</span>).getValue(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="11-变量定义及引用"><a href="#11-变量定义及引用" class="headerlink" title="11. 变量定义及引用"></a>11. 变量定义及引用</h2><p>可以使用#variableName语法引用表达式中的变量。变量是通过在EvaluationContext实现上使用setVariable方法设置的。下面的例子展示了如何使用变量:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变量定义及引用</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 变量定义通过 EvaluationContext 接口的 setVariable(variableName, value) 方法定义；&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 在表达式中使用 &quot;#variableName&quot; 引用；&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 除了引用自定义变量，SpEL还允许引用根对象及当前上下文对象，使用 &quot;#root&quot; 引用根对象，使用 &quot;#this&quot; 引用当前上下文对象；&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test16</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inventor tesla = <span class="keyword">new</span> Inventor(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line"></span><br><span class="line">        EvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();</span><br><span class="line">        context.setVariable(<span class="string">&quot;newName&quot;</span>, <span class="string">&quot;Mike Tesla&quot;</span>);</span><br><span class="line"></span><br><span class="line">        parser.parseExpression(<span class="string">&quot;Name = #newName&quot;</span>).getValue(context, tesla);<span class="comment">// &quot;Mike Tesla&quot;</span></span><br><span class="line"><span class="comment">//        parser.parseExpression(&quot;#root.Name = #newName&quot;).getValue(context, tesla);// &quot;Mike Tesla&quot;</span></span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;Mike Tesla&quot;</span>, tesla.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create an array of integers</span></span><br><span class="line">        List&lt;Integer&gt; primes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        primes.addAll(Arrays.asList(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create parser and set variable &#x27;primes&#x27; as the array of integers</span></span><br><span class="line">        context.setVariable(<span class="string">&quot;primes&quot;</span>, primes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过使用诸如 (using selection ?&#123;...&#125;) 这样的选择表达式，选择列表中所有大于10的数字</span></span><br><span class="line">        <span class="comment">// evaluates to [11, 13, 17]</span></span><br><span class="line">        List&lt;Integer&gt; primesGreaterThanTen = (List&lt;Integer&gt;) parser</span><br><span class="line">                .parseExpression(<span class="string">&quot;#primes.?[#this&gt;10]&quot;</span>).getValue(context);</span><br><span class="line"></span><br><span class="line">        System.out.println(primesGreaterThanTen);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="12-自定义函数"><a href="#12-自定义函数" class="headerlink" title="12. 自定义函数"></a>12. 自定义函数</h2><p>您可以通过注册可在表达式字符串中调用的用户定义函数来扩展SpEL。 该功能通过EvaluationContext注册。 以下示例显示如何注册用户定义的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义函数</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 目前只支持类静态方法注册为自定义函数；&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * SpEL使用StandardEvaluationContext的registerFunction方法进行注册自定义函数，</span></span><br><span class="line"><span class="comment">     * 其实完全可以使用setVariable代替，两者其实本质是一样的；</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test17</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Method parseInt = Integer.class.getDeclaredMethod(<span class="string">&quot;parseInt&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 自定义函数推荐用 context.registerFunction(&quot;fnName&quot;, fn)</span></span><br><span class="line">        context.registerFunction(<span class="string">&quot;parseInt&quot;</span>, parseInt);</span><br><span class="line">        context.setVariable(<span class="string">&quot;parseInt2&quot;</span>, parseInt);</span><br><span class="line">        Boolean bool = parser.parseExpression(<span class="string">&quot;#parseInt(&#x27;3&#x27;) == #parseInt2(&#x27;3&#x27;)&quot;</span>).getValue(context, Boolean.class);</span><br><span class="line">        Assert.assertTrue(bool);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="13-三目运算及Elivis运算表达式"><a href="#13-三目运算及Elivis运算表达式" class="headerlink" title="13. 三目运算及Elivis运算表达式"></a>13. 三目运算及Elivis运算表达式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三目运算及Elivis运算表达式</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 三目运算符 &quot;表达式1?表达式2:表达式3&quot;用于构造三目运算表达式，如&quot;2&gt;1?true:false&quot;将返回true；</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Elivis运算符 &quot;表达式1?:表达式2&quot; 从Groovy语言引入用于简化三目运算符的，</span></span><br><span class="line"><span class="comment"> * 当 表达式1 为 非null 时则返回 表达式1，</span></span><br><span class="line"><span class="comment"> * 当 表达式1 为 null 时则返回 表达式2，</span></span><br><span class="line"><span class="comment"> * 简化了三目运算符方式 &quot;表达式1?表达式1:表达式2&quot;，如 &quot;null?:false&quot; 将返回 false，而 &quot;true?:false&quot; 将返回true；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test18</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> int1 = parser.parseExpression(<span class="string">&quot;true and false ? 1 : 0&quot;</span>).getValue(Integer.class);</span><br><span class="line">    Assert.assertEquals(<span class="number">0</span>, int1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是 null, 返回 false</span></span><br><span class="line">    Boolean bool1 = parser.parseExpression(<span class="string">&quot;null ?: false&quot;</span>).getValue(Boolean.class);</span><br><span class="line">    Assert.assertFalse(bool1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// true 不是 null, 返回 true</span></span><br><span class="line">    Boolean bool2 = parser.parseExpression(<span class="string">&quot;true ?: false&quot;</span>).getValue(Boolean.class);</span><br><span class="line">    Assert.assertTrue(bool2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 稍微复杂点</span></span><br><span class="line">    Inventor tesla = <span class="keyword">new</span> Inventor(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line">    String name = parser.parseExpression(<span class="string">&quot;Name?:&#x27;Elvis Presley&#x27;&quot;</span>).getValue(context, tesla, String.class);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Nikola Tesla&quot;</span>, name);  <span class="comment">// Nikola Tesla</span></span><br><span class="line"></span><br><span class="line">    tesla.setName(<span class="keyword">null</span>);</span><br><span class="line">    name = parser.parseExpression(<span class="string">&quot;Name?:&#x27;Elvis Presley&#x27;&quot;</span>).getValue(context, tesla, String.class);</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Elvis Presley&quot;</span>, name);  <span class="comment">// Elvis Presley</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以把Elivis运算表达式作为 默认值 例如 : @Value(&quot;#&#123;systemProperties[&#x27;pop3.port&#x27;] ?: 25&#125;&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="14-安全的导航操作符"><a href="#14-安全的导航操作符" class="headerlink" title="14. 安全的导航操作符"></a>14. 安全的导航操作符</h2><p>安全导航操作符用于避免NullPointerException并来自Groovy语言。 通常，在引用对象时，可能需要在访问对象的方法或属性之前验证它是否为null。 为避免这种情况，安全导航操作符返回null而不是抛出异常。 以下示例显示如何使用安全导航运算符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全的导航操作符：</span></span><br><span class="line"><span class="comment">     * 安全导航操作符用于避免NullPointerException，它来自Groovy语言。</span></span><br><span class="line"><span class="comment">     * 通常，当您有一个对象的引用时，您可能需要在访问该对象的方法或属性之前验证它是否为null。为了避免这种情况，安全导航操作符返回null，而不是抛出异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test19</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inventor tesla = <span class="keyword">new</span> Inventor(<span class="string">&quot;Nikola Tesla&quot;</span>, <span class="string">&quot;Serbian&quot;</span>);</span><br><span class="line">        tesla.setPlaceOfBirth(<span class="keyword">new</span> PlaceOfBirth(<span class="string">&quot;Smiljan&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String city = parser.parseExpression(<span class="string">&quot;PlaceOfBirth?.City&quot;</span>).getValue(context, tesla, String.class);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;Smiljan&quot;</span>, city);  <span class="comment">// Smiljan</span></span><br><span class="line"></span><br><span class="line">        tesla.setPlaceOfBirth(<span class="keyword">null</span>);</span><br><span class="line">        city = parser.parseExpression(<span class="string">&quot;PlaceOfBirth?.City&quot;</span>).getValue(context, tesla, String.class);</span><br><span class="line">        Assert.assertNull(city);  <span class="comment">// null - 没有抛出空指针异常(NullPointerException)!!!</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="15-集合选择-Collection-Selection"><a href="#15-集合选择-Collection-Selection" class="headerlink" title="15. 集合选择(Collection Selection)"></a>15. 集合选择(Collection Selection)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合选择(Collection Selection)：</span></span><br><span class="line"><span class="comment">     * 选择表达式允许通过从源集合的条目中进行选择，将源集合转换为另一个集合。</span></span><br><span class="line"><span class="comment">     * 选择表达式通过使用形如 &quot;.?[selectionExpression]&quot; 的语法。它筛选集合并返回包含原始元素子集的新集合。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test20</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        society.getMembers().addAll(inventorList);</span><br><span class="line">        context.setRootObject(society);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从列表中选出国籍是美国的元素，然后组成新的列表</span></span><br><span class="line">        List&lt;Inventor&gt; list = (List&lt;Inventor&gt;) parser</span><br><span class="line">                .parseExpression(<span class="string">&quot;Members.?[Nationality == &#x27;塞尔维亚裔美籍&#x27;]&quot;</span>)</span><br><span class="line">                .getValue(context);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, list.size()); <span class="comment">// 只有特斯拉是塞尔维亚裔美籍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从原字典中选出值大于27的元素，然后组成新的字典</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>, <span class="number">27</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;map&quot;</span>, map);</span><br><span class="line">        Map newMap = (Map) parser.parseExpression(<span class="string">&quot;#map.?[value&lt;27]&quot;</span>).getValue(context);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, newMap.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="16-集合投影-Collection-Projection"><a href="#16-集合投影-Collection-Projection" class="headerlink" title="16. 集合投影(Collection Projection)"></a>16. 集合投影(Collection Projection)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 集合投影:</span></span><br><span class="line"><span class="comment">     * 投影让集合驱动子表达式的求值，结果是一个新的集合。</span></span><br><span class="line"><span class="comment">     * 投影的语法是 &quot;.![projectionExpression]&quot;。例如，假设我们有一个发明家列表，但是想要他们出生的城市列表。实际上，我们想要的是“出生地点”。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test21</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        society.getMembers().addAll(inventorList);</span><br><span class="line">        context.setRootObject(society);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; placesOfBirth = (List) parser.parseExpression(<span class="string">&quot;Members.![placeOfBirth.city]&quot;</span>).getValue(context);</span><br><span class="line">        MatcherAssert.assertThat(placesOfBirth, IsIterableContainingInOrder.contains(<span class="string">&quot;利卡-塞尼县&quot;</span>, <span class="string">&quot;米兰&quot;</span>, <span class="string">&quot;爱丁堡&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="17-引用"><a href="#17-引用" class="headerlink" title="17. 引用"></a>17. 引用</h2><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions">Spring Expression Language (SpEL)</a></p>
<p><a href="https://jinnianshilongnian.iteye.com/blog/1418309">https://jinnianshilongnian.iteye.com/blog/1418309</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>spring-expression</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot使用rabbitmq</title>
    <url>/2019/09/12/springboot%E4%BD%BF%E7%94%A8rabbitmq/</url>
    <content><![CDATA[<h2 id="Message-Broker与AMQP简介"><a href="#Message-Broker与AMQP简介" class="headerlink" title="Message Broker与AMQP简介"></a>Message Broker与AMQP简介</h2><p>Message Broker是一种消息验证、传输、路由的架构模式，其设计目标主要应用于下面这些场景：</p>
<ul>
<li>消息路由到一个或多个目的地</li>
<li>消息转化为其他的表现方式</li>
<li>执行消息的聚集、消息的分解，并将结果发送到他们的目的地，然后重新组合相应返回给消息用户</li>
<li>调用Web服务来检索数据</li>
<li>响应事件或错误</li>
<li>使用发布-订阅模式来提供内容或基于主题的消息路由</li>
</ul>
<p>AMQP是Advanced Message Queuing Protocol的简称，它是一个面向消息中间件的开放式标准应用层协议。AMQP定义了这些特性：</p>
<ul>
<li>消息方向</li>
<li>消息队列</li>
<li>消息路由（包括：点到点和发布-订阅模式）</li>
<li>可靠性</li>
<li>安全性</li>
</ul>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ就是以AMQP协议实现的一种中间件产品，它可以支持多种操作系统，多种编程语言，几乎可以覆盖所有主流的企业级技术平台。</p>
<h4 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h4><p>在Ubuntu中，我们可以使用APT仓库来进行安装</p>
<ol>
<li><p>安装Erlang，执行：<code>apt-get install erlang</code></p>
</li>
<li><p>执行下面的命令，新增APT仓库到 <code>/etc/apt/sources.list.</code></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb http://www.rabbitmq.com/debian/ testing main&#x27;</span> | sudo tee /etc/apt/sources.list.d/rabbitmq.list</span><br></pre></td></tr></table></figure></li>
<li><p>更新APT仓库的package list，执行 <code>sudo apt-get update</code> 命令</p>
</li>
<li><p>安装Rabbit Server，执行 <code>sudo apt-get install rabbitmq-server</code> 命令</p>
</li>
<li><p>开启Web管理插件</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><ol>
<li><p>查找镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker search rabbitmq</span><br></pre></td></tr></table></figure></li>
<li><p>拉取镜像</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure></li>
<li><p>启动镜像</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin --name rabbitmq --hostname=my_rabbitmq rabbitmq:latest</span><br></pre></td></tr></table></figure>

<p> 参数解释：</p>
<ul>
<li>–hostname：指定容器主机名称</li>
<li>–name:指定容器名称</li>
<li>-p:将mq端口号映射到本地</li>
<li>15672 ：表示 RabbitMQ 控制台端口号，可以在浏览器中通过控制台来执行 RabbitMQ 的相关操作。</li>
<li>5672 : 表示 RabbitMQ 所监听的 TCP 端口号，应用程序可通过该端口与 RabbitMQ 建立 TCP 连接，完成后续的异步消息通信</li>
<li>RABBITMQ_DEFAULT_USER：用于设置登陆控制台的用户名，设置为 <code>admin</code>, 默认是 <code>guest</code></li>
<li>RABBITMQ_DEFAULT_PASS：用于设置登陆控制台的密码，设置为 <code>admin</code>, 默认是 <code>guest</code></li>
</ul>
<p> 容器启动成功后，可以在浏览器输入地址：<a href="http://localhost:15672/">http://localhost:15672/</a></p>
<p> ps：RabbitMQ出于安全的考虑，默认是只能访问localhost:15762访问的，如果想用其他ip，是需要自己配置的。</p>
</li>
</ol>
<h4 id="WEB-界面"><a href="#WEB-界面" class="headerlink" title="WEB 界面"></a>WEB 界面</h4><p><img src="/images/rabbitmqserver_web.png" alt="rabbitmqserver_web.png"></p>
<h3 id="rabbitmq-介绍"><a href="#rabbitmq-介绍" class="headerlink" title="rabbitmq 介绍"></a>rabbitmq 介绍</h3><h3 id="spring-boot-集成-RabbitMQ"><a href="#spring-boot-集成-RabbitMQ" class="headerlink" title="spring boot 集成 RabbitMQ"></a>spring boot 集成 RabbitMQ</h3><ol>
<li><p>maven 依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置文件</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-rabbitmq</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure></li>
<li><p>简单发送字符串</p>
<ol>
<li>定义队列</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义发送者</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        String context = <span class="string">&quot;hello &quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>)) + <span class="string">&quot;:&quot;</span> + i;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sender : &quot;</span> + context);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;hello&quot;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义接收者</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloReceiver2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receiver 2 : &quot;</span> + hello);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试</li>
</ol>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.annotation.Repeat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSenderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            sender.send(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 控制台打印结果</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:0</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:1</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:2</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:3</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:4</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:5</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:6</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:7</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:8</span><br><span class="line">Receiver 2 : hello 2019-09-12 17:27:42.744:9</span><br></pre></td></tr></table></figure></li>
<li><p>发送对象</p>
<p> Spring Boot 完美的支持对象的发送和接收，不需要额外的配置。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">queueObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;object&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Receiver object : &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sender object: &quot;</span> + user.toString());</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(<span class="string">&quot;object&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 结果如下：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sender object: User&#123;name&#x3D;&#39;neo&#39;, pass&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">Receiver object : User&#123;name&#x3D;&#39;neo&#39;, pass&#x3D;&#39;123456&#39;&#125;</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>amqp</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>spring定时任务详解（@Scheduled注解）</title>
    <url>/2019/07/03/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%AF%A6%E8%A7%A3%EF%BC%88-Scheduled%E6%B3%A8%E8%A7%A3%EF%BC%89/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Spring-定时任务详解（-Scheduled注解）"><a href="#Spring-定时任务详解（-Scheduled注解）" class="headerlink" title="Spring 定时任务详解（@Scheduled注解）"></a>Spring 定时任务详解（@Scheduled注解）</h2><ol>
<li><p>initialDelay :初次执行任务之前需要等待的时间</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(initialDelay =5000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>fixedDelay:每次执行任务之后间隔多久再次执行该任务。(项目启动时，会立即执行任务。可以配合initialDelay一起使用（项目启动后延时执行任务）</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelay=5000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// something that should execute periodically</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>fixedRate:执行频率，每隔多少时间就启动任务，不管该任务是否启动完成。(项目启动时，会立即执行任务。可以配合initialDelay一起使用（项目启动后延时执行任务）)</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedRate=5000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>cron=”” 设置时分秒等具体的定时，网上很很多相关列子。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron=&quot;*/5 * * * * MON-FRI&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// something that should execute on weekdays only</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> @Scheduled(cron = “10 0/10 *  * * ?”)</p>
</li>
</ol>
<h3 id="cron表达式详解"><a href="#cron表达式详解" class="headerlink" title="cron表达式详解"></a>cron表达式详解</h3><p>一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。按顺序依次为:</p>
<pre><code>1  秒（0~59）
2  分钟（0~59）
3  小时（0~23）
4  天（0~31）
5  月（0~11）
6  星期（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）
7  年份（1970－2099）
</code></pre>
<p>其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通    配符。由于”月份中的日期”和”星期中的日期”这两个元素互斥的,必须要对其中一个设置?.</p>
<pre><code>&quot;0 0 10,14,16 * * ?&quot;       每天上午10点，下午2点，4点
&quot;0 0/30 9-17 * * ?&quot;         朝九晚五工作时间内每半小时
&quot;0 0 12 ? * WED&quot;            表示每个星期三中午12点
&quot;0 0 12 * * ?&quot;              每天中午12点触发
&quot;0 15 10 ? * *&quot;             每天上午10:15触发
&quot;0 15 10 * * ?&quot;             每天上午10:15触发
&quot;0 15 10 * * ? *&quot;           每天上午10:15触发
&quot;0 15 10 * * ? 2005&quot;        2005年的每天上午10:15触发
&quot;0 * 14 * * ?&quot;              在每天下午2点到下午2:59期间的每1分钟触发
&quot;0 0/5 14 * * ?&quot;            在每天下午2点到下午2:55期间的每5分钟触发
&quot;0 0/5 14,18 * * ?&quot;         在每天下午2点到2:55期间和下午6点到6:55期间的每5钟触发
&quot;0 0-5 14 * * ?&quot;            在每天下午2点到下午2:05期间的每1分钟触发
&quot;0 10,44 14 ? 3 WED&quot;        每年三月的星期三的下午2:10和2:44触发
&quot;0 15 10 ? * MON-FRI&quot;       周一至周五的上午10:15触发
&quot;0 15 10 15 * ?&quot;            每月15日上午10:15触发
&quot;0 15 10 L * ?&quot;             每月最后一日的上午10:15触发
&quot;0 15 10 ? * 6L&quot;            每月的最后一个星期五上午10:15触发
&quot;0 15 10 ? * 6L 2002-2005&quot;  2002年至2005年的每月的最后一个星期五上午10:15发
&quot;0 15 10 ? * 6#3&quot;           每月的第三个星期五上午10:15触发
</code></pre>
<p>有些子表达式能包含一些范围或列表</p>
<p>例如：</p>
<ol>
<li>子表达式（天（星期））可以为 <code>MON-FRI</code>, <code>MON,WED,FRI</code>, <code>MON-WED,SAT</code></li>
<li><code>*</code> 字符代表所有可能的值</li>
<li><code>/</code> 字符用来指定数值的增量</li>
</ol>
<p>例如：</p>
<ol>
<li><p>在子表达式（分钟）里的 <code>0/15</code> 表示从第0分钟开始，每15分钟</p>
</li>
<li><p>在子表达式（分钟）里的 <code>3/20</code> 表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p>
</li>
<li><p><code>?</code> 字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值。</p>
<p> 当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为 <code>?</code></p>
</li>
<li><p><code>L</code> 字符仅被用于天（月）和天（星期）两个子表达式，它是单词 <code>last</code> 的缩写</p>
</li>
<li><p>如果在 <code>L</code> 前有具体的内容，它就具有其他的含义了。例如：<code>6L</code> 表示这个月的倒数第 6 天</p>
</li>
<li><p>注意：在使用 <code>L</code> 参数时，不要指定列表或范围，因为这会导致问题</p>
</li>
<li><p>W 字符代表着平日(Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。</p>
<p> 大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。<br> 例如，日域中的 15W 意味着 “离该月15号的最近一个平日。” 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一离15号更近。</p>
</li>
<li><p>C：代表“Calendar”的意思。</p>
<p> 它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。<br> 例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>字段</th>
<th>允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>分</td>
<td>0-59</td>
<td>, - * /</td>
</tr>
<tr>
<td>小时</td>
<td>0-23</td>
<td>, - * /</td>
</tr>
<tr>
<td>日期</td>
<td>1-31</td>
<td>, - * ? / L W C</td>
</tr>
<tr>
<td>月份</td>
<td>1-12 或者 JAN-DEC</td>
<td>, - * /</td>
</tr>
<tr>
<td>星期</td>
<td>1-7 或者 SUN-SAT</td>
<td>, - * ? / L C #</td>
</tr>
<tr>
<td>年（可选）</td>
<td>留空, 1970-2099</td>
<td>, - * /</td>
</tr>
</tbody></table>
<p>定时任务执行原理：<a href="https://blog.csdn.net/gaodebao1/article/details/51789225">https://blog.csdn.net/gaodebao1/article/details/51789225</a></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>定时任务</tag>
        <tag>scheduled</tag>
      </tags>
  </entry>
  <entry>
    <title>synchronized锁升级过程和锁状态</title>
    <url>/2021/08/07/synchronized%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B%E5%92%8C%E9%94%81%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://segmentfault.com/a/1190000022904663">https://segmentfault.com/a/1190000022904663</a></p>
</blockquote>
<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>锁的状态总共有四种，级别由低到高依次为：无锁、偏向锁、轻量级锁、重量级锁，这四种锁状态分别代表什么，为什么会有锁升级？其实在 JDK 1.6之前，synchronized 还是一个重量级锁，是一个效率比较低下的锁，但是在JDK 1.6后，Jvm为了提高锁的获取与释放效率对（synchronized ）进行了优化，引入了 偏向锁 和 轻量级锁 ，从此以后锁的状态就有了四种（无锁、偏向锁、轻量级锁、重量级锁），并且四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级，也就是说只能进行锁升级（从低级别到高级别），不能锁降级（高级别到低级别），意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p>
<span id="more"></span>

<h3 id="二、锁的四种状态"><a href="#二、锁的四种状态" class="headerlink" title="二、锁的四种状态"></a>二、锁的四种状态</h3><p>在 synchronized 最初的实现方式是 “阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态切换需要耗费处理器时间，如果同步代码块中内容过于简单，这种切换的时间可能比用户代码执行的时间还长”，这种方式就是 synchronized实现同步最初的方式，这也是当初开发者诟病的地方，这也是在JDK6以前 synchronized效率低下的原因，JDK6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>所以目前锁状态一种有四种，从级别由低到高依次是：无锁、偏向锁，轻量级锁，重量级锁，锁状态只能升级，不能降级</p>
<p>如图所示：<br><img src="https://gitee.com/littlefxc/oss/raw/master/images/1460000022904666.jpg" alt="img"></p>
<h3 id="三、锁状态的思路以及特点"><a href="#三、锁状态的思路以及特点" class="headerlink" title="三、锁状态的思路以及特点"></a>三、锁状态的思路以及特点</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1460000022904667.png" alt="img"></p>
<h3 id="四、锁对比"><a href="#四、锁对比" class="headerlink" title="四、锁对比"></a>四、锁对比</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1460000022904669-20210807194327994.png" alt="img"></p>
<h3 id="五、Synchronized锁"><a href="#五、Synchronized锁" class="headerlink" title="五、Synchronized锁"></a>五、Synchronized锁</h3><p>synchronized 用的锁是存在Java对象头里的，那么什么是对象头呢？</p>
<h3 id="5-1-Java-对象头"><a href="#5-1-Java-对象头" class="headerlink" title="5.1 Java 对象头"></a>5.1 Java 对象头</h3><p>我们以 Hotspot 虚拟机为例，Hopspot 对象头主要包括两部分数据：Mark Word（标记字段） 和 Klass Pointer（类型指针）</p>
<p>Mark Word：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p>
<p>Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<p>在上面中我们知道了，synchronized 用的锁是存在Java对象头里的，那么具体是存在对象头哪里呢？答案是：存在锁对象的对象头的Mark Word中，那么MarkWord在对象头中到底长什么样，它到底存储了什么呢？</p>
<p>在64位的虚拟机中：<img src="https://segmentfault.com/img/remote/1460000022904668" alt="img"></p>
<p>在32位的虚拟机中：<img src="https://segmentfault.com/img/remote/1460000022904670" alt="img"></p>
<p>下面我们以 32位虚拟机为例，来看一下其 Mark Word 的字节具体是如何分配的</p>
<p>无锁 ：对象头开辟 25bit 的空间用来存储对象的 hashcode ，4bit 用于存放对象分代年龄，1bit 用来存放是否偏向锁的标识位，2bit 用来存放锁标识位为01</p>
<p>偏向锁： 在偏向锁中划分更细，还是开辟 25bit 的空间，其中23bit 用来存放线程ID，2bit 用来存放 Epoch，4bit 存放对象分代年龄，1bit 存放是否偏向锁标识， 0表示无锁，1表示偏向锁，锁的标识位还是01</p>
<p>轻量级锁：在轻量级锁中直接开辟 30bit 的空间存放指向栈中锁记录的指针，2bit 存放锁的标志位，其标志位为00</p>
<p>重量级锁： 在重量级锁中和轻量级锁一样，30bit 的空间用来存放指向重量级锁的指针，2bit 存放锁的标识位，为11</p>
<p>GC标记： 开辟30bit 的内存空间却没有占用，2bit 空间存放锁标志位为11。</p>
<p>其中无锁和偏向锁的锁标志位都是01，只是在前面的1bit区分了这是无锁状态还是偏向锁状态</p>
<p>关于内存的分配，我们可以在git中openJDK中 markOop.hpp 可以看出：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">public:</span><br><span class="line">  // Constants</span><br><span class="line">  enum &#123; <span class="attr">age_bits</span>                 = <span class="number">4</span>,</span><br><span class="line">         <span class="attr">lock_bits</span>                = <span class="number">2</span>,</span><br><span class="line">         <span class="attr">biased_lock_bits</span>         = <span class="number">1</span>,</span><br><span class="line">         <span class="attr">max_hash_bits</span>            = BitsPerWord - age_bits - lock_bits - biased_lock_bits,</span><br><span class="line">         <span class="attr">hash_bits</span>                = max_hash_bits &gt; <span class="number">31</span> ? <span class="number">31</span> : max_hash_bits,</span><br><span class="line">         <span class="attr">cms_bits</span>                 = LP64_ONLY(<span class="number">1</span>) NOT_LP64(<span class="number">0</span>),</span><br><span class="line">         <span class="attr">epoch_bits</span>               = <span class="number">2</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>age_bits： 就是我们说的分代回收的标识，占用4字节<br>lock_bits： 是锁的标志位，占用2个字节<br>biased_lock_bits： 是是否偏向锁的标识，占用1个字节<br>max_hash_bits： 是针对无锁计算的hashcode 占用字节数量，如果是32位虚拟机，就是 32 - 4 - 2 -1 = 25 byte，如果是64 位虚拟机，64 - 4 - 2 - 1 = 57 byte，但是会有 25 字节未使用，所以64位的 hashcode 占用 31 byte<br>hash_bits： 是针对 64 位虚拟机来说，如果最大字节数大于 31，则取31，否则取真实的字节数<br>cms_bits： 不是64位虚拟机就占用 0 byte，是64位就占用 1byte<br>epoch_bits： 就是 epoch 所占用的字节大小，2字节。</p>
<h3 id="5-2-Monitor"><a href="#5-2-Monitor" class="headerlink" title="5.2 Monitor"></a>5.2 Monitor</h3><p>Monitor 可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个 Java 对象就有一把看不见的锁，称为内部锁或者 Monitor 锁。</p>
<p>Monitor 是线程私有的数据结构，每一个线程都有一个可用 monitor record 列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个 monitor 关联，同时 monitor 中有一个 Owner 字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>Synchronized是通过对象内部的一个叫做监视器锁（monitor）来实现的，监视器锁本质又是依赖于底层的操作系统的 Mutex Lock（互斥锁）来实现的。而操作系统实现线程之间的切换需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么 Synchronized 效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为重量级锁。</p>
<p>随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）。JDK 1.6中默认是开启偏向锁和轻量级锁的，我们也可以通过-XX:-UseBiasedLocking=false来禁用偏向锁。</p>
<h3 id="六、锁的分类"><a href="#六、锁的分类" class="headerlink" title="六、锁的分类"></a>六、锁的分类</h3><h3 id="6-2-无锁"><a href="#6-2-无锁" class="headerlink" title="6.2 无锁"></a>6.2 无锁</h3><p>无锁是指没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁的特点是修改操作会在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。</p>
<h3 id="6-3-偏向锁"><a href="#6-3-偏向锁" class="headerlink" title="6.3 偏向锁"></a>6.3 偏向锁</h3><p>初次执行到synchronized代码块的时候，锁对象变成偏向锁（通过CAS修改对象头里的锁标志位），字面意思是“偏向于第一个获得它的线程”的锁。执行完同步代码块后，线程并不会主动释放偏向锁。当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里也就不需要重新加锁。如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p>
<p>偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。</p>
<p>当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。</p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。</p>
<p>关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。</p>
<h3 id="6-4-轻量级锁（自旋锁）"><a href="#6-4-轻量级锁（自旋锁）" class="headerlink" title="6.4 轻量级锁（自旋锁）"></a>6.4 轻量级锁（自旋锁）</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1460000022904671.jpg" alt="img"></p>
<p>轻量级锁是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁，其他线程会通过自旋（关于自旋的介绍见文末）的形式尝试获取锁，线程不会阻塞，从而提高性能。</p>
<p>轻量级锁的获取主要由两种情况：<br>① 当关闭偏向锁功能时；<br>② 由于多个线程竞争偏向锁导致偏向锁升级为轻量级锁。</p>
<p>一旦有第二个线程加入锁竞争，偏向锁就升级为轻量级锁（自旋锁）。这里要明确一下什么是锁竞争：如果多个线程轮流获取一个锁，但是每次获取锁的时候都很顺利，没有发生阻塞，那么就不存在锁竞争。只有当某线程尝试获取锁的时候，发现该锁已经被占用，只能等待其释放，这才发生了锁竞争。</p>
<p>在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，即不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象头里的锁标志位。先比较当前锁标志位是否为“释放”，如果是则将其设置为“锁定”，比较并设置是原子性发生的。这就算抢到锁了，然后线程将当前锁的持有者信息修改为自己。</p>
<p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗CPU，执行不了任何有效的任务，这种现象叫做忙等（busy-waiting）。如果多个线程用一个锁，但是没有发生锁竞争，或者发生了很轻微的锁竞争，那么synchronized就用轻量级锁，允许短时间的忙等现象。这是一种折衷的想法，短时间的忙等，换取线程在用户态和内核态之间切换的开销。</p>
<h3 id="6-4-重量级锁"><a href="#6-4-重量级锁" class="headerlink" title="6.4 重量级锁"></a>6.4 重量级锁</h3><p>重量级锁显然，此忙等是有限度的（有个计数器记录自旋次数，默认允许循环10次，可以通过虚拟机参数更改）。如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为重量级锁（依然是CAS修改锁标志位，但不修改持有锁的线程ID）。当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。</p>
<p>重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。</p>
<p>简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资</p>
<h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>文中讲述了锁的四种状态以及锁是如何一步一步升级的过程，文中有理解不到位或者有问题的地方，欢迎大家在评论区中下方指出和交流，谢谢大家</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>window删除右键管理员权限</title>
    <url>/2019/05/06/window%E5%88%A0%E9%99%A4%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="删除右键管理员权限-reg"><a href="#删除右键管理员权限-reg" class="headerlink" title="删除右键管理员权限.reg"></a>删除右键管理员权限.reg</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line">[-HKEY_CLASSES_ROOT\*\shell\runas]</span><br><span class="line">[-HKEY_CLASSES_ROOT\Directory\shell\runas]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>window右键获取管理员权限</title>
    <url>/2019/05/06/window%E5%8F%B3%E9%94%AE%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="文件名：获取管理员的所有权限–带图标-reg"><a href="#文件名：获取管理员的所有权限–带图标-reg" class="headerlink" title="文件名：获取管理员的所有权限–带图标.reg"></a>文件名：获取管理员的所有权限–带图标.reg</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\runas]</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\runas]</span><br><span class="line">@=&quot;获取超级管理员的所有权限&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Windows\\System32\\imageres.dll,-<span class="number">78</span>&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\runas\command]</span><br><span class="line">@=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F&quot;</span><br><span class="line">&quot;IsolatedCommand&quot;=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\runas]</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\runas]</span><br><span class="line">@=&quot;获取超级管理员的所有权限&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Windows\\System32\\imageres.dll,-<span class="number">78</span>&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\runas\command]</span><br><span class="line">@=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; /r /d y &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F /t&quot;</span><br><span class="line">&quot;IsolatedCommand&quot;=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; /r /d y &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F /t&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\dllfile\shell]</span><br><span class="line">[HKEY_CLASSES_ROOT\dllfile\shell\runas]</span><br><span class="line">@=&quot;获取超级管理员的所有权限&quot;</span><br><span class="line">&quot;HasLUAShield&quot;=&quot;&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\dllfile\shell\runas\command]</span><br><span class="line">@=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F&quot;</span><br><span class="line">&quot;IsolatedCommand&quot;=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\runas]</span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\runas]</span><br><span class="line">@=&quot;获取超级管理员的所有权限&quot;</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\Windows\\System32\\imageres.dll,-<span class="number">78</span>&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Drive\shell\runas\command]</span><br><span class="line">@=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; /r /d y &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F /t&quot;</span><br><span class="line">&quot;IsolatedCommand&quot;=&quot;<span class="built_in">cmd</span>.exe /c takeown /f \&quot;%<span class="number">1</span>\&quot; /r /d y &amp;&amp; icacls \&quot;%<span class="number">1</span>\&quot; /grant administrators:F /t&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>zuul超时时间和重试设置</title>
    <url>/2019/09/11/zuul%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E5%92%8C%E9%87%8D%E8%AF%95%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Zuul-网关的超时设置"><a href="#Zuul-网关的超时设置" class="headerlink" title="Zuul 网关的超时设置"></a>Zuul 网关的超时设置</h2><p>Zuul（网关）的超时时间需要设置zuul、hystrix、ribbon等三部分：</p>
<h3 id="zuul超时设置"><a href="#zuul超时设置" class="headerlink" title="zuul超时设置"></a>zuul超时设置</h3><pre><code>#zuul超时设置
#默认1000
zuul.host.socket-timeout-millis=2000
#默认2000
zuul.host.connect-timeout-millis=4000
</code></pre>
<h3 id="hystrix超时设置"><a href="#hystrix超时设置" class="headerlink" title="hystrix超时设置"></a>hystrix超时设置</h3><pre><code>#熔断器启用
feign.hystrix.enabled=true
hystrix.command.default.execution.timeout.enabled=true
#断路器的超时时间,下级服务返回超出熔断器时间，即便成功，消费端消息也是TIMEOUT,所以一般断路器的超时时间需要大于ribbon的超时时间，ribbon是真正去调用下级服务
#当服务的返回时间大于ribbon的超时时间，会触发重试
#断路器的超时时间默认为1000ms，太小了
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000

# 为某个特定的服务配熔断时间
hystrix.command.service-a.execution.isolation.thread.timeoutInMilliseconds=60000

#断路器详细设置
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个）
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
#短路多久以后开始尝试是否恢复，默认5s）
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5
#出错百分比阈值，当达到此阈值后，开始短路。默认50%）
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50%
</code></pre>
<h2 id="ribbon超时设置"><a href="#ribbon超时设置" class="headerlink" title="ribbon超时设置"></a>ribbon超时设置</h2><pre><code>#ribbon请求连接的超时时间，限制3秒内必须请求到服务，并不限制服务处理的返回时间
ribbon.ConnectTimeout=3000

ribbon.SocketTimeout=5000
#请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout
ribbon.ReadTimeout=5000

# 单独设置某个服务的超时时间，会覆盖其他的超时时间限制，服务的名称以注册中心页面显示的名称为准，超时时间不可大于断路器的超时时间
service-a.ribbon.ReadTimeout=50000
service-a.ribbon.ConnectTimeout=50000
</code></pre>
<h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><pre><code>#重试机制
#该参数用来开启重试机制，默认是关闭
spring.cloud.loadbalancer.retry.enabled=true
#对所有操作请求都进行重试
ribbon.OkToRetryOnAllOperations=true
#对当前实例的重试次数
ribbon.MaxAutoRetries=1
#切换实例的重试次数
ribbon.MaxAutoRetriesNextServer=1
#根据如上配置，当访问到故障请求的时候，它会再尝试访问一次当前实例（次数由MaxAutoRetries配置），
#如果不行，就换一个实例进行访问，如果还是不行，再换一次实例访问（更换次数由MaxAutoRetriesNextServer配置），
#如果依然不行，返回失败信息。
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>什么是倒排索引?</title>
    <url>/2021/01/09/%E4%BB%80%E4%B9%88%E6%98%AF%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在学习 ES 的过程中，简单的介绍下倒排索引是怎么回事，对倒排索引有一个宏观的感受。</p>
<h1 id="正排索引"><a href="#正排索引" class="headerlink" title="正排索引"></a>正排索引</h1><p>在讲述倒排索引之前先介绍下正排索引。正排索引就是如下表形式：</p>
<table>
<thead>
<tr>
<th>文档id</th>
<th align="left">文档内容</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td align="left">什么是正排索引</td>
</tr>
<tr>
<td>2</td>
<td align="left">什么是倒排索引</td>
</tr>
<tr>
<td>3</td>
<td align="left">正排索引和倒排索引</td>
</tr>
</tbody></table>
<span id="more"></span>

<h1 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h1><p>倒排索引就是对上表进行转换，最简单的倒排索引如下表所示：</p>
<table>
<thead>
<tr>
<th>单词</th>
<th>文档ids</th>
</tr>
</thead>
<tbody><tr>
<td>什么</td>
<td>1,2</td>
</tr>
<tr>
<td>是</td>
<td>1,2</td>
</tr>
<tr>
<td>正排</td>
<td>1,3</td>
</tr>
<tr>
<td>倒排</td>
<td>2,3</td>
</tr>
<tr>
<td>索引</td>
<td>1,2,3</td>
</tr>
<tr>
<td>和</td>
<td>3</td>
</tr>
</tbody></table>
<h2 id="词频（TF）和位置（POS）"><a href="#词频（TF）和位置（POS）" class="headerlink" title="词频（TF）和位置（POS）"></a>词频（TF）和位置（POS）</h2><p>上表所示的倒排索引之所以是最简单的，是因为这个索引系统只记载了哪些文档包含某个单词。实用的倒排索引还可以记载更多的信息，如下表第3列的<strong>词频</strong>和<strong>位置</strong>。</p>
<p><strong>TF</strong>：单词在某个文档中出现的次数<br><strong>POS</strong>：单词在文档中出现的位置</p>
<table>
<thead>
<tr>
<th align="left">单词</th>
<th>文档ids</th>
<th>文档id:词频TF:&lt;位置POS&gt;</th>
</tr>
</thead>
<tbody><tr>
<td align="left">什么</td>
<td>1,2</td>
<td>1:1:&lt;1&gt;,2:1:&lt;1&gt;</td>
</tr>
<tr>
<td align="left">是</td>
<td>1,2</td>
<td>1:1:&lt;2&gt;,2:1:&lt;2&gt;</td>
</tr>
<tr>
<td align="left">正排</td>
<td>1,3</td>
<td>1:1:&lt;3&gt;,3:1:&lt;0&gt;</td>
</tr>
<tr>
<td align="left">倒排</td>
<td>2,3</td>
<td>2:1:&lt;3&gt;,3:1:&lt;5&gt;</td>
</tr>
<tr>
<td align="left">索引</td>
<td>1,2,3</td>
<td>1:1:&lt;5&gt;,2:1:&lt;5&gt;,3:2:&lt;2,7&gt;</td>
</tr>
<tr>
<td align="left">和</td>
<td>3</td>
<td>3:1:&lt;4&gt;</td>
</tr>
</tbody></table>
<p>以“索引”这个单词为例，“3:2:&lt;2,7&gt;”：表示在文档id是3的文档中出现2次，在文档中的位置分别是2和7。</p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://www.cnblogs.com/ottll/p/9470732.html">https://www.cnblogs.com/ottll/p/9470732.html</a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
  </entry>
  <entry>
    <title>其他人的知识</title>
    <url>/2020/03/03/%E5%85%B6%E4%BB%96%E4%BA%BA%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><a href="https://www.jianshu.com/p/41d359a6aaee">jmeter进行http压力测试（图文小教程）</a></p>
<p><a href="https://www.cnblogs.com/imyalost/p/9808079.html">jmeter（二十五）linux环境运行jmeter并生成报告</a></p>
<p><a href="https://www.cnblogs.com/imyalost/p/10239317.html">jmeter（二十六）生成HTML性能测试报告</a></p>
<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p><a href="https://www.cnblogs.com/qdhxhz/p/11096682.html">RocketMQ(2)—Docker部署RocketMQ集群</a></p>
<p><a href="https://www.cnblogs.com/fx-blog/p/11738419.html">Spring Cloud Alibaba学习笔记（11） - RocketMQ事务消息</a></p>
]]></content>
  </entry>
  <entry>
    <title>分布式全局ID</title>
    <url>/2021/07/18/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E5%B1%80ID/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>在分库分表的过程中，因为拆分的实体表的ID有可能是重复的，正式由于这个问题才会有分布式全局ID这个方案的出现。</p>
<span id="more"></span>

<h1 id="2-概要"><a href="#2-概要" class="headerlink" title="2 概要"></a>2 概要</h1><ul>
<li><p>分库分表的系统中，由于id引发的问题</p>
<p>它是由于什么原因导致的？它会对业务系统引发什么问题？</p>
</li>
<li><p>分布式ID的解决方案</p>
<ol>
<li>使用UUID作为id实现主键全局ID唯一性保证</li>
<li>通过统一ID序列表，实现全局ID</li>
<li>雪花算法作为全局ID</li>
<li>多种方案的比较</li>
</ol>
</li>
</ul>
<h1 id="3-分库分表的系统中，由于id引发的问题"><a href="#3-分库分表的系统中，由于id引发的问题" class="headerlink" title="3 分库分表的系统中，由于id引发的问题"></a>3 分库分表的系统中，由于id引发的问题</h1><p>它是由于什么原因导致的？它会对业务系统引发什么问题？</p>
<ul>
<li>每个表通常都会有唯一标识，通常使用id</li>
<li>ID通常采用自增的方式</li>
<li>在分库分表的情况下，每张表的id都是从0开始自增的</li>
<li>两个分片表中存在相同的 id</li>
<li>从而导致业务混乱</li>
</ul>
<h1 id="4-分布式ID的解决方案"><a href="#4-分布式ID的解决方案" class="headerlink" title="4 分布式ID的解决方案"></a>4 分布式ID的解决方案</h1><h2 id="4-1-UUID"><a href="#4-1-UUID" class="headerlink" title="4.1 UUID"></a>4.1 UUID</h2><ul>
<li><p>UUID 通用唯一识别码（Universally Unique Identifier）。</p>
</li>
<li><p>使用 UUID，保证每一条的记录id都是不同的。</p>
</li>
<li><p>缺点1：只是单纯的一个id，没有实际意义。长度32位，太长。</p>
</li>
<li><p>mycat不支持UUID的方式。</p>
</li>
<li><p>sharding-Jdbc支持UUID的方式。</p>
</li>
</ul>
<h2 id="4-2-统一ID序列"><a href="#4-2-统一ID序列" class="headerlink" title="4.2 统一ID序列"></a>4.2 统一ID序列</h2><ul>
<li><p>ID 的值统一的从一个集中的ID序列生成器中获取</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/bH5oQj-20210718211022587.png"></p>
</li>
<li><p>ID序列生成器MyCat支持，Sharding-Jdbc不支持</p>
</li>
<li><p>MyCat中有两种方式：本地文件方式、数据库方式</p>
</li>
<li><p>本地文件方式用于测试、数据库方式用于生产</p>
</li>
<li><p>优点：ID集中管理，避免重复</p>
</li>
<li><p>缺点：并发量大时，ID生成器压力较大</p>
</li>
</ul>
<h2 id="4-3-雪花算法"><a href="#4-3-雪花算法" class="headerlink" title="4.3 雪花算法"></a>4.3 雪花算法</h2><ul>
<li>SnowFlake是由Twitter提出的分布式ID算法</li>
<li>一个64 bit 的 long 型的数字（是二进制数，在程序中会转化为10进制数）</li>
<li>引入了时间戳，保持自增</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/ZvQWuo.png"></p>
<ul>
<li>基本保持全局唯一，毫秒内并发最大 4096 个ID</li>
<li>时间回调，可能引起ID重复</li>
<li>MyCat 和 Sharding-Jdbc 均支持雪花算法</li>
<li>Sharding-Jdbc 可设置最大容忍回调时间</li>
</ul>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>分布式全局ID</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2021/07/24/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h1><ul>
<li><p>CAP原理</p>
</li>
<li><p>ACID原理与BASE原理</p>
</li>
<li><p>基于XA协议的两阶段提交</p>
</li>
<li><p>事务补偿机制</p>
</li>
<li><p>基于本地消息表的最终一致方案</p>
</li>
<li><p>基于MQ消息队列的最终一致方案</p>
</li>
</ul>
<h1 id="2-CAP原理"><a href="#2-CAP原理" class="headerlink" title="2 CAP原理"></a>2 CAP原理</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>在分布式系统中，我们经常听到CAP原理这个词，它是什么意思呢？其实和C、A、P这3个字母有关，C、A、P分别是这3个词的首字母。下面我们就看一下这3个词分别是什么意思？</p>
<ul>
<li>C - Consistent ，一致性。具体是指，操作成功以后，所有的节点，在同一时间，看到的数据都是完全一致的。所以，一致性，说的就是数据一致性。</li>
<li>A - Availability ，可用性。指服务一致可用，在规定的时间内完成响应。</li>
<li>P - Partition tolerance ，分区容错性。指分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供服务。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0f0c0c0934d12d06200487.png"></p>
<p>CAP原理指出，这3个指标不能同时满足，最多只能满足其中的两个。</p>
<h2 id="2-2-详解"><a href="#2-2-详解" class="headerlink" title="2.2 详解"></a>2.2 详解</h2><p>我们之所以使用分布式系统，就是为了在某个节点不可用的情况下，整个服务对外还是可用的，这正是满足P（分区容错性）。如果我们的服务不满足P（分区容错性），那么我们的系统也就不是分布式系统了，所以，在分布式系统中，P（分布容错性）总是成立的。那么，A（可用性）和C（一致性）能不能同时满足呢？我们看一下下面的图例。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0f0c24092a8a2205300403.png"></p>
<p>A和B是两个数据节点，A向B同步数据，并且作为一个整体对外提供服务。由于我们的系统保证了P（分区容错性），那么A和B的同步，我们允许出现故障。接下来我们再保证A（可用性），也就是说A和B同步出现问题时，客户端还能够访问我们的系统，那么客户端既可能访问A也可能访问B，这时，A和B的数据是不一致的，所以C（一致性）不能满足。</p>
<p>如果我们满足C（一致性），也就是说客户端无论访问A还是访问B，得到的结果都是一样的，那么现在A和B的数据不一致，需要等到A和B的数据一致以后，也就是同步恢复以后，才可对外提供服务。这样我们虽然满足了C（一致性），却不能满足A（可用性）。</p>
<p>所以，我们的系统在满足P（分区容错性）的同时，只能在A（可用性）和C（一致性）当中选择一个不能CAP同时满足。我们的分布式系统只能是AP或者CP。</p>
<h1 id="3-ACID与BASE"><a href="#3-ACID与BASE" class="headerlink" title="3 ACID与BASE"></a>3 ACID与BASE</h1><p>在关系型数据库中，最大的特点就是事务处理，也就是ACID。ACID是事务处理的4个特性。</p>
<ul>
<li><p>A - Atomicity（原子性），事务中的操作要么都做，要么都不做。</p>
</li>
<li><p>C - Consistency（一致性），系统必须始终处在强一致状态下。</p>
</li>
<li><p>I - Isolation（隔离性），一个事务的执行不能被其他事务所干扰。</p>
</li>
<li><p>D - Durability（持久性），一个已提交的事务对数据库中数据的改变是永久性的。</p>
</li>
</ul>
<p>ACID强调的是强一致性，要么全做，要么全不做，所有的用户看到的都是一致的数据。传统的数据库都有ACID特性，它们在CAP原理中，保证的是CA。但是在分布式系统大行其道的今天，满足CA特性的系统很难生存下去。ACID也逐渐的向BASE转换。那么什么是BASE呢？</p>
<p> BASE是Basically Available（基本可用）, Soft-state（软状态）, Eventually consistent（最终一致）的缩写。</p>
<ul>
<li><p>Basically Available，基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。</p>
<p>电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</p>
</li>
<li><p>软状态（ Soft State）</p>
<p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有两到三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</p>
</li>
<li><p>最终一致性（ Eventual Consistency）</p>
<p>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p>
</li>
</ul>
<p>BASE模型是传统ACID模型的反面，不同与ACID，BASE强调牺牲高一致性，从而获得可用性，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p>
<p>在分布式事务的解决方案中，它们都是依赖了ACID或者BASE的模型而实现的。像基于XA协议的两阶段提交和实物补偿机制就是基于ACID实现的。而基于本地消息表和基于MQ的最终一致方案都是通过BASE原理实现的。这几种分布式事务的解决方案，我们会在视频的课程中给大家讲解。</p>
<h1 id="4-由分库分表引发的事物问题和解决方案"><a href="#4-由分库分表引发的事物问题和解决方案" class="headerlink" title="4 由分库分表引发的事物问题和解决方案"></a>4 由分库分表引发的事物问题和解决方案</h1><h2 id="4-1-由分库分表引发的事物问题"><a href="#4-1-由分库分表引发的事物问题" class="headerlink" title="4.1 由分库分表引发的事物问题"></a>4.1 由分库分表引发的事物问题</h2><p>传统的应用都是单一数据库事物，所有的业务表都在同一数据库内，这时候数据库的事物可以得到很好的支持，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210724171356938.png" alt="image-20210724171356938"></p>
<p>然后在同一个业务内，再把数据库进行水平切分多个数据库，多个数据库之间是没有办法无法统一事务管理的，就会造成数据不一致的情况。如果按照垂直切分成多个数据库，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210724172152429.png" alt="image-20210724172152429"></p>
<p>比如：</p>
<ul>
<li><p>一个下单操作，用户使用积分购买商品</p>
</li>
<li><p>用户库扣减积分，订单库生成订单，商品库扣减库存</p>
</li>
<li><p>由于它们不在同一数据库，不能改保证事务统一</p>
</li>
<li><p>任何一个环节出错，其他两个数据的事务将不能回滚</p>
</li>
</ul>
<h2 id="4-2-解决方案"><a href="#4-2-解决方案" class="headerlink" title="4.2 解决方案"></a>4.2 解决方案</h2><p>那么如何解决呢？</p>
<ul>
<li>基于XA协议的两阶段提交</li>
<li>事务补偿机制</li>
<li>基于本地消息表+定时任务的最终一致性方案</li>
<li>基于MQ的最终一致方案</li>
</ul>
<h3 id="4-2-1-基于XA协议的两阶段提交"><a href="#4-2-1-基于XA协议的两阶段提交" class="headerlink" title="4.2.1 基于XA协议的两阶段提交"></a>4.2.1 基于XA协议的两阶段提交</h3><p><strong>XA 协议原理简介</strong></p>
<ul>
<li><p>XA 是由 X/Open 组织提出的分布式事务的规范</p>
</li>
<li><p>有一个事务管理器（TM）和多个资源管理器（RM）组成</p>
<p>TM：数据源，RM：数据库</p>
</li>
<li><p>提交阶段分为两个阶段：prepare 和 commit</p>
<p>也就是说在提交之前，让所有的数据库先进行准备，准备好了之后通知事务管理器，然后由事务管理器统一的提交事务，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210724175921780.png" alt="image-20210724175921780"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210724180456245.png" alt="image-20210724180456245"></p>
</li>
<li><p>XA协议保证了数据的强一致性</p>
</li>
<li><p>commit 阶段出现问题，事务不一致，需人工处理</p>
</li>
<li><p>但是两阶段提交效率低下，性能与本地事务相差 10 倍</p>
</li>
<li><p>MySql5.7 及以上均支持XA协议</p>
</li>
<li><p>Mysql Connector/J 5.0以上支持XA协议</p>
</li>
<li><p>Java系统中，数据源可以采用 Atomikos（充当事务管理器）</p>
</li>
</ul>
<h4 id="4-2-1-1-使用Mycat-或者Sharding-Jdbc"><a href="#4-2-1-1-使用Mycat-或者Sharding-Jdbc" class="headerlink" title="4.2.1.1 使用Mycat 或者Sharding-Jdbc"></a>4.2.1.1 使用Mycat 或者Sharding-Jdbc</h4><p><strong>配置Mycat</strong></p>
<p>通过修改<code>conf/server.xml</code>配置分布式事务，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5ec4e2810969290517080353.jpg"></p>
<p>至于Sharding-Jdbc则默认为我们开启了分布式事务</p>
<h3 id="4-2-2-事务补偿机制"><a href="#4-2-2-事务补偿机制" class="headerlink" title="4.2.2 事务补偿机制"></a>4.2.2 事务补偿机制</h3><p><strong>什么事务补偿机制？</strong></p>
<p>其实就是针对每个操作，都要注册一个与其对应的补偿（撤销）操作，在执行失败时，调用补偿操作，撤销之前的操作。</p>
<p>例如一个A给B转账的例子：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210725155803128.png" alt="image-20210725155803128"></p>
<ul>
<li>A 和 B 在不两家不同的银行</li>
<li>A 账户减 200元，B 账户加 200 元</li>
<li>两个操作要保证原子性，要么都成功，要么都失败</li>
<li>由于A和B在两家不同的银行，所以存在分布式事务问题</li>
<li>转账接口需要提供补偿机制</li>
<li>如果A在扣减的过程中出现问题，直接抛出异常，事务回滚</li>
<li>B在增加余额的过程中，出现问题，要调用A的补偿接口</li>
<li>A之前的扣减操作，得到了补偿，进行了撤销</li>
<li>保证了A和B的帐是没有问题的</li>
</ul>
<p><strong>如果A补偿操作也失败了呢？</strong></p>
<p>我们可以为A补偿操作添加有限次数的重试机制，超出重试次数后，人工介入。</p>
<p><strong>事务补偿机制看起来有点繁琐，不推荐使用。</strong></p>
<p><strong>事务补偿机制的优缺点：</strong></p>
<ul>
<li><p>优点：逻辑清晰、流程简单</p>
</li>
<li><p>缺点：数据一致性比XA还要差，可能出错的点比较多</p>
</li>
<li><p>TCC属于应用层的一种补偿方式，程序员需要写大量的代码</p>
</li>
</ul>
<h3 id="4-2-3-基于本地消息表的的最终一致性方案"><a href="#4-2-3-基于本地消息表的的最终一致性方案" class="headerlink" title="4.2.3 基于本地消息表的的最终一致性方案"></a>4.2.3 基于本地消息表的的最终一致性方案</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210726213335173.png" alt="image-20210726213335173"></p>
<ul>
<li>采用BASE原理，保证事务最终一致</li>
<li>在一致性方面，允许一段时间内的不一致，但最终会一致</li>
<li>在实际的系统中，要根据具体情况，判断是否采用</li>
<li>基于本地消息表的方案中，将<font color=red><strong>本事务外</strong></font>操作，记录在消息表中</li>
<li>其他的事务要提供操作接口（例如支付宝、微信支付的接口）</li>
<li>定时任务轮训本地消息表，将未执行的的消息发送给操作接口</li>
<li>操作接口处理成功，返回成功标识，处理失败返回失败标识</li>
<li>定时任务接到标识，更新消息的状态</li>
<li>定时任务按照一定的周期反复执行</li>
<li>对于屡次失败的消息，可以设置最大失败次数</li>
<li>超过最大失败次数的消息，不再进行接口调用</li>
<li>等待人工处理</li>
</ul>
<p>那么这个方案有什么优缺点呢？</p>
<ul>
<li>优点：避免了了分布式事务，实现了最终一致性</li>
<li>缺点：要注意重试时的幂等性操作</li>
</ul>
<h3 id="4-2-4-基于MQ的最终一致性方案"><a href="#4-2-4-基于MQ的最终一致性方案" class="headerlink" title="4.2.4 基于MQ的最终一致性方案"></a>4.2.4 基于MQ的最终一致性方案</h3><ul>
<li>原理、流程与本地消息表类似</li>
<li>不同点1：本地消息表改为 MQ</li>
<li>不同点2：定时任务改为MQ的消费者</li>
</ul>
<p>这样就不在依赖于定时任务了，架构图如下所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210728232239034.png" alt="image-20210728232239034"></p>
<ol>
<li><p>首先，业务系统将数据保存到数据库中</p>
</li>
<li><p>然后，业务系统把另外一条消息存放到消息队列中</p>
</li>
<li><p>消费者从消息队列中去取消息</p>
</li>
<li><p>消费者执行分布式事务的第二段的服务，把数据落入到数据库中去</p>
</li>
</ol>
<p><strong>优点</strong></p>
<ul>
<li>不依赖于定时任务，基于MQ更高效、更可靠</li>
<li>适合公司内部的系统</li>
<li>不同公司之间无法基于MQ，本地消息表更合适</li>
</ul>
]]></content>
      <tags>
        <tag>分布式事务</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-FastDFS-tracker-配置(4)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS-tracker-%E9%85%8D%E7%BD%AE-4/</url>
    <content><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>tracker和storage都是同一个fastdfs的主程序的两个不同概念，配置不同的配置文件就可以设定为tracker或者storage</p>
<span id="more"></span>

<h1 id="配置tracker"><a href="#配置tracker" class="headerlink" title="配置tracker"></a>配置tracker</h1><p><code>/etc/fdfs</code>下都是一些配置文件，配置tracker即可</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">vim tracker.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef55e08c034fc11160388.jpg" alt="https://climg.mukewang.com/5e0ef55e08c034fc11160388.jpg"></p>
<ul>
<li><p>修改tracker配置文件，此为tracker的工作目录，保存数据以及日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base_path&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;tracker</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;tracker -p</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="启动tracker服务"><a href="#启动tracker服务" class="headerlink" title="启动tracker服务"></a>启动tracker服务</h1><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure>

<p>检查进程如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">ps -ef|grep tracker</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef5720852057816000146.jpg" alt="https://climg.mukewang.com/5e0ef5720852057816000146.jpg"></p>
<ul>
<li><p>停止tracker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;stop.sh &#x2F;etc&#x2F;fdfs&#x2F;tracker.conf</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-FastDFS-配置storage服务(5)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS-%E9%85%8D%E7%BD%AEstorage%E6%9C%8D%E5%8A%A1-5/</url>
    <content><![CDATA[<h1 id="修改storage配置文件"><a href="#修改storage配置文件" class="headerlink" title="修改storage配置文件"></a>修改storage配置文件</h1><ul>
<li><p>修改该storage.cond配置文件</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef5c108c15a6116000535.jpg" alt="https://climg.mukewang.com/5e0ef5c108c15a6116000535.jpg"></p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"># 修改组名</span><br><span class="line">group_name=imooc</span><br><span class="line"># 修改storage的工作空间</span><br><span class="line">base_path=<span class="regexp">/usr/</span>local/fastdfs/storage</span><br><span class="line"># 修改storage的存储空间</span><br><span class="line">store_path0=<span class="regexp">/usr/</span>local/fastdfs/storage</span><br><span class="line"># 修改tracker的地址和端口号，用于心跳</span><br><span class="line">tracker_server=<span class="number">192.168</span><span class="number">.1</span><span class="number">.153</span>:<span class="number">22122</span></span><br><span class="line"></span><br><span class="line"># 后续结合nginx的一个对外服务端口号</span><br><span class="line">http.server_port=<span class="number">8888</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建目录</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/storage -p</span><br></pre></td></tr></table></figure>

<h1 id="启动storage"><a href="#启动storage" class="headerlink" title="启动storage"></a>启动storage</h1><p><strong>前提：必须首先启动tracker</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure>

<p>检查进程如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">ps -ef|grep storage</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef61c08e61f1d16000147.jpg" alt="https://climg.mukewang.com/5e0ef61c08e61f1d16000147.jpg"></p>
<h1 id="测试上传"><a href="#测试上传" class="headerlink" title="测试上传"></a>测试上传</h1><ul>
<li><p>修改的client.conf配置文件</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef62b089e938e15020712.jpg" alt="https://climg.mukewang.com/5e0ef62b089e938e15020712.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">base_path&#x3D;&#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;client</span><br><span class="line">tracker_server&#x3D;192.168.1.153:22122</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;fastdfs&#x2F;client</span><br></pre></td></tr></table></figure></li>
<li><p>测试：</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">wget &lt;https:<span class="comment">//www.imooc.com/static/img/index/logo.png&gt;</span></span><br><span class="line">./fdfs_test /etc/fdfs/client.conf upload /home/logo.png</span><br></pre></td></tr></table></figure>

<p>上传成功：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef64008dfab1e16000857.jpg" alt="https://climg.mukewang.com/5e0ef64008dfab1e16000857.jpg"></p>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-FastDFS与Nginx实现文件服务器(6)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS%E4%B8%8ENginx%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8-6/</url>
    <content><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>fastdfs安装好以后是无法通过http访问的，这个时候就需要借助nginx了，所以需要安装fastdfs的第三方模块到nginx中，就能使用了。</p>
<p>注：nginx需要和storage在同一个节点。</p>
<span id="more"></span>

<h1 id="安装nginx插件"><a href="#安装nginx插件" class="headerlink" title="安装nginx插件"></a>安装nginx插件</h1><ul>
<li><p>解压nginx的fastdfs压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs-nginx-module-1.22.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>复制配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp mod_fastdfs.conf &#x2F;etc&#x2F;fdfs</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef6d608a9590613200494.jpg" alt="https://climg.mukewang.com/5e0ef6d608a9590613200494.jpg"></p>
</li>
<li><p>修改/fastdfs-nginx-module/src/config文件，主要是修改路径，把<code>local</code>删除，因为fastdfs安装的时候我们没有修改路径，原路径是<code>/usr</code>：</p>
<p><img src="https://climg.mukewang.com/5e0ef6e508e482c828261280.png" alt="https://climg.mukewang.com/5e0ef6e508e482c828261280.png"></p>
</li>
</ul>
<h1 id="安装nginx（略）"><a href="#安装nginx（略）" class="headerlink" title="安装nginx（略）"></a>安装nginx（略）</h1><p>其中配置如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">./configure \\n--prefix=<span class="regexp">/usr/</span>local/nginx \\n--pid-path=<span class="regexp">/var/</span>run/nginx/nginx.pid \\n--lock-path=<span class="regexp">/var/</span>lock/nginx.lock \\n--error-log-path=<span class="regexp">/var/</span>log/nginx/error.log \\n--http-log-path=<span class="regexp">/var/</span>log/nginx/access.log \\n--<span class="keyword">with</span>-http_gzip_static_module \\n--http-client-body-temp-path=<span class="regexp">/var/</span>temp/nginx/client \\n--http-proxy-temp-path=<span class="regexp">/var/</span>temp/nginx/proxy \\n--http-fastcgi-temp-path=<span class="regexp">/var/</span>temp/nginx/fastcgi \\n--http-uwsgi-temp-path=<span class="regexp">/var/</span>temp/nginx/uwsgi \\n--http-scgi-temp-path=<span class="regexp">/var/</span>temp/nginx/scgi \\n--add-<span class="built_in">module</span>=<span class="regexp">/home/</span>software/fdfs/fastdfs-nginx-<span class="built_in">module</span>-<span class="number">1.22</span>/src</span><br></pre></td></tr></table></figure>

<p>主要新增一个第三方模块</p>
<p>修改 mod_fastdfs.conf 配置文件：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">base_path=<span class="regexp">/usr/</span>local/fastdfs/tmp</span><br><span class="line">tracker_server=<span class="number">192.168</span><span class="number">.1</span><span class="number">.153</span>:<span class="number">22122</span></span><br><span class="line">group_name=imooc</span><br><span class="line">url_have_group_name = <span class="literal">true</span></span><br><span class="line">store_path0=<span class="regexp">/usr/</span>local/fastdfs/storage</span><br><span class="line">mkdir /usr/local/fastdfs/tmp</span><br></pre></td></tr></table></figure>

<p>修改nginx.conf，添加如下虚拟主机：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">8888</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location /imooc/M00 &#123;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动nginx</p>
<h1 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h1><p><img src="https://climg.mukewang.com/5e0ef6fc08fa922e10200650.jpg" alt="https://climg.mukewang.com/5e0ef6fc08fa922e10200650.jpg"></p>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-概述(1)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-%E6%A6%82%E8%BF%B0-1/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_1.png"></p>
<span id="more"></span>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_2.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_1_3.png"></p>
<h1 id="什么是分布式文件系统"><a href="#什么是分布式文件系统" class="headerlink" title="什么是分布式文件系统"></a>什么是分布式文件系统</h1><ul>
<li>随着文件数据的越来越多，通过tomcat或nginx虚拟化的静态资源文件在单一的一个服务器节点内是存不下的，如果用多个节点来存储也可以，但是不利于管理和维护，所以我们需要一个系统来管理多台计算机节点上的文件数据，这就是分布式文件系统。</li>
<li>分布式文件系统是一个允许文件通过网络在多台节点上分享的文件系统，多台计算机节点共同组成一个整体，为更多的用户提供分享文件和存储空间。比如常见的网盘，本质就是一个分布式的文件存储系统。虽然我们是一个分布式的文件系统，但是对用户来说是透明的，用户使用的时候，就像是访问本地磁盘一样。</li>
<li>分布式文件系统可以提供冗余备份，所以容错能力很高。 系统中有某些节点宕机，但是整体文件服务不会停止，还是能够为用户提供服务，整体还是运作的，数据也不会丢失。</li>
<li>分布式文件系统的可扩展性强，增加或减少节点都很简单，不会影响线上服务，增加完毕后会发布到线上，加入到集群中为用户提供服务。</li>
<li>分布式文件系统可以提供负载均衡能力，在读取文件副本的时候可以由多个节点共同提供服务，而且可以通过横向扩展来确保性能的提升与负载。</li>
</ul>
<h1 id="为什么要使用分布式文件系统"><a href="#为什么要使用分布式文件系统" class="headerlink" title="为什么要使用分布式文件系统"></a>为什么要使用分布式文件系统</h1><p>使用分布式文件系统可以解决如下几点问题：</p>
<ol>
<li>海量文件数据存储</li>
<li>文件数据高可用(冗余备份)</li>
<li>读写性能和负载均衡以上3点都是我们之前使用tomcat或nginx所不能够实现的，这也是我们为什么要使用分布式文件系统的原因</li>
</ol>
<h1 id="FastDFS-与-HDFS"><a href="#FastDFS-与-HDFS" class="headerlink" title="FastDFS 与 HDFS"></a>FastDFS 与 HDFS</h1><p>说到分布式文件存储，肯定会有人想到HDFS，他们两者主要定位和应用场景是不一样的。</p>
<ol>
<li>Hadoop中的文件系统HDFS主要解决并行计算中分布式存储数据的问题。其单个数据文件通常很大，采用了分块（切分）存储的方式，所以是大数据大文件存储来使用的场景。</li>
<li>FastDFS主要用于互联网网站，为文件上传和下载提供在线服务。所以在负载均衡、动态扩容等方面都支持得比较好，FastDFS不会对文件进行分快存储。FastDFS用于存储中小文件都是不错的，比如用户头像啊，一些较小的音视频文件啊等等都行。</li>
</ol>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2021/04/29/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="如何使用锁解决超卖问题？"><a href="#如何使用锁解决超卖问题？" class="headerlink" title="如何使用锁解决超卖问题？"></a>如何使用锁解决超卖问题？</h1><span id="more"></span>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210429-123340@2x.png" alt="image-20210429123322683"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210429123825952.png" alt="image-20210429123825952"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210429-123959@2x-20210429124034459.png" alt="image-20210429123948747"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210429-124118@2x.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E8%B6%85%E5%8D%96%E7%8E%B0%E8%B1%A1%E8%A7%A3%E5%86%B3_update.png" alt="image-20210429124223611"></p>
<p> <img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210506-230803@2x.png" alt="image-20210506230736162"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210506-230955@2x.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210506-231732@2x.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210506-231848@2x.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210507-214536@2x.png" alt="image-20210507214519527"></p>
<p>示例如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderItemMapper orderItemMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line">    <span class="comment">//购买商品id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> purchaseProductId = <span class="number">100100</span>;</span><br><span class="line">    <span class="comment">//购买商品数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> purchaseProductNum = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformTransactionManager platformTransactionManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TransactionDefinition transactionDefinition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">createOrder</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Product product = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionStatus transaction1 = platformTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">            product = productMapper.selectByPrimaryKey(purchaseProductId);</span><br><span class="line">            <span class="keyword">if</span> (product==<span class="keyword">null</span>)&#123;</span><br><span class="line">                platformTransactionManager.rollback(transaction1);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;购买商品：&quot;</span>+purchaseProductId+<span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//商品当前库存</span></span><br><span class="line">            Integer currentCount = product.getCount();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;库存数：&quot;</span>+currentCount);</span><br><span class="line">            <span class="comment">//校验库存</span></span><br><span class="line">            <span class="keyword">if</span> (purchaseProductNum &gt; currentCount)&#123;</span><br><span class="line">                platformTransactionManager.rollback(transaction1);</span><br><span class="line">                <span class="keyword">throw</span></span><br><span class="line">                        <span class="keyword">new</span> Exception(<span class="string">&quot;商品&quot;</span>+purchaseProductId+<span class="string">&quot;仅剩&quot;</span>+currentCount+<span class="string">&quot;件，无法购买&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            productMapper.updateProductCount(purchaseProductNum,<span class="string">&quot;xxx&quot;</span>,<span class="keyword">new</span> Date(),product.getId());</span><br><span class="line">            platformTransactionManager.commit(transaction1);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TransactionStatus transaction = platformTransactionManager.getTransaction(transactionDefinition);</span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderAmount(product.getPrice().multiply(<span class="keyword">new</span> BigDecimal(purchaseProductNum)));</span><br><span class="line">        order.setOrderStatus(<span class="number">1</span>);<span class="comment">//待处理</span></span><br><span class="line">        order.setReceiverName(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        order.setReceiverMobile(<span class="string">&quot;13311112222&quot;</span>);</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        order.setCreateUser(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        order.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        order.setUpdateUser(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        orderMapper.insertSelective(order);</span><br><span class="line"></span><br><span class="line">        OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">        orderItem.setOrderId(order.getId());</span><br><span class="line">        orderItem.setProductId(product.getId());</span><br><span class="line">        orderItem.setPurchasePrice(product.getPrice());</span><br><span class="line">        orderItem.setPurchaseNum(purchaseProductNum);</span><br><span class="line">        orderItem.setCreateUser(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        orderItem.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        orderItem.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        orderItem.setUpdateUser(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        orderItemMapper.insertSelective(orderItem);</span><br><span class="line">        platformTransactionManager.commit(transaction);</span><br><span class="line">        <span class="keyword">return</span> order.getId();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210507-221236@2x.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.png" alt="QQ20210507-223258@2x"></p>
]]></content>
      <tags>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-FastDFS概念梳理(2)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-FastDFS%E6%A6%82%E5%BF%B5%E6%A2%B3%E7%90%86-2/</url>
    <content><![CDATA[<h1 id="什么是FastDFS"><a href="#什么是FastDFS" class="headerlink" title="什么是FastDFS"></a>什么是FastDFS</h1><ul>
<li>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</li>
<li>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</li>
<li>FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。</li>
<li>存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key value）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。</li>
<li>跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。</li>
<li>为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。</li>
<li>在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。</li>
<li>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</li>
<li>FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。</li>
</ul>
<p><em>– 摘自&lt;百度百科&gt;</em></p>
<span id="more"></span>

<h1 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a>常见术语</h1><ul>
<li>tracker：追踪者服务器，主要用于协调调度，可以起到负载均衡的作用，记录storage的相关状态信息。</li>
<li>storage：存储服务器，用于保存文件以及文件的元数据信息。</li>
<li>group：组，同组节点提供冗余备份，不同组用于扩容。</li>
<li>mata data：文件的元数据信息，比如长宽信息，图片后缀，视频的帧数等。</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_2_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_2_1.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_2_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/fastdfs_2_2.png"></p>
<p><a href="https://github.com/happyfish100/fastdfs/wiki">happyfish100/fastdfs</a></p>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式文件系统-配置FastDFS环境准备工作(3)</title>
    <url>/2021/01/20/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F-%E9%85%8D%E7%BD%AEFastDFS%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C-3/</url>
    <content><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.cnblogs.com/leechenxiang/p/5406548.html">fastDFS 一二事 - 简易服务器搭建（单linux）</a></p>
<p><a href="https://www.cnblogs.com/leechenxiang/p/7089778.html">腾讯云服务器 安装fastdfs文件服务器</a></p>
<p><a href="https://github.com/happyfish100/fastdfs/wiki">happyfish100/fastdfs</a></p>
<span id="more"></span>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>Centos7.x 两台，分别安装tracker与storage</li>
<li>下载安装包：<ul>
<li>libfatscommon：FastDFS分离出的一些公用函数包</li>
<li>FastDFS：FastDFS本体</li>
<li>fastdfs-nginx-module：FastDFS和nginx的关联模块</li>
<li>nginx：发布访问服务</li>
</ul>
</li>
</ul>
<h1 id="安装步骤-tracker与storage都要执行"><a href="#安装步骤-tracker与storage都要执行" class="headerlink" title="安装步骤 (tracker与storage都要执行)"></a>安装步骤 (tracker与storage都要执行)</h1><ol>
<li><p>安装基础环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">yum -y install libevent</span><br></pre></td></tr></table></figure></li>
<li><p>安装libfatscommon函数库安装的目录从控制台看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar -zxvf libfastcommon-1.0.42.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>进入libfastcommon文件夹，编译并且安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;make.sh</span><br><span class="line">.&#x2F;make.sh install</span><br></pre></td></tr></table></figure></li>
<li><p>安装fastdfs主程序文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar -zxvf fastdfs-6.04.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入到fastdfs目录，查看fastdfs安装配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd fastdfs-6.04&#x2F;</span><br><span class="line">vim make.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TARGET_PREFIX&#x3D;$DESTDIR&#x2F;usr</span><br><span class="line">TARGET_CONF_PATH&#x3D;$DESTDIR&#x2F;etc&#x2F;fdfs</span><br><span class="line">TARGET_INIT_PATH&#x3D;$DESTDIR&#x2F;etc&#x2F;init.d</span><br></pre></td></tr></table></figure>

<p>安装fastdfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;make.sh</span><br><span class="line">.&#x2F;make.sh install</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef484082a831c05840194.jpg" alt="https://climg.mukewang.com/5e0ef484082a831c05840194.jpg"></p>
<p>如上图，</p>
<ul>
<li><p><code>/usr/bin</code> 中包含了可执行文件；</p>
</li>
<li><p><code>/etc/fdfs</code> 包含了配置文件；</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef4aa082ddd3610940470.jpg" alt="https://climg.mukewang.com/5e0ef4aa082ddd3610940470.jpg"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef4bc083b7c0109940238.jpg" alt="https://climg.mukewang.com/5e0ef4bc083b7c0109940238.jpg"></p>
</li>
</ul>
</li>
</ol>
<ul>
<li>拷贝配置文件如下：</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">cp /home/software/FastDFS/fastdfs-<span class="number">6.04</span>/conf<span class="comment">/* /etc/fdfs/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e0ef4cf08b65f3b13560470.jpg" alt="https://climg.mukewang.com/5e0ef4cf08b65f3b13560470.jpg"></p>
]]></content>
      <categories>
        <category>分布式文件系统</category>
      </categories>
      <tags>
        <tag>fastdfs</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁的对比</title>
    <url>/2021/05/18/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/6zUNz2.png"></p>
<span id="more"></span>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/GJm1lP.png"></p>
]]></content>
      <tags>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Jenkins、SVN、Harbor、Helm和Kubernetes的持续集成</title>
    <url>/2020/04/28/%E5%9F%BA%E4%BA%8EJenkins%E3%80%81SVN%E3%80%81Harbor%E3%80%81Helm%E5%92%8CKubernetes%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>本文介绍如何结合 Kubernetes + Jenkis + SVN + Harbor + Helm 实现一个完整的 CI/CD 流水线作业进行持续集成和持续部署。</p>
<span id="more"></span>

<h1 id="1-安装-Helm"><a href="#1-安装-Helm" class="headerlink" title="1 安装 Helm"></a>1 安装 Helm</h1><p>下载 Helm3，同时添加 chart 库</p>
<p><a href="https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz">下载地址</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf helm-v3.1.2-linux-amd64.tar.gz</span><br><span class="line">$ ln -s /home/k8s-projects/helm-projects/linux-amd64/helm /usr/<span class="built_in">local</span>/bin/helm</span><br><span class="line">$ helm repo add stable http://mirror.azure.cn/kubernetes/charts</span><br><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br></pre></td></tr></table></figure>

<h1 id="2-使用-Kubernetes-的动态存储"><a href="#2-使用-Kubernetes-的动态存储" class="headerlink" title="2 使用 Kubernetes 的动态存储"></a>2 使用 Kubernetes 的动态存储</h1><p>尽管通过 hostPath 或者 emptyDir 的方式可以用来来持久化我们的数据，但是显然我们还需要更加可靠的存储来保存应用的持久化数据，这样容器在重建后，依然可以使用之前的数据。但是显然存储资源和 CPU 资源以及内存资源有很大不同，为了屏蔽底层的技术实现细节，让用户更加方便的使用，Kubernetes 便引入了 PV 和 PVC 两个重要的资源对象来实现对存储的管理。</p>
<p>本文中我们使用 StorageClass，要使用它就得安装对应的自动配置程序，比如我们这里存储后端使用的是 nfs，那么我们就需要使用到一个 nfs-client 的自动配置程序，我们也叫它 Provisioner，这个程序使用我们已经配置好的 nfs 服务器，来自动创建持久卷，也就是自动帮我们创建 PV。</p>
<h2 id="2-1-CentOS-7-下-yum-安装和配置-NFS"><a href="#2-1-CentOS-7-下-yum-安装和配置-NFS" class="headerlink" title="2.1 CentOS 7 下 yum 安装和配置 NFS"></a>2.1 <strong>CentOS 7 下 yum 安装和配置 NFS</strong></h2><a href="/2020/04/29/CentOS7%E4%B8%8Byum%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AENFS/" title="CentOS7下yum安装和配置NFS">CentOS7下yum安装和配置NFS</a>

<h2 id="2-2-安装-nfs-client-provisioner"><a href="#2-2-安装-nfs-client-provisioner" class="headerlink" title="2.2 安装 nfs-client-provisioner"></a>2.2 安装 nfs-client-provisioner</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install nfs-client-provisioner-dev stable/nfs-client-provisioner --<span class="built_in">set</span> nfs.server=192.168.200.19 \</span><br><span class="line">--<span class="built_in">set</span> nfs.path=/home/k8s-projects/k8s-nfs --<span class="built_in">set</span> storageClass.defaultClass=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>查看安装结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get storageClass -n dev</span><br><span class="line">NAME                   PROVISIONER                                RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-client (default)   cluster.local/nfs-client-provisioner-dev   Delete          Immediate           <span class="literal">true</span>                   13d</span><br></pre></td></tr></table></figure>

<p>可以看到 <code>storageClass</code> 顺利创建。</p>
<h1 id="3-k8s-中安装-Jenkins"><a href="#3-k8s-中安装-Jenkins" class="headerlink" title="3 k8s 中安装 Jenkins"></a>3 k8s 中安装 Jenkins</h1><p>使用 Helm 安装 jenkins，命名空间为 <code>dev</code>，指定存储 <code>storageClass</code> 为 <code>nfs-client</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm pull stable/jenkins</span><br><span class="line">$ helm install jenkins-dev /home/k8s-projects/helm-projects/jenkins --namespace dev \</span><br><span class="line">--<span class="built_in">set</span> master.serviceType=NodePort --<span class="built_in">set</span> persistence.storageClass=nfs-client --<span class="built_in">set</span> master.adminPassword=awifi@123</span><br></pre></td></tr></table></figure>

<p>我们利用 Kubernetes 来动态运行 Jenkins 的 Slave 节点，可以很好的来解决传统的 Jenkins Slave 浪费大量资源的缺点。</p>
<h1 id="4-k8s-中安装-Redis-集群"><a href="#4-k8s-中安装-Redis-集群" class="headerlink" title="4 k8s 中安装 Redis 集群"></a>4 k8s 中安装 Redis 集群</h1><p>使用 Helm 安装 Redis 集群， 命名空间为 <code>dev</code>, 指定存储<code>storageClass</code>为<code>nfs-client</code>, 密码设置为<code>123456</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm pull redis-cluster-dev bitnami/redis-cluster</span><br><span class="line">$ helm install redis-cluster-dev /home/k8s-projects/helm-projects/redis-cluster --namespace=dev \</span><br><span class="line">--<span class="built_in">set</span> global.storageClass=nfs-client,global.redis.password=123456</span><br></pre></td></tr></table></figure>

<h1 id="5-k8s-中配置外部的-mysql"><a href="#5-k8s-中配置外部的-mysql" class="headerlink" title="5 k8s 中配置外部的 mysql"></a>5 k8s 中配置外部的 mysql</h1><p>一般来说，k8s 集群外部的服务，集群内是无法访问的。</p>
<p>以 mysql 为例，我们想要部署的服务中想使用现有的 mysql 数据库，k8s也有解决办法，将外部服务作为 <code>Endpoints</code>，同时以 <code>Service</code> 的形式暴露到集群内。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">external-service-mysql</span></span><br><span class="line"><span class="attr">subsets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">addresses:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">192.168</span><span class="number">.212</span><span class="number">.59</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">external-service-mysql</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">3306</span></span><br></pre></td></tr></table></figure>

<h1 id="6-持续构建流程"><a href="#6-持续构建流程" class="headerlink" title="6 持续构建流程"></a>6 持续构建流程</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p>
<ol>
<li>开发人员提交代码到 SVN 代码仓库</li>
<li>Jenkins 触发构建构建任务，根据 Pipeline 脚本定义分步骤构建</li>
<li>先进行代码检出，单元测试</li>
<li>然后进行 Maven 构建（Java 项目）</li>
<li>根据构建结果构建 Docker 镜像</li>
<li>推送 Docker 镜像到 Harbor 仓库</li>
<li>触发更新服务阶段，使用 Helm 安装/更新 Release</li>
<li>查看服务是否更新成功。</li>
</ol>
<h1 id="7-Docker-镜像构建"><a href="#7-Docker-镜像构建" class="headerlink" title="7 Docker 镜像构建"></a>7 Docker 镜像构建</h1><p>以用户数据服务为例。</p>
<p>由于我们要将项目部署到 <code>Kubernetes</code> 集群中去，所以我们需要将服务端进行容器化，所以我们在项目根目录下面添加一个 <code>Dockerfile</code> 文件进行镜像构建：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> fengxuechao &lt;fengxuechao.littlefxc@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=en_US.UTF-<span class="number">8</span> LANGUAGE=en_US:en LC_ALL=en_US.UTF-<span class="number">8</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app /app/config /app/logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./*.jar /app/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>由于服务端代码是基于Spring Boot构建的，所以我们这里使用一个<code>openjdk</code>的基础镜像，将打包过后的jar包放入镜像之中，然后通过启动容器使用<code>java -jar</code>命令直接启动即可，这里就会存在一个问题了，我们是在 Jenkins 的 Pipeline 中去进行镜像构建的，这个时候项目中并没有打包好的jar包文件，那么我们应该如何获取打包好的jar包文件呢？这里我们可以使用两种方法：</p>
<p>第一种就是如果你用于镜像打包的 Docker 版本大于<code>17.06</code>版本的话，那么你可以使用 Docker 的多阶段构建功能来完成镜像的打包过程，我们只需要将上面的Dockerfile文件稍微更改下即可，将使用maven进行构建的工作放到同一个文件中：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.6</span>-alpine as BUILD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝源码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> src /usr/app/src</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pom.xml /usr/app</span></span><br><span class="line"><span class="comment"># 拷贝自定义 maven settings.xml</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> settings.xml /usr/share/maven/ref/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -f /usr/app/pom.xml clean package -Dmaven.test.skip=<span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> fengxuechao &lt;fengxuechao.littlefxc@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=en_US.UTF-<span class="number">8</span> LANGUAGE=en_US:en LC_ALL=en_US.UTF-<span class="number">8</span> TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=BUILD /usr/app/target/*.jar /app/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<p>这里我们定义了两个阶段，第一个阶段利用<code>maven:3.6-alpine</code>这个基础镜像将我们的项目进行打包，然后将该阶段打包生成的jar包文件复制到第二阶段进行最后的镜像打包，这样就可以很好的完成我们的 Docker 镜像的构建工作。</p>
<p>第二种方式就是我们传统的方式，在 Jenkins Pipeline 中添加一个maven构建的阶段，然后在第二个 Docker 构建的阶段就可以直接获取到前面的jar包了，也可以很方便的完成镜像的构建工作，为了更加清楚的说明 Jenkins Pipeline 的用法，我们这里采用这种方式，所以 Dockerfile 文件还是使用第一个就行。</p>
<h1 id="8-Jenkins"><a href="#8-Jenkins" class="headerlink" title="8 Jenkins"></a>8 Jenkins</h1><h2 id="8-1-配置"><a href="#8-1-配置" class="headerlink" title="8.1 配置"></a>8.1 配置</h2><p>首先，我们需要去 Jenkins -&gt; Manage Jenkins -&gt; Manage Plugins, 检查插件 <code>Kubernetes</code>, <code>Subversion</code>有没有安装，没有就安装一下，这两个插件是后面一系列操作的基础。</p>
<p>现在项目准备好了，接下来我们可以开始 Jenkins 的配置，我们想要完全自由灵活的配置我们的Jenkins Slave 节点，我们直接直接在 Pipeline 中去自定义 Slave Pod 中所需要用到的容器模板，这样我们需要什么镜像只需要在 Slave Pod Template 中声明即可，完全不需要去定义一个庞大的 Slave 镜像了。</p>
<p>首先去掉 Jenkins 中 kubernetes 插件中的 Pod Template 的定义，Jenkins -&gt; Manage Jenkins -&gt; Manage Nodes and Clouds -&gt; Configure Clouds -&gt; Kubernetes区域，删除下方的<code>Kubernetes Pod Template</code> -&gt; 保存。</p>
<p><img src="https://img-blog.csdnimg.cn/20200509194819239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>点击按钮”连接测试”。如果出现错误，八成是权限问题，建议你去查看一下官网资料<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">使用 RBAC 鉴权</a>。</p>
<h2 id="8-2-创建一个流水线任务"><a href="#8-2-创建一个流水线任务" class="headerlink" title="8.2 创建一个流水线任务"></a>8.2 创建一个流水线任务</h2><p><img src="https://img-blog.csdnimg.cn/20200509194819236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="8-3-创建3个变量"><a href="#8-3-创建3个变量" class="headerlink" title="8.3 创建3个变量"></a>8.3 创建3个变量</h2><p>然后选中 “This project is parameterized”, 添加 3 个 “Boolean Parameter”. 分别是 <code>helmDelete</code>, <code>helmInstall</code> 和 <code>helmUpgrade</code>, 其中默认选中 <code>helmUpgrade</code>.</p>
<p>这 3 个变量与我们自定义的 Jenkinsfile 脚本有关，是必须要创建的。</p>
<p><img src="https://img-blog.csdnimg.cn/20200509194819215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="8-4-配置-Pipeline"><a href="#8-4-配置-Pipeline" class="headerlink" title="8.4 配置 Pipeline"></a>8.4 配置 Pipeline</h2><p>我们的 Jenkins 的任务是有 Jenkinsfile 推动的.</p>
<p>然后在下面的流水线区域我们可以选择<code>Pipeline script</code>然后在下面测试流水线脚本，我们这里选择<code>Pipeline script from SCM</code>，意思就是从代码仓库中通过<code>Jenkinsfile</code>文件获取Pipeline script脚本定义，然后选择 SCM 来源为 Subversion(如果没有，先去安装这个插件)，在出现的列表中配置上仓库地址 http://…/docker，由于我们是在一个 Slave Pod 中去进行构建，所以如果使用 SSH 的方式去访问 Gitlab 代码仓库的话就需要频繁的去更新 SSH-KEY，所以我们这里采用直接使用用户名和密码的形式来方式：</p>
<p><img src="https://img-blog.csdnimg.cn/20200509200524318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>在<code>Credentials</code>区域点击添加按钮添加我们访问 SVN 的用户名和密码：</p>
<p><img src="https://img-blog.csdnimg.cn/20200509194818424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>配置成功后我们只需要往 SVN 仓库推送代码,然后手动点击触发 Pipeline 构建了。接下来我们直接在服务端代码仓库目录下面添加Jenkinsfile文件，用于描述流水线构建流程。</p>
<h2 id="8-5-Jenkinsfile-示例"><a href="#8-5-Jenkinsfile-示例" class="headerlink" title="8.5 Jenkinsfile 示例"></a>8.5 Jenkinsfile 示例</h2><p>首先要说明的是 Jenkinsfile 是基于 Groovy 语言的，与Java有很多的相似性。</p>
<p><code>def</code> 是在Groovy用来定义标识符的关键字.在使用它的时候请注意 <code>def</code> 声明的变量所对应的是否符合你要编译和部署的对象。</p>
<ul>
<li><code>label</code>标签的定义，我们这里使用 UUID 生成一个随机的字符串，这样可以让 Slave Pod 每次的名称都不一样，而且这样就不会被固定在一个 Pod 上面了，以后有多个构建任务的时候就不会存在等待的情况了。</li>
<li><code>dockerRegistryUrl</code> 中是公司docker镜像私服地址。</li>
<li><code>mavenProjects</code> 是项目的根目录</li>
<li><code>svnRemote</code> 是项目的SVN地址</li>
<li><code>appName</code> 是maven编译后的jar包名，和<code>imageTag</code> 一起定位 jar 在maven本地仓库中的地址、docker镜像名组成部分，同时也是helm中的项目名</li>
<li><code>imageTag</code> 是maven编译后的jar包版本，和<code>appName</code> 一起定位 jar 在maven本地仓库中的地址、docker镜像名组成部分</li>
<li><code>namespace</code> 是docker镜像在公司私服harbor中的项目名，可以通过 <a href="http://alpha-harbor.51iwifi.com/harbor/projects">http://alpha-harbor.51iwifi.com/harbor/projects</a> 查看项目名是否存在。</li>
<li><code>image</code> 是docker镜像编译打包后的镜像名，由 <code>appName</code> 和<code>imageTag</code> 组成</li>
<li><code>mvnBuildModules</code> 是maven编译的模块，格式为 groupId:artifactId。请确保你要编译的maven工程包含在该模块下。</li>
<li><code>chartDir</code> 通用 spring-cloud 应用 k8s helm 部署模板, 你也可以自定义！</li>
<li><code>svnHelm</code> 通用 spring-cloud 应用 k8s helm 部署模板的远程仓库地址</li>
<li><code>dockerPath</code> 是源码检出后在Jenkins Slave Pod 中拥有Jenkinsfile的相对地址，docker镜像编译的工作目录。</li>
<li><code>jenkinsSVNCredentialsId</code> 是你在本文上一章节中定义的Jenkins中的svn凭据，请确保这个凭据定义的用户拥有访问 <code>svnRemote</code> 和 <code>svnHelm</code> 这两个变量定义的远程仓库的权限。</li>
</ul>
<p>我们使用<code>podTemplate</code>来定义不同阶段使用的的容器，阶段总共分为5个阶段：</p>
<p>代码检出 → 单元测试 → Maven 打包 → Docker 镜像构建/推送 → Helm 安装/更新服务。</p>
<p>代码检出在默认的 Slave 容器中即可；单元测试我们这里输出一些期望目标后直接忽略，有需要这个阶段的同学自己添加上自己的测试即可；Maven 打包肯定就需要 maven 的容器了；Docker 镜像构建/推送需要 Docker 环境；最后的 Helm 更新服务是不是就需要一个有 Helm 的容器环境了，所以我们这里就可以很简单的定义podTemplate了，如下定义：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> label = <span class="string">&quot;jenkins-slave-$&#123;UUID.randomUUID().toString()&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> dockerRegistryUrl = <span class="string">&quot;192.168.195.2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 项目的根目录</span></span><br><span class="line"><span class="keyword">def</span> mavenProjects = <span class="string">&quot;open-platform-dataservice&quot;</span>;</span><br><span class="line"><span class="keyword">def</span> svnRemote = <span class="string">&quot;http://svn.51iwifi.com/repos/AWIFI-PROJECT/capacitygroup/code/trunk/$&#123;mavenProjects&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请填写maven编译后的jar包名</span></span><br><span class="line"><span class="keyword">def</span> appName = <span class="string">&quot;opf-dataservice-user-provider&quot;</span>;</span><br><span class="line"><span class="comment">// 请填写maven编译后的jar包版本</span></span><br><span class="line"><span class="keyword">def</span> imageTag = <span class="string">&quot;1.0.10&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> namespace = <span class="string">&quot;dev&quot;</span>;</span><br><span class="line"><span class="keyword">def</span> image = <span class="string">&quot;$&#123;namespace&#125;/$&#123;appName&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请填写要maven编译的模块，格式为 groupId:artifactId</span></span><br><span class="line"><span class="keyword">def</span> mvnBuildModules = <span class="string">&quot;com.awifi.capacity:open-platform-dataservice-user&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请选择在配置在Jenkins 中的 SVN 凭据</span></span><br><span class="line"><span class="keyword">def</span> jenkinsSVNCredentialsId = <span class="string">&quot;SVN-fengxc&quot;</span>;</span><br><span class="line"><span class="comment">// 通用 spring-cloud 应用 k8s helm 部署模板, 你也可以自定义！</span></span><br><span class="line"><span class="keyword">def</span> chartDir = <span class="string">&quot;helm-spring-cloud&quot;</span></span><br><span class="line"><span class="keyword">def</span> svnHelm = <span class="string">&quot;http://svn.51iwifi.com/repos/AWIFI-PROJECT/capacitygroup/code/trunk/$&#123;chartDir&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请填写包含 Jenkinsfile,Dockerfile 的相对路径</span></span><br><span class="line"><span class="keyword">def</span> dockerPath = <span class="string">&quot;$&#123;mavenProjects&#125;/open-platform-dataservice-user/open-platform-dataservice-user-provider/docker&quot;</span>;</span><br><span class="line"></span><br><span class="line">podTemplate(<span class="attr">label:</span> label, <span class="attr">containers:</span> [</span><br><span class="line">        containerTemplate(<span class="attr">name:</span> <span class="string">&#x27;maven&#x27;</span>, <span class="attr">image:</span> <span class="string">&#x27;maven:3.6-alpine&#x27;</span>, <span class="attr">command:</span> <span class="string">&#x27;cat&#x27;</span>, <span class="attr">ttyEnabled:</span> <span class="literal">true</span>),</span><br><span class="line">        containerTemplate(<span class="attr">name:</span> <span class="string">&#x27;docker&#x27;</span>, <span class="attr">image:</span> <span class="string">&#x27;docker&#x27;</span>, <span class="attr">command:</span> <span class="string">&#x27;cat&#x27;</span>, <span class="attr">ttyEnabled:</span> <span class="literal">true</span>),</span><br><span class="line">        containerTemplate(<span class="attr">name:</span> <span class="string">&#x27;helm-kubectl&#x27;</span>, <span class="attr">image:</span> <span class="string">&#x27;dtzar/helm-kubectl:3.1.2&#x27;</span>, <span class="attr">command:</span> <span class="string">&#x27;cat&#x27;</span>, <span class="attr">ttyEnabled:</span> <span class="literal">true</span>)</span><br><span class="line">], <span class="attr">volumes:</span> [</span><br><span class="line">        nfsVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/root/.m2&#x27;</span>, <span class="attr">readOnly:</span> <span class="literal">false</span>, <span class="attr">serverAddress:</span> <span class="string">&#x27;192.168.200.19&#x27;</span>, <span class="attr">serverPath:</span> <span class="string">&#x27;/home/k8s-projects/k8s-nfs/m2&#x27;</span>),</span><br><span class="line">        hostPathVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/home/jenkins/.kube&#x27;</span>, <span class="attr">hostPath:</span> <span class="string">&#x27;/root/.kube&#x27;</span>),</span><br><span class="line">        hostPathVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/var/run/docker.sock&#x27;</span>, <span class="attr">hostPath:</span> <span class="string">&#x27;/var/run/docker.sock&#x27;</span>)</span><br><span class="line">]) &#123;</span><br><span class="line">    node(label) &#123;</span><br><span class="line">       stage(<span class="string">&#x27;代码检出&#x27;</span>) &#123;</span><br><span class="line">            echo <span class="string">&quot;1. 代码检出阶段&quot;</span>;</span><br><span class="line">            sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">               rm -fr ./*</span></span><br><span class="line"><span class="string">               mkdir $&#123;mavenProjects&#125;</span></span><br><span class="line"><span class="string">               mkdir $&#123;chartDir&#125;</span></span><br><span class="line"><span class="string">               &quot;&quot;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;检出项目源码&quot;</span></span><br><span class="line">            checkout([<span class="attr">$class:</span> <span class="string">&#x27;SubversionSCM&#x27;</span>, <span class="attr">additionalCredentials:</span> [], <span class="attr">excludedCommitMessages:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedRegions:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedRevprop:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedUsers:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">filterChangelog:</span> <span class="literal">false</span>, <span class="attr">ignoreDirPropChanges:</span> <span class="literal">false</span>, <span class="attr">includedRegions:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">locations:</span> [[<span class="attr">cancelProcessOnExternalsFail:</span> <span class="literal">true</span>, <span class="attr">credentialsId:</span> <span class="string">&quot;$&#123;jenkinsSVNCredentialsId&#125;&quot;</span>, <span class="attr">depthOption:</span> <span class="string">&#x27;infinity&#x27;</span>, <span class="attr">ignoreExternalsOption:</span> <span class="literal">true</span>, <span class="attr">local:</span> <span class="string">&quot;$&#123;mavenProjects&#125;&quot;</span>, <span class="attr">remote:</span> <span class="string">&quot;$&#123;svnRemote&#125;&quot;</span>]], <span class="attr">quietOperation:</span> <span class="literal">true</span>, <span class="attr">workspaceUpdater:</span> [<span class="attr">$class:</span> <span class="string">&#x27;UpdateUpdater&#x27;</span>]])</span><br><span class="line">            echo <span class="string">&quot;检出 helm chart&quot;</span></span><br><span class="line">            checkout([<span class="attr">$class:</span> <span class="string">&#x27;SubversionSCM&#x27;</span>, <span class="attr">additionalCredentials:</span> [], <span class="attr">excludedCommitMessages:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedRegions:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedRevprop:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">excludedUsers:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">filterChangelog:</span> <span class="literal">false</span>, <span class="attr">ignoreDirPropChanges:</span> <span class="literal">false</span>, <span class="attr">includedRegions:</span> <span class="string">&#x27;&#x27;</span>, <span class="attr">locations:</span> [[<span class="attr">cancelProcessOnExternalsFail:</span> <span class="literal">true</span>, <span class="attr">credentialsId:</span> <span class="string">&quot;$&#123;jenkinsSVNCredentialsId&#125;&quot;</span>, <span class="attr">depthOption:</span> <span class="string">&#x27;infinity&#x27;</span>, <span class="attr">ignoreExternalsOption:</span> <span class="literal">true</span>, <span class="attr">local:</span> <span class="string">&quot;$&#123;chartDir&#125;&quot;</span>, <span class="attr">remote:</span> <span class="string">&quot;$&#123;svnHelm&#125;&quot;</span>]], <span class="attr">quietOperation:</span> <span class="literal">true</span>, <span class="attr">workspaceUpdater:</span> [<span class="attr">$class:</span> <span class="string">&#x27;UpdateUpdater&#x27;</span>]])</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;单元测试&#x27;</span>) &#123;</span><br><span class="line">            echo <span class="string">&quot;2. 测试阶段&quot;</span>;</span><br><span class="line">            echo <span class="string">&quot;项目 SVN 地址: $&#123;svnRemote&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;maven 编译模块目标: $&#123;mvnBuildModules&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Docker 构建目标: $&#123;dockerRegistryUrl&#125;/$&#123;image&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Helm 模板地址: $&#123;svnHelm&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Helm 部署目标: namespace = $&#123;namespace&#125;, name = $&#123;appName&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Helm 删除应用：$&#123;helmDelete&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Helm 部署应用：$&#123;helmInstall&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;Helm 升级应用：$&#123;helmUpgrade&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;代码编译打包&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                container(<span class="string">&#x27;maven&#x27;</span>) &#123;</span><br><span class="line">                    echo <span class="string">&quot;3. 代码编译打包阶段&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                       cd $&#123;mavenProjects&#125;</span></span><br><span class="line"><span class="string">                       mvn clean install -pl $&#123;mvnBuildModules&#125; -am -Dmaven.test.skip=true</span></span><br><span class="line"><span class="string">                       &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exc) &#123;</span><br><span class="line">                println <span class="string">&quot;构建失败 - $&#123;currentBuild.fullDisplayName&#125;&quot;</span></span><br><span class="line">                <span class="keyword">throw</span> (exc)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;构建 Docker 镜像&#x27;</span>) &#123;</span><br><span class="line">            withCredentials([usernamePassword(<span class="attr">credentialsId:</span> <span class="string">&#x27;DockerHub&#x27;</span>, <span class="attr">passwordVariable:</span> <span class="string">&#x27;dockerHubPassword&#x27;</span>, <span class="attr">usernameVariable:</span> <span class="string">&#x27;dockerHubUser&#x27;</span>)]) &#123;</span><br><span class="line">                container(<span class="string">&#x27;docker&#x27;</span>) &#123;</span><br><span class="line">                    echo <span class="string">&quot;4. 构建 Docker 镜像阶段&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                       cd $&#123;dockerPath&#125;</span></span><br><span class="line"><span class="string">                       cp /root/.m2/repository/com/awifi/capacity/$&#123;appName&#125;/$&#123;imageTag&#125;/*.jar ./ &amp;&amp; pwd &amp;&amp; ls</span></span><br><span class="line"><span class="string">                       docker login $&#123;dockerRegistryUrl&#125; -u $&#123;dockerHubUser&#125; -p $&#123;dockerHubPassword&#125;</span></span><br><span class="line"><span class="string">                       docker build -t $&#123;dockerRegistryUrl&#125;/$&#123;image&#125;:$&#123;imageTag&#125; .</span></span><br><span class="line"><span class="string">                       docker push $&#123;dockerRegistryUrl&#125;/$&#123;image&#125;:$&#123;imageTag&#125;</span></span><br><span class="line"><span class="string">                       &quot;&quot;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;运行 Helm 阶段&#x27;</span>) &#123;</span><br><span class="line">            container(<span class="string">&#x27;helm-kubectl&#x27;</span>) &#123;</span><br><span class="line">                echo <span class="string">&quot;5. 运行 Helm 阶段&quot;</span></span><br><span class="line">                echo <span class="string">&quot;[INFO] 开始运行 Helm 命令&quot;</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;helmDelete&#125;&quot;</span>) &#123;</span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 删除应用...&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;helm delete $&#123;appName&#125; -n $&#123;namespace&#125;&quot;</span></span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 删除应用成功.&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;helmInstall&#125;&quot;</span>) &#123;</span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 部署应用...&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;helm install $&#123;appName&#125; ./$&#123;chartDir&#125; --namespace=$&#123;namespace&#125; -f $&#123;dockerPath&#125;/values.yaml --set image.repository=192.168.195.2/$&#123;image&#125;,image.tag=$&#123;imageTag&#125;,fullnameOverride=$&#123;appName&#125;,service.type=NodePort&quot;</span></span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 部署应用成功.&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;true&quot;</span> == <span class="string">&quot;$&#123;helmUpgrade&#125;&quot;</span>) &#123;</span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 升级应用...&quot;</span></span><br><span class="line">                    sh <span class="string">&quot;helm upgrade $&#123;appName&#125; ./$&#123;chartDir&#125; --namespace=$&#123;namespace&#125; -f $&#123;dockerPath&#125;/values.yaml --set image.repository=192.168.195.2/$&#123;image&#125;,image.tag=$&#123;imageTag&#125;,fullnameOverride=$&#123;appName&#125;,service.type=NodePort&quot;</span></span><br><span class="line">                    echo <span class="string">&quot;[INFO] Helm 升级应用成功&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段groovy脚本比较简单，我们需要注意的是volumes区域的定义，将容器中的<code>/root/.m2</code>目录挂载到<code>nfs</code>上是为了给Maven构建添加缓存的，不然每次构建的时候都需要去重新下载依赖，这样就非常慢了；挂载<code>.kube</code>目录是为了能够让<code>kubectl</code>和<code>helm</code>两个工具可以读取到 Kubernetes 集群的连接信息，不然我们是没办法访问到集群的；最后挂载<code>/var/run/docker.sock</code>文件是为了能够让我们的docker这个容器获取到Docker Daemon的信息的，因为docker这个镜像里面只有客户端的二进制文件，我们需要使用宿主机的Docker Daemon来构建镜像，当然我们也需要在运行 Slave Pod 的节点上拥有访问集群的文件，然后在每个Stage阶段使用特定需要的容器来进行任务的描述即可，所以这几个volumes都是非常重要的。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span> [</span><br><span class="line">    nfsVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/root/.m2&#x27;</span>, <span class="attr">readOnly:</span> <span class="literal">false</span>, <span class="attr">serverAddress:</span> <span class="string">&#x27;192.168.200.19&#x27;</span>, <span class="attr">serverPath:</span> <span class="string">&#x27;/home/k8s-projects/k8s-nfs/m2&#x27;</span>),</span><br><span class="line">    hostPathVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/home/jenkins/.kube&#x27;</span>, <span class="attr">hostPath:</span> <span class="string">&#x27;/root/.kube&#x27;</span>),</span><br><span class="line">    hostPathVolume(<span class="attr">mountPath:</span> <span class="string">&#x27;/var/run/docker.sock&#x27;</span>, <span class="attr">hostPath:</span> <span class="string">&#x27;/var/run/docker.sock&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>到这里为止，你现在总共有两份文件 Dockerfile 和 Jenkinsfile，把这两份文件放到你在Jenkinsfile脚本中定义的<code>dockerPath</code> 目录下，然后提交代码到远程仓库。你还需要将<code>svnHelm</code> 目录下的 <code>values.yaml</code> 也复制到 <code>dockerPath</code> 目录下， <code>values.yaml</code> 主要是配置helm安装/更新服务的配置信息。</p>
<p>切换到 Jenkins 页面点击先前定义的流水线任务。</p>
<p><img src="https://img-blog.csdnimg.cn/20200509194818496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>正常可以看到 Jenkins 中的任务构建成功了。</p>
<h2 id="8-6-如何配置自定义SpringBoot应用启动参数"><a href="#8-6-如何配置自定义SpringBoot应用启动参数" class="headerlink" title="8.6 如何配置自定义SpringBoot应用启动参数"></a>8.6 如何配置自定义SpringBoot应用启动参数</h2><p>在 “8.5 Jenkinsfile 示例” 章节中Jenkinsfile 最后一个阶段 “运行 Helm 阶段” 中，helm 安装或更新服务的命令是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm upgrade <span class="variable">$&#123;appName&#125;</span> ./<span class="variable">$&#123;chartDir&#125;</span> --namespace=<span class="variable">$&#123;namespace&#125;</span> -f <span class="variable">$&#123;dockerPath&#125;</span>/values.yaml --<span class="built_in">set</span> \</span><br><span class="line">image.repository=192.168.195.2/<span class="variable">$&#123;image&#125;</span>,image.tag=<span class="variable">$&#123;imageTag&#125;</span>,fullnameOverride=<span class="variable">$&#123;appName&#125;</span>,service.type=NodePort</span><br></pre></td></tr></table></figure>

<p>主要关注点是 <code>values.yaml</code> : 你可以修改 <code>container.args</code> 和 <code>container.additionalArgs</code> 来改变Java应用的启动命令参数。</p>
<p>下面是helm中关于容器运行启动的命令配置部分。</p>
<p><code>range</code> 表示循环语句， <code>container.args</code>  对应下面的<code>.Values.container.args</code> ，<code>container.additionalArgs</code> 对应下面的<code>.Values.container.additionalArgs</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line">     <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> &#123;&#123; <span class="string">include</span> <span class="string">&quot;helm-spring-cloud.fullname&quot;</span> <span class="string">.</span> &#125;&#125;</span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">toYaml</span> <span class="string">.Values.securityContext</span> <span class="string">|</span> <span class="string">nindent</span> <span class="number">12</span> &#125;&#125;</span><br><span class="line">          <span class="attr">image:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> &#123;&#123; <span class="string">.Values.image.pullPolicy</span> &#125;&#125;</span><br><span class="line">          <span class="attr">command:</span> [<span class="string">&quot;java&quot;</span>]</span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-Duser.timezone=GMT+8</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-Djava.security.egd=file:/dev/./urandom</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-Dserver.port=8080</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-Dspring.cloud.consul.discovery.prefer-ip-address=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-Dspring.cloud.consul.discovery.hostname=&#123;&#123;-</span> <span class="string">include</span> <span class="string">&quot;helm-spring-cloud.fullname&quot;</span> <span class="string">.&#125;&#125;</span></span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Values.container.args</span> &#125;&#125;</span><br><span class="line">            <span class="bullet">-</span> &#123;&#123; <span class="string">.</span> <span class="string">|</span> <span class="string">quote</span> &#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> &#125;&#125;</span><br><span class="line">            <span class="bullet">-</span> <span class="string">-jar</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/app/app.jar</span></span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">range</span> <span class="string">.Values.container.additionalArgs</span> &#125;&#125;</span><br><span class="line">            <span class="bullet">-</span> &#123;&#123; <span class="string">.</span> <span class="string">|</span> <span class="string">quote</span> &#125;&#125;</span><br><span class="line">            &#123;&#123;<span class="bullet">-</span> <span class="string">end</span> &#125;&#125;</span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>

<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://www.cnblogs.com/xulingjie/p/9916345.html">jenkins+svn+pipeline+kubernetes部署java应用（一）</a></p>
<p><a href="https://www.cnblogs.com/xulingjie/p/9916768.html">jenkins+svn+pipeline+kubernetes部署java应用（二）</a></p>
<p><a href="https://www.cnblogs.com/xulingjie/p/9916904.html">jenkins+svn+pipeline+kubernetes部署java应用（三）</a></p>
<p><a href="https://blog.csdn.net/diantun00/article/details/81075007">玩转Jenkins Pipeline_运维_大宝鱼的博客-CSDN博客</a></p>
<p><a href="https://www.qikqiak.com/post/kubernetes-jenkins1/">基于 kubernetes 的动态 jenkins slave</a></p>
<p><a href="https://www.qikqiak.com/post/kubernetes-jenkins2/">Jenkins Pipeline 部署 Kubernetes 应用(二)</a></p>
<p><a href="https://www.cnblogs.com/hiver/p/7850954.html">Maven的-pl -am -amd参数学习 - hiv - 博客园</a></p>
<p><a href="https://www.cnblogs.com/lxwphp/p/9109685.html">SVN常用命令之checkout</a></p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>k8s</tag>
        <tag>helm</tag>
        <tag>jenkins</tag>
        <tag>CI/CD</tag>
        <tag>svn</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redisson实现分布式锁</title>
    <url>/2021/05/16/%E5%9F%BA%E4%BA%8ERedisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redisson 除了实现了redis基本功能以外，还重新实现了Java并发包里面的内容。</p>
<p>如何使用Redisson？Redisson可以说是redis客户端的加强版本，它里面的内容较多，也提供了分布式锁的实现，使用简单只需简单配置和调用即可，步骤如下：</p>
<ol>
<li><p>引入Redisson的Jar包</p>
</li>
<li><p>进行Redisson与Redis的配置</p>
</li>
<li><p>使用分布式锁</p>
</li>
</ol>
<p>使用方式：</p>
<ul>
<li>通过Java API方式引入Redisson</li>
<li>Spring项目引入Redisson</li>
<li>SpringBoot项目引入Redisson </li>
</ul>
<span id="more"></span>

<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLockApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedissonLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://localhost&quot;</span>);</span><br><span class="line">        RedissonClient redisson = Redisson.create(config);</span><br><span class="line"></span><br><span class="line">        RLock rLock = redisson.getLock(<span class="string">&quot;order&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rLock.lock(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">            log.info(<span class="string">&quot;我获得了锁！！！&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;我释放了锁！！&quot;</span>);</span><br><span class="line">            rLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果演示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/MBFX4f.png"></p>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>引用依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.redis.host&#x3D;localhost</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLockController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;redissonLock&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redissonLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RLock rLock = redisson.getLock(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;我进入了方法！！&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rLock.lock(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">            log.info(<span class="string">&quot;我获得了锁！！！&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;我释放了锁！！&quot;</span>);</span><br><span class="line">            rLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;方法执行完成！！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;方法执行完成！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果演示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/2lvzmZ.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/skDIpq.png"></p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>在SpringBoot1.5.x下如何使RedisTokenStore集群化</title>
    <url>/2019/08/22/%E5%9C%A8SpringBoot1-5-x%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BFRedisTokenStore%E9%9B%86%E7%BE%A4%E5%8C%96/</url>
    <content><![CDATA[<h1 id="在SpringBoot1-5-x下如何使RedisTokenStore集群化"><a href="#在SpringBoot1-5-x下如何使RedisTokenStore集群化" class="headerlink" title="在SpringBoot1.5.x下如何使RedisTokenStore集群化"></a>在SpringBoot1.5.x下如何使RedisTokenStore集群化</h1><p>在 spring boot 1.5.x 下 <code>spring-boot-starter-data-redis</code> 默认使用 jedis 作为客户端。</p>
<p>因为 <code>JedisCluster</code> 不支持集群的管道操作(pipleline)，但是项目中又要用到 Redis 集群，这时候该怎么办呢？</p>
<p>现在，提供两种解决办法：</p>
<ol>
<li>重写 RedisTokenStore, 用 RedisTemplateTokenStore</li>
<li>将 jedis 换掉，使用 spring boot 2.x 中默认的 redis 客户端 lettuce 来支持 Redis 集群（推荐）</li>
</ol>
<h2 id="解决办法-1：重写-RedisTokenStore"><a href="#解决办法-1：重写-RedisTokenStore" class="headerlink" title="解决办法 1：重写 RedisTokenStore"></a>解决办法 1：重写 RedisTokenStore</h2><p>因为 JedisCluster 不支持管道操作:（源码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClusterConnection</span> <span class="keyword">implements</span> <span class="title">RedisClusterConnection</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * @see org.springframework.data.redis.connection.RedisConnection#openPipeline()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openPipeline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Pipeline is currently not supported for JedisClusterConnection.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * (non-Javadoc)</span></span><br><span class="line"><span class="comment">     * @see org.springframework.data.redis.connection.RedisConnection#closePipeline()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">closePipeline</span><span class="params">()</span> <span class="keyword">throws</span> RedisPipelineException </span>&#123;</span><br><span class="line">    	<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Pipeline is currently not supported for JedisClusterConnection.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此可以使用 RedisTemplate 重写 RedisTokenStore，虽然会导致性能的损失，但至少能用不是吗</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.provider.token.store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.OAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.OAuth2RefreshToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.AuthenticationKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTemplateTokenStore</span> <span class="keyword">implements</span> <span class="title">TokenStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS = <span class="string">&quot;access:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH_TO_ACCESS = <span class="string">&quot;auth_to_access:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTH = <span class="string">&quot;auth:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_AUTH = <span class="string">&quot;refresh_auth:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESS_TO_REFRESH = <span class="string">&quot;access_to_refresh:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH = <span class="string">&quot;refresh:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_TO_ACCESS = <span class="string">&quot;refresh_to_access:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_ID_TO_ACCESS = <span class="string">&quot;client_id_to_access:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNAME_TO_ACCESS = <span class="string">&quot;uname_to_access:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String,Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AuthenticationKeyGenerator authenticationKeyGenerator = <span class="keyword">new</span> DefaultAuthenticationKeyGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticationKeyGenerator</span><span class="params">(AuthenticationKeyGenerator authenticationKeyGenerator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authenticationKeyGenerator = authenticationKeyGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">getAccessToken</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String key = authenticationKeyGenerator.extractKey(authentication);</span><br><span class="line">        OAuth2AccessToken accessToken = (OAuth2AccessToken) redisTemplate.opsForValue().get(AUTH_TO_ACCESS+key);</span><br><span class="line">        <span class="keyword">if</span> (accessToken != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; !key.equals(authenticationKeyGenerator.extractKey(readAuthentication(accessToken.getValue())))) &#123;</span><br><span class="line">            <span class="comment">// Keep the stores consistent (maybe the same user is represented by this authentication but the details</span></span><br><span class="line">            <span class="comment">// have changed)</span></span><br><span class="line">            storeAccessToken(accessToken, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthentication</span><span class="params">(OAuth2AccessToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readAuthentication(token.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get(AUTH +  token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthenticationForRefreshToken</span><span class="params">(OAuth2RefreshToken token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readAuthenticationForRefreshToken(token.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2Authentication <span class="title">readAuthenticationForRefreshToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get( REFRESH_AUTH+token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeAccessToken</span><span class="params">(OAuth2AccessToken token, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(ACCESS+ token.getValue(), token);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(AUTH +token.getValue(), authentication);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(AUTH_TO_ACCESS+authenticationKeyGenerator.extractKey(authentication), token);</span><br><span class="line">        <span class="keyword">if</span> (!authentication.isClientOnly()) &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(UNAME_TO_ACCESS+getApprovalKey(authentication), token) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForList().rightPush(CLIENT_ID_TO_ACCESS+authentication.getOAuth2Request().getClientId(), token) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token.getExpiration() != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> seconds = token.getExpiresIn();</span><br><span class="line">            redisTemplate.expire(ACCESS+ token.getValue(), seconds, TimeUnit.SECONDS) ;</span><br><span class="line">            redisTemplate.expire(AUTH+ token.getValue(), seconds, TimeUnit.SECONDS) ;</span><br><span class="line"></span><br><span class="line">            redisTemplate.expire(AUTH_TO_ACCESS+ authenticationKeyGenerator.extractKey(authentication), seconds, TimeUnit.SECONDS) ;</span><br><span class="line">            redisTemplate.expire(CLIENT_ID_TO_ACCESS+authentication.getOAuth2Request().getClientId(), seconds, TimeUnit.SECONDS) ;</span><br><span class="line">            redisTemplate.expire(UNAME_TO_ACCESS+ getApprovalKey(authentication), seconds, TimeUnit.SECONDS) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (token.getRefreshToken() != <span class="keyword">null</span> &amp;&amp; token.getRefreshToken().getValue() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.opsForValue().set( REFRESH_TO_ACCESS+   token.getRefreshToken().getValue(), token.getValue());</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.opsForValue().set(ACCESS_TO_REFRESH+token.getValue(), token.getRefreshToken().getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApprovalKey</span><span class="params">(OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        String userName = authentication.getUserAuthentication() == <span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : authentication.getUserAuthentication()</span><br><span class="line">                .getName();</span><br><span class="line">        <span class="keyword">return</span> getApprovalKey(authentication.getOAuth2Request().getClientId(), userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getApprovalKey</span><span class="params">(String clientId, String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientId + (userName==<span class="keyword">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;:&quot;</span> + userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessToken</span><span class="params">(OAuth2AccessToken accessToken)</span> </span>&#123;</span><br><span class="line">        removeAccessToken(accessToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">readAccessToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2AccessToken) <span class="keyword">this</span>.redisTemplate.opsForValue().get(ACCESS+tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        OAuth2AccessToken removed = (OAuth2AccessToken) redisTemplate.opsForValue().get(ACCESS+tokenValue);</span><br><span class="line">        <span class="comment">// Don&#x27;t remove the refresh token - it&#x27;s up to the caller to do that</span></span><br><span class="line">        OAuth2Authentication authentication = (OAuth2Authentication) <span class="keyword">this</span>.redisTemplate.opsForValue().get(AUTH+tokenValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(AUTH+tokenValue);</span><br><span class="line">        redisTemplate.delete(ACCESS+tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(ACCESS_TO_REFRESH +tokenValue);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (authentication != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.delete(AUTH_TO_ACCESS+authenticationKeyGenerator.extractKey(authentication));</span><br><span class="line"></span><br><span class="line">            String clientId = authentication.getOAuth2Request().getClientId();</span><br><span class="line"><span class="comment">//             redisTemplate.opsForList().rightPush(&quot;UNAME_TO_ACCESS:&quot;+getApprovalKey(authentication), token) ;</span></span><br><span class="line">            redisTemplate.opsForList().leftPop(UNAME_TO_ACCESS+getApprovalKey(clientId, authentication.getName()));</span><br><span class="line">            redisTemplate.opsForList().leftPop(CLIENT_ID_TO_ACCESS+clientId);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.redisTemplate.delete(AUTH_TO_ACCESS+authenticationKeyGenerator.extractKey(authentication));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken, OAuth2Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(REFRESH+refreshToken.getValue(), refreshToken);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set( REFRESH_AUTH + refreshToken.getValue(), authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2RefreshToken <span class="title">readRefreshToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OAuth2RefreshToken) <span class="keyword">this</span>.redisTemplate.opsForValue().get(REFRESH+tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken)</span> </span>&#123;</span><br><span class="line">        removeRefreshToken(refreshToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRefreshToken</span><span class="params">(String tokenValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete( REFRESH + tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete( REFRESH_AUTH + tokenValue);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(REFRESH_TO_ACCESS +tokenValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAccessTokenUsingRefreshToken</span><span class="params">(OAuth2RefreshToken refreshToken)</span> </span>&#123;</span><br><span class="line">        removeAccessTokenUsingRefreshToken(refreshToken.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeAccessTokenUsingRefreshToken</span><span class="params">(String refreshToken)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = (String) <span class="keyword">this</span>.redisTemplate.opsForValue().get( REFRESH_TO_ACCESS  +refreshToken) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (token != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisTemplate.delete(ACCESS+ token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;OAuth2AccessToken&gt; <span class="title">findTokensByClientIdAndUserName</span><span class="params">(String clientId, String userName)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; result =    redisTemplate.opsForList().range(UNAME_TO_ACCESS+ getApprovalKey(clientId, userName), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.&lt;OAuth2AccessToken&gt; emptySet();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;OAuth2AccessToken&gt; accessTokens = <span class="keyword">new</span> ArrayList&lt;OAuth2AccessToken&gt;(result.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Object&gt; it = result.iterator(); it.hasNext();)&#123;</span><br><span class="line">            OAuth2AccessToken accessToken = (OAuth2AccessToken) it.next();</span><br><span class="line">            accessTokens.add(accessToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.&lt;OAuth2AccessToken&gt; unmodifiableCollection(accessTokens);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;OAuth2AccessToken&gt; <span class="title">findTokensByClientId</span><span class="params">(String clientId)</span> </span>&#123;</span><br><span class="line">        List&lt;Object&gt; result =    redisTemplate.opsForList().range((CLIENT_ID_TO_ACCESS+clientId), <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> || result.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.&lt;OAuth2AccessToken&gt; emptySet();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;OAuth2AccessToken&gt; accessTokens = <span class="keyword">new</span> ArrayList&lt;OAuth2AccessToken&gt;(result.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Object&gt; it = result.iterator();it.hasNext();)&#123;</span><br><span class="line">            OAuth2AccessToken accessToken = (OAuth2AccessToken) it.next();</span><br><span class="line">            accessTokens.add(accessToken);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.&lt;OAuth2AccessToken&gt; unmodifiableCollection(accessTokens);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决办法-2：使用-lettuce-替换-jedis"><a href="#解决办法-2：使用-lettuce-替换-jedis" class="headerlink" title="解决办法 2：使用 lettuce 替换 jedis"></a>解决办法 2：使用 lettuce 替换 jedis</h2><p>我们可以使用 Lettuce 来替代 jedis，况且 lettuce 也是 spring boot 2.x 中默认的 redis 客户端。</p>
<h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;&#x2F;exclusion&gt;</span><br><span class="line">    &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- lettuce 客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.lettuce&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lettuce-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.0.5.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- lettuce 客户端 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;biz.paluch.redis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lettuce&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- lettuce 连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件-application-yml"><a href="#配置文件-application-yml" class="headerlink" title="配置文件 application.yml"></a>配置文件 application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">nodes:</span> <span class="number">192.168</span><span class="number">.213</span><span class="number">.13</span><span class="string">:7001,192.168.213.14:7003,192.168.213.21:7006</span></span><br><span class="line">      <span class="attr">max-redirects:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.fengxuechao.examples.auth:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h3 id="配置-LettuceConnectionFactory-和-RedisTokenStore"><a href="#配置-LettuceConnectionFactory-和-RedisTokenStore" class="headerlink" title="配置 LettuceConnectionFactory 和 RedisTokenStore"></a>配置 LettuceConnectionFactory 和 RedisTokenStore</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fengxuechao.examples.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisClusterConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/6/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 lettuce 作为 redis 的连接池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">lettuceConnectionFactory</span><span class="params">(RedisClusterConfiguration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory(configuration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lettuce 集群配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisClusterConfiguration <span class="title">getClusterConfiguration</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        RedisProperties.Cluster clusterProperties = redisProperties.getCluster();</span><br><span class="line">        RedisClusterConfiguration config = <span class="keyword">new</span> RedisClusterConfiguration(clusterProperties.getNodes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clusterProperties.getMaxRedirects() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            config.setMaxRedirects(clusterProperties.getMaxRedirects());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(lettuceConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oauth2</category>
      </categories>
      <tags>
        <tag>oauth2</tag>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Redis的setnx实现分布式锁</title>
    <url>/2021/05/07/%E5%9F%BA%E4%BA%8ERedis%E7%9A%84setnx%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1 id="基于Redis的setnx实现分布式锁"><a href="#基于Redis的setnx实现分布式锁" class="headerlink" title="基于Redis的setnx实现分布式锁"></a>基于Redis的setnx实现分布式锁</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li><p>获取锁的 Redis 命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> resource_name my_random_value NX PX 30000</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>resource_name：资源名称，可根据不同的业务区分不同的锁</li>
<li>my_random_value：随机值，每个线程的随机值都不同，用于释放锁的校验</li>
<li>NX：key 不存在时设置成功，key存在则设置不成功</li>
<li>PX：自动失效时间，出现异常情况，锁可以过期失效</li>
</ul>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>释放锁采用Redis的delete命令</p>
</li>
<li><p>释放锁时校验之前设置的随机数，相同才能释放（确保只能同一个线程才能释放锁）</p>
</li>
<li><p>释放锁的LUA脚本（为什么？因为delete并没有提供校验的功能）</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/QQ20210507-231010@2x.png" alt="原理"></p>
<p>为了防止出现上面这种情况（A释放了B的锁），于是就有了下面的这段代码，释放锁之前检查一下值正不正确。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="根据上述原理，编写分布式锁"><a href="#根据上述原理，编写分布式锁" class="headerlink" title="根据上述原理，编写分布式锁"></a>根据上述原理，编写分布式锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="comment">//单位：秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLock</span><span class="params">(RedisTemplate redisTemplate,String key,<span class="keyword">int</span> expireTime)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.expireTime=expireTime;</span><br><span class="line">        <span class="keyword">this</span>.value = UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分布式锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RedisCallback&lt;Boolean&gt; redisCallback = connection -&gt; &#123;</span><br><span class="line">            <span class="comment">//设置NX</span></span><br><span class="line">            RedisStringCommands.SetOption setOption = RedisStringCommands.SetOption.ifAbsent();</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            Expiration expiration = Expiration.seconds(expireTime);</span><br><span class="line">            <span class="comment">//序列化key</span></span><br><span class="line">            <span class="keyword">byte</span>[] redisKey = redisTemplate.getKeySerializer().serialize(key);</span><br><span class="line">            <span class="comment">//序列化value</span></span><br><span class="line">            <span class="keyword">byte</span>[] redisValue = redisTemplate.getValueSerializer().serialize(value);</span><br><span class="line">            <span class="comment">//执行setnx操作</span></span><br><span class="line">            Boolean result = connection.set(redisKey, redisValue, expiration, setOption);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取分布式锁</span></span><br><span class="line">        Boolean lock = (Boolean)redisTemplate.execute(redisCallback);</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] then\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    return redis.call(\&quot;del\&quot;,KEYS[1])\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;else\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    return 0\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        RedisScript&lt;Boolean&gt; redisScript = RedisScript.of(script,Boolean.class);</span><br><span class="line">        List&lt;String&gt; keys = Arrays.asList(key);</span><br><span class="line"></span><br><span class="line">        Boolean result = (Boolean)redisTemplate.execute(redisScript, keys, value);</span><br><span class="line">        log.info(<span class="string">&quot;释放锁的结果：&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        unLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;redisLock&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">redisLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;我进入了方法！&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (RedisLock redisLock = <span class="keyword">new</span> RedisLock(redisTemplate,<span class="string">&quot;redisKey&quot;</span>,<span class="number">30</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (redisLock.getLock()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;我进入了锁！！&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">15000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;方法执行完成&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;方法执行完成&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过定时任务（spring-task）集群部署校验编写的分布式锁"><a href="#通过定时任务（spring-task）集群部署校验编写的分布式锁" class="headerlink" title="通过定时任务（spring-task）集群部署校验编写的分布式锁"></a>通过定时任务（spring-task）集群部署校验编写的分布式锁</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Springtaskredislock.png"></p>
<p>说明：哪个服务获取锁，就哪个服务执行任务A，来解决任务A重复执行的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(RedisLock redisLock = <span class="keyword">new</span> RedisLock(redisTemplate,<span class="string">&quot;autoSms&quot;</span>,<span class="number">30</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (redisLock.getLock())&#123;</span><br><span class="line">                log.info(<span class="string">&quot;向138xxxxxxxx发送短信！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Zookeeper的Curator客户端实现分布式锁</title>
    <url>/2021/05/16/%E5%9F%BA%E4%BA%8EZookeeper%E7%9A%84Curator%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>curator 是Java语言实现的增强版zookeeper客户端详情见<a href="http://curator.apache.org/">官网</a></p>
<p>curator 的使用步骤：</p>
<ol>
<li>引入curator客户端</li>
<li>curator 已经实现了分布式锁的方法</li>
<li>直接调用即可</li>
</ol>
<span id="more"></span>

<h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCuratorLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">    CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">&quot;localhost:2181&quot;</span>, retryPolicy);</span><br><span class="line">    client.start();</span><br><span class="line">    InterProcessMutex lock = <span class="keyword">new</span> InterProcessMutex(client, <span class="string">&quot;/order&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( lock.acquire(<span class="number">30</span>, TimeUnit.SECONDS) ) &#123;</span><br><span class="line">            <span class="keyword">try</span>  &#123;</span><br><span class="line">                log.info(<span class="string">&quot;我获得了锁！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span>  &#123;</span><br><span class="line">                lock.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>分布式锁</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除正在运行的nginx的日志</title>
    <url>/2020/03/05/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84nginx%E7%9A%84%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>在删除nginx的日志的时候不要直接 <code>rm -f access.log</code>, 而是要 <code>echo &quot;&quot; &gt; access.log</code></p>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Sharding-Jdbc的读写分离和分库分表</title>
    <url>/2021/07/11/%E5%9F%BA%E4%BA%8ESharding-Jdbc%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%92%8C%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>是一个开源的分布式的关系型数据库的中间件</li>
<li>已于2020年4月16日成为 Apache 软件基金会的顶级项目</li>
<li>客户端代理模式</li>
<li>定位为轻量级的Java框架，以 jar 包提供服务</li>
<li>可以理解为增强版的 jdbc 驱动</li>
<li>完全兼容各种 ORM 框架</li>
</ul>
<span id="more"></span>

<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="https://shardingsphere.apache.org/document/current/img/shardingsphere-jdbc-brief.png" alt="ShardingSphere-JDBC Architecture"></p>
<h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><ul>
<li>Java API</li>
<li>Yaml</li>
<li>Spring Boot</li>
<li>Spring</li>
</ul>
<h2 id="与-Mycat-的区别"><a href="#与-Mycat-的区别" class="headerlink" title="与 Mycat 的区别"></a>与 Mycat 的区别</h2><ul>
<li><p>MyCat 是服务端的代理，Sharding-Jdbc 是客户端代理</p>
</li>
<li><p>MyCat 不支持同一库内的水平切分，Sharding-Jdbc 支持</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
        <tag>sharing-jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Zookeeper的瞬时节点实现分布式锁</title>
    <url>/2021/05/12/%E5%9F%BA%E4%BA%8EZookeeper%E7%9A%84%E7%9E%AC%E6%97%B6%E8%8A%82%E7%82%B9%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h1 id="Zookeeper-的数据结构"><a href="#Zookeeper-的数据结构" class="headerlink" title="Zookeeper 的数据结构"></a>Zookeeper 的数据结构</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/UE5cYm.png"></p>
<p>详细内容见官网</p>
<span id="more"></span>

<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/JbLkYC.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/o3SdiJ.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/7D9zYJ.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/X36dAV.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/GUkIWX.png"></p>
<ol>
<li>线程A、B、C、D在zookeeper中的节点序号分别是1、2、3、4。</li>
<li>节点序号最小的线程A 获得锁</li>
<li>线程B 监听序号是1的节点（设置了一个观察器，监听节点1），线程C监听序号是2的节点，以此类推。</li>
<li>线程A执行完任务后，序号为1的节点消失，线程B得到通知，线程B执行任务后，序号为2的节点消失，后续线程以此类推</li>
</ol>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="ZkLock"><a href="#ZkLock" class="headerlink" title="ZkLock"></a>ZkLock</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span>, <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line">    <span class="keyword">private</span> String znode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkLock</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zooKeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">&quot;localhost:2181&quot;</span>,</span><br><span class="line">                <span class="number">10000</span>,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String businessCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建业务 根节点</span></span><br><span class="line">            Stat stat = zooKeeper.exists(<span class="string">&quot;/&quot;</span> + businessCode, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (stat==<span class="keyword">null</span>)&#123;</span><br><span class="line">                zooKeeper.create(<span class="string">&quot;/&quot;</span> + businessCode,businessCode.getBytes(),</span><br><span class="line">                        ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                        CreateMode.PERSISTENT);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建瞬时有序节点  /order/order_00000001</span></span><br><span class="line">            znode = zooKeeper.create(<span class="string">&quot;/&quot;</span> + businessCode + <span class="string">&quot;/&quot;</span> + businessCode + <span class="string">&quot;_&quot;</span>, businessCode.getBytes(),</span><br><span class="line">                    ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                    CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取业务节点下 所有的子节点</span></span><br><span class="line">            List&lt;String&gt; childrenNodes = zooKeeper.getChildren(<span class="string">&quot;/&quot;</span> + businessCode, <span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//子节点排序</span></span><br><span class="line">            Collections.sort(childrenNodes);</span><br><span class="line">            <span class="comment">//获取序号最小的（第一个）子节点</span></span><br><span class="line">            String firstNode = childrenNodes.get(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//如果创建的节点是第一个子节点，则获得锁</span></span><br><span class="line">            <span class="keyword">if</span> (znode.endsWith(firstNode))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不是第一个子节点，则监听前一个节点</span></span><br><span class="line">            String lastNode = firstNode;</span><br><span class="line">            <span class="keyword">for</span> (String node:childrenNodes)&#123;</span><br><span class="line">                <span class="keyword">if</span> (znode.endsWith(node))&#123;</span><br><span class="line">                    zooKeeper.exists(<span class="string">&quot;/&quot;</span>+businessCode+<span class="string">&quot;/&quot;</span>+lastNode,<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    lastNode = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        zooKeeper.delete(znode,-<span class="number">1</span>);</span><br><span class="line">        zooKeeper.close();</span><br><span class="line">        log.info(<span class="string">&quot;我已经释放了锁！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getType() == Event.EventType.NodeDeleted)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeZkLockApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZkLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ZkLock zkLock = <span class="keyword">new</span> ZkLock();</span><br><span class="line">        <span class="keyword">boolean</span> lock = zkLock.getLock(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;获得锁的结果：&quot;</span>+lock);</span><br><span class="line"></span><br><span class="line">        zkLock.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;zkLock&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">zookeeperLock</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;我进入了方法！&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (ZkLock zkLock = <span class="keyword">new</span> ZkLock()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (zkLock.getLock(<span class="string">&quot;order&quot;</span>))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;我获得了锁&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;方法执行完成！&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;方法执行完成！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序启动两个，演示结果：</p>
<p>第一个程序的日志：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/Y2fTpH.png"></p>
<p>第二个程序的日志：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/rYNilY.png"></p>
<p>结论：第一个程序在11:04:51获得锁，10秒后即11:05:01释放锁，第二个程序在11:05:01获得锁，10妙后释放锁。ZkLock已经完成了我们的期望结果。</p>
]]></content>
      <tags>
        <tag>分布式锁</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速清理Linux磁盘空间</title>
    <url>/2020/03/05/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%B8%85%E7%90%86Linux%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><pre><code>在生产环境中,首先服务器磁盘满了之后,会导致一系列小问题,网站能正常访问, 但是不能登录以及一些奇奇怪怪的问题,但是不能耽误用户访问呀,所以我们的及 时清理磁盘空间出来,让MySQL能够正常写入各种数据
</code></pre>
<span id="more"></span>

<p>我们先直接操作,然后在来说说有些什么原因导致磁盘使用很快的原因</p>
<pre><code>首先我们进入到/目录  
df -h 查看我们服务器的磁盘信息--如下字样表示的挂载点已经满了
    /dev/vda1        40G  40G   0G  100% /
接下来我们在进行筛选,看看到底是什么文件占用比较大,能删除的话我们可以直接先删除掉
du -h --max-depth=1 我们在查看当前目录下具体是哪一个目录里面占用比较大
第一次执行的时候可能会有一点点慢,不着急,耐心等待一下,显示出来的第一列就是该目录占用的总共大小,第二列就是目录
最后一行的时候我们会看到.这个目录下,这个我们可以忽略掉,不要问我为什么能忽略
查看你的具体是哪一个目录占用比较大,那我们就进入到哪一个目录
进入当目录之后还是使用  du -h --max-depth=1  来进行筛选查看目录下是文件还是目录占用大,如果是目录继续进行筛选
筛选之后可以使用 ls –lhS 来进行文件从大到小排序,如果文件没有必要的用处的时候我们就可以对其进行删除操作了
</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>其实在本次素材中,我们使用的到的Linux命令就四个</p>
<pre><code>cd / 进入到根目录
df -h 查看当前磁盘情况
du -h --max-depth=1 查看当前目录下各目录的大小
ls –lhS 查看当前目录下最大的文件
接下来我们来分析一下有哪些原因会造成磁盘占用快
    1,生产环境中是否还是开启了不必要的日志记录,除了要做数据分析的日志其他日志能关就关掉
    2,是否存在僵尸文件,即已删除文件因句柄被占用未释放导致相应空间未释放。
    3,数据库中是否存在很多垃圾信息没及时清理掉,建议在开发阶段中不要使用生产环境的库
    4,是否有生成很多静态页面?
    5,省略N字,写的不好的地方,欢迎大家补充
</code></pre>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何选择垂直切分、水平切分</title>
    <url>/2021/06/02/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%9E%82%E7%9B%B4%E5%88%87%E5%88%86%E3%80%81%E6%B0%B4%E5%B9%B3%E5%88%87%E5%88%86/</url>
    <content><![CDATA[<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609203437856.png" alt="image-20210609203437856"></p>
<span id="more"></span>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609203518477.png" alt="image-20210609203518477"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609203627840.png" alt="image-20210609203627840"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609203818160.png" alt="image-20210609203818160"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609203917144.png" alt="image-20210609203917144"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609204108318.png" alt="image-20210609204108318"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609204402101.png" alt="image-20210609204402101"></p>
]]></content>
      <categories>
        <category>mycat</category>
      </categories>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>对象池 commons-pool2</title>
    <url>/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0-commons-pool2/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>池化技术是性能调优的重要措施，池化的思想是把对象放到池子里面，当要使用的时候从池子里面拿对象，用完之后在放回池子里面。这样可以降低资源分配和释放资源的开销，从而提升性能。</p>
<span id="more"></span>

<p>在实际的项目中，我们每天都会接触到池化技术，例如：</p>
<ul>
<li>对象池：通过复用对象，减少对象创建、垃圾回收的开销</li>
<li>线程池：通过复用线程来提升性能</li>
<li>连接池：如数据库连接池、Redis连接池、HTTP连接池，通过复用TCP连接来减少创建和释放连接的时间来提升性能</li>
</ul>
<h1 id="2-对象池-适用场景"><a href="#2-对象池-适用场景" class="headerlink" title="2 对象池 - 适用场景"></a>2 对象池 - 适用场景</h1><ul>
<li>维护一些很大、创建很慢的的对象来提升性能</li>
<li>缺点：有学习成本、增加了代码复杂度</li>
</ul>
<h1 id="3-commons-pool2"><a href="#3-commons-pool2" class="headerlink" title="3 commons-pool2"></a>3 commons-pool2</h1><ul>
<li>Apache 基金会开源的对象池框架</li>
<li>官网：<a href="https://commons.apache.org/proper/commons-pool/">https://commons.apache.org/proper/commons-pool/</a></li>
<li>Github：<a href="https://github.com/apache/commons-pool">https://github.com/apache/commons-pool</a></li>
</ul>
<p>commons-pool2 提供了两种对象池：</p>
<h2 id="3-1-ObjectPool-接口"><a href="#3-1-ObjectPool-接口" class="headerlink" title="3.1 ObjectPool 接口"></a>3.1 ObjectPool 接口</h2><p>ObjectPool 是一个接口</p>
<h3 id="3-1-1-实现类介绍"><a href="#3-1-1-实现类介绍" class="headerlink" title="3.1.1 实现类介绍"></a>3.1.1 实现类介绍</h3><table>
<thead>
<tr>
<th>实现类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BaseObjectPool</td>
<td>抽象类，用来扩展自己的对象池</td>
</tr>
<tr>
<td>ErodingObjectPool</td>
<td>“腐蚀”对象池，代理一个对象池，并基于factor参数，为其添加“腐蚀”行为。归还的对象被腐蚀后，将会丢弃，而不是添加到空闲容量中。</td>
</tr>
<tr>
<td><strong>GenericObjectPool</strong></td>
<td>一个可配置的通用对象池实现</td>
</tr>
<tr>
<td>ProxiedObjectPool</td>
<td>代理一个其它的对象池，并基于动态代理（支持JDK代理和Cglib代理），返回一个代理后的对象。该对象池主要用来增强对池化对象的控制，比如防止在归还该对象后，还继续使用该对象等行为。</td>
</tr>
<tr>
<td>SoftReferenceObjectPool</td>
<td>基于软引用的对象池</td>
</tr>
<tr>
<td>SynchroizedObjectPool</td>
<td>代理一个其它的对象池，并为其提供线程安全的能力</td>
</tr>
</tbody></table>
<h3 id="3-1-2-核心API"><a href="#3-1-2-核心API" class="headerlink" title="3.1.2 核心API"></a>3.1.2 核心API</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>borrowObject()</td>
<td>从对象池借对象</td>
</tr>
<tr>
<td>returnObject()</td>
<td>将对象归还到对象池</td>
</tr>
<tr>
<td>invalidateObject()</td>
<td>失效一个对象</td>
</tr>
<tr>
<td>addObject()</td>
<td>增加一个空闲对象，该方法适用于使用空闲对象预加载对象池</td>
</tr>
<tr>
<td>clear()</td>
<td>清空空闲的所有对象，并释放相关资源</td>
</tr>
<tr>
<td>close()</td>
<td>关闭对象池，并释放相关资源</td>
</tr>
<tr>
<td>getNumIdIe()</td>
<td>获得空闲的对象数量</td>
</tr>
<tr>
<td>getNumActive()</td>
<td>获得被借出对象数量</td>
</tr>
</tbody></table>
<h2 id="3-2-KeyedObjectPool"><a href="#3-2-KeyedObjectPool" class="headerlink" title="3.2 KeyedObjectPool"></a>3.2 KeyedObjectPool</h2><p>它和ObejectPool的区别在于它是通过 Key 来找对象的。从设计上的角度看，KeyedObjectPool 和 ObjectPool 没有多少区别，它有以下实现类：</p>
<table>
<thead>
<tr>
<th>实现类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ErodingKeyedObjectPool</td>
<td>类似ErodingObjectPool</td>
</tr>
<tr>
<td>GenericKeyedObjectPool</td>
<td>类似GenericObjectPool</td>
</tr>
<tr>
<td>ProxiedKeyedObjectPool</td>
<td>类似ProxiedObjectPool</td>
</tr>
<tr>
<td>SynchroizedKeyedObjectPool</td>
<td>类似SynchroizedObjectPool</td>
</tr>
</tbody></table>
<h3 id="3-2-1-PooledObjectFactory"><a href="#3-2-1-PooledObjectFactory" class="headerlink" title="3.2.1 PooledObjectFactory"></a>3.2.1 PooledObjectFactory</h3><table>
<thead>
<tr>
<th>实现类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>BasePooledObjectFactory</td>
<td>抽象类，用于扩展自己的PooledObjectFactory</td>
</tr>
<tr>
<td>PoolUtils.SynchronizedPooledObjectFactory</td>
<td>内部类，代理一个其它的PooledObjectFactory，实现线程同步，用 <code>PoolUtils.synchronizedPooledFactory()</code>创建</td>
</tr>
</tbody></table>
<h3 id="3-2-2-PooledObjectFactory-核心API"><a href="#3-2-2-PooledObjectFactory-核心API" class="headerlink" title="3.2.2 PooledObjectFactory 核心API"></a>3.2.2 PooledObjectFactory 核心API</h3><table>
<thead>
<tr>
<th>方案名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>makeObject</td>
<td>创建一个对象实例，并将其包装成一个PooledObject</td>
</tr>
<tr>
<td>destroyObject</td>
<td>销毁对象</td>
</tr>
<tr>
<td>validateObject</td>
<td>校验对象，确保对象池返回的对象是OK的</td>
</tr>
<tr>
<td>activeObject</td>
<td>重新初始化对象</td>
</tr>
<tr>
<td>passivated</td>
<td>取消初始化对象。GenriObjectPool 的 addIdIeObject、returnObject、evict调用该方法</td>
</tr>
</tbody></table>
<h3 id="3-2-3-PooledObject"><a href="#3-2-3-PooledObject" class="headerlink" title="3.2.3 PooledObject"></a>3.2.3 PooledObject</h3><table>
<thead>
<tr>
<th>实现类</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>DefaultPooledObject</td>
<td>包装原始对象，实现监控（例如创建时间、使用时间等）、状态跟踪等</td>
</tr>
<tr>
<td>PooledSoftReferenceObject</td>
<td>进一步封装了DefaultPooledObject，用来和SoftReferenceObjectPool配置使用</td>
</tr>
</tbody></table>
<p><strong>PooledObject状态</strong></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801162749626.png" alt="image-20210801162749626"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801162852280.png" alt="image-20210801162852280"></p>
<h3 id="3-2-2-示例代码"><a href="#3-2-2-示例代码" class="headerlink" title="3.2.2 示例代码"></a>3.2.2 示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 对象</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Money <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 假设对象new非常耗时</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">10L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Money(<span class="string">&quot;USD&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String type;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Money</span><span class="params">(String type, BigDecimal amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略 getter,setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 对象池工厂类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoneyPooledObjectFactory</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">PooledObjectFactory</span>&lt;<span class="title">Money</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER =</span><br><span class="line">    LoggerFactory.getLogger(MoneyPooledObjectFactory.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PooledObject&lt;Money&gt; <span class="title">makeObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    DefaultPooledObject&lt;Money&gt; object = <span class="keyword">new</span> DefaultPooledObject&lt;&gt;(</span><br><span class="line">      <span class="keyword">new</span> Money(<span class="string">&quot;USD&quot;</span>, <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">    );</span><br><span class="line">    LOGGER.info(<span class="string">&quot;makeObject..state = &#123;&#125;&quot;</span>, object.getState());</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyObject</span><span class="params">(PooledObject&lt;Money&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;destroyObject..state = &#123;&#125;&quot;</span>, p.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateObject</span><span class="params">(PooledObject&lt;Money&gt; p)</span> </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;validateObject..state = &#123;&#125;&quot;</span>, p.getState());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activateObject</span><span class="params">(PooledObject&lt;Money&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;activateObject..state = &#123;&#125;&quot;</span>, p.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">passivateObject</span><span class="params">(PooledObject&lt;Money&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">&quot;passivateObject..state = &#123;&#125;&quot;</span>, p.getState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 测试类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonsPool2Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    GenericObjectPool&lt;Money&gt; pool = <span class="keyword">new</span> GenericObjectPool&lt;&gt;(<span class="keyword">new</span> MoneyPooledObjectFactory());</span><br><span class="line">    Money money = pool.borrowObject();</span><br><span class="line">    money.setType(<span class="string">&quot;RMB&quot;</span>);</span><br><span class="line">    pool.returnObject(money);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 测试结果</span><br><span class="line">  </span><br><span class="line">makeObject..state = IDLE</span><br><span class="line">activateObject..state = ALLOCATED</span><br><span class="line">passivateObject..state = RETURNING</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-3-commons-pool2-小结"><a href="#3-3-commons-pool2-小结" class="headerlink" title="3.3 commons-pool2 小结"></a>3.3 commons-pool2 小结</h2><ul>
<li><p>ObjectPool：对象池</p>
<ul>
<li>最核心：GenericObjectPool、GenericKeyedObjectPool</li>
</ul>
</li>
<li><p>Factory：创建和管理 PooledObject</p>
<ul>
<li>一般要自己扩展</li>
</ul>
</li>
<li><p>PooledObject：包装原有的对象，从而让对象池管理</p>
<ul>
<li>一般用 DefaultPooledObject</li>
</ul>
</li>
</ul>
<p>只要掌握这三点，一般就没有问题了</p>
<h2 id="3-4-commons-pool2-配置"><a href="#3-4-commons-pool2-配置" class="headerlink" title="3.4 commons-pool2 配置"></a>3.4 commons-pool2 配置</h2><h3 id="3-4-1-GenericObjectPoolPoolConfig"><a href="#3-4-1-GenericObjectPoolPoolConfig" class="headerlink" title="3.4.1 GenericObjectPoolPoolConfig"></a>3.4.1 GenericObjectPoolPoolConfig</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801211018346.png" alt="image-20210801211018346"></p>
<h3 id="3-4-2-AbandonedConfig"><a href="#3-4-2-AbandonedConfig" class="headerlink" title="3.4.2 AbandonedConfig"></a>3.4.2 AbandonedConfig</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801211157285.png" alt="image-20210801211157285"></p>
<h3 id="3-4-3-注意点"><a href="#3-4-3-注意点" class="headerlink" title="3.4.3 注意点"></a>3.4.3 注意点</h3><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801211531498.png" alt="image-20210801211531498"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801211544503.png" alt="image-20210801211544503"></p>
<h2 id="3-5-Abandon-与-Evict-区别"><a href="#3-5-Abandon-与-Evict-区别" class="headerlink" title="3.5 Abandon 与 Evict 区别"></a>3.5 Abandon 与 Evict 区别</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801212906811.png" alt="image-20210801212906811"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801212937024.png" alt="image-20210801212937024"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210801213320219.png" alt="image-20210801213320219"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>池化技术</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确的使用数据库读写分离</title>
    <url>/2021/06/01/%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在应用系统发展的初期，我们并不知道以后会发展成什么样的规模，所以一开始不会考虑复杂的系统架构，复杂的系统架构费时费力，开发周期长，与系统发展初期这样的一个定位是不吻合的。所以，我们都会采用简单的架构，随着业务不断的发展，访问量不断升高，我们再对系统进行架构方面的优化。</p>
<span id="more"></span>

<h2 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h2><p>系统建立初期，我们的架构都非常的简单，主要满足业务的正常运行，如图：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df9908809a639d103740410.png" alt="图片描述"></p>
<p>但是随着访问量的升高，人们对系统的可靠性有了更高的要求，所以，我们为了避免单点故障，对系统应用层进行了横向的扩展，如图：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df990ab09b00b2c06110402.png" alt="图片描述"></p>
<p>这样，保证了系统应用层的高可用，在发生宕机，或者系统升级时，系统对外还是可用的。而且在访问量升高的时候，系统应用层的压力也会得到分摊，使得每一个单体的系统应用的压力在一个合理的区间范围内。</p>
<p>但是，随着访问量的升高，所有的压力都将集中到数据库这一层。那么数据库这一层，我们要怎么处理呢？能不能像系统应用层那样进行扩展呢？答案当然时否定的，我们想象一下，如果数据库层也像系统应用层那样，进行横向扩展，如图：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df990b709adf1c707330476.png" alt="图片描述"></p>
<p>那么，如果系统应用层产生了一条数据，这条数据应该插入到DB1还是DB2呢？假设插入了DB1，那么这条数据被读取时，应用层怎么知道从哪个数据库读取这条数据呢？问题是不是很复杂，如果数据库不进行扩展，那么一台数据库是承载不了这么大的访问量的，那我们怎么办呢？</p>
<h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><p>办法总比问题多，随着互联网技术的发展，以及一代代互联网人对互联网的深入研究，人们发现在互联网的系统应用是一个读多写少的应用，比如咱们课程中的电商系统，商品浏览的次数是比下单要多的。数据库承载压力大，主要是由这些读的请求造成的，那么我们是不是可以把读操作和写操作分开，让所有读的请求落到专门负责读的数据库上，所有写的操作落到专门负责写的数据库上，写库的数据同步到读库上，这样保证所有的数据修改都可以在读取时，从读库获得，系统的架构如图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df990e40908a82b07740499.png" alt="图片描述"></p>
<p>如果系统的读请求比较多的话，读库可以多部署几台，这样读请求就可以均摊到多台读库上，降低每一个读库上的压力。但是在写数据的时候，数据要落在一个确定，且唯一的写库中。上图中，咱们的写库只有一个，你当然可以部署多个写库，但是数据怎么分片是一个十分重要的问题，这个问题我们在后续的课程中会给大家做介绍。目前仅以一个写库为例，比如：商户发布商品时，将这个商品的数据落在了写库上，同时，写库将这条数据同步给两个读库，买家在网站浏览商品时，会从读库将这个商品数据读取。至于从哪个读库取出数据，那就要看这个请求在当时的路由情况了。</p>
<p>总之，将大量的读操作从数据库中剥离，让读操作从专用的读数据库中读取数据，大大缓解了数据库的访问压力，也使得读取数据的响应速度得到了大大的提升。那么读写分离有什么弊端吗？是不是所有的场景都适用读写分离这种架构呢？</p>
<h2 id="读写分离的弊端"><a href="#读写分离的弊端" class="headerlink" title="读写分离的弊端"></a>读写分离的弊端</h2><p>读写分离给我们带来的好处是很多的，我们对比一下原始的架构和读写分离的架构，从数据流上看，他们的区别是，数据从写入到数据库，到从数据库取出，读写分离的架构多了一个同步的操作。大家想一想，同步操作的时间是多少，延迟如果太大对系统有没有影响，如果同步挂了怎么办？老师举一个亲身经历的案例，那时老师在做个人中心的订单列表页，这个功能挺简单，只需要把订单数据取出来，在页面上展示就可以了。但是在做的时候，订单以及订单相关的数据都是从读库取出的，其中就包括支付状态，这个用户非常敏感的字段。就在某一天的某一个时段，突然接到了用户大量的投诉，说用户已经付了钱了，但是订单的状态还是未支付。我也觉得很奇怪，马上要了一个订单号，去数据库里查询，发现订单状态就是未支付呀，没有问题，过了一会，为了保险起见，我还是去写库再查一下这个订单吧，发现写库的订单状态确实是已支付，这下完了，写库和读取的数据不一致，我马上通知DBA，让他去查数据库，他的反馈是同步挂掉了。</p>
<p>大家看到了吧，这就是读写分离的弊端，当同步挂掉，或者同步延迟比较大时，写库和读库的数据不一致，这个数据的不一致，用户能不能接受，订单支付状态这个不一致当然是不能接受的了，其他的业务场景能不能接受呢？这个要对不同的业务场景做具体的分析了。</p>
<h2 id="如何正确的使用读写分离"><a href="#如何正确的使用读写分离" class="headerlink" title="如何正确的使用读写分离"></a>如何正确的使用读写分离</h2><p>一些对数据实时性要求不高的业务场景，可以考虑使用读写分离。但是对数据实时性要求比较高的场景，比如订单支付状态，还是不建议采用读写分离的，或者你在写程序时，老老实实的从写库去读取数据。我也咨询过专门做数据同步的机构，他们给出的建议是，如果你做数据的同步，你的网络延迟应该在5ms以内，这个对网络环境要求是非常高的，大家可以ping一下你网络中的其他机器，看看能不能达到这个标准。如果你的网络环境很好，达到了要求，那么使用读写分离是没有问题的，数据几乎是实时同步到读库，根本感觉不到延迟。</p>
<p>读写分离呢，就给大家介绍到这，大家在使用的时候，还是要从业务出发，看看你的业务是否适合使用读写分离，每种技术架构都有自己的优缺点，没有好不好，只有适合不适合。只有适合业务的架构才是好的架构。</p>
]]></content>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
      </tags>
  </entry>
  <entry>
    <title>对象池实战-编写一个数据库连接池</title>
    <url>/2021/08/01/%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9E%E6%88%98-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通过对象池编写一个数据库连接池，深入学习，巩固对象池用法。</p>
<ul>
<li><p>能代替其它数据库连接池产品</p>
<ul>
<li>Hikari、DBCP、Tomcat、Druid…</li>
</ul>
</li>
<li><p>带监控，随时了解了解连接池的情况</p>
</li>
</ul>
<h1 id="ConnectionPooledObjectFactory"><a href="#ConnectionPooledObjectFactory" class="headerlink" title="ConnectionPooledObjectFactory"></a>ConnectionPooledObjectFactory</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPooledObjectFactory</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">PooledObjectFactory</span>&lt;<span class="title">MyConnection</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ObjectPool&lt;MyConnection&gt; objectPool;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ObjectPool&lt;MyConnection&gt; <span class="title">getObjectPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> objectPool;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectPool</span><span class="params">(ObjectPool&lt;MyConnection&gt; objectPool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.objectPool = objectPool;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PooledObject&lt;MyConnection&gt; <span class="title">makeObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    Connection connection = DriverManager.getConnection(</span><br><span class="line">      <span class="string">&quot;jdbc:mysql://localhost:3306/xxxx?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;root&quot;</span>,</span><br><span class="line">      <span class="string">&quot;root123&quot;</span></span><br><span class="line">    );</span><br><span class="line">    MyConnection myConnection = <span class="keyword">new</span> MyConnection();</span><br><span class="line">    myConnection.setConnection(connection);</span><br><span class="line">    myConnection.setObjectPool(objectPool);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultPooledObject&lt;&gt;(myConnection);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyObject</span><span class="params">(PooledObject&lt;MyConnection&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    p.getObject().close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateObject</span><span class="params">(PooledObject&lt;MyConnection&gt; p)</span> </span>&#123;</span><br><span class="line">    Connection connection = p.getObject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      PreparedStatement statement = connection.prepareStatement(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line">      ResultSet resultSet = statement.executeQuery();</span><br><span class="line">      <span class="keyword">int</span> i = resultSet.getInt(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> i == <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activateObject</span><span class="params">(PooledObject&lt;MyConnection&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 可以把connection额外的配置放到这里</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">passivateObject</span><span class="params">(PooledObject&lt;MyConnection&gt; p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 钝化</span></span><br><span class="line">    MyConnection myConnection = p.getObject();</span><br><span class="line">    Statement statement = myConnection.getStatement();</span><br><span class="line">    <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">      statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="MyDataSource"><a href="#MyDataSource" class="headerlink" title="MyDataSource"></a>MyDataSource</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSource</span> <span class="keyword">implements</span> <span class="title">DataSource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> GenericObjectPool&lt;MyConnection&gt; pool;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> GenericObjectPool&lt;MyConnection&gt; <span class="title">getPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPool</span><span class="params">(GenericObjectPool&lt;MyConnection&gt; pool)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pool = pool;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConnectionPooledObjectFactory factory = <span class="keyword">new</span> ConnectionPooledObjectFactory();</span><br><span class="line">    <span class="keyword">this</span>.pool = <span class="keyword">new</span> GenericObjectPool&lt;&gt;(factory);</span><br><span class="line">    factory.setObjectPool(pool);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.pool.borrowObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="string">&quot;获取连接失败！&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getConnection();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span><span class="params">(<span class="keyword">int</span> seconds)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支持的操作！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="MyConnection"><a href="#MyConnection" class="headerlink" title="MyConnection"></a>MyConnection</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 回收statement</span></span><br><span class="line"><span class="comment">// 2. 回收resultSet</span></span><br><span class="line"><span class="comment">// 3. 复用Connection</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Connection connection;</span><br><span class="line">  <span class="keyword">private</span> Statement statement;</span><br><span class="line">  <span class="keyword">private</span> ObjectPool&lt;MyConnection&gt; objectPool;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 篇幅有限，省略其它方法</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.connection.createStatement();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement prepareStatement = <span class="keyword">this</span>.connection.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">this</span>.statement = prepareStatement;</span><br><span class="line">    <span class="keyword">return</span> prepareStatement;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, String[] columnNames)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement statement = <span class="keyword">this</span>.connection.prepareStatement(sql, columnNames);</span><br><span class="line">    <span class="keyword">this</span>.statement = statement;</span><br><span class="line">    <span class="keyword">return</span> statement;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果底层的Connection已经关闭</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isClosed()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        objectPool.invalidateObject(<span class="keyword">this</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 底层Connection没有关闭，可以继续复用</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        objectPool.returnObject(<span class="keyword">this</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.connection.close();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DMDataSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="如何使用-spring-boot-starter-actuator-添加监控？"><a href="#如何使用-spring-boot-starter-actuator-添加监控？" class="headerlink" title="如何使用 spring-boot-starter-actuator 添加监控？"></a>如何使用 <code>spring-boot-starter-actuator</code> 添加监控？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以用/actuator/datasource</span></span><br><span class="line"><span class="meta">@Endpoint(id = &quot;datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceEnpoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MyDataSource dataSource;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataSourceEnpoint</span><span class="params">(MyDataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ReadOperation</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">pool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    GenericObjectPool&lt;MyConnection&gt; pool = dataSource.getPool();</span><br><span class="line">    HashMap&lt;String, Object&gt; map = Maps.newHashMap();</span><br><span class="line">    map.put(<span class="string">&quot;numActive&quot;</span>, pool.getNumActive());</span><br><span class="line">    map.put(<span class="string">&quot;numIdle&quot;</span>, pool.getNumIdle());</span><br><span class="line">    map.put(<span class="string">&quot;createdCount&quot;</span>, pool.getCreatedCount());</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>池化技术</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</title>
    <url>/2021/05/28/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAI%20O%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B61%EF%BC%9ASocket%E5%92%8CServerSocket%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%81%8A/</url>
    <content><![CDATA[<h1 id="手动搭建I-O网络通信框架1：Socket和ServerSocket入门实战，实现单聊"><a href="#手动搭建I-O网络通信框架1：Socket和ServerSocket入门实战，实现单聊" class="headerlink" title="手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊"></a>手动搭建I/O网络通信框架1：Socket和ServerSocket入门实战，实现单聊</h1><blockquote>
<p>转载自<a href="https://www.cnblogs.com/lbhym/p/12673470.html">https://www.cnblogs.com/lbhym/p/12673470.html</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个基础项目会作为BIO、NIO、AIO的一个前提，后面会有数篇博客会基于这个小项目利用BIO、NIO、AIO进行改造升级。</p>
<p>简单的说一下io，了解的直接跳过看代码吧:IO常见的使用场景就是网络通信或读取文件等方面。IO流分为字节流和字符流。字节即Byte，包含八位二进制数，一个二进制数就是1bit，中文名称叫位。字符即一个字母或者一个汉字。一个字母由一个字节组成，而汉字根据编码不同由2个或者3个组成。Java.io包如下:详细的API可自行查阅资料</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200410142107890-242008210.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410142107890-242008210.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200410142126015-790268014.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410142126015-790268014.png"></p>
<p><strong>Socket定义</strong>：套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</p>
<p><strong>可以理解为两台机器或进程间进行网络通信的端点，这个端点包含IP地址和端口号。</strong></p>
<p>Socket和ServerSocket区别就如其名字一样，简单地说ServerSocket作用在服务端，用以监听客户端的请求。Socket作用在客户端和服务端，用以发送接收消息。但是就像上面说的，它们都要包含一个IP地址和端口号。</p>
<h1 id="Socket和ServerSocket实战："><a href="#Socket和ServerSocket实战：" class="headerlink" title="Socket和ServerSocket实战："></a><strong>Socket和ServerSocket实战：</strong></h1><p>首先创建一个最普通的Java项目。然后创建两个类，Server和Client。其代码和注释如下,仔细看下注释和代码，还是比较简单的</p>
<p>服务器只能为一个客户端服务，一旦监听到客户端的请求，就会一直被这个客户端占用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这是服务端的IP和端口</span></span><br><span class="line">        <span class="keyword">final</span> String DEFAULT_SERVER_HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_SERVER_PORT = <span class="number">8888</span>;</span><br><span class="line">        <span class="comment">//创建Socket</span></span><br><span class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(DEFAULT_SERVER_HOST, DEFAULT_SERVER_PORT)) &#123;</span><br><span class="line">            <span class="comment">//接收消息</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(socket.getInputStream())</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//发送消息</span></span><br><span class="line">            BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream())</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//获取用户输入的消息</span></span><br><span class="line">            BufferedReader userReader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(System.in)</span><br><span class="line">            );</span><br><span class="line">            String msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//循环的话客户端就可以一直输入消息，不然执行完try catch会自动释放资源，也就是断开连接</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String input = userReader.readLine();</span><br><span class="line">                <span class="comment">//写入客户端要发送的消息。因为服务端用readLine获取消息，其以\n为终点，所以要在消息最后加上\n</span></span><br><span class="line">                writer.write(input + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                writer.flush();</span><br><span class="line">                msg = reader.readLine();</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">                <span class="comment">//如果客户端输入quit就可以跳出循环、断开连接了</span></span><br><span class="line">                <span class="keyword">if</span>(input.equals(<span class="string">&quot;quit&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">8888</span>;</span><br><span class="line">        <span class="comment">//创建ServerSocket监听8888端口</span></span><br><span class="line">        <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(DEFAULT_PORT)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ServerSocket Start,The Port is:&quot;</span> + DEFAULT_PORT);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//不停地监听该端口</span></span><br><span class="line">                <span class="comment">//阻塞式的监听，如果没有客户端请求就一直停留在这里</span></span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                System.out.println(<span class="string">&quot;Client[&quot;</span> + socket.getPort() + <span class="string">&quot;]Online&quot;</span>);</span><br><span class="line">                <span class="comment">//接收消息</span></span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                        <span class="keyword">new</span> InputStreamReader(socket.getInputStream())</span><br><span class="line">                );</span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">                BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                        <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream())</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                String msg = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span> ((msg = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Client[&quot;</span> + socket.getPort() + <span class="string">&quot;]:&quot;</span> + msg);</span><br><span class="line">                    <span class="comment">//写入服务端要发送的消息</span></span><br><span class="line">                    writer.write(<span class="string">&quot;Server:&quot;</span> + msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    <span class="comment">//如果客户端的消息是quit代表他退出了，并跳出循环，不用再接收他的消息了。如果客户端再次连接就会重新上线</span></span><br><span class="line">                    <span class="keyword">if</span> (msg.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;Client[&quot;</span> + socket.getPort() + <span class="string">&quot;]:Offline&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后打开两个命令终端，通过javac编译后，一个运行Server代表服务器，一个运行Client代表客户端。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200410144802569-1725038127.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410144802569-1725038127.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200410144811290-2056832827.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200410144811290-2056832827.png"></p>
<p>下一篇 <a href="%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAI%20O%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B62%EF%BC%9ABIO%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E7%BE%A4%E8%81%8A%202d2b7fd177844b1ab85c0276e7ae1e7b.md">手动搭建I/O网络通信框架2：BIO编程模型实现群聊</a>  。</p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建I/O网络通信框架2：BIO编程模型实现群聊</title>
    <url>/2021/05/28/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAI%20O%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B62%EF%BC%9ABIO%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E7%BE%A4%E8%81%8A/</url>
    <content><![CDATA[<h1 id="手动搭建I-O网络通信框架2：BIO编程模型实现群聊"><a href="#手动搭建I-O网络通信框架2：BIO编程模型实现群聊" class="headerlink" title="手动搭建I/O网络通信框架2：BIO编程模型实现群聊"></a>手动搭建I/O网络通信框架2：BIO编程模型实现群聊</h1><blockquote>
<p>转载自<a href="https://www.cnblogs.com/lbhym/p/12681787.html">https://www.cnblogs.com/lbhym/p/12681787.html</a></p>
</blockquote>
<h1 id="手动搭建I-O网络通信框架2：BIO编程模型实现群聊-1"><a href="#手动搭建I-O网络通信框架2：BIO编程模型实现群聊-1" class="headerlink" title="手动搭建I/O网络通信框架2：BIO编程模型实现群聊"></a><strong>手动搭建I/O网络通信框架2：BIO编程模型实现群聊</strong></h1><p>在第一章中运用Socket和ServerSocket简单的实现了网络通信。这一章，利用BIO编程模型进行升级改造，实现群聊聊天室。</p>
<p>所谓BIO，就是Block IO，阻塞式的IO。这个阻塞主要发生在：ServerSocket接收请求时（accept()方法）、InputStream、OutputStream（输入输出流的读和写）都是阻塞的。这个可以在下面代码的调试中发现，比如在客户端接收服务器消息的输入流处打上断点，除非服务器发来消息，不然断点是一直停在这个地方的。也就是说这个线程在这时间是被阻塞的。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411190359629-713089288.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411190359629-713089288.png"></p>
<p>如图：当一个客户端请求进来时，接收器会为这个客户端分配一个工作线程，这个工作线程专职处理客户端的操作。在上一章中，服务器接收到客户端请求后就跑去专门服务这个客户端了，所以当其他请求进来时，是处理不到的。</p>
<p>看到这个图，很容易就会想到线程池，BIO是一个相对简单的模型，实现它的关键之处也在于线程池。</p>
<p>在上代码之前，先大概说清楚每个类的作用，以免弄混淆。更详细的说明，都写在注释当中。</p>
<h2 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a><strong>服务器端：</strong></h2><p>ChatServer:这个类的作用就像图中的Acceptor。它有两个比较关键的全局变量，一个就是存储在线用户信息的Map，一个就是线程池。这个类会监听端口，接收客户端的请求，然后为客户端分配工作线程。还会提供一些常用的工具方法给每个工作线程调用，比如：发送消息、添加在线用户等。我之前简单用过Netty和WebSocket，这个类看上去就已经和这些框架有点相似了。学习IO编程模型也是为了接下来深入学习Netty做准备。</p>
<p>ChatHandler:这个类就是工作线程的类。在这个项目中，它的工作很简单：把接收到的消息转发给其他客户端，当然还有一些小功能，比如添加\移除在线用户。</p>
<h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a><strong>客户端：</strong></h2><p>相较于服务器，客户端的改动较小，主要是把等待用户输入信息这个功能分到其他线程做，不然这个功能会一直阻塞主线程，导致无法接收其他客户端的消息。</p>
<p>ChatClient:客户端启动类，也就是主线程，会通过Socket和服务器连接。也提供了两个工具方法：发送消息和接收消息。</p>
<p>UserInputHandler:专门负责等待用户输入信息的线程，一旦有信息键入，就马上发送给服务器。</p>
<p>首先创建两个包区分一下客户端和服务器，client和server</p>
<p><strong>服务器端ChatServer：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> DEFAULT_PORT = <span class="number">8888</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个Map存储在线用户的信息。这个map可以统计在线用户、针对这些用户可以转发其他用户发送的消息</span></span><br><span class="line"><span class="comment">     * 因为会有多个线程操作这个map，所以为了安全起见用ConcurrentHashMap</span></span><br><span class="line"><span class="comment">     * 在这里key就是客户端的端口号，但在实际中肯定不会用端口号区分用户，如果是web的话一般用session。</span></span><br><span class="line"><span class="comment">     * value是IO的Writer，用以存储客户端发送的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Writer&gt; map=<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建线程池，线程上限为10个，如果第11个客户端请求进来，服务器会接收但是不会去分配线程处理它。</span></span><br><span class="line"><span class="comment">     * 前10个客户端的聊天记录，它看不见。当有一个客户端下线时，这第11个客户端就会被分配线程，服务器显示在线</span></span><br><span class="line"><span class="comment">     * 大家可以把10再设置小一点，测试看看</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executorService= Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//客户端连接时往map添加客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClient</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            BufferedWriter writer = <span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream())</span><br><span class="line">            );</span><br><span class="line">            map.put(socket.getPort(), writer);</span><br><span class="line">            System.out.println(<span class="string">&quot;Client[&quot;</span>+socket.getPort()+<span class="string">&quot;]:Online&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开连接时map里移除客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeClient</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(socket.getPort())) &#123;</span><br><span class="line">                map.get(socket.getPort()).close();</span><br><span class="line">                map.remove(socket.getPort());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Client[&quot;</span> + socket.getPort() + <span class="string">&quot;]Offline&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发客户端消息，这个方法就是把消息发送给在线的其他的所有客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Socket socket, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//遍历在线客户端</span></span><br><span class="line">        <span class="keyword">for</span> (Integer port : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">//发送给在线的其他客户端</span></span><br><span class="line">            <span class="keyword">if</span> (port != socket.getPort()) &#123;</span><br><span class="line">                Writer writer = map.get(port);</span><br><span class="line">                writer.write(msg);</span><br><span class="line">                writer.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收客户端请求，并分配Handler去处理请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(DEFAULT_PORT)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Server Start,The Port is:&quot;</span>+DEFAULT_PORT);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//等待客户端连接</span></span><br><span class="line">                Socket socket=serverSocket.accept();</span><br><span class="line">                <span class="comment">//为客户端分配一个ChatHandler线程</span></span><br><span class="line">                executorService.execute(<span class="keyword">new</span> ChatHandler(<span class="keyword">this</span>,socket));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ChatServer server=<span class="keyword">new</span> ChatServer();</span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>服务器端ChatHandler：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatServer server;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，ChatServer通过这个分配Handler线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatHandler</span><span class="params">(ChatServer server, Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.server = server;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//往map里添加这个客户端</span></span><br><span class="line">            server.addClient(socket);</span><br><span class="line">            <span class="comment">//读取这个客户端发送的消息</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(socket.getInputStream())</span><br><span class="line">            );</span><br><span class="line">            String msg = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((msg = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//这样拼接是为了让其他客户端也能看清是谁发送的消息</span></span><br><span class="line">                String sendmsg = <span class="string">&quot;Client[&quot;</span> + socket.getPort() + <span class="string">&quot;]:&quot;</span> + msg;</span><br><span class="line">                <span class="comment">//服务器打印这个消息</span></span><br><span class="line">                System.out.println(sendmsg);</span><br><span class="line">                <span class="comment">//将收到的消息转发给其他在线客户端</span></span><br><span class="line">                server.sendMessage(socket, sendmsg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (msg.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//如果用户退出或者发生异常，就在map中移除该客户端</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                server.removeClient(socket);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>客户端ChatClient:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BufferedReader reader;</span><br><span class="line">    <span class="keyword">private</span> BufferedWriter writer;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="comment">//发送消息给服务器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendToServer</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//发送之前，判断socket的输出流是否关闭</span></span><br><span class="line">        <span class="keyword">if</span> (!socket.isOutputShutdown()) &#123;</span><br><span class="line">            <span class="comment">//如果没有关闭就把用户键入的消息放到writer里面</span></span><br><span class="line">            writer.write(msg + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从服务器接收消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receive</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String msg = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断socket的输入流是否关闭</span></span><br><span class="line">        <span class="keyword">if</span> (!socket.isInputShutdown()) &#123;</span><br><span class="line">            <span class="comment">//没有关闭的话就可以通过reader读取服务器发送来的消息。注意：如果没有读取到消息线程会阻塞在这里</span></span><br><span class="line">            msg = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//和服务创建连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">            reader=<span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(socket.getInputStream())</span><br><span class="line">            );</span><br><span class="line">            writer=<span class="keyword">new</span> BufferedWriter(</span><br><span class="line">                    <span class="keyword">new</span> OutputStreamWriter(socket.getOutputStream())</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//新建一个线程去监听用户输入的消息</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHandler(<span class="keyword">this</span>)).start();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 不停的读取服务器转发的其他客户端的信息</span></span><br><span class="line"><span class="comment">             * 记录一下之前踩过的小坑：</span></span><br><span class="line"><span class="comment">             * 这里一定要创建一个msg接收信息，如果直接用receive()方法判断和输出receive()的话会造成有的消息不会显示</span></span><br><span class="line"><span class="comment">             * 因为receive()获取时，在返回之前是阻塞的，一旦接收到消息才会返回，也就是while这里是阻塞的，一旦有消息就会进入到while里面</span></span><br><span class="line"><span class="comment">             * 这时候如果输出的是receive(),那么上次获取的信息就会丢失，然后阻塞在System.out.println</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            String msg=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((msg=receive())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(writer!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                   writer.close();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChatClient().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　<strong>客户端UserInputHandler:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChatClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHandler</span><span class="params">(ChatClient client)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client = client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//接收用户输入的消息</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(System.in)</span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//不停的获取reader中的System.in，实现了等待用户输入的效果</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                String input = reader.readLine();</span><br><span class="line">                <span class="comment">//向服务器发送消息</span></span><br><span class="line">                client.sendToServer(input);</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行测试："><a href="#运行测试：" class="headerlink" title="运行测试："></a><strong>运行测试：</strong></h2><p>通过打开终端，通过javac编译。如果大家是在IDEA上编码的话可能会报编码错误，在javac后面加上-encoding utf-8再接java文件就好了。</p>
<p>编译后运行，通过java运行时，又遇到了一个坑。会报找不到主类的错误，原来是因为加上两个包，要在class文件名前面加上包名。比如当前在src目录，下面有client和server两个包，要这么运行：java client.XXXX。可我之前明明在client文件夹下运行的java，也是不行，不知道为什么。</p>
<p>接着测试：</p>
<p>1.首先在一个终端里运行ChatServer，打开服务器</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411193234531-59946096.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193234531-59946096.png"></p>
<p>2.在第二个终端里打开ChatClient，暂且叫A，此时服务器的终端显示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411193327017-1431424368.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193327017-1431424368.png"></p>
<p>3.类似的，在第三个终端里打开ChatClient，暂且叫B，此时服务器显示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411193358577-1779741867.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193358577-1779741867.png"></p>
<p>4.A中输入hi,除了服务器会打印hi外，B中也会显示，图片中的端口号和前面的不一样，是因为中间出了点小问题，前三张截图和后面的不是同时运行的。实际中同一个客户端会显示一样的端口号：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411193747903-851197924.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193747903-851197924.png"></p>
<p>5.当客户端输入quit时就会断开连接，最后，服务器的显示为：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200411193923381-1365643546.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200411193923381-1365643546.png"></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</title>
    <url>/2021/05/28/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAI%20O%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B63%EF%BC%9ANIO%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%8C%E5%8D%87%E7%BA%A7%E6%94%B9%E9%80%A0%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    <content><![CDATA[<h1 id="手动搭建I-O网络通信框架3：NIO编程模型，升级改造聊天室"><a href="#手动搭建I-O网络通信框架3：NIO编程模型，升级改造聊天室" class="headerlink" title="手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室"></a>手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</h1><blockquote>
<p>转载自 <a href="https://www.cnblogs.com/lbhym/p/12698309.html">https://www.cnblogs.com/lbhym/p/12698309.html</a></p>
</blockquote>
<h1 id="手动搭建I-O网络通信框架3：NIO编程模型，升级改造聊天室-1"><a href="#手动搭建I-O网络通信框架3：NIO编程模型，升级改造聊天室-1" class="headerlink" title="手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室"></a><strong>手动搭建I/O网络通信框架3：NIO编程模型，升级改造聊天室</strong></h1><p>在“手动搭建I/O网络通信框架2：BIO编程模型实现群聊”中用BIO编程模型，简单的实现了一个聊天室。但是其最大的问题在解释BIO时就已经说了：ServerSocket接收请求时（accept()方法）、InputStream、OutputStream（输入输出流的读和写）都是阻塞的。还有一个问题就是线程池，线程多了，服务器性能耗不起。线程少了，在聊天室这种场景下，让用户等待连接肯定不可取。今天要说到的NIO编程模型就很好的解决了这几个问题。有两个主要的替换地方：</p>
<ol>
<li>用Channel代替Stream。</li>
<li>使用Selector监控多条Channel，起到类似线程池的作用，但是它只需一条线程。</li>
</ol>
<p>既然要用NIO编程模型，那就要说说它的三个主要核心：Selector、Channel、Buffer。它们的关系是：一个Selector管理多个Channel，一个Channel可以往Buffer中写入和读取数据。Buffer名叫缓冲区，底层其实是一个数组，会提供一些方法往数组写入读取数据。</p>
<h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer:"></a><strong>Buffer:</strong></h2><p>不太了解Buffer的可以看看这个：<a href="https://blog.csdn.net/czx2018/article/details/89502699">https://blog.csdn.net/czx2018/article/details/89502699</a></p>
<p><strong>常用API：</strong></p>
<ul>
<li>allocate() - 初始化一块缓冲区</li>
<li>put() - 向缓冲区写入数据</li>
<li>get() - 向缓冲区读数据</li>
<li>filp() - 将缓冲区的读写模式转换</li>
<li>clear() - 这个并不是把缓冲区里的数据清除，而是利用后来写入的数据来覆盖原来写入的数据，以达到类似清除了老的数据的效果</li>
<li>compact() - 从读数据切换到写模式，数据不会被清空，会将所有未读的数据copy到缓冲区头部，后续写数据不会覆盖，而是在这些数据之后写数据</li>
<li>mark() - 对position做出标记，配合reset使用</li>
<li>reset() - 将position置为标记值</li>
</ul>
<p><em>简单地说</em>：Buffer实质上是个数组，有两个关键的指针，一个position代表当前数据写入到哪了、一个limit代表限制。初始化时设置了数组长度，这limit就是数组的长度。如：设置<code>intBuffer.allocate(10)</code>，最大存储10个int数据，写入5五个数据后，需要读取数据了。用filp()转换读写模式后，limit=position，position=0。也就是说从0开始读，只能读到第五个。读完后这个缓冲区就需要clear()了，实际上并没有真的去清空数据，而是position和limit两个指针又回到了初始化的位置，接着又可以写入数据了，反正数组下标相同重新写入数据会覆盖，就没必要真的去清空了。</p>
<h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel:"></a><strong>Channel:</strong></h2><p>Channel(通道)主要用于传输数据，然后从Buffer中写入或读取。它们两个结合起来虽然和流有些相似，但主要有以下几点区别：　　</p>
<ol>
<li>流是单向的，可以发现Stream的输入流和输出流是独立的，它们只能输入或输出。而通道既可以读也可以写。　　</li>
<li>通道本身不能存放数据，只能借助Buffer。　　</li>
<li>Channel支持异步。　　</li>
</ol>
<p>Channel有如下三个常用的类：FileChannel、SocketChannel、ServerSocketChannel。从名字也可以看出区别，第一个是对文件数据的读写，后面两个则是针对Socket和ServerSocket，这里我们只是用后面两个。更详细的用法可以看：<a href="https://www.cnblogs.com/snailclimb/p/9086335.html%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%AD%E4%B9%9F%E4%BC%9A%E7%94%A8%E5%88%B0%EF%BC%8C%E4%BC%9A%E6%9C%89%E8%AF%A6%E7%BB%86%E7%9A%84%E6%B3%A8%E9%87%8A%E3%80%82">https://www.cnblogs.com/snailclimb/p/9086335.html，下面的代码中也会用到，会有详细的注释。</a></p>
<h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a><strong>Selector</strong></h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414150122707-1475260423.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414150122707-1475260423.png"></p>
<p>多个Channel可以注册到Selector，就可以直接通过一个Selector管理多个通道。Channel在不同的时间或者不同的事件下有不同的状态，Selector会通过轮询来达到监视的效果，如果查到Channel的状态正好是我们注册时声明的所要监视的状态，我们就可以查出这些通道，然后做相应的处理。这些状态如下：　　1.客户端的SocketChannel和服务器端建立连接，SocketChannel状态就是<strong>Connect</strong>。　　2.服务器端的ServerSocketChannel接收了客户端的请求，ServerSocketChannel状态就是<strong>Accept</strong>。　　3.当SocketChannel有数据可读，那么它们的状态就是<strong>Read</strong>。　　4.当我们需要向Channel中写数据时，那么它们的状态就是<strong>Write</strong>。　　</p>
<p>具体的使用见下面代码注释或看 <a href="Java%20NIO%E4%B9%8BSelector%EF%BC%88%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89%20608ea119b60443d6a6233f32004d92ec.md">Java NIO之Selector（选择器）</a> </p>
<h2 id="NIO编程模型"><a href="#NIO编程模型" class="headerlink" title="NIO编程模型"></a><strong>NIO编程模型</strong></h2><p>NIO编程模型工作流程：　　</p>
<ol>
<li>首先会创建一个Selector，用来监视管理各个不同的Channel，也就是不同的客户端。相当于取代了原来BIO的线程池，但是它只需一个线程就可以处理多个Channel，没有了线程上下文切换带来的消耗，很好的优化了性能。　　</li>
<li>创建一个ServerSocketChannel监听通信端口，并注册到Selector，让Seletor监视这个通道的Accept状态，也就是接收客户端请求的状态。</li>
<li>此时客户端ClientA请求服务器，那么Selector就知道了有客户端请求进来。这时候我们可以得到客户端的SocketChannel，并为这个通道注册Read状态，也就是Selector会监听ClientA发来的消息。　　</li>
<li>一旦接收到ClientA的消息，就会用其他客户端的SocketChannel的Write状态，向它们转发ClientA的消息。</li>
</ol>
<p>上代码之前，还是先说说各个类的作用：</p>
<p>相比较BIO的代码，NIO的代码还少了一个类，那就是服务器端的工作线程类。没了线程池，自然也不需要一个单独的线程去服务客户端。客户端还是需要一个单独的线程去等待用户输入，因为用户随时都可能输入信息，这个没法预见，只能阻塞式的等待。</p>
<ul>
<li>ChatServer:服务器端的唯一的类，作用就是通过Selector监听Read和Accept事件，并针对这些事件的类型，进行不同的处理，如连接、转发。</li>
<li>ChatClient:客户端，通过Selector监听Read和Connect事件。Read事件就是获取服务器转发的消息然后显示出来；Connect事件就是和服务器建立连接，建立成功后就可以发送消息。</li>
<li>UserInputHandler:专门等待用户输入的线程，和BIO没区别。</li>
</ul>
<h3 id="ChatServer"><a href="#ChatServer" class="headerlink" title="ChatServer"></a><strong>ChatServer</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置缓冲区的大小，这里设置为1024个字节</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Channel都要配合缓冲区进行读写，所以这里创建一个读缓冲区和一个写缓冲区</span></span><br><span class="line">    <span class="comment">//allocate()静态方法就是设置缓存区大小的方法</span></span><br><span class="line">    <span class="keyword">private</span> ByteBuffer read_buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer write_buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了监听端口更灵活，再不写死了，用一个构造函数设置需要监听的端口号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServerSocketChannel和Selector并打开</span></span><br><span class="line">        <span class="keyword">try</span> (ServerSocketChannel server = ServerSocketChannel.open(); Selector selector = Selector.open()) &#123;</span><br><span class="line">            <span class="comment">//【重点,实现NIO编程模型的关键】configureBlocking设置ServerSocketChannel为非阻塞式调用,Channel默认的是阻塞的调用方式</span></span><br><span class="line">            server.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//绑定监听端口,这里不是给ServerSocketChannel绑定，而是给ServerSocket绑定，socket()就是获取通道原生的ServerSocket或Socket</span></span><br><span class="line">            server.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把server注册到Selector并监听Accept事件</span></span><br><span class="line">            server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">            System.out.println(<span class="string">&quot;启动服务器，监听端口:&quot;</span> + port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">//select()会返回此时触发了多少个Selector监听的事件</span></span><br><span class="line">                <span class="keyword">if</span>(selector.select()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//获取这些已经触发的事件,selectedKeys()返回的是触发事件的所有信息</span></span><br><span class="line">                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                    <span class="comment">//循环处理这些事件</span></span><br><span class="line">                    <span class="keyword">for</span> (SelectionKey key : selectionKeys) &#123;</span><br><span class="line">                        handles(key, selector);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//处理完后清空selectedKeys，避免重复处理</span></span><br><span class="line">                    selectionKeys.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理事件的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handles</span><span class="params">(SelectionKey key, Selector selector)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//当触发了Accept事件，也就是有客户端请求进来</span></span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">//获取ServerSocketChannel</span></span><br><span class="line">            ServerSocketChannel server = (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//然后通过accept()方法接收客户端的请求，这个方法会返回客户端的SocketChannel，这一步和原生的ServerSocket类似</span></span><br><span class="line">            SocketChannel client = server.accept();</span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把客户端的SocketChannel注册到Selector，并监听Read事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span> + client.socket().getPort() + <span class="string">&quot;]上线啦！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当触发了Read事件，也就是客户端发来了消息</span></span><br><span class="line">        <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//获取消息</span></span><br><span class="line">            String msg = receive(client);</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端[&quot;</span> + client.socket().getPort() + <span class="string">&quot;]:&quot;</span> + msg);</span><br><span class="line">            <span class="comment">//把消息转发给其他客户端</span></span><br><span class="line">            sendMessage(client, msg, selector);</span><br><span class="line">            <span class="comment">//判断用户是否退出</span></span><br><span class="line">            <span class="keyword">if</span> (msg.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//解除该事件的监听</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">//更新Selector</span></span><br><span class="line">                selector.wakeup();</span><br><span class="line">                System.out.println(<span class="string">&quot;客户端[&quot;</span> + client.socket().getPort() + <span class="string">&quot;]下线了！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码方式设置为utf-8，下面字符和字符串互转时用得到</span></span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">(SocketChannel client)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//用缓冲区之前先清空一下,避免之前的信息残留</span></span><br><span class="line">        read_buffer.clear();</span><br><span class="line">        <span class="comment">//把通道里的信息读取到缓冲区，用while循环一直读取，直到读完所有消息。因为没有明确的类似\n这样的结尾，所以要一直读到没有字节为止</span></span><br><span class="line">        <span class="keyword">while</span> (client.read(read_buffer) &gt; <span class="number">0</span>) ;</span><br><span class="line">        <span class="comment">//把消息读取到缓冲区后，需要转换buffer的读写状态，不明白的看看前面的Buffer的讲解</span></span><br><span class="line">        read_buffer.flip();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charset.decode(read_buffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(SocketChannel client, String msg, Selector selector)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        msg = <span class="string">&quot;客户端[&quot;</span> + client.socket().getPort() + <span class="string">&quot;]:&quot;</span> + msg;</span><br><span class="line">        <span class="comment">//获取所有客户端,keys()与前面的selectedKeys不同，这个是获取所有已经注册的信息，而selectedKeys获取的是触发了的事件的信息</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            <span class="comment">//排除服务器和本客户端并且保证key是有效的，isValid()会判断Selector监听是否正常、对应的通道是保持连接的状态等</span></span><br><span class="line">            <span class="keyword">if</span> (!(key.channel() <span class="keyword">instanceof</span> ServerSocketChannel) &amp;&amp; !client.equals(key.channel()) &amp;&amp; key.isValid()) &#123;</span><br><span class="line">                SocketChannel otherClient = (SocketChannel) key.channel();</span><br><span class="line">                write_buffer.clear();</span><br><span class="line">                write_buffer.put(charset.encode(msg));</span><br><span class="line">                write_buffer.flip();</span><br><span class="line">                <span class="comment">//把消息写入到缓冲区后，再把缓冲区的内容写到客户端对应的通道中</span></span><br><span class="line">                <span class="keyword">while</span> (write_buffer.hasRemaining()) &#123;</span><br><span class="line">                    otherClient.write(write_buffer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChatServer(<span class="number">8888</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ChatClient"><a href="#ChatClient" class="headerlink" title="ChatClient"></a><strong>ChatClient</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer read_buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="keyword">private</span> ByteBuffer write_buffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">    <span class="comment">//声明成全局变量是为了方便下面一些工具方法的调用，就不用try with resource了</span></span><br><span class="line">    <span class="keyword">private</span> SocketChannel client;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>  &#123;</span><br><span class="line">            client=SocketChannel.open();</span><br><span class="line">            selector=Selector.open();</span><br><span class="line">            client.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//注册channel，并监听SocketChannel的Connect事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">            <span class="comment">//请求服务器建立连接</span></span><br><span class="line">            client.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>));</span><br><span class="line">            <span class="comment">//和服务器一样，不停的获取触发事件，并做相应的处理</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                selector.select();</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey key : selectionKeys) &#123;</span><br><span class="line">                    handle(key);</span><br><span class="line">                &#125;</span><br><span class="line">                selectionKeys.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClosedSelectorException e)&#123;</span><br><span class="line">            <span class="comment">//当用户输入quit时，在send()方法中，selector会被关闭，而在上面的无限while循环中，可能会使用到已经关闭了的selector。</span></span><br><span class="line">            <span class="comment">//所以这里捕捉一下异常，做正常退出处理就行了。不会对服务器造成影响</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//当触发connect事件，也就是服务器和客户端建立连接</span></span><br><span class="line">        <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//finishConnect()返回true，说明和服务器已经建立连接。如果是false，说明还在连接中，还没完全连接完成</span></span><br><span class="line">            <span class="keyword">if</span>(client.finishConnect())&#123;</span><br><span class="line">                <span class="comment">//新建一个新线程去等待用户输入</span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHandler(<span class="keyword">this</span>)).start();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//连接建立完成后，注册read事件，开始监听服务器转发的消息</span></span><br><span class="line">            client.register(selector,SelectionKey.OP_READ);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当触发read事件，也就是获取到服务器的转发消息</span></span><br><span class="line">        <span class="keyword">if</span>(key.isReadable())&#123;</span><br><span class="line">            SocketChannel client = (SocketChannel) key.channel();</span><br><span class="line">            <span class="comment">//获取消息</span></span><br><span class="line">            String msg = receive(client);</span><br><span class="line">            System.out.println(msg);</span><br><span class="line">            <span class="comment">//判断用户是否退出</span></span><br><span class="line">            <span class="keyword">if</span> (msg.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//解除该事件的监听</span></span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="comment">//更新Selector</span></span><br><span class="line">                selector.wakeup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取消息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">receive</span><span class="params">(SocketChannel client)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        read_buffer.clear();</span><br><span class="line">        <span class="keyword">while</span> (client.read(read_buffer)&gt;<span class="number">0</span>);</span><br><span class="line">        read_buffer.flip();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(charset.decode(read_buffer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!msg.isEmpty())&#123;</span><br><span class="line">            write_buffer.clear();</span><br><span class="line">            write_buffer.put(charset.encode(msg));</span><br><span class="line">            write_buffer.flip();</span><br><span class="line">            <span class="keyword">while</span> (write_buffer.hasRemaining())&#123;</span><br><span class="line">                client.write(write_buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(msg.equals(<span class="string">&quot;quit&quot;</span>))&#123;</span><br><span class="line">                selector.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChatClient().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserInputHandler"><a href="#UserInputHandler" class="headerlink" title="UserInputHandler"></a><strong>UserInputHandler</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ChatClient client;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHandler</span><span class="params">(ChatClient chatClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client=chatClient;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader read=<span class="keyword">new</span> BufferedReader(</span><br><span class="line">                <span class="keyword">new</span> InputStreamReader(System.in)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String input=read.readLine();</span><br><span class="line">                client.send(input);</span><br><span class="line">                <span class="keyword">if</span>(input.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试运行：之前用的是win10的终端运行的，以后直接用IDEA运行，方便些。不过一个类同时运行多个，以实现多个客户端的场景，需要先做以下设置</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152051636-927905062.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152051636-927905062.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152100412-1057042302.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152100412-1057042302.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152130678-206345317.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152130678-206345317.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152204091-2069873206.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152204091-2069873206.png"></p>
<p>设置完后，就可以同时运行两个ChatClient了，上图中得Unnamed就是第二个ChatClient，选中后点击右边运行按钮就行了。效果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152412715-1986061599.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152412715-1986061599.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152438453-1030565064.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152438453-1030565064.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200414152450583-1807958534.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200414152450583-1807958534.png"></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</title>
    <url>/2021/05/28/%E6%89%8B%E5%8A%A8%E6%90%AD%E5%BB%BAI%20O%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B64%EF%BC%9AAIO%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%8C%E8%81%8A%E5%A4%A9%E5%AE%A4%E7%BB%88%E6%9E%81%E6%94%B9/</url>
    <content><![CDATA[<h1 id="手动搭建I-O网络通信框架4：AIO编程模型，聊天室终极改造"><a href="#手动搭建I-O网络通信框架4：AIO编程模型，聊天室终极改造" class="headerlink" title="手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造"></a>手动搭建I/O网络通信框架4：AIO编程模型，聊天室终极改造</h1><blockquote>
<p>转载自 <a href="https://www.cnblogs.com/lbhym/p/12720944.html">https://www.cnblogs.com/lbhym/p/12720944.html</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一章讲到的NIO编程模型比较主流，非常著名的Netty就是基于NIO编程模型的。这一章说的是AIO编程模型，是<strong>异步非阻塞</strong>的。虽然同样实现的是聊天室功能，但是实现逻辑上稍微要比NIO和BIO复杂一点。不过理好整体脉络，会好理解一些。首先还是讲讲概念：</p>
<p>BIO和NIO的区别是阻塞和非阻塞，而AIO代表的是异步IO。在此之前只提到了阻塞和非阻塞，没有提到异步还是同步。可以用我在知乎上看到的一句话表示：【在处理 IO 的时候，阻塞和非阻塞都是同步 IO，只有使用了特殊的 API 才是异步 IO】。这些“特殊的API”下面会讲到。在说AIO之前，先总结一下阻塞非阻塞、异步同步的概念。</p>
<p><strong>阻塞和非阻塞，描述的是结果的请求</strong>。<strong>阻塞</strong>：在得到结果之前就一直呆在那，啥也不干，此时线程挂起，就如其名，线程被阻塞了。<strong>非阻塞</strong>：如果没得到结果就返回，等一会再去请求，直到得到结果为止。<strong>异步和同步，描述的是结果的发出</strong>，当调用方的请求进来。<strong>同步</strong>：在没获取到结果前就不返回给调用方，如果调用方是阻塞的，那么调用方就会一直等着。如果调用方是非阻塞的，调用方就会先回去，等一会再来问问得到结果没。<strong>异步</strong>：调用方一来，会直接返回，等执行完实际的逻辑后在通过回调函数把结果返回给调用方。</p>
<h1 id="AIO中的异步操作"><a href="#AIO中的异步操作" class="headerlink" title="AIO中的异步操作"></a><strong>AIO中的异步操作</strong></h1><h2 id="CompletionHandler"><a href="#CompletionHandler" class="headerlink" title="CompletionHandler"></a><strong>CompletionHandler</strong></h2><p>在AIO编程模型中，常用的API，如connect、accept、read、write都是支持异步操作的。当调用这些方法时，可以携带一个<strong>CompletionHandler</strong>参数，它会提供一些回调函数。这些回调函数包括:</p>
<ol>
<li>当这些操作成功时你需要怎么做；</li>
<li>如果这些操作失败了你要这么做。</li>
</ol>
<p>关于这个CompletionHandler参数，你只需要写一个类实现CompletionHandler口，并实现里面两个方法就行了。</p>
<p>那如何在调用connect、accept、read、write这四个方法时，传入CompletionHandler参数从而实现异步呢？下面分别举例这四个方法的使用。</p>
<p>先说说<code>Socket</code>和<code>ServerSocket</code>，在NIO中，它们变成了通道，配合缓冲区，从而实现了非阻塞。而在AIO中它们变成了异步通道。也就是<code>AsynchronousServerSocketChannel</code>和<code>AsynchronousSocketChannel</code>,下面例子中对象名分别是serverSocket和socket.</p>
<ul>
<li><p>accept：serverSocket.accept(attachment,handler)。</p>
<p>  handler就是实现了CompletionHandler接口并实现两个回调函数的类，它具体怎么写可以看下面的实战代码。attachment为handler里面可能需要用到的辅助数据，如果没有就填null。</p>
</li>
<li><p>read：socket.read(buffer,attachment,handler)。</p>
<p>  buffer是缓冲区，用以存放读取到的信息。后面两个参数和accept一样。</p>
</li>
<li><p>write：socket.write(buffer,attachment,handler)。</p>
<p>  和read参数一样。</p>
</li>
<li><p>connect：socket.connect(address,attachment,handler)。</p>
<p>  address为服务器的IP和端口，后面两个参数与前几个一样。</p>
</li>
</ul>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200417161130725-1186191947.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417161130725-1186191947.png"></p>
<h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a><strong>Future</strong></h2><p>既然说到了异步操作，除了使用实现CompletionHandler接口的方式，不得不想到<strong>Future</strong>。客户端逻辑较为简单，如果使用CompletionHandler的话代码反而更复杂，所以下面的实战客户端代码就会使用Future的方式。简单来说，Future表示的是异步操作未来的结果，怎么理解未来。比如，客户端调用read方法获取服务器发来得消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Future&lt;Integer&gt; readResult=clientChannel.read(buffer)</span><br></pre></td></tr></table></figure>

<p>Integer是read()的返回类型，此时变量readResult实际上并不一定有数据，而是表示read()方法未来的结果，这时候readResult有两个方法，<strong>isDone</strong>()：返回boolean，查看程序是否完成处理，如果返回true，有结果了，这时候可以通过get()获取结果。如果你不事先判断isDone()直接调用<strong>get</strong>()也行，只不过它是阻塞的。如果你不想阻塞，想在这期间做点什么，就用isDone()。</p>
<p>还有一个问题：<strong>这些handler的方法是在哪个线程执行的？</strong>serverSocket.accept这个方法肯定是在主线程里面调用的，而传入的这些回调方法其实是在其他线程执行的。在AIO中，会有一个<strong>AsynchronousChannelGroup</strong>，它和AsynchronousServerSocketChannel是绑定在一起的，<strong>它会为这些异步通道提供系统资源，线程就算其中一种系统资源</strong>，所以为了方便理解，我们暂时可以把他看作一个线程池，它会为这些handler分配线程，而不是在主线程中去执行。</p>
<h1 id="AIO编程模型"><a href="#AIO编程模型" class="headerlink" title="AIO编程模型"></a><strong>AIO编程模型</strong></h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200417161442138-580814692.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417161442138-580814692.png"></p>
<p>上面只说了些零碎的概念，为了更好的理解，下面讲一讲大概的工作流程(主要针对服务器，客户端逻辑较为简单，代码注释也比较少，可以看前面几章)：</p>
<ol>
<li>首先做准备工作。跟NIO一样，先要创建好通道，只不过AIO是异步通道。然后创建好AsyncChannelGroup，可以选择自定义线程池。最后把AsyncServerSocket和AsyncChannelGroup绑定在一起，这样处于同一个AsyncChannelGroup里的通道就可以共享系统资源。</li>
<li>最后一步准备工作，创建好handler类，并实现接口和里面两个回调方法。（如图：客户端1对应的handler,里面的回调方法会实现读取消息和转发消息的功能；serverSocket的handler里的回调方法会实现accept功能。）</li>
<li>准备工作完成，当客户端1连接请求进来，客户端会马上回去，ServerSocket的异步方法会在连接成功后把客户端的SocketChannel存进在线用户列表，并利用客户端1的handler开始异步监听客户端1发送的消息。</li>
<li>当客户端1发送消息时，如果上一步中的handler成功监听到，就会回调成功后的回调方法，这个方法里会把这个消息转发给其他客户端。转发完成后，接着利用handler监听客户端1发送的消息。</li>
</ol>
<p>代码一共有三个类：</p>
<ul>
<li>ChatServer：功能基本上和上面讲的工作流程差不多，还会有一些工具方法，都比较简单，就不多说了，如：转发消息，客户端下线后从在线列表移除客户端等。</li>
<li>ChatClient：基本和前两章的BIO、NIO没什么区别，一个线程监听用户输入信息并发送，主线程异步的读取服务器信息。</li>
<li>UserInputHandler：监听用户输入信息的线程。</li>
</ul>
<h2 id="ChatServer"><a href="#ChatServer" class="headerlink" title="ChatServer"></a>ChatServer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置缓冲区字节大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明AsynchronousServerSocketChannel和AsynchronousChannelGroup</span></span><br><span class="line">    <span class="keyword">private</span> AsynchronousServerSocketChannel serverSocketChannel;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousChannelGroup channelGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在线用户列表。为了并发下的线程安全，所以使用CopyOnWriteArrayList</span></span><br><span class="line">    <span class="comment">//CopyOnWriteArrayList在写时加锁，读时不加锁，而本项目正好在转发消息时需要频繁读取.</span></span><br><span class="line">    <span class="comment">//ClientHandler包含每个客户端的通道，类型选择为ClientHandler是为了在write的时候调用每个客户端的handler</span></span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;ClientHandler&gt; clientHandlerList;</span><br><span class="line">    <span class="comment">//字符和字符串互转需要用到，规定编码方式，避免中文乱码</span></span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造函数设置监听端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        clientHandlerList=<span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *创建一个线程池并把线程池和AsynchronousChannelGroup绑定，前面提到了AsynchronousChannelGroup包括一些系统资源，而线程就是其中一种。</span></span><br><span class="line"><span class="comment">             *为了方便理解我们就暂且把它当作线程池，实际上并不止包含线程池。如果你需要自己选定线程池类型和数量，就可以如下操作</span></span><br><span class="line"><span class="comment">             *如果不需要自定义线程池类型和数量，可以不用写下面两行代码。</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">            channelGroup = AsynchronousChannelGroup.withThreadPool(executorService);</span><br><span class="line">            serverSocketChannel=AsynchronousServerSocketChannel.open(channelGroup);</span><br><span class="line">            serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">&quot;127.0.0.1&quot;</span>,port));</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器启动：端口【&quot;</span>+port+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * AIO中accept可以异步调用，就用上面说到的CompletionHandler方式</span></span><br><span class="line"><span class="comment">             * 第一个参数是辅助参数，回调函数中可能会用上的，如果没有就填null;第二个参数为CompletionHandler接口的实现</span></span><br><span class="line"><span class="comment">             * 这里使用while和System.in.read()的原因：</span></span><br><span class="line"><span class="comment">             * while是为了让服务器保持运行状态，前面的NIO，BIO都有用到while无限循环来保持服务器运行，但是它们用的地方可能更好理解</span></span><br><span class="line"><span class="comment">             * System.in.read()是阻塞式的调用，只是单纯的避免无限循环而让accept频繁被调用，无实际业务功能。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> AcceptHandler());</span><br><span class="line">                System.in.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(serverSocketChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AsynchronousSocketChannel为accept返回的类型，Object为辅助参数类型，没有就填Object</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">AsynchronousSocketChannel</span>,<span class="title">Object</span>&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果成功，执行的回调方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel clientChannel, Object attachment)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//如果服务器没关闭，在接收完当前客户端的请求后，再次调用,以接着接收其他客户端的请求</span></span><br><span class="line">            <span class="keyword">if</span>(serverSocketChannel.isOpen())&#123;</span><br><span class="line">                serverSocketChannel.accept(<span class="keyword">null</span>,<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果客户端的channel没有关闭</span></span><br><span class="line">            <span class="keyword">if</span>(clientChannel!=<span class="keyword">null</span>&amp;&amp;clientChannel.isOpen())&#123;</span><br><span class="line">                <span class="comment">//这个就是异步read和write要用到的handler,并传入当前客户端的channel</span></span><br><span class="line">                ClientHandler handler=<span class="keyword">new</span> ClientHandler(clientChannel);</span><br><span class="line">                <span class="comment">//把新用户添加到在线用户列表里</span></span><br><span class="line">                clientHandlerList.add(handler);</span><br><span class="line">                System.out.println(getPort(clientChannel)+<span class="string">&quot;上线啦！&quot;</span>);</span><br><span class="line">                ByteBuffer buffer=ByteBuffer.allocate(BUFFER);</span><br><span class="line">                <span class="comment">//异步调用read,第一个buffer是存放读到数据的容器，第二个是辅助参数。</span></span><br><span class="line">                <span class="comment">//因为真正的处理是在handler里的回调函数进行的，辅助参数会直接传进回调函数，所以为了方便使用，buffer就当作辅助参数</span></span><br><span class="line">                clientChannel.read(buffer,buffer,handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果失败，执行的回调方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;连接失败&quot;</span>+exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">implements</span> <span class="title">CompletionHandler</span>&lt;<span class="title">Integer</span>, <span class="title">ByteBuffer</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientHandler</span><span class="params">(AsynchronousSocketChannel clientChannel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clientChannel = clientChannel;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, ByteBuffer buffer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(buffer!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//如果read返回的结果小于等于0，而buffer不为空，说明客户端通道出现异常，做下线操作</span></span><br><span class="line">                <span class="keyword">if</span>(result&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    removeClient(<span class="keyword">this</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//转换buffer读写模式并获取消息</span></span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    String msg=String.valueOf(charset.decode(buffer));</span><br><span class="line">                    <span class="comment">//在服务器上打印客户端发来的消息</span></span><br><span class="line">                    System.out.println(getPort(clientChannel)+msg);</span><br><span class="line">                    <span class="comment">//把消息转发给其他客户端</span></span><br><span class="line">                    sendMessage(clientChannel,getPort(clientChannel)+msg);</span><br><span class="line">                    buffer=ByteBuffer.allocate(BUFFER);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果用户输入的是退出，就从在线列表里移除。否则接着监听这个用户发送消息</span></span><br><span class="line">                    <span class="keyword">if</span>(msg.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                        removeClient(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        clientChannel.read(buffer, buffer, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, ByteBuffer attachment)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端读写异常：&quot;</span>+exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发消息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(AsynchronousSocketChannel clientChannel,String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(ClientHandler handler:clientHandlerList)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!handler.clientChannel.equals(clientChannel))&#123;</span><br><span class="line">                ByteBuffer buffer=charset.encode(msg);</span><br><span class="line">                <span class="comment">//write不需要buffer当辅助参数，因为写到客户端的通道就完事了，而读还需要回调函数转发给其他客户端。</span></span><br><span class="line">                handler.clientChannel.write(buffer,<span class="keyword">null</span>,handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据客户端channel获取对应端口号的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPort</span><span class="params">(AsynchronousSocketChannel clientChannel)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetSocketAddress address=(InetSocketAddress)clientChannel.getRemoteAddress();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;客户端[&quot;</span>+address.getPort()+<span class="string">&quot;]:&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;客户端[Undefined]:&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除客户端</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeClient</span><span class="params">(ClientHandler handler)</span></span>&#123;</span><br><span class="line">        clientHandlerList.remove(handler);</span><br><span class="line">        System.out.println(getPort(handler.clientChannel)+<span class="string">&quot;断开连接...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(handler.clientChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handler.clientChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChatServer(<span class="number">8888</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ChatClient"><a href="#ChatClient" class="headerlink" title="ChatClient"></a>ChatClient</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> AsynchronousSocketChannel clientChannel;</span><br><span class="line">    <span class="keyword">private</span> Charset charset = Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="comment">//设置服务器IP和端口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clientChannel = AsynchronousSocketChannel.open();</span><br><span class="line">            <span class="comment">//连接服务器</span></span><br><span class="line">            Future&lt;Void&gt; future = clientChannel.connect(<span class="keyword">new</span> InetSocketAddress(host, port));</span><br><span class="line">            future.get();</span><br><span class="line">            <span class="comment">//新建一个线程去等待用户输入</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> UserInputHandler(<span class="keyword">this</span>)).start();</span><br><span class="line">            ByteBuffer buffer=ByteBuffer.allocate(BUFFER);</span><br><span class="line">            <span class="comment">//无限循环让客户端保持运行状态</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="comment">//获取服务器发来的消息并存入到buffer</span></span><br><span class="line">                Future&lt;Integer&gt; read=clientChannel.read(buffer);</span><br><span class="line">                <span class="keyword">if</span>(read.get()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    String msg=String.valueOf(charset.decode(buffer));</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果read的结果小于等于0说明和服务器连接出现异常</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;服务器断开连接&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(clientChannel!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        clientChannel.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.exit(-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.isEmpty())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ByteBuffer buffer = charset.encode(msg);</span><br><span class="line">        Future&lt;Integer&gt; write=clientChannel.write(buffer);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取发送结果，如果get方法发生异常说明发送失败</span></span><br><span class="line">            write.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException|InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChatClient(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">8888</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserInputHandler"><a href="#UserInputHandler" class="headerlink" title="UserInputHandler"></a>UserInputHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ChatClient client;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserInputHandler</span><span class="params">(ChatClient chatClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.client=chatClient;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BufferedReader read=<span class="keyword">new</span> BufferedReader(</span><br><span class="line">                <span class="keyword">new</span> InputStreamReader(System.in)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String input=read.readLine();</span><br><span class="line">                client.send(input);</span><br><span class="line">                <span class="keyword">if</span>(input.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行测试:</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200417164605075-508533365.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164605075-508533365.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200417164620441-2122640649.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164620441-2122640649.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1383122-20200417164642458-1627643597.png" alt="https://img2020.cnblogs.com/blog/1383122/202004/1383122-20200417164642458-1627643597.png"></p>
]]></content>
      <categories>
        <category>Netty</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Mycat</title>
    <url>/2021/06/09/%E6%90%AD%E5%BB%BAMycat/</url>
    <content><![CDATA[<h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1 环境搭建"></a>1 环境搭建</h1><ol>
<li><p>3台服务器</p>
</li>
<li><p>centos 7</p>
</li>
<li><p>采用 yum 方式，在其中两台安装 mysql</p>
</li>
<li><p>检查mysql 安装是否正确</p>
</li>
<li><p>下载 Mycat 软件包</p>
</li>
<li><p>在第3台机器上安装mycat，并修改配置文件</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210609210635587.png" alt="image-20210609210635587"></p>
</li>
<li><p>连接mycat，体验数据的增删改查</p>
</li>
</ol>
<h1 id="2-mysql-安装教程"><a href="#2-mysql-安装教程" class="headerlink" title="2 mysql 安装教程"></a>2 mysql 安装教程</h1><h2 id="2-1-查询是否安装了mysql"><a href="#2-1-查询是否安装了mysql" class="headerlink" title="2.1 查询是否安装了mysql**"></a>2.1 查询是否安装了mysql**</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mysql                                                      </span><br></pre></td></tr></table></figure>

<h2 id="2-2-卸载mysql-（下面是卸载mysql的库，防止产生冲突，mysql也是类似卸载方式）"><a href="#2-2-卸载mysql-（下面是卸载mysql的库，防止产生冲突，mysql也是类似卸载方式）" class="headerlink" title="2.2 卸载mysql （下面是卸载mysql的库，防止产生冲突，mysql也是类似卸载方式）**"></a>2.2 卸载mysql （下面是卸载mysql的库，防止产生冲突，mysql也是类似卸载方式）**</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps mysql-libs-5.1.*</span><br><span class="line">卸载之后，记得：</span><br><span class="line">find &#x2F; -name mysql</span><br><span class="line">删除查询出来的所有东西</span><br></pre></td></tr></table></figure>

<h2 id="2-3-安装mysql"><a href="#2-3-安装mysql" class="headerlink" title="2.3 安装mysql"></a>2.3 安装mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install mysql-server                                                    </span><br></pre></td></tr></table></figure>

<p>注意: centos 7这样安装不行, 详见文档底部</p>
<h2 id="2-4-启动mysql"><a href="#2-4-启动mysql" class="headerlink" title="2.4 启动mysql"></a>2.4 启动mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动方式1：service mysql start</span><br><span class="line">启动方式2：&#x2F;etc&#x2F;init.d&#x2F;mysql start</span><br><span class="line">启动方式3：service mysqld start</span><br><span class="line">启动方式4：&#x2F;etc&#x2F;init.d&#x2F;mysqld start                                               </span><br></pre></td></tr></table></figure>

<h2 id="2-5-root账户默认是没有密码的，修改root密码："><a href="#2-5-root账户默认是没有密码的，修改root密码：" class="headerlink" title="2.5 root账户默认是没有密码的，修改root密码："></a>2.5 root账户默认是没有密码的，修改root密码：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password 密码 </span><br><span class="line">例如：</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;mysqladmin -u root password pwd    这样就将root密码设置成pwd了       </span><br></pre></td></tr></table></figure>

<h2 id="2-6-重置root密码（忘记root密码找回）"><a href="#2-6-重置root密码（忘记root密码找回）" class="headerlink" title="2.6 重置root密码（忘记root密码找回）"></a>2.6 重置root密码（忘记root密码找回）</h2><h3 id="2-6-1-停止MySQL服务命令"><a href="#2-6-1-停止MySQL服务命令" class="headerlink" title="2.6.1 停止MySQL服务命令:"></a>2.6.1 停止MySQL服务命令:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld stop </span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysql stop                                                        </span><br></pre></td></tr></table></figure>

<h3 id="2-6-2-输入绕过密码认证命令："><a href="#2-6-2-输入绕过密码认证命令：" class="headerlink" title="2.6.2 输入绕过密码认证命令："></a>2.6.2 输入绕过密码认证命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld_safe --user&#x3D;mysql --skip-grant-tables --skip-networking &amp;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-3-输入登录用户命令："><a href="#1-6-3-输入登录用户命令：" class="headerlink" title="1.6.3 输入登录用户命令："></a>1.6.3 输入登录用户命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root mysql                                                        </span><br></pre></td></tr></table></figure>

<h3 id="2-6-4-输入修改root密码SQL语句："><a href="#2-6-4-输入修改root密码SQL语句：" class="headerlink" title="2.6.4 输入修改root密码SQL语句："></a>2.6.4 输入修改root密码SQL语句：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update user set Password&#x3D;password (&#39;123456&#39;) where user&#x3D;&#39;root&#39;;          </span><br></pre></td></tr></table></figure>

<h3 id="2-6-5-输入数据刷新命令："><a href="#2-6-5-输入数据刷新命令：" class="headerlink" title="2.6.5 输入数据刷新命令："></a>2.6.5 输入数据刷新命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;                                                   </span><br></pre></td></tr></table></figure>

<h3 id="2-6-6-退出MySQL命令："><a href="#2-6-6-退出MySQL命令：" class="headerlink" title="2.6.6 退出MySQL命令："></a>2.6.6 退出MySQL命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit;                                                              </span><br></pre></td></tr></table></figure>

<h2 id="2-7-设置允许远程连接"><a href="#2-7-设置允许远程连接" class="headerlink" title="2.7 设置允许远程连接"></a>2.7 设置允许远程连接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to root@&#39;%&#39; identified by &#39;123456789&#39; with grant option;  </span><br></pre></td></tr></table></figure>

<h2 id="2-8-开放端口3306，否则依然无法过远程"><a href="#2-8-开放端口3306，否则依然无法过远程" class="headerlink" title="2.8 开放端口3306，否则依然无法过远程"></a>2.8 开放端口3306，否则依然无法过远程</h2><h3 id="2-8-1-打开防火墙配置文件："><a href="#2-8-1-打开防火墙配置文件：" class="headerlink" title="2.8.1 打开防火墙配置文件："></a>2.8.1 打开防火墙配置文件：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables                                                   </span><br></pre></td></tr></table></figure>

<h3 id="2-8-2-添加下面一行："><a href="#2-8-2-添加下面一行：" class="headerlink" title="2.8.2 添加下面一行："></a>2.8.2 添加下面一行：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>注意：开通3306 端口的行必须在icmp-host-prohibited前，否则无效：以下为配置结果图：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5e81a3ba087c42ce05540189.jpg" alt="图片描述"></p>
<h3 id="2-8-3-重启防火墙，使配置生效："><a href="#2-8-3-重启防火墙，使配置生效：" class="headerlink" title="2.8.3 重启防火墙，使配置生效："></a>2.8.3 重启防火墙，使配置生效：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;iptables restart                                                </span><br></pre></td></tr></table></figure>

<h2 id="2-9-设置开机启动mysql："><a href="#2-9-设置开机启动mysql：" class="headerlink" title="2.9 设置开机启动mysql："></a>2.9 设置开机启动mysql：</h2><h3 id="2-9-1-查看MySQL服务是否自动开启命令"><a href="#2-9-1-查看MySQL服务是否自动开启命令" class="headerlink" title="2.9.1 查看MySQL服务是否自动开启命令"></a>2.9.1 查看MySQL服务是否自动开启命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig --list | grep mysqld</span><br><span class="line">chkconfig --list | grep mysql                                            </span><br></pre></td></tr></table></figure>

<h3 id="2-9-2-开启MySQL服务自动开启命令"><a href="#2-9-2-开启MySQL服务自动开启命令" class="headerlink" title="2.9.2 开启MySQL服务自动开启命令"></a>2.9.2 开启MySQL服务自动开启命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig mysqld on</span><br><span class="line">chkconfig mysql on                                              </span><br></pre></td></tr></table></figure>

<h2 id="2-10-将mysql默认引擎设置为InnoDB"><a href="#2-10-将mysql默认引擎设置为InnoDB" class="headerlink" title="2.10 将mysql默认引擎设置为InnoDB"></a>2.10 将mysql默认引擎设置为InnoDB</h2><p>修改MySQL配置文件my.cnf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc</span><br><span class="line">vi my.cnf                                                         </span><br></pre></td></tr></table></figure>

<p>在[mysqld]一段加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-storage-engine&#x3D;InnoDB                                            </span><br></pre></td></tr></table></figure>

<p>删除ib_logfile0、ib_logfile1两个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">rm -rf ib_logfile*                                                   </span><br></pre></td></tr></table></figure>

<p>重启mysql</p>
<h2 id="2-11-开启mysql的日志-监控执行的sql语句"><a href="#2-11-开启mysql的日志-监控执行的sql语句" class="headerlink" title="2.11 开启mysql的日志(监控执行的sql语句)"></a>2.11 开启mysql的日志(监控执行的sql语句)</h2><p>命令: <code>show global variables like ‘%general%’;</code> 该语句可以查看是否开启, 以及生成的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; on; &#x2F;&#x2F; 打开  </span><br><span class="line">set global general_log &#x3D; off; &#x2F;&#x2F; 关闭      </span><br></pre></td></tr></table></figure>

<p>参考文档:</p>
<p><a href="http://blog.csdn.net/fdipzone/article/details/16995303">http://blog.csdn.net/fdipzone/article/details/16995303</a></p>
<h2 id="2-12-centos7安装mysql"><a href="#2-12-centos7安装mysql" class="headerlink" title="2.12 centos7安装mysql"></a>2.12 centos7安装mysql</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">#rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">#yum install mysql-community-server</span><br><span class="line">成功安装之后重启mysql服务</span><br><span class="line">#service mysqld restart</span><br><span class="line">初次安装mysql是root账户是没有密码的</span><br><span class="line">设置密码的方法</span><br><span class="line">#mysql -uroot</span><br><span class="line">mysql&gt; set password for ‘root’@‘localhost’ &#x3D; password(&#39;mypasswd&#39;);</span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure>

<h1 id="3-Mycat-安装教程"><a href="#3-Mycat-安装教程" class="headerlink" title="3 Mycat 安装教程"></a>3 Mycat 安装教程</h1><p><a href="http://www.mycat.org.cn/">mycat官网</a></p>
<p><a href="https://www.yuque.com/ccazhw/tuacvk">mycat1权威指南</a></p>
<p><a href="https://www.yuque.com/ccazhw/ml3nkf">mycat2权威指南</a></p>
<h2 id="3-1-安装-Mycat"><a href="#3-1-安装-Mycat" class="headerlink" title="3.1 安装 Mycat"></a>3.1 安装 Mycat</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf Mycat-server-1.6.7.1-release-20200209222254-mac.tar</span><br></pre></td></tr></table></figure>

<h2 id="3-2-启动和验证"><a href="#3-2-启动和验证" class="headerlink" title="3.2 启动和验证"></a>3.2 启动和验证</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">bin/mycat start</span><br></pre></td></tr></table></figure>

<p>启动后，验证一些基本操作，如下图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210610162658349.png" alt="image-20210610162658349"></p>
<p>可以看到，我们成功连上了 mycat 服务器，MyCat 服务器默认定义了一个名为 TESTDB 的逻辑数据库，并且也在该逻辑数据库中定义了一些逻辑表。</p>
<p>但当我们尝试做一些 select 操作的时候，控制台会提示报错，这是因为 MyCat 配置错误导致的。</p>
<p>所以我们需要进行配置。</p>
<h2 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210610163531656.png" alt="image-20210610163531656"></p>
<p>其中 ,</p>
<ul>
<li>bin 目录是 MyCat 的启动目录，</li>
<li>conf 目录是 MyCat 的配置文件目录，</li>
<li>lib 目录是 MyCat 自身的 Jar 包以及所依赖 Jar 包的目录，</li>
<li>logs 目录是日志目录。</li>
</ul>
<p>在 conf 目录下有 3 个重要的配置文件：</p>
<ul>
<li>schema.xml</li>
<li>Server.xml</li>
<li>Rule.xml</li>
</ul>
<p>下面就来简单说明这 3 个配置文件的关键配置</p>
<h3 id="3-3-1-schema-xml"><a href="#3-3-1-schema-xml" class="headerlink" title="3.3.1 schema.xml"></a>3.3.1 schema.xml</h3><p>schema.xml 文件定义了 MyCat 到底连接那个数据库实例，连接这个数据库实例的哪个数据库。MyCat 一共有几个逻辑数据库，MyCat 一共有几个逻辑表。</p>
<p>schema.xml 文件一共有四个配置节点：<code>DataHost</code>、<code>DataNode</code>、<code>Schema</code>、<code>Table</code>。</p>
<ul>
<li><p>DataHost：定义数据库实例</p>
<ul>
<li><p>balance：负载均衡类型</p>
<ul>
<li>balance=”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。</li>
<li>balance=”1”，全部的readHost与stand by writeHost参与select语句的负载均衡，简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。</li>
<li>balance=”2”，所有读操作都随机的在writeHost、readhost上分发。</li>
<li>balance=”3”，所有读请求随机的分发到wiriterHost对应的readhost执行，writerHost不负担读压力，注意balance=3只在1.4及其以后版本有，1.3没有。</li>
</ul>
</li>
<li><p>writeType：写请求类型，0落在第一个writeHost上；1随机；</p>
</li>
</ul>
</li>
<li><p>DataNode：定义数据库名称</p>
</li>
<li><p>Schema：定义逻辑库</p>
<ul>
<li><p>checkSQLschema：是否去掉SQL中的schema</p>
</li>
<li><p>sqlMaxLimit：select 默认的<code>limit</code>值，仅对分片表有效</p>
</li>
<li><p>rule：定义分片表的分片规则，必须与<code>rule.xml</code>中的<code>tableRule</code>对应</p>
</li>
<li><p>ruleRequired：是否绑定分片规则，如果为true，没有绑定分片规则，程序报错</p>
</li>
</ul>
</li>
<li><p>Table：定义逻辑表</p>
</li>
</ul>
<p>DataHost 节点定义了 MyCat 要连接哪个 MySQL 实例，连接的账号密码是多少。默认的 MyCat 为我们定义了一个名为 localhost1 的数据服务器（DataHost），它指向了本地（localhost）3306 端口的 MySQL 服务器，对应 MySQL 服务器的账号是 root，密码是 123456。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">slaveThreshold</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostM1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.1.200:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;hostS1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;localhost:3316&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>DataNode 节点指定了需要连接的具体数据库名称，其使用一个 dataHost 属性指定该数据库位于哪个数据库实例上。默认的 MyCat 为我们创建了三个数据节点（DataNode），dn1 数据节点对应 localhost1 数据服务器上的 db1 数据库，dn2 数据节点对应 localhost1 数据服务器上的 db2 数据库，dn1 数据节点对应 localhost1 数据服务器上的 db3 数据库。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>Schema 节点定义了 MyCat 的所有逻辑数据库，Table 节点定义了 MyCat 的所有逻辑表。默认的 MyCat 为我们定义了一个名为 TESTDB 的逻辑数据库，在这个逻辑数据库下又定义了名为 travaelrecord、company 等 6 个逻辑表。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- auto sharding by id (long) --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- global table is auto cloned to all defined data nodes ,so can join</span></span><br><span class="line"><span class="comment">			with any table whose sharding node is in the same data node --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;goods&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">type</span>=<span class="string">&quot;global&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- random sharding using mod sharind rule --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;hotnews&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">autoIncrement</span>=<span class="string">&quot;true&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span></span></span><br><span class="line"><span class="tag">			   <span class="attr">rule</span>=<span class="string">&quot;mod-long&quot;</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;table name=&quot;dual&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dnx,dnoracle2&quot; type=&quot;global&quot;</span></span><br><span class="line"><span class="comment">			needAddLimit=&quot;false&quot;/&gt; &lt;table name=&quot;worker&quot; primaryKey=&quot;ID&quot; dataNode=&quot;jdbc_dn1,jdbc_dn2,jdbc_dn3&quot;</span></span><br><span class="line"><span class="comment">			rule=&quot;mod-long&quot; /&gt; --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span></span></span><br><span class="line"><span class="tag">			   <span class="attr">rule</span>=<span class="string">&quot;sharding-by-intfile&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2&quot;</span></span></span><br><span class="line"><span class="tag">			   <span class="attr">rule</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;customer_id&quot;</span></span></span><br><span class="line"><span class="tag">						<span class="attr">parentKey</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;order_items&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;order_id&quot;</span></span></span><br><span class="line"><span class="tag">							<span class="attr">parentKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">childTable</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">childTable</span> <span class="attr">name</span>=<span class="string">&quot;customer_addr&quot;</span> <span class="attr">primaryKey</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">joinKey</span>=<span class="string">&quot;customer_id&quot;</span></span></span><br><span class="line"><span class="tag">						<span class="attr">parentKey</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- &lt;table name=&quot;oc_call&quot; primaryKey=&quot;ID&quot; dataNode=&quot;dn1$0-743&quot; rule=&quot;latest-month-calldate&quot;</span></span><br><span class="line"><span class="comment">			/&gt; --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以上面当我们登陆 MyCat 输入<code>show databases</code>会看到只有一个名为 TESTDB 的数据库，这个就是 MyCat 的逻辑数据库。</p>
<h3 id="3-3-2-server-xml"><a href="#3-3-2-server-xml" class="headerlink" title="3.3.2 server.xml"></a>3.3.2 server.xml</h3><p>server.xml 定义了项目中连接 MyCat 服务器所需要的账号密码，以及该账号能访问那些逻辑数据库。 server.xml 配置文件中有 <code>System</code> 和 <code>User</code> 两个配置节点。</p>
<p>System 节点定义了连接 MyCat 服务器的系统配置信息。例如是否开启实时统计功能，是否开启全加班一致性检测等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSqlStat&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useGlobleTableCheck&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sequnceHandlerType&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processorBufferPoolType&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">	……</span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>User 配置节点定义了连接 MyCat 服务器的账号密码，以及该账号密码所能进行的数据库操作。默认的 MyCat 为我们创建了一个账户名为 root，密码为 123456 的账号，只能访问 TESTDB 逻辑数据库，并且定义了对相关表的操作权限。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">privileges</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0110&quot;</span> &gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb01&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;0000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;tb02&quot;</span> <span class="attr">dml</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">privileges</span>&gt;</span>	 </span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-3-rule-xml"><a href="#3-3-3-rule-xml" class="headerlink" title="3.3.3 rule.xml"></a>3.3.3 rule.xml</h3><p>rule.xml 定义了逻辑表使用哪个字段进行拆分，使用什么拆分算法进行拆分。rule.xml 中有两个配置节点，分别是：<code>TableRule</code> 和 <code>Function</code> 配置节点。</p>
<p>TableRule 配置节点定义了逻辑表的拆分信息，例如使用哪个字段进行拆分，使用什么拆分算法。默认的 MyCat 为我们配置了一个名为 rule2 的表拆分规则，表示根据 user_id 字段进行拆分，拆分算法是 func1。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Function 配置节点则定义了具体的拆分算法。例如使用对 1000 取余的拆分算法，对 100 取余的拆分算分等等。默认的 MyCat 为我们定义了一个名为<code> func1</code> 的<strong>拆分算法</strong>，这个拆分算法定义在 <code>io.mycat.route.function.PartitionByLong</code> 类中，并且还传入了两个参数值。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>128<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-4-Mycat-FAQ"><a href="#3-4-Mycat-FAQ" class="headerlink" title="3.4 Mycat FAQ"></a>3.4 Mycat FAQ</h2><h3 id="3-4-1-ERROR-1184-HY000-Invalid-DataSource-1"><a href="#3-4-1-ERROR-1184-HY000-Invalid-DataSource-1" class="headerlink" title="3.4.1 ERROR 1184 (HY000): Invalid DataSource:1"></a>3.4.1 ERROR 1184 (HY000): Invalid DataSource:1</h3><p>具体错误如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210611093234112.png" alt="image-20210611093234112"></p>
<p>错误原因有两种可能：</p>
<ol>
<li><p>没有为mysql用户配置远程访问的权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;192.168.0.3:3306&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>授予mysql用户远程访问的权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 没有在mysql中创建数据库</span><br><span class="line"></span><br><span class="line">   ```<span class="keyword">sql</span></span><br><span class="line">   # 此操作在当前机的mysql上操作（不再mycat）</span><br><span class="line">   # mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">   <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mycatdb1 <span class="keyword">DEFAULT</span> CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line">   <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mycatdb2 <span class="keyword">DEFAULT</span> CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line">   <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mycatdb3 <span class="keyword">DEFAULT</span> CHARSET utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br><span class="line">   </span><br><span class="line">   # 三个分库各自创建表travelrecord</span><br><span class="line">   <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `travelrecord` (</span><br><span class="line">     `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">     `name` <span class="type">varchar</span>(<span class="number">22</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">     `<span class="type">time</span>` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">   ) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line">   </span><br><span class="line">   # 模拟数据</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mycat<span class="operator">-</span>db1`.`travelrecord` (`name`, `<span class="type">time</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;qkl&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mycat<span class="operator">-</span>db1`.`travelrecord` (`name`, `<span class="type">time</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;andy&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mycat<span class="operator">-</span>db2`.`travelrecord` (`name`, `<span class="type">time</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zgq&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `mycat<span class="operator">-</span>db3`.`travelrecord` (`name`, `<span class="type">time</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;pcb&#x27;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在 mycat 的配置文件 schema.xml 中修改 <code>dataNode</code>节点：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mycatdb1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mycatdb2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;mycatdb3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>mycat</category>
      </categories>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库优化的几个阶段</title>
    <url>/2021/08/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96%E7%9A%84%E5%87%A0%E4%B8%AA%E9%98%B6%E6%AE%B5/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://www.cnblogs.com/rjzheng/p/9619855.html">https://www.cnblogs.com/rjzheng/p/9619855.html</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>大家在面试的时候，是否遭遇过，面试官询问</p>
<blockquote>
<p>你们是如何进行数据库优化的?</p>
</blockquote>
<p>那这个问题应该怎么答呢？其实写这个题材的原因是我这几天看到各公众号转的一篇数据库调优的知识（不上链接了），我就稍微翻了几下，上面动不动就来说要对数据库进行<strong>水平拆分</strong>，我就想反问各位读者，你们几个人经历过<strong>水平拆分</strong>?现在很多文章，实践性实在太差，只能说纯理论分析。<br>这篇文章最早来自知乎的一个提问，我在其基础上完善了一下。</p>
<h2 id="第一阶段-优化sql和索引"><a href="#第一阶段-优化sql和索引" class="headerlink" title="第一阶段 优化sql和索引"></a>第一阶段 优化sql和索引</h2><p>这才是调优的第一阶段啊，<strong>为什么呢？</strong><br>因为这一步成本最低啊，不需要加什么中间件。你没经过索引优化和SQL优化，就来什么<strong>水平拆分</strong>，这不是坑人么。<br>那<strong>步骤</strong>是什么样呢?我说个大概<br>(1)用慢查询日志定位执行效率低的<code>SQL</code>语句<br>(2)用<code>explain</code>分析<code>SQL</code>的执行计划<br>(3)确定问题，采取相应的优化措施，建立索引啊，等<br>我就不举例了，因为如何优化SQL的文章，一抓一大把，再贴过来，读者看着也累。</p>
<h2 id="第二阶段-搭建缓存"><a href="#第二阶段-搭建缓存" class="headerlink" title="第二阶段 搭建缓存"></a>第二阶段 搭建缓存</h2><p>在优化sql无法解决问题的情况下，才考虑搭建缓存。毕竟你使用缓存的目的，就是将复杂的、耗时的、不常变的执行结果缓存起来，降低数据库的资源消耗。<br>这里需要<strong>注意</strong>的是:搭建缓存后，系统的复杂性增加了。你需要考虑很多问题，比如:</p>
<ul>
<li>缓存和数据库一致性问题？(比如是更缓存，还是删缓存),这点可以看我的一篇文章<a href="https://www.cnblogs.com/rjzheng/p/9041659.html">《数据库和缓存双写一致性方案解析》</a>。</li>
<li>缓存击穿、缓存穿透、缓存雪崩问题如何解决？是否有做缓存预热的必要。不过我猜，大部分中小公司应该都没考虑。这点可以看我的另一篇<a href="https://www.cnblogs.com/rjzheng/p/9096228.html">《分布式之redis复习精讲》</a></li>
</ul>
<h2 id="第三阶段-读写分离"><a href="#第三阶段-读写分离" class="headerlink" title="第三阶段 读写分离"></a>第三阶段 读写分离</h2><p>缓存也搞不定的情况下，搞主从复制，上读写分离。在应用层，区分读写请求。或者利用现成的中间件mycat或者altas等做读写分离。<br>需要注意的是,只要你敢说你用了主从架构，有三个问题，你要准备:<br>(1)主从的好处？<br>回答:实现数据库备份，实现数据库负载均衡，提交数据库可用性<br>(2)主从的原理?<br>回答:如图所示（图片不是自己画的，偷懒了）<br><img src="https://gitee.com/littlefxc/oss/raw/master/images/o_youhua1.jpg" alt="image">主库有一个<code>log dump</code>线程，将<code>binlog</code>传给从库<br>从库有两个线程，一个I/O线程，一个SQL线程，I/O线程读取主库传过来的<code>binlog</code>内容并写入到<code>relay log</code>,SQL线程从<code>relay log</code>里面读取内容，写入从库的数据库。</p>
<p>(3)如何解决主从一致性?<br>回答:这个问题，我不建议在数据库层面解决该问题。根据CAP定理，主从架构本来就是一种高可用架构，是无法满足一致性的<br>哪怕你采用同步复制模式或者半同步复制模式，都是弱一致性，并不是强一致性。所以，推荐还是利用缓存，来解决该问题。<br>步骤如下:<br>1、自己通过测试，计算主从延迟时间，建议mysql版本为5.7以后，因为mysql自5.7开始，多线程复制功能比较完善，一般能保证延迟在1s内。不过话说回来，mysql现在都出到8.x了，还有人用5.x的版本么。<br>2、数据库的写操作，先写数据库，再写cache，但是有效期很短，就比主从延时的时间稍微长一点。<br>3、读请求的时候，先读缓存，缓存不存在(这时主从同步已经完成)，再读数据库。</p>
<h2 id="第四阶段-利用分区表"><a href="#第四阶段-利用分区表" class="headerlink" title="第四阶段 利用分区表"></a>第四阶段 利用分区表</h2><p>说句实在话，你们面试的时候，其实可以略过这个阶段。因为很多互联网公司都不建议用分区表，我自己也不太建议用分区表，采用这个分区表，坑太多。<br>这里引用一下其他文章的回答:<br><strong>什么是mysql的分区表？</strong><br>回答：所有数据还在一个表中，但物理存储根据一定的规则放在不同的文件中。这个是mysql支持的功能，业务代码不需要改动，但是sql语句需要改动，sql条件需要带上分区的列。<br><strong>缺点</strong><br>(1)分区键设计不太灵活，如果不走分区键，很容易出现全表锁<br>(2)在分区表使用<code>ALTER TABLE</code> … <code>ORDER BY</code>，只能在每个分区内进行<code>order by</code>。<br>(3)分区表的分区键创建索引，那么这个索引也将被分区。分区键没有全局索引一说。<br>(4)自己分库分表，自己掌控业务场景与访问模式，可控。分区表，研发写了一个sql，都不确定该去哪个分区查，不太可控。<br>…不列举了，不推荐</p>
<h2 id="第五阶段-垂直拆分"><a href="#第五阶段-垂直拆分" class="headerlink" title="第五阶段 垂直拆分"></a>第五阶段 垂直拆分</h2><p>上面四个阶段都没搞定，就来垂直拆分了。垂直拆分的复杂度还是比水平拆分小的。将你的表，按模块拆分为不同的小表。大家应该都看过《大型网站架构演变之路》，这种类型的文章或者书籍，基本都有提到这一阶段。<br>如果你有幸能够在什么运营商、银行等公司上班，你会发现他们一个表，几百个字段都是很常见的事情。所以，应该要进行拆分，拆分原则一般是如下三点:<br>(1)把不常用的字段单独放在一张表。<br>(2)把常用的字段单独放一张表<br>(3)经常组合查询的列放在一张表中（联合索引）。</p>
<h2 id="第六阶段-水平拆分"><a href="#第六阶段-水平拆分" class="headerlink" title="第六阶段 水平拆分"></a>第六阶段 水平拆分</h2><p>OK,水平拆分是最麻烦的一个阶段，拆分后会有很多的问题，我再强调一次，水平拆分一定是最最最最后的选择。从某种意义上，我觉得还不如垂直拆分。因为你用垂直拆分，分成不同模块后，发现单模块的压力过大，你完全可以给该模块单独做优化，例如提高该模块的机器配置等。如果是水平拆分，拆成两张表，代码需要变动，然后发现两张表还不行，再变代码，再拆成三张表的？水平拆分模块间耦合性太强，成本太大，不是特别推荐。</p>
]]></content>
  </entry>
  <entry>
    <title>文件上传与魔数</title>
    <url>/2019/11/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E9%AD%94%E6%95%B0/</url>
    <content><![CDATA[<h2 id="问题的出现"><a href="#问题的出现" class="headerlink" title="问题的出现"></a>问题的出现</h2><p>今天在测试图片上传的时候，工作电脑中没有现成的图片（其实是懒得找），又不想去网上下载就把word文档改了后缀名(.jpeg)上传，没想到上传失败。</p>
<p>心里头非常纳闷，第一反应是代码有BUG，打开项目的过程中，不对。我把文件后缀名重新改回在上传文件，可以正常上传了。</p>
<span id="more"></span>

<h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>由此，问题已经定位了，是我的这个不正常行为引起的。但为什么会出现这个问题，打开搜索引擎一通猛搜。</p>
<p>原来是有一个叫做 <code>magic number</code> 的东西，文件的起始几个字节的内容是固定的，这几个字节的内容也被称为 <code>magic number</code>, 因此可以根据这几个字节的内容确定文件类型。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>常见的文件类型的魔数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FileType</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JPEG</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JPEG(<span class="string">&quot;JPEG&quot;</span>, <span class="string">&quot;FFD8FF&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * PNG</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PNG(<span class="string">&quot;PNG&quot;</span>, <span class="string">&quot;89504E47&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GIF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GIF(<span class="string">&quot;GIF&quot;</span>, <span class="string">&quot;47494638&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TIFF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIFF(<span class="string">&quot;TIFF&quot;</span>, <span class="string">&quot;49492A00&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BMP(<span class="string">&quot;BMP&quot;</span>, <span class="string">&quot;424D&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CAD</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DWG(<span class="string">&quot;DWG&quot;</span>, <span class="string">&quot;41433130&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adobe photoshop</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PSD(<span class="string">&quot;PSD&quot;</span>, <span class="string">&quot;38425053&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Rich Text Format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RTF(<span class="string">&quot;RTF&quot;</span>, <span class="string">&quot;7B5C727466&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * XML</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    XML(<span class="string">&quot;XML&quot;</span>, <span class="string">&quot;3C3F786D6C&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HTML</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HTML(<span class="string">&quot;HTML&quot;</span>, <span class="string">&quot;68746D6C3E&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Outlook Express</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DBX(<span class="string">&quot;DBX&quot;</span>, <span class="string">&quot;CFAD12FEC5FD746F &quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Outlook</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PST(<span class="string">&quot;PST&quot;</span>, <span class="string">&quot;2142444E&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doc;xls;dot;ppt;xla;ppa;pps;pot;msi;sdw;db</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OLE2(<span class="string">&quot;OLE2&quot;</span>, <span class="string">&quot;0xD0CF11E0A1B11AE1&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Microsoft Word/Excel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    XLS_DOC(<span class="string">&quot;XLS_DOC&quot;</span>, <span class="string">&quot;D0CF11E0&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Microsoft Access</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MDB(<span class="string">&quot;MDB&quot;</span>, <span class="string">&quot;5374616E64617264204A&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Word Perfect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WPB(<span class="string">&quot;WPB&quot;</span>, <span class="string">&quot;FF575043&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Postscript</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    EPS_PS(<span class="string">&quot;EPS_PS&quot;</span>, <span class="string">&quot;252150532D41646F6265&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Adobe Acrobat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PDF(<span class="string">&quot;PDF&quot;</span>, <span class="string">&quot;255044462D312E&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows Password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PWL(<span class="string">&quot;PWL&quot;</span>, <span class="string">&quot;E3828596&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ZIP Archive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ZIP(<span class="string">&quot;ZIP&quot;</span>, <span class="string">&quot;504B0304&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ARAR Archive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RAR(<span class="string">&quot;RAR&quot;</span>, <span class="string">&quot;52617221&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WAVE</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAV(<span class="string">&quot;WAV&quot;</span>, <span class="string">&quot;57415645&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AVI</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AVI(<span class="string">&quot;AVI&quot;</span>, <span class="string">&quot;41564920&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Real Audio</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RAM(<span class="string">&quot;RAM&quot;</span>, <span class="string">&quot;2E7261FD&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Real Media</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RM(<span class="string">&quot;RM&quot;</span>, <span class="string">&quot;2E524D46&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quicktime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MOV(<span class="string">&quot;MOV&quot;</span>, <span class="string">&quot;6D6F6F76&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Windows Media</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ASF(<span class="string">&quot;ASF&quot;</span>, <span class="string">&quot;3026B2758E66CF11&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MIDI</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MID(<span class="string">&quot;MID&quot;</span>, <span class="string">&quot;4D546864&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    FileType(String key, String value) &#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的实现就是根据文件的魔数判断文件的真实类型</p>
<p>文件工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件投</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 16 进制的文件投信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFileHeader</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">28</span>];</span><br><span class="line">        InputStream inputStream = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        inputStream.read(b, <span class="number">0</span>, <span class="number">28</span>);</span><br><span class="line">        inputStream.close();</span><br><span class="line">        <span class="keyword">return</span> bytes2hex(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字节数组转换成16进制字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">bytes2hex</span><span class="params">(<span class="keyword">byte</span>[] src)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (src == <span class="keyword">null</span> || src.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">byte</span> b : src) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = b &amp; <span class="number">0xFF</span>;</span><br><span class="line">            String hv = Integer.toHexString(v);</span><br><span class="line">            <span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(hv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件路径获取文件类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileType <span class="title">getFileType</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String fileHead = getFileHeader(filePath);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == fileHead || fileHead.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fileHead = fileHead.toUpperCase();</span><br><span class="line">        FileType[] fileTypes = FileType.values();</span><br><span class="line">        <span class="keyword">for</span> (FileType type : fileTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileHead.startsWith(type.getValue())) &#123;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没想到这个被有意无意忽视的问题就这样出现在我的面前，真是意料之外，又在情理之中。</p>
<p>考虑一个问题，还是得想的多一点。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>magic number</tag>
        <tag>魔数</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>日志写入数据库Log4j2-JDBCAppender</title>
    <url>/2019/05/06/%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93Log4j2-JDBCAppender/</url>
    <content><![CDATA[<h1 id="Log4j2-JDBCAppender"><a href="#Log4j2-JDBCAppender" class="headerlink" title="Log4j2-JDBCAppender"></a>Log4j2-JDBCAppender</h1><p>JDBCAppender使用标准JDBC将日志事件写入关系数据库表。可以将其配置为使用JNDI数据源或自定义工厂方法获取JDBC连接。<br>无论采用哪种方法，都必须有连接池作为支持。否则，日志记录性能将受到很大影响。</p>
<h2 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><p>通过使用 <code>platform-bom</code> 来管理依赖的版本问题。使用 druid 作为 JDBCAppender 的连接池。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>platform-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Cairo-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="日志配置文件：log4j2-xml"><a href="#日志配置文件：log4j2-xml" class="headerlink" title="日志配置文件：log4j2.xml"></a>日志配置文件：log4j2.xml</h2><p><code>&lt;JDBC&gt;&lt;/JDBC&gt;</code> 是 Log4j2 的 JDBCAppender 的标签。</p>
<p><code>ConnectionFactory</code> 是一个实现 Druid 连接池的单例类， 通过 <code>method</code> 属性来获取 <code>java.sql.Connection</code>。</p>
<p><code>Column</code> 表示数据表 <code>log4j2</code> 的字段。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] %c&#123;1&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JDBCAppender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">JDBC</span> <span class="attr">name</span>=<span class="string">&quot;jdbc&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;log4j2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ConnectionFactory</span> <span class="attr">class</span>=<span class="string">&quot;com.littlefxc.examples.log4j2.ConnectionFactory&quot;</span> <span class="attr">method</span>=<span class="string">&quot;getDatabaseConnection&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据表 log4j2 中的字段 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;level&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%level&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%logger&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%message&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Column</span> <span class="attr">name</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;%ex&#123;full&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">JDBC</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">&quot;com.littlefxc.examples.log4j2&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;jdbc&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="数据库文件：schema-sql"><a href="#数据库文件：schema-sql" class="headerlink" title="数据库文件：schema.sql"></a>数据库文件：schema.sql</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> log4j2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `log4j2`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">char</span>(<span class="number">23</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `level` <span class="type">char</span>(<span class="number">5</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `logger` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `message` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `exception` <span class="type">varchar</span>(<span class="number">1000</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.log4j2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Log4j2 ConnectionFactory</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        String lineSeparator = File.separator;</span><br><span class="line">        String fileName = String.join(lineSeparator,</span><br><span class="line">                System.getProperty(<span class="string">&quot;user.dir&quot;</span>), <span class="string">&quot;Log4j2-JDBCAppender&quot;</span>, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;resources&quot;</span>, <span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (InputStream stream = <span class="keyword">new</span> FileInputStream(fileName)) &#123;</span><br><span class="line">            properties.load(stream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        ((DruidDataSource) <span class="keyword">this</span>.dataSource).configFromPropety(properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getDatabaseConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ConnectionFactory INSTANCE = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ConnectionFactory</code> 是一个实现 Druid 连接池的单例类。</p>
<h3 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">druid.url=jdbc:mysql://192.168.120.63:3306/learn?useSSL=false</span></span><br><span class="line"><span class="string">druid.username=root</span></span><br><span class="line"><span class="string">druid.password=123456</span></span><br><span class="line"><span class="string">druid.driverClassName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">druid.maxActive=10</span></span><br><span class="line"><span class="string">druid.minIdle=5</span></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.log4j2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(App.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;This is debug&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;This is info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;This is warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;This is error&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;This is error&quot;</span>, <span class="keyword">new</span> RuntimeException(<span class="string">&quot;this is a exception&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>日志写入数据库Logback-JDBCAppender</title>
    <url>/2019/05/06/%E6%97%A5%E5%BF%97%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93Logback-JDBCAppender/</url>
    <content><![CDATA[<h1 id="Logback-DBAppender"><a href="#Logback-DBAppender" class="headerlink" title="Logback-DBAppender"></a>Logback-DBAppender</h1><p>DBAppender以独立于Java编程语言的格式将日志事件插入到三个数据库表中。<br>这三个表是 <code>logging_event</code>、<code>logging_event_property</code> 和 <code>logging_event_exception</code>。<br>在使用DBAppender之前，它们必须存在。Logback附带了创建表的SQL脚本。<br>它们可以在 <code>logback-classic/src/main/java/ch/qos/logback/classic/db/script</code> 文件夹下找到。<br>对于每个最流行的数据库系统，都有一个特定的脚本。如果您的特定类型的数据库系统缺少脚本，那么应该很容易以现有脚本为例编写一个脚本。<br>如果JDBC驱动程序支持JDBC 3.0规范中引入的getGeneratedKeys方法，假设您已经创建了如上所述的适当的数据库表，那么就不需要额外的步骤。<br>否则，必须有适合您的数据库系统的sql方言。目前，logback有H2、HSQL、MS SQL Server、MySQL、Oracle、PostgreSQL、SQLLite和Sybase等多种方言。</p>
<span id="more"></span>

<p>如前所述，logback使用三个表来存储日志事件数据:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> logging_event_property;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> logging_event_exception;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> logging_event;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event</span><br><span class="line">(</span><br><span class="line">    timestmp         <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    formatted_message  TEXT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    logger_name       <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    level_string      <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    thread_name       <span class="type">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    reference_flag    <span class="type">SMALLINT</span>,</span><br><span class="line">    arg0              <span class="type">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg1              <span class="type">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg2              <span class="type">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    arg3              <span class="type">VARCHAR</span>(<span class="number">254</span>),</span><br><span class="line">    caller_filename   <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    caller_class      <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    caller_method     <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    caller_line       <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    event_id          <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event_property</span><br><span class="line">(</span><br><span class="line">    event_id	      <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    mapped_key        <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    mapped_value      TEXT,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(event_id, mapped_key),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (event_id) <span class="keyword">REFERENCES</span> logging_event(event_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> logging_event_exception</span><br><span class="line">(</span><br><span class="line">    event_id         <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    i                <span class="type">SMALLINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    trace_line       <span class="type">VARCHAR</span>(<span class="number">254</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(event_id, i),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (event_id) <span class="keyword">REFERENCES</span> logging_event(event_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<h2 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><p>通过使用 <code>platform-bom</code> 来管理依赖的版本问题。使用 druid 作为 JDBCAppender 的连接池。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>platform-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Cairo-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="日志配置文件：logback-xml"><a href="#日志配置文件：logback-xml" class="headerlink" title="日志配置文件：logback.xml"></a>日志配置文件：logback.xml</h2><p><code>ch.qos.logback.classic.db.DBAppender</code> 是 logback 中 DBAppender 的实现类。</p>
<p><code>ch.qos.logback.core.db.DataSourceConnectionSource</code> 是 DBAppender 的管理数据源的类。</p>
<p><code>com.alibaba.druid.pool.DruidDataSource</code> 是数据源连接池，你也可以选择其它数据源连接池。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DB&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.db.DBAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connectionSource</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.db.DataSourceConnectionSource&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- DruidDataSource 中的属性配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://192.168.120.63:3306/learn?useSSL=false<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">connectionSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.littlefxc.examples.logback&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DB&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.littlefxc.examples.logback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/12</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(App.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">        log.debug(<span class="string">&quot;This is debug&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> r = System.currentTimeMillis();</span><br><span class="line">        System.out.println(r - l);</span><br><span class="line">        log.info(<span class="string">&quot;This is info&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;This is warn&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;This is error&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;This is exception&quot;</span>, <span class="keyword">new</span> RuntimeException(<span class="string">&quot;this is a exception&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>logback</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>海量数据的存储与访问瓶颈解决方案 - 数据切分</title>
    <url>/2021/05/20/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%BF%E9%97%AE%E7%93%B6%E9%A2%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%20-%20%E6%95%B0%E6%8D%AE%E5%88%87%E5%88%86/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在当今这个时代，人们对互联网的依赖程度非常高，也因此产生了大量的数据，企业视这些数据为瑰宝。而这些被视为瑰宝的数据为我们的系统带来了很大的烦恼。这些海量数据的存储与访问成为了系统设计与使用的瓶颈，而这些数据往往存储在数据库中，传统的数据库存在着先天的不足，即单机（单库）性能瓶颈，并且扩展起来非常的困难。在当今的这个大数据时代，我们急需解决这个问题。如果单机数据库易于扩展，数据可切分，就可以避免这些问题，但是当前的这些数据库厂商，包括开源的数据库MySQL在内，提供这些服务都是需要收费的，所以我们转向一些第三方的软件，使用这些软件做数据的切分，将原本在一台数据库上的数据，分散到多台数据库当中，降低每一个单体数据库的负载。那么我们如何做数据切分呢？</p>
<span id="more"></span>

<h2 id="数据切分"><a href="#数据切分" class="headerlink" title="数据切分"></a>数据切分</h2><p>数据切分，简单的说，就是通过某种条件，将我们之前存储在一台数据库上的数据，分散到多台数据库中，从而达到降低单台数据库负载的效果。数据切分，根据其切分的规则，大致分为两种类型，垂直切分和水平切分。</p>
<h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><p>垂直切分就是按照不同的表或者Schema切分到不同的数据库中，比如：在我们的课程中，订单表（order）和商品表（product）在同一个数据库中，而我们现在要对其切分，使得订单表（order）和商品表（product）分别落到不同的物理机中的不同的数据库中，使其完全隔离，从而达到降低数据库负载的效果。如图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df98f83095fac1e06150519.png" alt="图片描述"></p>
<p>垂直切分的特点就是规则简单，易于实施，可以根据业务模块进行划分，各个业务之间耦合性低，相互影响也较小。</p>
<p>一个架构设计较好的应用系统，其总体功能肯定是有多个不同的功能模块组成的。每一个功能模块对应着数据库里的一系列表。例如在咱们的课程当中，商品功能模块对应的表包括：类目、属性、属性值、品牌、商品、sku等表。而在订单模块中，对应的表包括：订单、订单明细、订单收货地址、订单日志等。如图所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df98fd70918ff9505720593.png" alt="图片描述"></p>
<p>在架构设计中，各个功能模块之间的交互越统一、越少越好。这样，系统模块之间的耦合度会很低，各个系统模块的可扩展性、可维护性也会大大提高。这样的系统，实现数据的垂直切分就会很容易。</p>
<p>但是，在实际的系统架构设计中，有一些表很难做到完全的独立，往往存在跨库join的现象。还是上面的例子，比如我们接到了一个需求，要求查询某一个类目产生了多少订单，如果在单体数据库中，我们直接连表查询就可以了。但是现在垂直切分成了两个数据库，跨库连表查询是十分影响性能的，也不推荐这样用，只能通过接口去调取服务，这样系统的复杂度又升高了。对于这种很难做到完全独立的表，作为系统架构设计人员，就要去做平衡，是数据库让步于业务，将这些表放在一个数据库当中？还是拆分成多个数据库，业务之间通过接口来调用呢？在系统初期，数据量比较小，资源也有限，往往会选择放在一个数据库当中。而随着业务的发展，数据量达到了一定的规模，就有必要去进行数据的垂直切分了。而如何进行切分，切分到什么程度，则是对架构师的一个艰难的考验。</p>
<p>下面我们来看看垂直切分的优缺点：</p>
<p>优点：</p>
<ul>
<li>拆分后业务清晰，拆分规则明确；</li>
<li>系统之间容易扩展和整合；</li>
<li>数据维护简单</li>
</ul>
<p>缺点：</p>
<ul>
<li>部分业务表无法join，只能通过接口调用，提升了系统的复杂度；</li>
<li>跨库事务难以处理；</li>
<li>垂直切分后，某些业务数据过于庞大，仍然存在单体性能瓶颈；</li>
</ul>
<p>正如缺点中的最后一条所说，当某一个业务模块的数据暴增时，仍然存在着单机性能缺陷。还是之前的例子，如果出现了一个爆款商品，订单量急剧上升，达到了单机性能瓶颈，那么你所有和订单相关的业务都要受到影响。这时我们就要用到水平切分。</p>
<h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><p>水平切分相比垂直切分，更为复杂。它需要将一个表中的数据，根据某种规则拆分到不同的数据库中，例如：订单尾号为奇数的订单放在了订单数据库1中，而订单尾号为偶数的订单放在了订单数据库2中。这样，原本存在一个数据库中的订单数据，被水平的切分成了两个数据库。在查询订单数据时，我们还要根据订单的尾号，判断这个订单在数据库1中，还是在数据库2中，然后将这条SQL语句发送到正确的数据库中，查出订单。水平切分的架构图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df98ff209eb4fc605460581.png" alt="图片描述"></p>
<p>水平拆分数据，要先订单拆分的规则，找到你要按哪个维度去拆分，还是前面订单的例子，我们按照订单尾号的奇偶去拆分，那么这样拆分会有什么影响呢？假如我是一个用户，我下了两个订单，一个订单尾号为奇数，一个订单尾号为偶数，这时，我去个人中心，订单列表页去查看我的订单。那么这个订单列表页要去怎么查，要根据我的用户id分别取订单1库和订单2库去查询出订单，然后再合并成一个列表，是不是很麻烦。所以，咱们在拆分数据时，一定要结合业务，选择出适合当前业务场景的拆分规则。那么按照用户id去拆分数据就合理吗？也不一定，比如：咱们的身份变了，不是买家了，而是卖家，我这个卖家有很多的订单，卖家的后台系统也有订单列表页，那这个订单列表页要怎么样去查？是不是也要在所有的订单库中查一遍，然后再聚合成一个订单列表呀。那这样看，是不是按照用户id去拆分订单又不合理了。所以在做数据水平拆分时，是对架构师的真正考验。</p>
<p>我们看看几种水平拆分的典型的分片规则：</p>
<ul>
<li><p>用户id求模，我们前面已经提到过；</p>
</li>
<li><p>按照日期去拆分数据；</p>
</li>
<li><p>按照其他字段求模，去拆分数据；</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/5df990110998744709370731.png" alt="图片描述"></p>
</li>
</ul>
<p>上面是按照用户id去求模拆分的一个示意图。</p>
<p>咱们再来看看水平拆分的优缺点：</p>
<p>优点：</p>
<ul>
<li>解决了单库大数据、高并发的性能瓶颈；</li>
<li>拆分规则封装好，对应用端几乎透明，开发人员无需关心拆分细节；</li>
<li>提高了系统的稳定性和负载能力；</li>
</ul>
<p>缺点：</p>
<ul>
<li>拆分规则很难抽象；</li>
<li>分片事务一致性难以解决；</li>
<li>二次扩展时，数据迁移、维护难度大。比如：开始我们按照用户id对2求模，但是随着业务的增长，2台数据库难以支撑，还是继续拆分成4个数据库，那么这时就需要做数据迁移了。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>世界上的万物没有完美的，有利就有弊，就像数据切分一样。无论是垂直切分，还是水平切分，它们解决了海量数据的存储和访问性能问题，但也随之而来的带来了很多新问题，它们的共同缺点有：</p>
<ul>
<li>分布式的事务问题；</li>
<li>跨库join问题；</li>
<li>多数据源的管理问题</li>
</ul>
<p>针对多数据源的管理问题，主要有两种思路：</p>
<ol>
<li>客户端模式，在每个应用模块内，配置自己需要的数据源，直接访问数据库，在各模块内完成数据的整合；</li>
<li>中间代理模式，中间代理统一管理所有的数据源，数据库层对开发人员完全透明，开发人员无需关注拆分的细节。</li>
</ol>
<p>基于这两种模式，目前都有成熟的第三方软件，接下来在我们的视频中，会分别给大家介绍这两种模式的代表作：</p>
<ul>
<li>中间代理模式：MyCat</li>
<li>客户端模式：sharding-jdbc</li>
</ul>
]]></content>
      <tags>
        <tag>读写分离</tag>
        <tag>分库分表</tag>
      </tags>
  </entry>
  <entry>
    <title>源码分析:SpringBoot启动流程分析原理</title>
    <url>/2020/02/26/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-SpringBoot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>我们都知道SpringBoot自问世以来，一直有一个响亮的口号”约定优于配置”，其实一种按约定编程的软件设计范式，目的在于减少软件开发人员在工作中的各种繁琐的配置，我们都知道传统的SSM框架的组合，会伴随着大量的繁琐的配置；稍有不慎，就可能各种bug，被人发现还以为我们技术很菜。而SpringBoot的出现不仅大大提高的开发人员的效率，还能避免由于”手抖”带来的配置错误。</p>
</blockquote>
<span id="more"></span>

<p>很多程序员都感慨**<code>SpringBoot</code><strong>的到来大大解放了生产力，但是也有聪明的程序猿会多思考一下下，</strong><code>SpringBoot</code><strong>是怎么做到的约定的配置？它配置在了哪里？又是怎么启动的作用等等一系列的问号在跟女朋友花前月下的时候，依然会时不时冒出来。这严重影响了程序猿们的”幸”福生活，为了能广大”程序猿”同胞过上幸福美满的生活，今天咱么就来一起跟随源码探究下</strong><code>SpringBoot</code>**到底是如何做到”<strong>约定优于配置</strong>“的。</p>
<p>首先，我们先介绍下我们的演示的项目环境，我们先试用**<code>Spring Initializr</code><strong>来创建一个</strong><code>SpirngBoot</code><strong>工程。我们使用的版本是</strong><code>SpringBoot 2.1.5.RELEASE</code>**。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_1.png"></p>
<p>接下来就只在<strong>pom.xml</strong>文件中添加一个web工程的依赖，是为了观察后面容器类型的源码。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们的环境就准备好了。</p>
<p>我们跟着<strong>SpringBoot</strong>的源码来探究它的启动流程，首先，先找到这个应用程序的入口主方法，在上面打一个断点</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_2.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_2.png"></p>
<p>启动之后，<strong>F5</strong> 进入到 <code>run()</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources,String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里会执行<code>new SpringApplication(primarySources)</code>创建spring应用对象，继续F5往下跟会执行<strong>SpringApplication构造器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SpringApplication构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 资源加载器</span></span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 1. 可能的web应用程序类型的类型。</span></span><br><span class="line">		<span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 2. 设置初始化应用context</span></span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">				ApplicationContextInitializer.class));</span><br><span class="line">	<span class="comment">// 3.设置初始化监听	</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">	<span class="comment">// 4. 推演主程序类	</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>很多不为人知的事情都是发生在这个对象初始化的时候，这里我们都来一一解密</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> WebApplicationType <span class="title">deduceFromClasspath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">				&amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class="keyword">null</span>)</span><br><span class="line">				&amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class="keyword">null</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> WebApplicationType.REACTIVE;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (String className : SERVLET_INDICATOR_CLASSES) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</span><br><span class="line">				<span class="keyword">return</span> WebApplicationType.NONE;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="comment">// 这里是我们测试web容器</span></span><br><span class="line">		<span class="keyword">return</span> WebApplicationType.SERVLET;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="一、推断-web-应用类型"><a href="#一、推断-web-应用类型" class="headerlink" title="一、推断 web 应用类型"></a>一、推断 web 应用类型</h1><p>这段代码是来推断我们的应用是哪种 web 应用程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">WebApplicationType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should not run as a web application and should not start an</span></span><br><span class="line"><span class="comment">	 * embedded web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	NONE, <span class="comment">// 不是web应用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should run as a servlet-based web application and should start an</span></span><br><span class="line"><span class="comment">	 * embedded servlet web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	SERVLET, <span class="comment">// servlet容器</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The application should run as a reactive web application and should start an</span></span><br><span class="line"><span class="comment">	 * embedded reactive web server.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	REACTIVE;  <span class="comment">// 反应型web应用（webflux）</span></span><br></pre></td></tr></table></figure>

<p>当然一开始我们加入了web的依赖，所以我们是<code>servlet</code>容器，</p>
<h1 id="二、初始化应用上下文"><a href="#二、初始化应用上下文" class="headerlink" title="二、初始化应用上下文"></a><strong>二、初始化应用上下文</strong></h1><p>在设置初始化应用context的时候 ，是先执行了getSpringFactoriesInstances(ApplicationContextInitializer.class)方法，参数是ApplicationContextInitializer.class字节码对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params">		Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">		ClassLoader classLoader = getClassLoader();</span><br><span class="line">		<span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">		Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">      <span class="comment">// 加载ApplicationContextInitializer.class类型的类</span></span><br><span class="line">       <span class="comment">// 这里传入就是参数 ApplicationContextInitializer.clas</span></span><br><span class="line">	 	SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">    <span class="comment">// 实例化加载到的类</span></span><br><span class="line">		List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">				classLoader, args, names);</span><br><span class="line">		AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line">	<span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">		String factoryClassName = factoryClass.getName();</span><br><span class="line">		<span class="keyword">return</span> loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先来看看他是如何加载到这些类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">// 先从缓存中拿</span></span><br><span class="line">		MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">		<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 去资源路径下加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTORIES_RESOURCE_LOCATION = <span class="string">&quot;META-INF/spring.factories&quot;</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">&quot;META-INF/spring.factories&quot;</span>; </span><br><span class="line">	Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?	</span><br><span class="line"> classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :     ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION);			result = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">				URL url = urls.nextElement();</span><br><span class="line">				UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">				Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">				<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">					String factoryClassName = ((String) entry.getKey()).trim();</span><br><span class="line">					<span class="keyword">for</span> (String factoryName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) &#123;</span><br><span class="line">			result.add(factoryClassName, factoryName.trim());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			cache.put(classLoader, result);</span><br><span class="line">             <span class="comment">// 返回所有的加载的类</span></span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">					FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>这里有两个加载配置类的地方其实都指向了**<code>META-INF/spring.factories</code><strong>，通过断点我们可以看到应用程序是加载了以下几个jar下的</strong><code>spring.factores</code>**文件。</p>
<p>双击Shift搜索spring.factories可以看到它存在于以下工程中</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_3.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_3.png"></p>
<p>**<code>spring-boot-2.1.5.RELEASE.jar</code><strong>下的</strong><code>spring.factores</code>**（截图未完整截取）</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_4.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_4.png"></p>
<p><strong><code>spring-boot-autoconfigure-2.1.5.RELEASE.jar</code><strong>下的</strong><code>spring.factores</code></strong> </p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_5.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_5.png"></p>
<p><strong><code>spring-beans-5.1.7.RELEASE.jar</code><strong>下的</strong><code>spring.factores</code></strong> </p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_6.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_6.png"></p>
<p>从Map中根据**<code>org.springframework.context.ApplicationContextInitializer</code><strong>的类型拿到需要的类初始化类，断点进入</strong><code>getOrDefault(factoryClassName, Collections.emptyList());</code>**方法</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_7.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_7.png"></p>
<p>之后就是把加载到的需要初始化的类进行实例化添加到一个集合中等待备用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInitializers</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			Collection&lt;? extends ApplicationContextInitializer&lt;?&gt;&gt; initializers)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.initializers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">this</span>.initializers.addAll(initializers);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、初始化监听器类"><a href="#三、初始化监听器类" class="headerlink" title="三、初始化监听器类"></a><strong>三、初始化监听器类</strong></h1><p>最关键的的还是这句</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_8.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_8.png"></p>
<p>当我们跟进去之后，会发现在初始化监听类的时候和上面初始化应用上下文是一样的代码。唯一不同的是**<code>getSpringFactoriesInstances(ApplicationListener.class))</code><strong>传进去的是</strong><code>ApplicationListener.class</code>**所以这里就不再赘述。</p>
<h1 id="四、推演主程序类"><a href="#四、推演主程序类" class="headerlink" title="四、推演主程序类"></a><strong>四、推演主程序类</strong></h1><p>也就是这个最关键的代码了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();**</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_9.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_9.png"></p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_10.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/springbootllanuch_10.png"></p>
<p>到这里就完成了**<code>SpringBoot</code><strong>启动过程中初始化</strong><code>SpringApplication</code>**的过程。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h1><p>这篇文章主要是给大家说了下**<code>SpringBoot</code><strong>启动过程中初始化</strong><code>SpringApplication</code>**的流程，大致可以分为四个步骤:</p>
<ol>
<li>推演web应用的类型（如果没有加web依赖类型NONE）</li>
<li>初始化**<code>ApplicationContextInitializer</code>**</li>
<li>初始化**<code>ApplicationListener</code>**</li>
<li>推演出主程序类</li>
</ol>
<p>通过这样四个步骤就完成了第一步**<code>SpringApplication</code>**的初始化过程。</p>
]]></content>
  </entry>
  <entry>
    <title>理解Redis的持久化机制:RDB&amp;AOF</title>
    <url>/2020/12/24/%E7%90%86%E8%A7%A3Redis%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6-RDB-AOF/</url>
    <content><![CDATA[<blockquote>
<p>转载自<a href="https://juejin.cn/post/6844903874927525902#heading-21">https://juejin.cn/post/6844903874927525902#heading-21</a></p>
</blockquote>
<h1 id="什么是Redis持久化"><a href="#什么是Redis持久化" class="headerlink" title="什么是Redis持久化?"></a>什么是Redis持久化?</h1><hr>
<p><code>Redis</code>作为一个键值对内存数据库(<code>NoSQL</code>)，数据都存储在内存当中，在处理客户端请求时，所有操作都在内存当中进行，如下所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_1.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_1.jpg"></p>
<p>这样做有什么问题呢？</p>
<span id="more"></span>

<p>其实，只要稍微有点计算机基础知识的人都知道，存储在内存当中的数据，只要服务器关机(各种原因引起的)，内存中的数据就会消失了，不仅服务器关机会造成数据消失，<code>Redis</code>服务器守护进程退出，内存中的数据也一样会消失。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_2.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_2.jpg"></p>
<p>于只把<code>Redis</code>当缓存来用的项目来说，数据消失或许问题不大，重新从数据源把数据加载进来就可以了，但如果直接把用户提交的业务数据存储在<code>Redis</code>当中，把<code>Redis</code>作为数据库来使用，在其放存储重要业务数据，那么<code>Redis</code>的内存数据丢失所造成的影响也许是毁灭性。</p>
<p>为了避免内存中数据丢失，Redis提供了对持久化的支持，我们可以选择不同的方式将数据从内存中保存到硬盘当中，使数据可以持久化保存。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_3.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_3.jpg"></p>
<p>Redis提供了RDB和AOF两种不同的数据持久化方式，下面我们就来详细介绍一下这种不同的持久化方式吧。</p>
<h1 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h1><hr>
<p><code>RDB</code>是一种快照存储持久化方式，具体就是将Redis某一时刻的内存数据保存到硬盘的文件当中，默认保存的文件名为<code>dump.rdb</code>，而在<code>Redis</code>服务器启动时，会重新加载<code>dump.rdb</code>文件的数据到内存当中恢复数据。</p>
<h2 id="开启RDB持久化方式"><a href="#开启RDB持久化方式" class="headerlink" title="开启RDB持久化方式"></a>开启RDB持久化方式</h2><p>开启<code>RDB</code>持久化方式很简单，客户端可以通过向<code>Redis</code>服务器发送<code>save</code>或<code>bgsave</code>命令让服务器生成<code>rdb</code>文件，或者通过服务器配置文件指定触发<code>RDB</code>条件。</p>
<h3 id="1-save命令"><a href="#1-save命令" class="headerlink" title="1. save命令"></a>1. save命令</h3><p><code>save</code>命令是一个同步操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同步数据到磁盘上</span></span><br><span class="line">&gt; save</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_4.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_4.jpg"></p>
<p><strong>当客户端向服务器发送<code>save</code>命令请求进行持久化时，服务器会阻塞<code>save</code>命令之后的其他客户端的请求，直到数据同步完成。</strong></p>
<p>如果数据量太大，同步数据会执行很久，而这期间Redis服务器也无法接收其他请求，所以，最好不要在生产环境使用save命令。</p>
<h3 id="2-bgsave"><a href="#2-bgsave" class="headerlink" title="2. bgsave"></a>2. bgsave</h3><p>与<code>save</code>命令不同，<code>bgsave</code>命令是一个异步操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异步保存数据集到磁盘上</span></span><br><span class="line">&gt; bgsave</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_5.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_5.jpg"></p>
<p>当客户端发服务发出<code>bgsave</code>命令时，<code>Redis</code>服务器主进程会<code>forks</code>一个子进程来数据同步问题，在将数据保存到rdb文件之后，子进程会退出。</p>
<p>所以，与<code>save</code>命令相比，<code>Redis</code>服务器在处理<code>bgsave</code>采用子线程进行IO写入，而主进程仍然可以接收其他请求，但<code>forks</code>子进程是同步的，所以<code>forks</code>子进程时，一样不能接收其他请求，这意味着，<strong>如果forks一个子进程花费的时间太久(一般是很快的)，<code>bgsave</code>命令仍然有阻塞其他客户的请求的情况发生。</strong></p>
<h3 id="3-服务器配置自动触发"><a href="#3-服务器配置自动触发" class="headerlink" title="3. 服务器配置自动触发"></a>3. 服务器配置自动触发</h3><p>除了通过客户端发送命令外，还有一种方式，就是在<code>Redis</code>配置文件中的<code>save</code>指定到达触发RDB持久化的条件，比如【多少秒内至少达到多少写操作】就开启<code>RDB</code>数据同步。</p>
<p>例如我们可以在配置文件<code>redis.conf</code>指定如下的选项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 900s内至少达到一条写命令</span><br><span class="line">save 900 1</span><br><span class="line"># 300s内至少达至10条写命令</span><br><span class="line">save 300 10</span><br><span class="line"># 60s内至少达到10000条写命令</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>

<p>之后在启动服务器时加载配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务器加载配置文件</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<p>这种通过服务器配置文件触发RDB的方式，与bgsave命令类似，达到触发条件时，会forks一个子进程进行数据同步，不过<strong>最好不要通过这方式来触发RDB持久化，因为设置触发的时间太短，则容易频繁写入rdb文件，影响服务器性能，时间设置太长则会造成数据丢失</strong>。</p>
<h2 id="rdb文件"><a href="#rdb文件" class="headerlink" title="rdb文件"></a>rdb文件</h2><p>前面介绍了三种让服务器生成rdb文件的方式，无论是由主进程生成还是子进程来生成，其过程如下：</p>
<ol>
<li>生成临时rdb文件，并写入数据。</li>
<li>完成数据写入，用临时文代替代正式rdb文件。</li>
<li>删除原来的db文件。</li>
</ol>
<p>RDB默认生成的文件名为dump.rdb，当然，我可以通过配置文件进行更加详细配置，比如在单机下启动多个redis服务器进程时，可以通过端口号配置不同的rdb名称，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 是否压缩rdb文件</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># rdb文件的名称</span><br><span class="line">dbfilename redis-6379.rdb</span><br><span class="line"></span><br><span class="line"># rdb文件保存目录</span><br><span class="line">dir ~&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="RDB的几个优点"><a href="#RDB的几个优点" class="headerlink" title="RDB的几个优点"></a>RDB的几个优点</h2><ol>
<li>与AOF方式相比，通过rdb文件恢复数据比较快。</li>
<li>rdb文件非常紧凑，适合于数据备份。</li>
<li>通过RDB进行数据备，由于使用子进程生成，所以对Redis服务器性能影响较小。</li>
</ol>
<h2 id="RDB的几个缺点"><a href="#RDB的几个缺点" class="headerlink" title="RDB的几个缺点"></a><strong>RDB的几个缺点</strong></h2><ol>
<li>如果服务器宕机的话，采用<code>RDB</code>的方式会造成某个时段内数据的丢失，比如我们设置10分钟同步一次或5分钟达到1000次写入就同步一次，那么如果还没达到触发条件服务器就死机了，那么这个时间段的数据会丢失。</li>
<li>使用save命令会造成服务器阻塞，直接数据同步完成才能接收后续请求。</li>
<li>使用bgsave命令在forks子进程时，如果数据量太大，forks的过程也会发生阻塞，另外，forks子进程会耗费内存。</li>
</ol>
<h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>聊完了<code>RDB</code>,来聊聊<code>Redis</code>的另外一个持久化方式：<code>AOF(Append-only file)</code>。</p>
<p>与<code>RDB</code>存储某个时刻的快照不同，<code>AOF</code>持久化方式会记录客户端对服务器的每一次写操作命令，并将这些写操作以<code>Redis</code>协议追加保存到以后缀为<code>aof</code>文件末尾，在Redis服务器重启时，会加载并运行<code>aof</code>文件的命令，以达到恢复数据的目的。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_6.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_6.jpg"></p>
<h2 id="开启AOF持久化方式"><a href="#开启AOF持久化方式" class="headerlink" title="开启AOF持久化方式"></a>开启AOF持久化方式</h2><p>Redis默认不开启AOF持久化方式，我们可以在配置文件中开启并进行更加详细的配置，如下面的redis.conf文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启aof机制</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line"># aof文件名</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或no</span><br><span class="line">appendfsync always</span><br><span class="line"></span><br><span class="line"># 默认不重写aof文件</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 保存目录</span><br><span class="line">dir ~&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure>

<h2 id="三种写入策略"><a href="#三种写入策略" class="headerlink" title="三种写入策略"></a>三种写入策略</h2><p>在上面的配置文件中，我们可以通过<code>appendfsync</code>选项指定写入策略,有三个选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendfsync always</span><br><span class="line"># appendfsync everysec</span><br><span class="line"># appendfsync no</span><br></pre></td></tr></table></figure>

<p>在上面的配置文件中，我们可以通过<code>appendfsync</code>选项指定写入策略,有三个选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendfsync always</span><br><span class="line"># appendfsync everysec</span><br><span class="line"># appendfsync no</span><br></pre></td></tr></table></figure>

<h3 id="1-always"><a href="#1-always" class="headerlink" title="1. always"></a>1. always</h3><p>客户端的每一个写操作都保存到<code>aof</code>文件当，这种策略很安全，但是每个写请注都有IO操作，所以也很慢。</p>
<h3 id="2-everysec"><a href="#2-everysec" class="headerlink" title="2. everysec"></a>2. everysec</h3><p><code>appendfsync</code>的默认写入策略，每秒写入一次<code>aof</code>文件，因此，最多可能会丢失1s的数据。</p>
<h3 id="3-no"><a href="#3-no" class="headerlink" title="3. no"></a>3. no</h3><p><code>Redis</code>服务器不负责写入<code>aof</code>，而是交由操作系统来处理什么时候写入<code>aof</code>文件。更快，但也是最不安全的选择，不推荐使用。</p>
<h2 id="AOF文件重写"><a href="#AOF文件重写" class="headerlink" title="AOF文件重写"></a>AOF文件重写</h2><p>AOF将客户端的每一个写操作都追加到<code>aof</code>文件末尾，比如对一个key多次执行incr命令，这时候，<code>aof</code>保存每一次命令到aof文件中，aof文件会变得非常大。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">incr num 1</span><br><span class="line">incr num 2</span><br><span class="line">incr num 3</span><br><span class="line">incr num 4</span><br><span class="line">incr num 5</span><br><span class="line">incr num 6</span><br><span class="line">...</span><br><span class="line">incr num 100000</span><br></pre></td></tr></table></figure>

<p>aof文件太大，加载aof文件恢复数据时，就会非常慢，为了解决这个问题，Redis支持aof文件重写，通过重写aof，可以生成一个恢复当前数据的最少命令集，比如上面的例子中那么多条命令，可以重写为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> num 100000</span><br></pre></td></tr></table></figure>

<p>aof文件是一个二进制文件，并不是像上面的例子一样，直接保存每个命令，而使用Redis自己的格式，上面只是方便演示。</p>
<h2 id="两种重写方式"><a href="#两种重写方式" class="headerlink" title="两种重写方式"></a>两种重写方式</h2><p>通过在<code>redis.conf</code>配置文件中的选项<code>no-appendfsync-on-rewrite</code>可以设置是否开启重写，这种方式会在每次<code>fsync</code>时都重写，影响服务器性能，因此默认值为no，不推荐使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认不重写aof文件</span><br><span class="line">no-appendfsync-on-rewrite no</span><br></pre></td></tr></table></figure>

<p>客户端向服务器发送<code>bgrewriteaof</code>命令，也可以让服务器进行AOF重写。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让服务器异步重写追加aof文件命令</span></span><br><span class="line">&gt; bgrewriteaof</span><br></pre></td></tr></table></figure>

<p><strong>AOF重写方式也是异步操作</strong>，即如果要写入aof文件，则Redis主进程会forks一个子进程来处理，如下所示：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_7.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_7.jpg"></p>
<h3 id="重写aof文件的好处"><a href="#重写aof文件的好处" class="headerlink" title="重写aof文件的好处"></a>重写aof文件的好处</h3><ol>
<li>压缩aof文件，减少磁盘占用量。</li>
<li>将aof的命令压缩为最小命令集，加快了数据恢复的速度。</li>
</ol>
<h2 id="AOF文件损坏"><a href="#AOF文件损坏" class="headerlink" title="AOF文件损坏"></a>AOF文件损坏</h2><p>在写入aof日志文件时，如果Redis服务器宕机，则aof日志文件文件会出格式错误，在重启Redis服务器时，Redis服务器会拒绝载入这个aof文件，可以通过以下步骤修复aof并恢复数据。</p>
<ol>
<li><p>备份现在aof文件，以防万一。</p>
</li>
<li><p>使用<code>redis-check-aof</code>命令修复aof文件，该命令格式如下：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复aof日志文件</span></span><br><span class="line">$ redis-check-aof -fix file.aof</span><br></pre></td></tr></table></figure></li>
<li><p>重启Redis服务器，加载已经修复的aof文件，恢复数据。</p>
</li>
</ol>
<h2 id="AOF的优点"><a href="#AOF的优点" class="headerlink" title="AOF的优点"></a>AOF的优点</h2><p>AOF只是追加日志文件，因此对服务器性能影响较小，速度比RDB要快，消耗的内存较少。</p>
<h2 id="AOF的缺点"><a href="#AOF的缺点" class="headerlink" title="AOF的缺点"></a>AOF的缺点</h2><ol>
<li>AOF方式生成的日志文件太大，即使通过AFO重写，文件体积仍然很大。</li>
<li>恢复数据的速度比RDB慢。</li>
</ol>
<h1 id="选择RDB还是AOF呢？"><a href="#选择RDB还是AOF呢？" class="headerlink" title="选择RDB还是AOF呢？"></a>选择RDB还是AOF呢？</h1><p>通过上面的介绍，我们了解了RDB与AOF各自的优点与缺点，到底要如何选择呢？</p>
<p>通过下面的表示，我们可以从几个方面对比一下RDB与AOF,在应用时，要根本自己的实际需求，选择RDB或者AOF，其实，如果想要数据足够安全，可以两种方式都开启，但两种持久化方式同时进行IO操作，会严重影响服务器性能，因此有时候不得不做出选择。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_8.jpg" alt="https://gitee.com/littlefxc/oss/raw/master/images/redis_rdb_aof_8.jpg"></p>
<p>当RDB与AOF两种方式都开启时，Redis会优先使用AOF日志来恢复数据，因为AOF保存的文件比RDB文件更完整。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>上面讲了一大堆<code>Redis</code>的持久化机制的知识，其实，如果你只是单纯把<code>Redis</code>作为缓存服务器，那么可以完全不用考虑持久化，但是，在如今的大多数服务器架构中，<code>Redis</code>的单单只是扮演一个缓存服务器的角色，还可以作为数据库，保存我们的业务数据，此时，我们则需要好好了解有关<code>Redis</code>持久化策略的区别与选择。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池ThreadPoolExecutor</title>
    <url>/2021/08/04/%E7%BA%BF%E7%A8%8B%E6%B1%A0ThreadPoolExecutor/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线程就是一个放线程的池子。</p>
<p>使用线程池的好处：</p>
<ul>
<li>重用已存在的线程，从而减少对象创建和销毁的开销。</li>
<li>控制并发，从而提高资源利用率，有效避免过多的资源竞争，提升性能</li>
<li>功能强大，有定时执行、定期执行、单线程执行、并发控制等等</li>
</ul>
<span id="more"></span>

<p>从某种意义上讲，线程池是<strong>特殊的对象池</strong>。</p>
<p>这篇文章<a href="https://blog.csdn.net/hit100410628/article/details/72934353">commons-pool对象池（2）—实现一个线程池</a>就介绍了怎么用 commons-pool2 实现线程池。</p>
<h1 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h1><p>我们可以通过 <code>ThreadPoolExecutor</code> 来创建一个线程池。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler)</span></span></span><br></pre></td></tr></table></figure>

<p>构造方法中的字段含义如下：</p>
<ul>
<li><p><strong>corePoolSize</strong>：核心线程数量，当有新任务在execute()方法提交时，会执行以下判断：</p>
<ol>
<li>如果运行的线程少于 corePoolSize，则创建新线程来处理任务，即使线程池中的其他线程是空闲的；</li>
<li>如果线程池中的线程数量大于等于 corePoolSize 且小于 maximumPoolSize，则只有当workQueue满时才创建新的线程去处理任务；</li>
<li>如果设置的corePoolSize 和 maximumPoolSize相同，则创建的线程池的大小是固定的，这时如果有新任务提交，若workQueue未满，则将请求放入workQueue中，等待有空闲的线程去从workQueue中取任务并处理；</li>
<li>如果运行的线程数量大于等于maximumPoolSize，这时如果workQueue已经满了，则通过handler所指定的策略来处理任务；</li>
</ol>
<p>所以，任务提交时，判断的顺序为 corePoolSize –&gt; workQueue –&gt; maximumPoolSize。</p>
</li>
<li><p><strong>maximumPoolSize</strong>：最大线程数量；</p>
</li>
<li><p><strong>workQueue</strong>：用于保存等待执行的任务的阻塞队列。当任务提交时，如果线程池中的线程数量大于等于corePoolSize的时候，把该任务封装成一个Worker对象放入队列中。可以选择以下几个阻塞队列。</p>
<ol>
<li><a href="https://www.cnblogs.com/leesf456/p/5533770.html">ArrayBlockingQueue</a>：是一个基于数组结构的<strong>有界</strong>阻塞队列，此队列按 FIFO 原则对元素进行排序。</li>
<li><a href="https://blog.csdn.net/sinat_36553913/article/details/79533606">LinkedBlockingQueue</a>：一个基于链表结构的<strong>无界</strong>阻塞队列，此队列按 FIFO 排序元素，吞吐量通常高于 ArrayBlockingQueue。静态工厂方法 <code>Executors.newFixedThreadPool()</code> 使用了这个队列。</li>
<li><a href="https://juejin.im/post/5ae754c7f265da0ba76f8534">SynchronousQueue</a>：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于 LinkedBlockingQueue，静态工厂方法 <code>Executors.newCachedThreadPool()</code> 使用了这个队列。</li>
<li><a href="https://www.cnblogs.com/duanxz/archive/2012/10/22/2733947.html">PriorityBlockingQueue</a>：一个具有优先级的无限阻塞队列。</li>
<li><a href="https://juejin.im/post/5ae7561b6fb9a07aab29a2b2">LinkedTransferQueue</a>：是一个基于链表结构的无界阻塞队列，是 SynchronousQueue 和 LinkedBlockingQueue 的合体，性能比 LinkedBlockingQueue 更高（没有锁操作），比 SynchronousQueue能存储更多的元素。</li>
</ol>
</li>
<li><p><strong>keepAliveTime</strong>：线程池维护线程所允许的空闲时间。当线程池中的线程数量大于corePoolSize的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了keepAliveTime。所以如果任务很多，并且每个任务执行的时间比较短，可以调大时间，提高线程的利用率。</p>
<blockquote>
<p>PS: executor.allowCoreThreadTimeOut(true)// 核心线程超过空闲时间也会被回收</p>
</blockquote>
</li>
<li><p><strong>threadFactory</strong>：它是 ThreadFactory 类型的变量，用来创建新线程。默认使用<code>Executors.defaultThreadFactory()</code> 来创建线程。使用默认的 ThreadFactory 来创建线程时，会使新创建的线程具有相同的<code>Thread.NORM_PRIORITY</code>优先级并且是非守护线程，同时也设置了线程的名称。使用开源框架 guava 提供的 ThreadFactoryBuilder 可以快速给线程池里的线程设置有意义的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;XX-task-%d&quot;</span>).build();</span><br></pre></td></tr></table></figure></li>
<li><p><strong>handler</strong>：它是 RejectedExecutionHandler 类型的变量，表示线程池的<strong>饱和策略</strong>。如果队列和线程池都满了，线程池处于饱和状态，这时如果继续提交任务，就需要采取一种策略处理该任务。线程池提供了4种策略：</p>
<ol>
<li>AbortPolicy：直接抛出异常，这是默认策略；</li>
<li>CallerRunsPolicy：用调用者所在的线程来执行任务；</li>
<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</li>
<li>DiscardPolicy：直接丢弃任务；</li>
</ol>
<p>当然也可以根据应用场景需要自定义实现 RejectedExecutionHandler 接口自定义策略。</p>
</li>
</ul>
<h1 id="核心API-操作类"><a href="#核心API-操作类" class="headerlink" title="核心API - 操作类"></a>核心API - 操作类</h1><ul>
<li>execute() : 提交任务，交给线程池运行</li>
<li>submit(): 提交任务，能够返回结果</li>
<li>shutdown():关闭线程池，等待任务都执行</li>
<li>shutdownNow():关闭线程池，不等任务执行完（很少使用）</li>
</ul>
<h1 id="核心API-监控类"><a href="#核心API-监控类" class="headerlink" title="核心API- 监控类"></a>核心API- 监控类</h1><p>通过线程池提供的参数进行监控。线程池里有一些属性在监控线程池的时候可以使用以下方法</p>
<ul>
<li><strong>getTaskCount</strong>：线程池已经执行的和未执行的任务总数；</li>
<li><strong>getCompletedTaskCount</strong>：线程池已完成的任务数量，该值小于等于taskCount；</li>
<li><strong>getLargestPoolSize</strong>：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程池是否满过，也就是达到了maximumPoolSize；</li>
<li><strong>getPoolSize</strong>：线程池当前的线程数量；</li>
<li><strong>getActiveCount</strong>：当前线程池中正在执行任务的线程数量。</li>
</ul>
<p>通过这些方法，可以对线程池进行监控，在ThreadPoolExecutor类中提供了几个空方法，如beforeExecute方法，afterExecute方法和terminated方法，可以扩展这些方法在执行前或执行后增加一些新的操作，例如统计线程池的执行任务的时间等，可以继承自ThreadPoolExecutor来进行扩展。这几个方法在线程池里是空方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Thread t, Runnable r)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h1 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210804224722984.png" alt="image-20210804224722984"></p>
<h1 id="合理的配置线程池"><a href="#合理的配置线程池" class="headerlink" title="合理的配置线程池"></a>合理的配置线程池</h1><p>任务一般可分为：CPU密集型、IO密集型、混合型，对于不同类型的任务需要分配不同大小的线程池。</p>
<ul>
<li><p>CPU密集型任务 尽量使用较小的线程池，一般为CPU核心数+1。 因为CPU密集型任务使得CPU使用率很高，若开过多的线程数，只能增加上下文切换的次数，因此会带来额外的开销。</p>
</li>
<li><p>IO密集型任务 可以使用稍大的线程池，一般为2*CPU核心数。 IO密集型任务CPU使用率并不高，因此可以让CPU在等待IO的时候去处理别的任务，充分利用CPU时间。</p>
</li>
<li><p>混合型任务 可以将任务分成IO密集型和CPU密集型任务，然后分别用不同的线程池去处理。 只要分完之后两个任务的执行时间相差不大，那么就会比串行执行来的高效。 因为如果划分之后两个任务执行时间相差甚远，那么先执行完的任务就要等后执行完的任务，最终的时间仍然取决于后执行完的任务，而且还要加上任务拆分与合并的开销，得不偿失。</p>
<p>估算的经验公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N * U * (1 + WT&#x2F;ST)</span><br><span class="line"></span><br><span class="line">N: CPU 核心数</span><br><span class="line">U: 目标 CPU 利用率</span><br><span class="line">WT: 线程等待时间</span><br><span class="line">ST: 线程运行时间</span><br></pre></td></tr></table></figure>

<h2 id="工具类示例-详细说明见threading-stories-about-robust-thread-："><a href="#工具类示例-详细说明见threading-stories-about-robust-thread-：" class="headerlink" title="工具类示例(详细说明见threading-stories-about-robust-thread)："></a>工具类示例(详细说明见<a href="https://www.javacodegeeks.com/2012/03/threading-stories-about-robust-thread.html">threading-stories-about-robust-thread</a>)：</h2><p>主要是继承下面这个抽象类实现方法就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that calculates the optimal thread pool boundaries. It takes the desired target utilization and the desired</span></span><br><span class="line"><span class="comment"> * work queue memory consumption as input and retuns thread count and work queue capacity.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Niklas Schlimm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSizeCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The sample queue size to calculate the size of a single &#123;<span class="doctag">@link</span> Runnable&#125; element.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SAMPLE_QUEUE_SIZE = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Accuracy of test run. It must finish within 20ms of the testTime otherwise we retry the test. This could be</span></span><br><span class="line"><span class="comment">     * configurable.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> EPSYLON = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Time (millis) of the test run in the CPU time calculation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> testtime = <span class="number">3000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Control variable for the CPU time investigation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> expired;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculates the boundaries of a thread pool for a given &#123;<span class="doctag">@link</span> Runnable&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetUtilization    the desired utilization of the CPUs (0 &lt;= targetUtilization &lt;= 1)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetQueueSizeBytes the desired maximum work queue size of the thread pool (bytes)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">calculateBoundaries</span><span class="params">(BigDecimal targetUtilization, BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">        calculateOptimalCapacity(targetQueueSizeBytes);</span><br><span class="line">        Runnable task = creatTask();</span><br><span class="line">        start(task);</span><br><span class="line">        start(task); <span class="comment">// warm up phase</span></span><br><span class="line">        <span class="keyword">long</span> cputime = getCurrentThreadCPUTime();</span><br><span class="line">        start(task); <span class="comment">// test intervall</span></span><br><span class="line">        cputime = getCurrentThreadCPUTime() - cputime;</span><br><span class="line">        <span class="keyword">long</span> waittime = (testtime * <span class="number">1000000</span>) - cputime;</span><br><span class="line">        calculateOptimalThreadCount(cputime, waittime, targetUtilization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalCapacity</span><span class="params">(BigDecimal targetQueueSizeBytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mem = calculateMemoryUsage();</span><br><span class="line">        BigDecimal queueCapacity = targetQueueSizeBytes.divide(<span class="keyword">new</span> BigDecimal(mem), RoundingMode.HALF_UP);</span><br><span class="line">        System.out.println(<span class="string">&quot;Target queue memory usage (bytes): &quot;</span> + targetQueueSizeBytes);</span><br><span class="line">        System.out.println(<span class="string">&quot;createTask() produced &quot;</span> + creatTask().getClass().getName() + <span class="string">&quot; which took &quot;</span> + mem</span><br><span class="line">                + <span class="string">&quot; bytes in a queue&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formula: &quot;</span> + targetQueueSizeBytes + <span class="string">&quot; / &quot;</span> + mem);</span><br><span class="line">        System.out.println(<span class="string">&quot;* Recommended queue capacity (bytes): &quot;</span> + queueCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Brian Goetz&#x27; optimal thread count formula, see &#x27;Java Concurrency in Practice&#x27; (chapter 8.2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cpu               cpu time consumed by considered task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> wait              wait time of considered task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetUtilization target utilization of the system</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateOptimalThreadCount</span><span class="params">(<span class="keyword">long</span> cpu, <span class="keyword">long</span> wait, BigDecimal targetUtilization)</span> </span>&#123;</span><br><span class="line">        BigDecimal waitTime = <span class="keyword">new</span> BigDecimal(wait);</span><br><span class="line">        BigDecimal computeTime = <span class="keyword">new</span> BigDecimal(cpu);</span><br><span class="line">        BigDecimal numberOfCPU = <span class="keyword">new</span> BigDecimal(Runtime.getRuntime().availableProcessors());</span><br><span class="line">        BigDecimal optimalthreadcount = numberOfCPU.multiply(targetUtilization).multiply(</span><br><span class="line">                <span class="keyword">new</span> BigDecimal(<span class="number">1</span>).add(waitTime.divide(computeTime, RoundingMode.HALF_UP)));</span><br><span class="line">        System.out.println(<span class="string">&quot;Number of CPU: &quot;</span> + numberOfCPU);</span><br><span class="line">        System.out.println(<span class="string">&quot;Target utilization: &quot;</span> + targetUtilization);</span><br><span class="line">        System.out.println(<span class="string">&quot;Elapsed time (nanos): &quot;</span> + (testtime * <span class="number">1000000</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Compute time (nanos): &quot;</span> + cpu);</span><br><span class="line">        System.out.println(<span class="string">&quot;Wait time (nanos): &quot;</span> + wait);</span><br><span class="line">        System.out.println(<span class="string">&quot;Formula: &quot;</span> + numberOfCPU + <span class="string">&quot; * &quot;</span> + targetUtilization + <span class="string">&quot; * (1 + &quot;</span> + waitTime + <span class="string">&quot; / &quot;</span></span><br><span class="line">                + computeTime + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;* Optimal thread count: &quot;</span> + optimalthreadcount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runs the &#123;<span class="doctag">@link</span> Runnable&#125; over a period defined in &#123;<span class="doctag">@link</span> #testtime&#125;. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">     * (http://www.javaspecialists.eu/archive/Issue124.html).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task the runnable under investigation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> runs = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (++runs &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Test not accurate&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            expired = <span class="keyword">false</span>;</span><br><span class="line">            start = System.currentTimeMillis();</span><br><span class="line">            Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    expired = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, testtime);</span><br><span class="line">            <span class="keyword">while</span> (!expired) &#123;</span><br><span class="line">                task.run();</span><br><span class="line">            &#125;</span><br><span class="line">            start = System.currentTimeMillis() - start;</span><br><span class="line">            timer.cancel();</span><br><span class="line">        &#125; <span class="keyword">while</span> (Math.abs(start - testtime) &gt; EPSYLON);</span><br><span class="line">        collectGarbage(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">collectGarbage</span><span class="params">(<span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">            System.gc();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculates the memory usage of a single element in a work queue. Based on Heinz Kabbutz&#x27; ideas</span></span><br><span class="line"><span class="comment">     * (http://www.javaspecialists.eu/archive/Issue029.html).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> memory usage of a single &#123;<span class="doctag">@link</span> Runnable&#125; element in the thread pools work queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">calculateMemoryUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; queue = createWorkQueue();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">            queue.add(creatTask());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        <span class="keyword">long</span> mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        queue = <span class="keyword">null</span>;</span><br><span class="line">        collectGarbage(<span class="number">15</span>);</span><br><span class="line">        mem0 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        queue = createWorkQueue();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SAMPLE_QUEUE_SIZE; i++) &#123;</span><br><span class="line">            queue.add(creatTask());</span><br><span class="line">        &#125;</span><br><span class="line">        collectGarbage(<span class="number">15</span>);</span><br><span class="line">        mem1 = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();</span><br><span class="line">        <span class="keyword">return</span> (mem1 - mem0) / SAMPLE_QUEUE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create your runnable task here.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an instance of your runnable task under investigation</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Runnable <span class="title">creatTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance of the queue used in the thread pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> queue instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> BlockingQueue&lt;Runnable&gt; <span class="title">createWorkQueue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Calculate current cpu time. Various frameworks may be used here, depending on the operating system in use. (e.g.</span></span><br><span class="line"><span class="comment">     * http://www.hyperic.com/products/sigar). The more accurate the CPU time measurement, the more accurate the results</span></span><br><span class="line"><span class="comment">     * for thread count boundaries.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> current cpu time of current thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何合理设置线程池的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPoolSizeCalculator</span> <span class="keyword">extends</span> <span class="title">PoolSizeCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyPoolSizeCalculator calculator = <span class="keyword">new</span> MyPoolSizeCalculator();</span><br><span class="line">        calculator.calculateBoundaries(</span><br><span class="line">                <span class="comment">// CPU目标利用率</span></span><br><span class="line">                <span class="keyword">new</span> BigDecimal(<span class="number">1.0</span>),</span><br><span class="line">                <span class="comment">// blockingqueue占用的内存大小，byte</span></span><br><span class="line">                <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>));</span><br><span class="line"></span><br><span class="line">        ThreadPoolExecutor executor =</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                        <span class="number">8</span>,</span><br><span class="line">                        <span class="number">8</span>,</span><br><span class="line">                        <span class="comment">// 默认情况下指的是非核心线程的空闲时间</span></span><br><span class="line">                        <span class="comment">// 如果allowCoreThreadTimeOut=true：核心线程/非核心线程允许的空闲时间</span></span><br><span class="line">                        <span class="number">10L</span>,</span><br><span class="line">                        TimeUnit.SECONDS,</span><br><span class="line">                        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">2500</span>),</span><br><span class="line">                        Executors.defaultThreadFactory(),</span><br><span class="line">                        <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getCurrentThreadCPUTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前线程占用的总时间</span></span><br><span class="line">        <span class="keyword">return</span> ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Runnable <span class="title">creatTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsynchronousTask();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> BlockingQueue <span class="title">createWorkQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsynchronousTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(Thread.currentThread().getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="BlockQueue详解、选择与调优"><a href="#BlockQueue详解、选择与调优" class="headerlink" title="BlockQueue详解、选择与调优"></a>BlockQueue详解、选择与调优</h1><ul>
<li>BlockQueue该怎么使用？</li>
<li>不同的BlockQueue对线程池的影响是什么？</li>
<li>几点线程池的调优技巧</li>
</ul>
<h2 id="BlockQueue是什么"><a href="#BlockQueue是什么" class="headerlink" title="BlockQueue是什么"></a>BlockQueue是什么</h2><ul>
<li>BlockQueue 是阻塞队列</li>
<li>当队列为空时，获取对象会阻塞；当队列满时，放入对象会阻塞。</li>
</ul>
<h2 id="BlockQueue的作用"><a href="#BlockQueue的作用" class="headerlink" title="BlockQueue的作用"></a>BlockQueue的作用</h2><ul>
<li>实现队列的基本功能</li>
<li>多线程环境下自动管理线程的等待与唤醒</li>
</ul>
<h2 id="BlockQueue-核心API"><a href="#BlockQueue-核心API" class="headerlink" title="BlockQueue 核心API"></a>BlockQueue 核心API</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210804230153040.png" alt="image-20210804230153040"></p>
<h2 id="常用BlockQueue"><a href="#常用BlockQueue" class="headerlink" title="常用BlockQueue"></a>常用BlockQueue</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210804230529147.png" alt="image-20210804230529147"></p>
<h2 id="调优技巧"><a href="#调优技巧" class="headerlink" title="调优技巧"></a>调优技巧</h2><ul>
<li>合理设置corePoolSize、maximumPoolSize、workQueue的容量</li>
</ul>
<p>比如我门想降低系统资源的消耗，</p>
<p>例如CPU的使用率，操作系统资源的消耗，上下文切换的开销，那么我门可以设置比较大的队列容量和一个比较小的线程池容量，例如：corePoolSize=5，maximumPoolSize=10，workQueue=LinkedBlockQueue(100)。</p>
<p>假如任务经常发生阻塞，任务队列经常满，那么可以重设maximumPoolSize。</p>
<h1 id="Executors-工具API"><a href="#Executors-工具API" class="headerlink" title="Executors 工具API"></a>Executors 工具API</h1><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210805230140225.png" alt="image-20210805230140225"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>编译JDK</title>
    <url>/2021/07/06/%E7%BC%96%E8%AF%91JDK/</url>
    <content><![CDATA[<h1 id="1-macOS-编译-OpenJDK"><a href="#1-macOS-编译-OpenJDK" class="headerlink" title="1 macOS 编译 OpenJDK"></a>1 macOS 编译 OpenJDK</h1><p>目标：编译 OpenJDK17</p>
<h2 id="1-1-准备编译环境"><a href="#1-1-准备编译环境" class="headerlink" title="1.1 准备编译环境"></a>1.1 准备编译环境</h2><ol>
<li>首先去应用商店安装 <code>xcode.app</code></li>
<li>安装 <code>JDK16</code>（比要编译的JDK低一个版本，如要编译的openjdk17,那就安装jdk16）</li>
<li><code>brew install freetype ccache</code></li>
</ol>
<span id="more"></span>

<h2 id="1-2-开始编译"><a href="#1-2-开始编译" class="headerlink" title="1.2 开始编译"></a>1.2 开始编译</h2><h3 id="1-2-1-bash-configure"><a href="#1-2-1-bash-configure" class="headerlink" title="1.2.1 bash configure"></a>1.2.1 bash configure</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash configure --with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --with-num-cores=8 --with-memory-size=8000 --disable-warnings-as-errors</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>–with-debug-level=slowdebug 启用slowdebug级别调试</li>
<li>–enable-dtrace 启用dtrace</li>
<li>–with-jvm-variants=server 编译server类型JVM</li>
<li>–with-target-bits=64 指定JVM为64位</li>
<li>–enable-ccache 启用ccache，加快编译（因为在安装 ccache 的时候，总是失败，所以就没有带上这个参数）</li>
<li>–with-num-cores=8 编译使用CPU核心数</li>
<li>–with-memory-size=8000 编译使用内存</li>
<li>–disable-warnings-as-errors 忽略警告</li>
</ul>
<p>结果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210706183317055.png" alt="image-20210706183317055"></p>
<h3 id="1-2-2-make-images"><a href="#1-2-2-make-images" class="headerlink" title="1.2.2 make images"></a>1.2.2 make images</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make images</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210706190102890.png" alt="image-20210706190102890"></p>
<p>1.2.3 验证</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./build/*/images/jdk/bin/java -version</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/image-20210706190321790.png" alt="image-20210706190321790"></p>
<h2 id="1-3-FAQ"><a href="#1-3-FAQ" class="headerlink" title="1.3 FAQ"></a>1.3 FAQ</h2><ol>
<li>没有安装 <code>xcode.app</code></li>
</ol>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/1460000020736821.png" alt="img"></p>
<p>解决办法：去应用商店安装</p>
<ol start="2">
<li><p>如何完全移除编译包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make print-configuration &gt; current-configuration</span><br><span class="line">make dist-clean</span><br><span class="line">bash configure $(cat current-configuration)</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>Java虚拟机</category>
      </categories>
      <tags>
        <tag>jdk</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义spring-boot-starter</title>
    <url>/2019/05/06/%E8%87%AA%E5%AE%9A%E4%B9%89spring-boot-starter/</url>
    <content><![CDATA[<h1 id="自定义Starter-myQuartz-spring-boot-starter"><a href="#自定义Starter-myQuartz-spring-boot-starter" class="headerlink" title="自定义Starter:myQuartz-spring-boot-starter"></a>自定义Starter:myQuartz-spring-boot-starter</h1><p>模仿学习Spring Boot starter写一个关于Quartz的自动配置的依赖。</p>
<span id="more"></span>

<h2 id="1-自定义Starter的模块结构"><a href="#1-自定义Starter的模块结构" class="headerlink" title="1. 自定义Starter的模块结构"></a>1. 自定义Starter的模块结构</h2><p><img src="https://img-blog.csdnimg.cn/20190108084505544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="模块结构.png"></p>
<h2 id="2-Maven-依赖配置"><a href="#2-Maven-依赖配置" class="headerlink" title="2. Maven 依赖配置"></a>2. Maven 依赖配置</h2><p>自定义starter命名方式：</p>
<ul>
<li>官方 spring-boot-starter-模块名</li>
<li>非官方（如我们自己编写的） 模块名-spring-boot-starter</li>
</ul>
<p><code>spring-boot-configuration-processor</code>是2.x必须引入的包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc.examples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myQuartz-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">quartz.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">quartz.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- starter的基本配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- quartz的基本配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;quartz.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP-java6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-创建自动配置类QuartzAutoConfiguration"><a href="#3-创建自动配置类QuartzAutoConfiguration" class="headerlink" title="3. 创建自动配置类QuartzAutoConfiguration"></a>3. 创建自动配置类<code>QuartzAutoConfiguration</code></h2><p><strong>构造函数隐式注入</strong><br>在4.3之前,如果你构造函数中要依赖另外一个bean，你必须显示依赖<code>@Autowired</code>, 例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FooRepository repository;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FooService</span><span class="params">(FooRepository repository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository = repository</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当常见的用例但是如果你忘记构造函数上的@Autowired注释，容器将抛出一个寻找默认构造函数的异常，除非你在bean定义设置中明确指出autowire模式’constructor’。</p>
<p>因此，从4.3开始，您不再需要在这样的单构造函数场景中指定显式注入注释。对于那些根本不带任何容器注释的类来说，这是特别优雅的，FooService会从beanFactory中查找FooRepository。</p>
<p>同样的，<code>@Configuration</code>类在4.3之前不支持构造函数注入。</p>
<p><strong>为什么要使用<code>ObjectProvider</code>?</strong></p>
<p>上文讲过<strong>构造函数隐式注入</strong>，但其有个缺点那就是强依赖。<br>Spring Framework 4.3引入了ObjectProvider，它是现有ObjectFactory接口的扩展，具有方便的签名，例如getIfAvailable和getIfUnique，只有在它实际存在时才检索bean（可选支持）或者如果可以确定单个候选者（特别是：主要候选者）在多个匹配的bean的情况下）。它的Spring核心源码见<code>org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency()</code></p>
<p>** 用到的几个和Starter相关的注解:</p>
<ul>
<li><code>@ConditionalOnClass</code>，当<code>classpath</code>下发现该类的情况下进行自动配置。</li>
<li><code>@ConditionalOnMissingBean</code>，当Spring Context中不存在该Bean时。</li>
<li><code>@EnableConfigurationProperties(QuartzProperties.class)</code>，使@ConfigurationProperties注解生效。</li>
<li><code>@ConfigurationProperties</code>，主要用来把properties配置文件转化为bean。</li>
<li><code>@AutoConfigureAfter</code>，自动注入该类在什么类加载之后。</li>
</ul>
<h3 id="自定义Quartz的调度器工厂Bean的自动配置类"><a href="#自定义Quartz的调度器工厂Bean的自动配置类" class="headerlink" title="自定义Quartz的调度器工厂Bean的自动配置类"></a>自定义Quartz的调度器工厂Bean的自动配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;Scheduler.class, SchedulerFactoryBean.class, PlatformTransactionManager.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(QuartzProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123;DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(QuartzAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SchedulerFactoryBeanCustomizer&gt; customizers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> QuartzProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JobDetail[] jobDetails;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Calendar&gt; calendars;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Trigger[] triggers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PlatformTransactionManager transactionManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuartzAutoConfiguration</span><span class="params">(QuartzProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;List&lt;SchedulerFactoryBeanCustomizer&gt;&gt; customizers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;JobDetail[]&gt; jobDetails,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;Map&lt;String, Calendar&gt;&gt; calendars,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;Trigger[]&gt; triggers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;DataSource&gt; dataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   ObjectProvider&lt;PlatformTransactionManager&gt; transactionManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">        <span class="keyword">this</span>.jobDetails = jobDetails.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.calendars = calendars.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.triggers = triggers.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.transactionManager = transactionManager.getIfAvailable();</span><br><span class="line">        <span class="keyword">this</span>.customizers = customizers.getIfAvailable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果没有调度器，就创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Init SchedulerFactoryBean&quot;</span>);</span><br><span class="line">        SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        schedulerFactoryBean.setJobFactory(<span class="keyword">new</span> AutoSchedulerJobFactory(<span class="keyword">this</span>.applicationContext.getAutowireCapableBeanFactory()));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.properties.getProperties().isEmpty()) &#123;</span><br><span class="line">            schedulerFactoryBean.setQuartzProperties(asProperties(<span class="keyword">this</span>.properties.getProperties()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.jobDetails != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.jobDetails.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            schedulerFactoryBean.setJobDetails(<span class="keyword">this</span>.jobDetails);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.calendars != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.calendars.isEmpty()) &#123;</span><br><span class="line">            schedulerFactoryBean.setCalendars(<span class="keyword">this</span>.calendars);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.triggers != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.triggers.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            schedulerFactoryBean.setTriggers(<span class="keyword">this</span>.triggers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// todo quartz数据源初始化</span></span><br><span class="line">        <span class="keyword">if</span> (properties.getJobStoreType() == JobStoreType.JDBC) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">                schedulerFactoryBean.setDataSource(dataSource);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (transactionManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                schedulerFactoryBean.setTransactionManager(transactionManager);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        customize(schedulerFactoryBean);</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义调度器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerFactoryBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(SchedulerFactoryBean schedulerFactoryBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.customizers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SchedulerFactoryBeanCustomizer customizer : <span class="keyword">this</span>.customizers) &#123;</span><br><span class="line">                customizer.customize(schedulerFactoryBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Properties <span class="title">asProperties</span><span class="params">(Map&lt;String, String&gt; source)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.putAll(source);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-resources-META-INF-spring-factories"><a href="#4-resources-META-INF-spring-factories" class="headerlink" title="4. resources/META-INF/spring.factories"></a>4. <code>resources/META-INF/spring.factories</code></h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.littlefxc.examples.spring.boot.autoconfigure.QuartzAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<h2 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h2><h3 id="QuartzProperties"><a href="#QuartzProperties" class="headerlink" title="QuartzProperties"></a>QuartzProperties</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.quartz&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Quartz job store type.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> JobStoreType jobStoreType = JobStoreType.MEMORY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Additional Quartz Scheduler properties.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobStoreType <span class="title">getJobStoreType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.jobStoreType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJobStoreType</span><span class="params">(JobStoreType jobStoreType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jobStoreType = jobStoreType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JobStoreType"><a href="#JobStoreType" class="headerlink" title="JobStoreType"></a>JobStoreType</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">JobStoreType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store jobs in memory.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MEMORY,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store jobs in the database.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JDBC</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AutoSchedulerJobFactory"><a href="#AutoSchedulerJobFactory" class="headerlink" title="AutoSchedulerJobFactory"></a>AutoSchedulerJobFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模仿了：&#123;<span class="doctag">@link</span> org.springframework.boot.autoconfigure.quartz.AutowireCapableBeanJobFactory&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 12/19/2018</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &lt;a href=&quot;http://blog.btmatthews.com/?p=40#comment-33797&quot;&gt;注入Spring上下文(applicationContext)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoSchedulerJobFactory</span> <span class="keyword">extends</span> <span class="title">SpringBeanJobFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AutowireCapableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    AutoSchedulerJobFactory(AutowireCapableBeanFactory factory) &#123;</span><br><span class="line">        beanFactory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">createJobInstance</span><span class="params">(<span class="keyword">final</span> TriggerFiredBundle bundle)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object job = <span class="keyword">super</span>.createJobInstance(bundle);</span><br><span class="line">        beanFactory.autowireBean(job);</span><br><span class="line">        <span class="keyword">this</span>.beanFactory.initializeBean(job, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> job;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SchedulerFactoryBeanCustomizer"><a href="#SchedulerFactoryBeanCustomizer" class="headerlink" title="SchedulerFactoryBeanCustomizer"></a>SchedulerFactoryBeanCustomizer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调接口，可以由希望在完全初始化之前自定义Quartz SchedulerFactoryBean的bean实现，特别是调整其配置。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> fengxuechao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SchedulerFactoryBeanCustomizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义&#123;<span class="doctag">@link</span> SchedulerFactoryBean&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedulerFactoryBean the scheduler to customize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">customize</span><span class="params">(SchedulerFactoryBean schedulerFactoryBean)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><h3 id="6-1-项目结构"><a href="#6-1-项目结构" class="headerlink" title="6.1 项目结构"></a>6.1 项目结构</h3><p>新建项目,结构如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20190108084544437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xpdHRsZV9meGM=,size_16,color_FFFFFF,t_70" alt="test-autoconfigure项目结构.png"></p>
<h3 id="6-2-Maven-依赖"><a href="#6-2-Maven-依赖" class="headerlink" title="6.2 Maven 依赖"></a>6.2 Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc.examples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;version&gt;2.0.4.RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.18.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">quartz.version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">quartz.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.littlefxc.examples<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myQuartz-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz-jobs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;quartz.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-application-properties"><a href="#6-3-application-properties" class="headerlink" title="6.3 application.properties"></a>6.3 application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">logging.level.root</span>=<span class="string">warn</span></span><br><span class="line"><span class="meta">logging.level.com.littlefxc.examples</span>=<span class="string">debug</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DataSource Config</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/learn-quartz?useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="meta">spring.datasource.druid.filters</span>=<span class="string">slf4j,wall</span></span><br><span class="line"><span class="meta">spring.datasource.druid.initial-size</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-idle</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-wait</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.datasource.druid.time-between-eviction-runs-millis</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.datasource.druid.min-evictable-idle-time-millis</span>=<span class="string">300000</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-while-idle</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-borrow</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.datasource.druid.test-on-return</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.datasource.druid.pool-prepared-statements</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span>=<span class="string">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quartz Config</span></span><br><span class="line"><span class="meta">spring.quartz.job-store-type</span>=<span class="string">jdbc</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceName</span>=<span class="string">schedulerFactoryBean</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceId</span>=<span class="string">AUTO</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.scheduler.instanceIdGenerator.class</span>=<span class="string">com.littlefxc.examples.CustomQuartzInstanceIdGenerator</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.threadPool.threadCount</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.class</span>=<span class="string">org.quartz.impl.jdbcjobstore.JobStoreTX</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.driverDelegateClass</span>=<span class="string">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.useProperties</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.misfireThreshold</span>=<span class="string">60000</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.tablePrefix</span>=<span class="string">qrtz_</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.jobStore.isClustered</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.plugin.shutdownHook.class</span>=<span class="string">org.quartz.plugins.management.ShutdownHookPlugin</span></span><br><span class="line"><span class="meta">spring.quartz.properties.org.quartz.plugin.shutdownHook.cleanShutdown</span>=<span class="string">TRUE</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-代码"><a href="#6-4-代码" class="headerlink" title="6.4 代码"></a>6.4 代码</h3><p><strong>核心代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAutoConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestAutoConfigure.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBeanCustomizer <span class="title">dataSourceCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (schedulerFactoryBean) -&gt; &#123;</span><br><span class="line">            schedulerFactoryBean.setOverwriteExistingJobs(<span class="keyword">false</span>);</span><br><span class="line">            schedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">            schedulerFactoryBean.setStartupDelay(<span class="number">10</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JobDetailFactoryBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetailFactoryBean <span class="title">jobDetailFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JobDetailFactoryBean bean = <span class="keyword">new</span> JobDetailFactoryBean();</span><br><span class="line">        bean.setName(<span class="string">&quot;job-1&quot;</span>);</span><br><span class="line">        bean.setGroup(<span class="string">&quot;job-group-1&quot;</span>);</span><br><span class="line">        bean.setJobClass(MyJob.class);</span><br><span class="line">        JobDataMap jobDataMap = <span class="keyword">new</span> JobDataMap();</span><br><span class="line">        jobDataMap.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        bean.setJobDataMap(jobDataMap);</span><br><span class="line">        bean.setDurability(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CronTriggerFactoryBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jobDetail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">cronTrigger</span><span class="params">(JobDetail jobDetail)</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean bean = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        bean.setName(<span class="string">&quot;cron-1&quot;</span>);</span><br><span class="line">        bean.setGroup(<span class="string">&quot;cron-group-1&quot;</span>);</span><br><span class="line">        bean.setCronExpression(<span class="string">&quot;0/5 * * * * ?&quot;</span>);</span><br><span class="line">        bean.setJobDetail(jobDetail);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Job</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">            JobDetail jobDetail = jobExecutionContext.getJobDetail();</span><br><span class="line">            String jobName = jobDetail.getKey().getName();</span><br><span class="line">            String jobGroup = jobDetail.getKey().getGroup();</span><br><span class="line">            String jobDataMapHello = (String) jobDetail.getJobDataMap().get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;job.name = &#123;&#125;, job.group = &#123;&#125;, job.dataMap.hello = &#123;&#125;&quot;</span>, jobName, jobGroup, jobDataMapHello);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>CustomQuartzInstanceIdGenerator</code></strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomQuartzInstanceIdGenerator</span> <span class="keyword">implements</span> <span class="title">InstanceIdGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateInstanceId</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SchedulerException(<span class="string">&quot;Couldn&#x27;t generate UUID!&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring-boot</tag>
      </tags>
  </entry>
  <entry>
    <title>规则引擎Drools模板编译</title>
    <url>/2019/05/05/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8EDrools%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="规则引擎-Drools-模板编译"><a href="#规则引擎-Drools-模板编译" class="headerlink" title="规则引擎 Drools 模板编译"></a>规则引擎 Drools 模板编译</h2><h2 id="1-模板编译"><a href="#1-模板编译" class="headerlink" title="1.模板编译"></a>1.模板编译</h2><h3 id="1-1依赖"><a href="#1-1依赖" class="headerlink" title="1.1依赖"></a>1.1依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.drools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drools-templates<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2建立模板"><a href="#1-2建立模板" class="headerlink" title="1.2建立模板"></a>1.2建立模板</h3><p>新建模板文件 test.drt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">template header</span><br><span class="line">condition</span><br><span class="line">execution</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> template</span><br><span class="line"></span><br><span class="line">template <span class="string">&quot;this is a test&quot;</span></span><br><span class="line"></span><br><span class="line">    rule <span class="string">&quot;test_@&#123;row.rowNumber&#125;&quot;</span></span><br><span class="line">        when</span><br><span class="line">            @&#123;condition&#125;</span><br><span class="line">        then</span><br><span class="line">            System.out.println(@&#123;execution&#125;);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">end template</span><br></pre></td></tr></table></figure>

<p>说明<br>规则模板主要由两部分构成：</p>
<p>Template header 定义了在模板中使用的变量。<br>模板中以 “template name” 开头, 以”end template” 结尾, 中间定义了模板的内容。变量占位符使用 @{variable_name} .<br>@{row.rowNumber}是一个特殊的变量, 每次会按顺序生成一个行号, 可用于区分规则名。</p>
<h2 id="1-3-渲染模板生成规则文件"><a href="#1-3-渲染模板生成规则文件" class="headerlink" title="1.3 渲染模板生成规则文件"></a>1.3 渲染模板生成规则文件</h2><p>渲染模板的流程，先将数据封装为 DataProvider，然后通过 DataProviderCompiler 使用 DataProvider 将模板编译为 DRL。</p>
<p>Drools支持数组类型的DataProvider, ArrayDataProvider实现了DataProvider,  示例</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream templateStream = DataDrivenTemplateExample.class.getResourceAsStream(<span class="string">&quot;/rules/SimpleTemplateExample.drt&quot;</span>);</span><br><span class="line"><span class="comment">// @&#123;row.rowNumber&#125;=数组下标, @&#123;condition&#125;=规则条件, @&#123;execution&#125;=规则动作</span></span><br><span class="line">DataProvider data = <span class="keyword">new</span> ArrayDataProvider(<span class="keyword">new</span> String[][]&#123;</span><br><span class="line">    <span class="keyword">new</span> String[]&#123;<span class="string">&quot;String(this == \&quot;规则条件\&quot;)&quot;</span>, <span class="string">&quot;\&quot;规则动作\&quot;&quot;</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line">DataProviderCompiler converter = <span class="keyword">new</span> DataProviderCompiler();</span><br><span class="line">String drl = converter.compile(data, templateStream);</span><br></pre></td></tr></table></figure>

<h3 id="1-4-编译规则"><a href="#1-4-编译规则" class="headerlink" title="1.4 编译规则"></a>1.4 编译规则</h3><p>在模板渲染、编译成规则文件后，就可以正常的编译DRL规则文件， 新建会话等。<br> KieHelper 是 Drools提供的工具类, 可用于编译DRL规则文件， 新建会话等。<br>ps: 也可以使用其他的方式编译，这里只是为了简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KieHelper helper = <span class="keyword">new</span> KieHelper();</span><br><span class="line">helper.addContent(drl, ResourceType.DRL);</span><br><span class="line">KieSession kieSession = helper.build().newKieSession();</span><br><span class="line">kieSession.insert(<span class="keyword">new</span> String(<span class="string">&quot;Hello, World!&quot;</span>));</span><br><span class="line">kieSession.fireAllRules();</span><br><span class="line">kieSession.dispose();</span><br></pre></td></tr></table></figure>

<h3 id="1-5-模板编译示例"><a href="#1-5-模板编译示例" class="headerlink" title="1.5 模板编译示例"></a>1.5 模板编译示例</h3><h4 id="1-5-1-DRT模板文件-template-drt"><a href="#1-5-1-DRT模板文件-template-drt" class="headerlink" title="1.5.1 DRT模板文件 template.drt"></a>1.5.1 DRT模板文件 template.drt</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">template header</span><br><span class="line">condition</span><br><span class="line">execution</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> template</span><br><span class="line"></span><br><span class="line">template <span class="string">&quot;this is a test&quot;</span></span><br><span class="line"></span><br><span class="line">    rule <span class="string">&quot;test_@&#123;row.rowNumber&#125;&quot;</span></span><br><span class="line">        when</span><br><span class="line">            @&#123;condition&#125;</span><br><span class="line">        then</span><br><span class="line">            System.out.println(@&#123;execution&#125;);</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">end template</span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-单元测试"><a href="#1-5-2-单元测试" class="headerlink" title="1.5.2 单元测试"></a>1.5.2 单元测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> KnowledgeBuilder builder;</span><br><span class="line">KieBase kieBase;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder = KnowledgeBuilderFactory.newKnowledgeBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 从本地模板DRT文件得到输入流</span></span><br><span class="line"><span class="comment">         * 2. 创建一个 ArrayDataProvider , 二维数组中元素按顺序与DRT文件中定义的变量一一对应</span></span><br><span class="line"><span class="comment">         * 3. 创建一个 DataProviderCompiler 对象用compile()方法渲染, 将二维数组中的元素一一填充到DRT模板中, 得到DRL(规则)字符串</span></span><br><span class="line"><span class="comment">         * 4. 加载DRL(规则)字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String pathToDrt = <span class="string">&quot;E:\\template.drt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (InputStream stream = <span class="keyword">new</span> FileInputStream(pathToDrt)) &#123;</span><br><span class="line">            DataProvider dataProvider = <span class="keyword">new</span> ArrayDataProvider(<span class="keyword">new</span> String[][]&#123;</span><br><span class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">&quot;String(this == \&quot;规则条件\&quot;)&quot;</span>, <span class="string">&quot;\&quot;规则动作\&quot;&quot;</span>&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            DataProviderCompiler compiler = <span class="keyword">new</span> DataProviderCompiler();</span><br><span class="line">            String DRL = compiler.compile(dataProvider, stream);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----模板DRT渲染后的DRL-----&quot;</span>);</span><br><span class="line">            System.out.println(DRL);</span><br><span class="line">            System.out.println(<span class="string">&quot;-----模板DRT渲染后的DRL-----&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] drlBytes = DRL.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            Resource resourceTemplate = ResourceFactory.newByteArrayResource(drlBytes);</span><br><span class="line">            builder.add(resourceTemplate, ResourceType.DRL);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        builder.add(resourceNative, ResourceType.DRL);</span><br><span class="line"><span class="comment">//        builder.add(resourceRemote, ResourceType.DRL);</span></span><br><span class="line">        kieBase = builder.newKieBase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KieSession kieSession = kieBase.newKieSession();</span><br><span class="line">        kieSession.insert(<span class="string">&quot;规则条件&quot;</span>);</span><br><span class="line">        kieSession.fireAllRules();</span><br><span class="line">        kieSession.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-输出"><a href="#1-5-3-输出" class="headerlink" title="1.5.3 输出"></a>1.5.3 输出</h4><blockquote>
</blockquote>
<pre><code>-----模板DRT渲染后的DRL-----
package template
rule &quot;test_0&quot;
    when
        String(this == &quot;规则条件&quot;)
    then
        System.out.println(&quot;规则动作&quot;);
end
-----模板DRT渲染后的DRL-----
规则动作
</code></pre>
<h2 id="2-本地加载与远程加载"><a href="#2-本地加载与远程加载" class="headerlink" title="2 本地加载与远程加载"></a>2 本地加载与远程加载</h2><h3 id="2-1-创建本地DRL文件"><a href="#2-1-创建本地DRL文件" class="headerlink" title="2.1 创建本地DRL文件"></a>2.1 创建本地DRL文件</h3><p>创建远程的DRL文件，地址为 E:\native.drl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rules.<span class="keyword">native</span>;</span><br><span class="line">dialect  <span class="string">&quot;mvel&quot;</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;native&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;本地加载成功&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="2-2-创建远程DRL文件"><a href="#2-2-创建远程DRL文件" class="headerlink" title="2.2 创建远程DRL文件"></a>2.2 创建远程DRL文件</h3><p>创建远程的DRL文件，地址为 <a href="http://localhost:8761/remote.drl">http://localhost:8761/remote.drl</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rules.remote;</span><br><span class="line">dialect  <span class="string">&quot;mvel&quot;</span></span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;remote&quot;</span></span><br><span class="line">    when</span><br><span class="line">    then</span><br><span class="line">        System.out.println(<span class="string">&quot;远程加载成功&quot;</span>);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="2-3-单元测试"><a href="#2-3-单元测试" class="headerlink" title="2.3 单元测试"></a>2.3 单元测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> KnowledgeBuilder builder;</span><br><span class="line">    KieBase kieBase;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder = KnowledgeBuilderFactory.newKnowledgeBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 本地加载DRL</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Resource resourceNative = ResourceFactory.newFileResource(<span class="string">&quot;E:\\native.drl&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 远程加载URL</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String url = <span class="string">&quot;http://localhost:8761/remote.drl&quot;</span>;</span><br><span class="line">Resource resourceRemote = ResourceFactory.newUrlResource(url );</span><br><span class="line"><span class="comment">// 加载方式的不同</span></span><br><span class="line">builder.add(resourceNative, ResourceType.DRL);</span><br><span class="line">builder.add(resourceRemote, ResourceType.DRL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNativeAndRemote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        KieSession kieSession = kieBase.newKieSession();</span><br><span class="line">        kieSession.fireAllRules();</span><br><span class="line">        kieSession.dispose();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-输出"><a href="#2-4-输出" class="headerlink" title="2.4 输出"></a>2.4 输出</h3><blockquote>
<p>远程加载成功<br>本地加载成功</p>
</blockquote>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>关键API：<br>Resource: 资源类，规则文件的加载<br>KnowledgeBuilder: 收集编译已经编写好的规则文件(drl)</p>
<p>从整体的收集、编译、执行上看，远程加载与本地加载大同小异，无非就是在使用Resource时加载规则文件上的不同。使用模板则在此基础上，需要将模板(drt)编译成规则(drl)。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>drools</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习记录</title>
    <url>/2021/02/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>记录在学习设计模式过程中的点滴</p>
<span id="more"></span>

<h1 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1 单例模式"></a>1 单例模式</h1><ul>
<li><p>优点：</p>
<ul>
<li>单例模式可以保证内存中只有一个实例对象，从而会减少内存的开销；</li>
<li>单例模式可以避免对资源的多重占用；</li>
<li>单例模式设置全局访问点，可以起到优化和共享资源的访问的作用；</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li><strong>扩展难</strong>， 因为单例模式通常是没有接口的啊，如果想要扩展，那么你唯一途径就是修改之前的代码，所以说单例模式违背了开闭原则；</li>
<li><strong>调试难</strong>，因为在并发测试中，单例模式是不利于代码的调试的，单例中的代码没有执行完，也不能模拟生成一个新对象；</li>
<li><strong>违背单一职责原则</strong>，因为单例模式的业务代码通常写在一个类中，如果功能设计不合理，就很容易违背单一职责原则；</li>
</ul>
</li>
</ul>
<h2 id="1-1-饿汉式标准写法"><a href="#1-1-饿汉式标准写法" class="headerlink" title="1.1 饿汉式标准写法"></a>1.1 饿汉式标准写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单例模式的通用写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部初始化一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 隐藏构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个全局访问点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Singleton</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式单例写法在类的初始化的时候就会进行初始化操作，并且创建对象，绝对的线程安全，因为此时线程还没有出现就已经实例化了，故不会存在访问安全的问题。</p>
<h2 id="1-2-饿汉式静态块机制写法"><a href="#1-2-饿汉式静态块机制写法" class="headerlink" title="1.2 饿汉式静态块机制写法"></a>1.2 饿汉式静态块机制写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungryStaticSingleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungryStaticSingleton hungrySingleton;</span><br><span class="line">    <span class="comment">//静态代码块 类加载的时候就初始化</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hungrySingleton=<span class="keyword">new</span> HungryStaticSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungryStaticSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个全局访问点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungryStaticSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungrySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法可以明显的看到所以对象是类在加载的时候就进行实例化了，那么这样一来，会导致单例对象的数量不确定，从而会导致系统初始化的时候就造成大量内存浪费。</p>
<h2 id="1-3-懒汉式单例写法"><a href="#1-3-懒汉式单例写法" class="headerlink" title="1.3 懒汉式单例写法"></a>1.3 懒汉式单例写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySimpleSingleton lazySingleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySimpleSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个全局访问点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySimpleSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySimpleSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 这样实现的好处就是只有对象被使用的时候才会进行初始化，不会存在内存浪费的问题，但是它会在多线程环境下，存在线程安全问题。</p>
<h2 id="1-4-synchronized修饰的懒汉式单例实现"><a href="#1-4-synchronized修饰的懒汉式单例实现" class="headerlink" title="1.4 synchronized修饰的懒汉式单例实现"></a>1.4 synchronized修饰的懒汉式单例实现</h2><p>我们可以利用<code>synchronized</code>关键字将全局访问点方法变成一个同步方法，这样就可以解决线程安全的问题，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySimpleSingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySimpleSingleton lazySingleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySimpleSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个全局访问点  </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span>  LazySimpleSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lazySingleton = <span class="keyword">new</span> LazySimpleSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 但是，这样虽然解决了线程安全的问题，可是如果在线程数量剧增的情况下，用<code>synchronized</code>加锁，则会导致大批线程阻塞，从而骤减系统性能。</p>
<h2 id="1-5-懒汉式-双重检测单例实现"><a href="#1-5-懒汉式-双重检测单例实现" class="headerlink" title="1.5 懒汉式-双重检测单例实现"></a>1.5 懒汉式-双重检测单例实现</h2><p>在上述代码上进一步优化，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyDoubleCheckSingleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// volatile 关键字修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyDoubleCheckSingleton lazySingleton ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazyDoubleCheckSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供一个全局访问点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazyDoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里先判断一下是否阻塞</span></span><br><span class="line">        <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="comment">// 判断是否需要重新创建实例</span></span><br><span class="line">                <span class="keyword">if</span> (lazySingleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    lazySingleton = <span class="keyword">new</span> LazyDoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当第一个线程调用<code>getInstance()</code>方法时，第二个线程也可以调用，但是第一个线程执行<code>synchronized</code>时候，第二个线程就会发现阻塞，但是此时的阻塞是<code>getInstance()</code>内部的阻塞。</p>
<h2 id="1-6-静态内部类单例实现"><a href="#1-6-静态内部类单例实现" class="headerlink" title="1.6 静态内部类单例实现"></a>1.6 静态内部类单例实现</h2><p>虽然双重检测锁的单例模式解决了线程安全和性能问题，但是毕竟涉及加锁的操作，多多少少就会到了性能的影响，下面我们分享一下更加优雅的单例模式实现，如下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyStaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//  在构造方法里面抛出异常真的合适？</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LazyStaticInnerClassSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(LazyHolder.INSTANCE != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;不允许创建多个实例&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// static 保证这个方法不会被重写 覆盖</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> LazyStaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> LazyHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Java 默认不会加载内部类</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazyStaticInnerClassSingleton INSTANCE=<span class="keyword">new</span> LazyStaticInnerClassSingleton();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-创建者模式"><a href="#2-创建者模式" class="headerlink" title="2 创建者模式"></a>2 创建者模式</h1><h2 id="2-1-工厂方法模式"><a href="#2-1-工厂方法模式" class="headerlink" title="2.1 工厂方法模式"></a>2.1 工厂方法模式</h2><p>工厂模式又称工厂方法模式，是一种创建者模式，主要是在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p>
<p>这种设计模式也是 Java 开发中最常见的一种模式，它的主要意图是定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p>
<p>简单来说，就是为了提供代码结构的扩展性，屏蔽每一个功能类中的具体实现逻辑。让外部可以更简单的只是知道调用即可，同时这也是去掉众多 ifelse 的方式。当然这也可能有一些缺点，比如需要实现的类非常多，如何去维护，怎样去降低成本。但这些问题都可以在后续的设计模式结合使用中，逐步降低。</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/fbc5b62b7710fe70d99ab45f7cc8b53d.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/工厂模式类图.png"></p>
<h2 id="2-2-抽象工厂方法模式"><a href="#2-2-抽象工厂方法模式" class="headerlink" title="2.2 抽象工厂方法模式"></a>2.2 抽象工厂方法模式</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/443fc2b10d2bc790bbe6aee06eea25a1.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/抽象工厂模式.png"></p>
<h2 id="2-3-建造者模式"><a href="#2-3-建造者模式" class="headerlink" title="2.3 建造者模式"></a>2.3 建造者模式</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/001bf164def93d6de76d1edfca33844f.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/建造者模式.png"></p>
<h2 id="2-4-原型模式"><a href="#2-4-原型模式" class="headerlink" title="2.4 原型模式"></a>2.4 原型模式</h2><p>原型模式主要解决的是创建重复对象，而这部分对象内容本身比较复杂，生成过程可能从库或者RPC接口中获取数据的耗时较长，因此采用克隆的方式节省时间。</p>
<p>案例场景：在线生成试卷，考题从题库中抽选随机成立一份试卷，考题类型有选择题、问答题</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-0.png" alt="https://gitee.com/littlefxc/oss/raw/master/images/原型模式-0.png"></p>
<h1 id="3-结构型模式"><a href="#3-结构型模式" class="headerlink" title="3 结构型模式"></a>3 结构型模式</h1><h2 id="3-1-适配器模式"><a href="#3-1-适配器模式" class="headerlink" title="3.1 适配器模式"></a>3.1 适配器模式</h2><blockquote>
<p>本示例来自于<a href="https://www.runoob.com/design-pattern/adapter-pattern.html">https://www.runoob.com/design-pattern/adapter-pattern.html</a></p>
</blockquote>
<p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<p>适配器模式包含如下角色：</p>
<ul>
<li>Target：目标抽象类</li>
<li>Adapter：适配器类</li>
<li>Adaptee：适配者类</li>
<li>Client：客户类</li>
</ul>
<p>案例场景：音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。</p>
<p>实现思路：我们想要让 <em>AudioPlayer</em> 播放其他格式的音频文件。为了实现这个功能，我们需要创建一个实现了 <em>MediaPlayer</em> 接口的适配器类 <em>MediaAdapter</em>，并使用 <em>AdvancedMediaPlayer</em> 对象来播放所需的格式。</p>
<p>类图如下：</p>
<p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="适配器模式"></p>
<h2 id="3-2-桥接模式"><a href="#3-2-桥接模式" class="headerlink" title="3.2 桥接模式"></a>3.2 桥接模式</h2><p><img src="https://gitee.com/littlefxc/oss/raw/master/images/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" alt="桥接模式"></p>
<h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul>
<li><p><a href="https://msjavacoder.github.io/msJava/#/docs/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">https://msjavacoder.github.io/msJava/#/docs/设计模式/单例模式</a></p>
</li>
<li><p>《重学Java设计模式·小傅哥》</p>
</li>
<li><p><a href="https://www.runoob.com/design-pattern/adapter-pattern.html">https://www.runoob.com/design-pattern/adapter-pattern.html</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>链路追踪zipkin</title>
    <url>/2021/07/27/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAzipkin/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>通信科普</title>
    <url>/2021/09/17/%E9%80%9A%E4%BF%A1%E7%A7%91%E6%99%AE/</url>
    <content><![CDATA[<h1 id="通信科普"><a href="#通信科普" class="headerlink" title="通信科普"></a>通信科普</h1><p>本文主要简略记录计算机网络相关名词的介绍。 </p>
<p><strong>绝大部分通信系统，都可以用分层的角度来看，也必须用分层的角度来看。看懂了这个系统的层级，就看懂了这个系统的70%。</strong></p>
<span id="more"></span>

<h1 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h1><ul>
<li>核心网</li>
<li>汇聚层</li>
<li>接入层</li>
</ul>
<h2 id="NEF"><a href="#NEF" class="headerlink" title="NEF"></a>NEF</h2><p>Network Exposure Function ，网络开放功能，位于5G核心网和外部第三方应用功能体之间（可能也有部分内部AF），负责管理对外开放网络数据的，所有的外部应用，想要访问5G核心网内部数据，都必须要通过NEF。NEF提供相应的安全保障来保证外部应用到3gpp网络的安全，提供外部应用Qos定制能力开放、移动性状态事件订阅、AF请求分发等功能</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Ribbon 的负载均衡策略</title>
    <url>/2021/09/28/Spring-Cloud-Ribbon-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>Ribbon负载均衡的原理是:从EurekaClient类的Bean获取Provider提供者服务列表清单，并且定 期通过IPing类的Bean去判断Provider的可用性。每次RPC到来时，在Provider提供者服务列表中根据 IRule策略类的Bean计算出每次RPC要访问的最终Provider。</p>
<span id="more"></span>

<p>Ribbon内部有一个负载均衡器接口<code>ILoadBalance</code>，定义了添加Provider、获取所有的Provider列表、 获取可用的Provider列表等基础的操作。该接口的核心实现类<code>DynamicServerListLoadBalancer</code>会通过 EurekaClient(实现类为DiscoveryClient)获取Provider清单，并且通过<code>IPing</code>实例定期(每10s)向每 个Provider实例发送“ping”，并且根据Provider是否有响应来判断该Provider提供者实例是否可用。 如果该Provider的可用性发生了改变，或者Provider清单中的数量和之前的不一致，则从注册中心更新或者重新拉取Provider服务实例清单。</p>
<p>每次RPC请求到来时，由Ribbon的IRule负载均衡策略接口的某个实现类就来进行负载均衡。主要的负载均衡的策略实现类如下:</p>
<ol>
<li><p>随机策略(RandomRule) </p>
<p>该策略实现类从Provider提供者服务列表中随机选择一个Provider服务实例，作为RPC请求的目标Provider。</p>
</li>
<li><p>线性轮询策略(RoundRobinRule)</p>
<p>RoundRobinRule线性轮询和RandomRule相似，只是每次都取下一个Provider服务器。假设一共有5台Provider服务节点，使用线性轮询策略，第1次取第1台，第2次取第2台，第3次取第3台，以此类推。</p>
</li>
<li><p>响应时间权重策略(WeightedResponseTimeRule)</p>
<p>WeightedResponseTimeRule策略为每一个Provider服务维护一个权重值，其规则简单概况为 Provider服务响应时间越长，其权重就越小。在进行服务器选择时，权重值越小，被选择的机会越少。 WeightedResponseTimeRule继承了RoundRobinRule，开始时每一个Provider都没有权重值，每当RPC 请求过来时，由其父类的轮询算法完成负载均衡方式。该策略类有一个默认、每30秒执行一次的权 重更新定时任务，该定时任务会根据Provider实例的响应时间更新Provider权重列表。后续有RPC过来时，将根据权重值进行负载均衡。</p>
</li>
<li><p>最少连接策略(BestAvailableRule)</p>
<p>在进行服务器选择时，该策略类遍历Provider清单，选取出可用的且连接数最少的一个Provider。 该策略类里面有一个LoadBalancerStats类型的成员变量，会存储所有Provider的运行状况和连接数。 在进行负载均衡计算时，如果选取到的Provider为null，那么会调用线性轮询策略重新选取。</p>
</li>
<li><p>重试策略(RetryRule)</p>
<p>该类会在一定的时限内进行Provider循环重试。RetryRule会在每次选取之后，对选举的Provider进行判断，如果为null或者not alive，会在一定的时限内(如500ms)内会不停的选取和判断。</p>
</li>
<li><p>可用过滤策略(AvailabilityFilteringRule)</p>
<p>该类扩展了线性轮询策略，会先通过默认的线性轮询策略选取一个Provider，再去判断该Provider 是否超时可用，当前连接数是否超过限制，如果都满足要求，则成功返回。</p>
<p>简单来说，AvailabilityFilteringRule将对候选的Provider进行可用性过滤，会先过滤掉多次访问 故障而处于断路器跳闸状态的Provider服务，还会过滤掉并发的连接数超过阈值的Provider服务，然后，对剩余的服务列表进行线性轮询。</p>
</li>
<li><p>区域过滤策略(ZoneAvoidanceRule)</p>
<p>该类扩展了线性轮询策略，除了过滤超时和连接数过多的Provider之外，还会过滤掉不符合要求的Zone区域中的所有节点。</p>
</li>
</ol>
<p>Ribbon实现的负载均衡策略，不止以上7种，还可以实现自定义的策略类。</p>
<p>局部微服务负载均衡配置示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user-provider:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RetryRule</span> <span class="comment">#重试+线性轮询</span></span><br><span class="line">  <span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #最少连接策略</span></span><br><span class="line">  <span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机选择</span></span><br></pre></td></tr></table></figure>

<p>如果要配置全局的、针对所有的Provider都使用的负载均衡策略，可以在配置文件中直接使用 <code>ribbon.NFLoadBalancerRuleClassName</code>配置项进行配置，具体如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RetryRule</span> <span class="comment">#重试+线性轮询</span></span><br><span class="line"><span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #最少连接策略</span></span><br><span class="line"><span class="comment"># NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #随机选择</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>负载均衡</tag>
        <tag>ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title>Mycat 分片规则</title>
    <url>/2021/09/27/Mycat-%E5%88%86%E7%89%87%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<p>在数据切分处理中，特别是水平切分中，中间件最终要的两个处理过程就是数据的切分、数据的聚合。选择合适的切分规则，至关重要，因为它决定了后续数据聚合的难易程度，甚至可以避免跨库的数据聚合处理。</p>
<span id="more"></span>

<h1 id="1-分片枚举"><a href="#1-分片枚举" class="headerlink" title="1. 分片枚举"></a>1. 分片枚举</h1><p>通过在配置文件中配置可能的枚举 id，自己配置分片。</p>
<p>该分片规则适合于特定的场景，比如有些业务需要安装省份或区县来做保存，而全国省份区县是固定的，这类业务可以采用本规则。</p>
<p>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-intfile&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>hash-int<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;hash-int&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByFileMap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-hash-int.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;type&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>mapFile</td>
<td>标识配置文件名称</td>
</tr>
<tr>
<td>type</td>
<td>默认值为 0，0 表示 Integer，非零表示 String</td>
</tr>
<tr>
<td>defaultNode</td>
<td>默认节点:小于 0 表示不设置默认节点，大于等于 0 设置默认节点</td>
</tr>
</tbody></table>
<p>partition-hash-int.txt 配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10000&#x3D;0</span><br><span class="line">10010&#x3D;1</span><br><span class="line">DEFAULT_NODE&#x3D;1      &#x2F;&#x2F;默认节点</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong></p>
<p>默认节点的作用：枚举分片时，如果碰到不识别的枚举值，就让它路由到默认节点<br>如果不配置默认节点（defaultNode 值小于 0 表示不配置默认节点），碰到不识别的枚举值就会报错<br>like this：can’t find datanode for sharding column:column_name val:ffffffff</p>
</blockquote>
<h1 id="2-固定分片-hash-算法"><a href="#2-固定分片-hash-算法" class="headerlink" title="2. 固定分片 hash 算法"></a>2. 固定分片 hash 算法</h1><p>本条规则类似于十进制的求模运算，区别在于是二进制的操作,是取 id 的二进制低 10 位，即 id 二进制 &amp;1111111111。<br>此算法的优点在于如果按照 10 进制取模运算，在连续插入 1-10 时候 1-10 会被分到 1-10 个分片，增大了插入的事务控制难度，而此算法根据二进制则可能会分到连续的分片，减少插入事务事务控制难度。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;rule1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>func1<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2,1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256,512<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>partitionCount</td>
<td>分片个数列表</td>
</tr>
<tr>
<td>partitionLength</td>
<td>分片范围列表</td>
</tr>
</tbody></table>
<p>分区长度：<br>默认为最大 2^n=1024 ，即最大支持 1024 分区。</p>
<p>约束：<br>count，length 两个数组的长度必须是一致的；<br>1024 = sum((count[i]*length[i]))<br>count 和 length 两个向量的点积恒等于 1024。</p>
<p>如果需要平均分配设置：平均分为 4 分片，partitionCount*partitionLength=1024。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;func1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-范围约定"><a href="#3-范围约定" class="headerlink" title="3. 范围约定"></a>3. 范围约定</h1><p>此分片适用于，提前规划好分片字段某个范围属于哪个分片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>mapFile</td>
<td>标识配置文件名称</td>
</tr>
<tr>
<td>defaultNode</td>
<td>超过范围后的默认节点</td>
</tr>
</tbody></table>
<p>所有的节点配置都是从 0 开始，及 0 代表节点 1，此配置非常简单，即预先制定可能的 id 范围到某个分片：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># range start-end ,data node index</span><br><span class="line"># K&#x3D;1000,M&#x3D;10000.</span><br><span class="line">0-500M&#x3D;0</span><br><span class="line">500M-1000M&#x3D;1</span><br><span class="line">1000M-1500M&#x3D;2</span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">0-10000000&#x3D;0</span><br><span class="line">10000001-20000000&#x3D;1</span><br></pre></td></tr></table></figure>

<h1 id="4-取模"><a href="#4-取模" class="headerlink" title="4. 取模"></a>4. 取模</h1><p>此规则为对分片字段求模运算。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>mod-long<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;mod-long&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- how many data nodes --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>count</td>
<td>分片数量</td>
</tr>
</tbody></table>
<p>根据 id 进行十进制求模预算，相比固定分片 hash，此种在批量插入时可能存在批量插入单事务插入多数据分片，增大事务一致性难度。</p>
<h1 id="5-按日期（天）分片"><a href="#5-按日期（天）分片" class="headerlink" title="5. 按日期（天）分片"></a>5. 按日期（天）分片</h1><p>此规则为按天分片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-date<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByDate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2014-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sEndDate&quot;</span>&gt;</span>2014-01-02<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>dateForma</td>
<td>日期格式</td>
</tr>
<tr>
<td>sBeginDate</td>
<td>开始日期</td>
</tr>
<tr>
<td>sEndDate</td>
<td>结束日期</td>
</tr>
<tr>
<td>sPartionDay</td>
<td>分区天数，即默认从开始日期算起，分隔 10 天一个分区</td>
</tr>
</tbody></table>
<p>如果配置了 sEndDate 则代表数据达到了这个日期的分片后循环从开始分片插入。<br><strong>注意</strong><br>在查询时，如果需要查询时间段应该使用between…and，使用&gt;=或者&lt;=会查询所有分片。</p>
<h1 id="6-取模范围约束"><a href="#6-取模范围约束" class="headerlink" title="6. 取模范围约束"></a>6. 取模范围约束</h1><p>此种规则是取模运算与范围约束的结合，主要为了后续数据迁移做准备，即可以自主决定取模后数据的节点分布。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span>TopESA - Win Cpp</span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-pattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>partition-pattern.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># id partition range start-end ,data node index</span><br><span class="line">###### first host configuration</span><br><span class="line">1-32&#x3D;0</span><br><span class="line">33-64&#x3D;1</span><br><span class="line">65-96&#x3D;2</span><br><span class="line">97-128&#x3D;3</span><br><span class="line">######## second host configuration</span><br><span class="line">129-160&#x3D;4</span><br><span class="line">161-192&#x3D;5</span><br><span class="line">193-224&#x3D;6</span><br><span class="line">225-256&#x3D;7</span><br><span class="line">0-0&#x3D;7</span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>patternValue</td>
<td>求模基数</td>
</tr>
<tr>
<td>defaoultNod</td>
<td>默认节点</td>
</tr>
<tr>
<td>mapFile</td>
<td>配置文件路径</td>
</tr>
</tbody></table>
<p>配置文件中，1-32 即代表 id%256 后分布的范围，如果在 1-32 则在分区 1，其他类推<br>如果 id 非数字，则会分配在 defaoultNode 默认节点。</p>
<h1 id="7-截取数字做-hash-求模范围约束"><a href="#7-截取数字做-hash-求模范围约束" class="headerlink" title="7. 截取数字做 hash 求模范围约束"></a>7. 截取数字做 hash 求模范围约束</h1><p>此种规则类似于取模范围约束，此规则支持数据符号字母取模。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-prefixpattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-prefixpattern<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-pattern&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByPrefixPattern&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;patternValue&quot;</span>&gt;</span>256<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefixLength&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-pattern.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>patternValue</td>
<td>求模基数</td>
</tr>
<tr>
<td>prefixLength</td>
<td>ASCII 截取的位数</td>
</tr>
<tr>
<td>mapFile</td>
<td>配置文件路径</td>
</tr>
</tbody></table>
<p>partition-pattern.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># range start-end ,data node index</span><br><span class="line"># ASCII</span><br><span class="line"># 8-57&#x3D;0-9 阿拉伯数字</span><br><span class="line"># 64、65-90&#x3D;@、A-Z</span><br><span class="line"># 97-122&#x3D;a-z</span><br><span class="line">###### first host configuration</span><br><span class="line">1-4&#x3D;0</span><br><span class="line">5-8&#x3D;1</span><br><span class="line">9-12&#x3D;2</span><br><span class="line">13-16&#x3D;3</span><br><span class="line">###### second host configuration</span><br><span class="line">17-20&#x3D;4</span><br><span class="line">21-24&#x3D;5</span><br><span class="line">25-28&#x3D;6</span><br><span class="line">29-32&#x3D;7</span><br><span class="line">0-0&#x3D;7</span><br></pre></td></tr></table></figure>

<p>配置文件中，1-32 即代表 id%256 后分布的范围，如果在 1-32 则在分区 1，其他类推。<br>此种方式类似取模范围约束，只不过采取的是将列种获取前 prefixLength 位列所有 ASCII 码的和进行求模。<br><code>sum%patternValue</code> ,获取的值，在范围内的分片数</p>
<h1 id="8-应用指定"><a href="#8-应用指定" class="headerlink" title="8. 应用指定"></a>8. 应用指定</h1><p>此规则是在运行阶段有应用自主决定路由到那个分片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-substring<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-substring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionDirectBySubString&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;startIndex&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- zero-based --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;size&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultPartition&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>partitionCount</td>
<td>分区数</td>
</tr>
<tr>
<td>defaultPartition</td>
<td>默认分区</td>
</tr>
</tbody></table>
<p>此方法为直接根据字符子串（必须是数字）计算分区号（由应用传递参数，显式指定分区号）。</p>
<p>例如：id=05-100000002，在此配置中代表根据 id 中从 startIndex=0，开始，截取 siz=2 位数字即 05，05 就是获取的分区，如果没传默认分配到 defaultPartition。</p>
<h1 id="9-截取数字-hash-解析"><a href="#9-截取数字-hash-解析" class="headerlink" title="9. 截取数字 hash 解析"></a>9. 截取数字 hash 解析</h1><p>此规则是截取字符串中的 int 数值 hash 分片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-stringhash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-stringhash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByString&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionLength&quot;</span>&gt;</span>512<span class="tag">&lt;/<span class="name">property</span>&gt;</span><span class="comment">&lt;!-- zero-based --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;partitionCount&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hashSlice&quot;</span>&gt;</span>0:2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>partitionLength</td>
<td>字符串hash求模基数</td>
</tr>
<tr>
<td>partitionCount</td>
<td>分区数</td>
</tr>
<tr>
<td>hashSlice</td>
<td>预算位，即根据子字符串中 int 值 hash 运算。 0 means str.length(), -1 means str.length()-1</td>
</tr>
</tbody></table>
<p><strong>注意</strong><br>hashSlice可以理解为substring（start，end），start为0则只表示0；<br>例1：值“45abc”，hash预算位0:2 ，取其中45进行计算<br>例2：值“aaaabbb2345”，hash预算位-4:0 ，取其中2345进行计算</p>
<h1 id="10-一致性-hash"><a href="#10-一致性-hash" class="headerlink" title="10. 一致性 hash"></a>10. 一致性 hash</h1><p>一致性 hash 预算有效解决了分布式数据的扩容问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-murmur&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>user_id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>murmur<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;murmur&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMurmurHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认是 0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seed&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 要分片的数据库节点数量，必须指定，否则没法分片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一个实际的数据库节点被映射为这么多虚拟 节点，默认是 160 倍，也就是虚拟节点数是物理节点数的 160 倍 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;virtualBucketTimes&quot;</span>&gt;</span>160<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 节点的权重，没有指定权重的节点默认是 1。以 properties 文件的格式填写，以从 0 开始到 count-1 的整数值也就是节点索引为 key，以节点权重值为值。所有权重值必须是正整数，否则以 1 代替 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;weightMapFile&quot;</span>&gt;</span>weightMapFile<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于测试时观察各物理节点与虚拟节点的分布情况，如果指定了这个属性，会把虚拟节点的 murmur hash 值与物理节 点的映射按行输出到这个文件，没有默认值，如果不指定，就不会输出任何东西 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bucketMapPath&quot;</span>&gt;</span>/etc/mycat/bucketMapPath<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="11-按单月小时拆分"><a href="#11-按单月小时拆分" class="headerlink" title="11. 按单月小时拆分"></a>11. 按单月小时拆分</h1><p>此规则是单月内按照小时拆分，最小粒度是小时，可以一天最多 24 个分片，最少 1 个分片，一个月完后下月从头开始循环。每个月月尾，需要手工清理数据。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-hour<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.LatestMonthPartion&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;splitOneDay&quot;</span>&gt;</span>24<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段（字符串类型yyyyMMddHH）</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>splitOneDay</td>
<td>一天切分的分片数</td>
</tr>
</tbody></table>
<p><strong>注意</strong><br>分片字段必须为字符串格式，否则分片不成功，默认存到第一个分片里面；<br>保存的时间格式必须为‘yyyymmddHH’格式，不能多也不能少字符，否则分片不成功，默认存到第一个分片里面；</p>
<h1 id="12-范围求模分片"><a href="#12-范围求模分片" class="headerlink" title="12. 范围求模分片"></a>12. 范围求模分片</h1><p>先进行范围分片计算出分片组，组内再求模。<br>优点可以避免扩容时的数据迁移，又可以一定程度上避免范围分片的热点问题。<br>综合了范围分片和求模分片的优点，分片组内使用求模可以保证组内数据比较均匀，分片组之间是范围分片，可以兼顾范围查询。<br>最好事先规划好分片的数量，数据扩容时按分片组扩容，则原有分片组的数据不需要迁移。由于分片组内数据比较均匀，所以分片组内可以避免热点数据问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;auto-sharding-rang-mod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>id<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>rang-mod<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;rang-mod&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeMod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapFile&quot;</span>&gt;</span>partition-range-mod.txt<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultNode&quot;</span>&gt;</span>21<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>mapFile</td>
<td>配置文件路径</td>
</tr>
<tr>
<td>defaultNode</td>
<td>超过范围后的默认节点顺序号，节点从 0 开始。</td>
</tr>
</tbody></table>
<p>partition-range-mod.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以下配置一个范围代表一个分片组，&#x3D;号后面的数字代表该分片组所拥有的分片的数量。</span><br><span class="line"># range start-end ,data node group size</span><br><span class="line">0-200M&#x3D;5 &#x2F;&#x2F;代表有 5 个分片节点</span><br><span class="line">200M1-400M&#x3D;1</span><br><span class="line">400M1-600M&#x3D;4</span><br><span class="line">600M1-800M&#x3D;4</span><br><span class="line">800M1-1000M&#x3D;6</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong><br>如上0-200M存入到5个分片中，开始范围-结束范围=该分片组有多少个分片。如果超过配置范围需要增加分片组。</p>
<h1 id="13-日期范围HASH分片"><a href="#13-日期范围HASH分片" class="headerlink" title="13. 日期范围HASH分片"></a>13. 日期范围HASH分片</h1><p>思想与范围求模一致，当由于日期在取模会有数据集中问题，所以改成 hash 方法。<br>先根据日期分组，再根据时间 hash 使得短期内数据分布的更均匀。<br>优点可以避免扩容时的数据迁移，又可以一定程度上避免范围分片的热点问题。要求日期格式尽量精确些，不然达不到局部均匀的目的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;range-date-hash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>col_date<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>range-date-hash<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;range-date-hash&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByRangeDateHash&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2014-01-01 00:00:00<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>365<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;groupPartionSize&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>sBeginDate</td>
<td>开始日期</td>
</tr>
<tr>
<td>sPartionDay</td>
<td>多少天一个分片</td>
</tr>
<tr>
<td>dateFormat</td>
<td>日期格式</td>
</tr>
<tr>
<td>groupPartionSize</td>
<td>分片组的大小</td>
</tr>
</tbody></table>
<p><strong>注意</strong><br>从sBeginDate时间开始计算，每sPartionDay天的数据为一个分片组，每个分片组可以分布在groupPartionSize个分片上面。上面的例子最多可以有三天进行分片，如果超出则会抛出以下异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Can&#39;t find a valid data node for specified node index :ALAN_TEST -&gt; RANGE_DATE -&gt; 2019-01-11 12:00:00 -&gt; Index : 4</span><br><span class="line">The error may involve com.mycat.test.model.AlanTest.insert-Inline</span><br><span class="line">The error occurred while setting parameters</span><br></pre></td></tr></table></figure>

<h1 id="14-冷热数据分片"><a href="#14-冷热数据分片" class="headerlink" title="14. 冷热数据分片"></a>14. 冷热数据分片</h1><p>根据日期查询日志数据 冷热数据分布 ，最近 n 个月的到实时交易库查询，超过 n 个月的按照 m 天分片。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-date&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-hotdate<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-hotdate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByHotDate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sLastDay&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sPartionDay&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>dateFormat</td>
<td>日期格式</td>
</tr>
<tr>
<td>sLastDay</td>
<td>热数据的时间</td>
</tr>
<tr>
<td>sPartionDay</td>
<td>冷数据的分片天数（按照天数分片）</td>
</tr>
</tbody></table>
<p><strong>注意</strong><br>冷数据按照这个范围进行分片，例如上面的规则配置，今天是2019年1月21日，往前推10天为2019年1月12日，则2019年1月12日之前的数据为冷数据，该批冷数据的分片规则为30天一个分片，即2018-12-12至2019-01-11的数据放入第1个分片，2018-11-12至2018-12-11的数据放入第2个分片…以此类推，如果数据库分区不够，则在保存的时候会抛出以下异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Can&#39;t find a valid data node for specified node index :ALAN_TEST -&gt; CREATE_DATE -&gt; 2018-11-09 12:00:00 -&gt; Index : 3</span><br></pre></td></tr></table></figure>

<h1 id="15-自然月分片"><a href="#15-自然月分片" class="headerlink" title="15. 自然月分片"></a>15. 自然月分片</h1><p>按月份列分区 ，每个自然月一个分片，格式 between 操作解析的范例。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tableRule</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">columns</span>&gt;</span>create_time<span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">algorithm</span>&gt;</span>sharding-by-month<span class="tag">&lt;/<span class="name">algorithm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tableRule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span> <span class="attr">name</span>=<span class="string">&quot;sharding-by-month&quot;</span> <span class="attr">class</span>=<span class="string">&quot;io.mycat.route.function.PartitionByMonth&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dateFormat&quot;</span>&gt;</span>yyyy-MM-dd<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sBeginDate&quot;</span>&gt;</span>2014-01-01<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置说明：</p>
<table>
<thead>
<tr>
<th>标签属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>columns</td>
<td>标识将要分片的表字段</td>
</tr>
<tr>
<td>algorithm</td>
<td>分片函数</td>
</tr>
<tr>
<td>dateFormat</td>
<td>日期格式</td>
</tr>
<tr>
<td>sBeginDate</td>
<td>开始日期（无默认值）</td>
</tr>
<tr>
<td>“sEndDate</td>
<td>结束日期（无默认值）</td>
</tr>
</tbody></table>
<p><strong>注意</strong></p>
<ol>
<li>默认设置，节点数量必须是12个，每12个月循环从开始分片插入</li>
<li>如配置了sBeginDate=”2019-01”月是第0个分片，从该时间按月递增，无最大节点</li>
<li>配置了sBeginDate = “2015-01-01”sEndDate = “2015-12-01”该配置可以看成和第一个一致</li>
<li>配置了sBeginDate = “2015-01-01”sEndDate = “2015-03-01”该配置标识只有 3 个节点；很难与月份对应上；平均分散到 3 个节点上</li>
</ol>
]]></content>
      <tags>
        <tag>mycat</tag>
      </tags>
  </entry>
</search>
